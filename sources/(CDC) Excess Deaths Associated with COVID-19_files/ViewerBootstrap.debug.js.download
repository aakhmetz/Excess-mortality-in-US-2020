(function() {

/*! BEGIN MscorlibSlim */


function informDevOfUnsupportedMethod(methodName, additionalMessage) {
  try {
    throw new Error(methodName + ' is not supported in MscorlibSlim. ' + (additionalMessage || ''));
  } catch (e) {
    throw e.message + '\n' + e.stack;
  }
}

////////////////////////////////////////////////////////////////////////////////
// Globals and assembly registration
////////////////////////////////////////////////////////////////////////////////

var global = window;

(function(global) {
  'use strict';

  var ss = {};
  ss.initAssembly = function (obj, name, res) {
};

  ss.load = function (name) {
  informDevOfUnsupportedMethod('ss.load');
  };

////////////////////////////////////////////////////////////////////////////////
// Utility methods (generated via Script.IsNull, etc.)
////////////////////////////////////////////////////////////////////////////////

  ss.enc64 = function (a, b) {
  informDevOfUnsupportedMethod('ss.enc64');
  };

  ss.dec64 = function (s) {
  informDevOfUnsupportedMethod('ss.dec64');
  };

  ss.getAssemblies = function ss$getAssemblies() {
    informDevOfUnsupportedMethod('ss.getAssemblies');
  };

  ss.isNullOrUndefined = function (o) {
    return (o === null) || (o === undefined);
  };

  ss.isValue = function (o) {
    return (o !== null) && (o !== undefined);
  };

  ss.referenceEquals = function (a, b) {
    return ss.isValue(a) ? a === b : !ss.isValue(b);
  };

  ss.mkdict = function () {
    var a = (arguments.length !== 1 ? arguments : arguments[0]);
    var r = {};
    for (var i = 0; i < a.length; i += 2) {
      r[a[i]] = a[i + 1];
    }
    return r;
  };

  ss.clone = function (t, o) {
    return o ? t.$clone(o) : o;
  }

  ss.coalesce = function (a, b) {
    return ss.isValue(a) ? a : b;
  };

  ss.isDate = function (obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
  };

  ss.isArray = function (obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  ss.isTypedArrayType = function (type) {
    informDevOfUnsupportedMethod('ss.isTypedArrayType');
  };

  ss.isArrayOrTypedArray = function (obj) {
    informDevOfUnsupportedMethod('ss.isArrayOrTypedArray');
  };

  ss.getHashCode = function (obj) {
    informDevOfUnsupportedMethod('ss.getHashCode');
  };

  ss.defaultHashCode = function (obj) {
    informDevOfUnsupportedMethod('ss.defaultHashCode');
  };

  ss.equals = function (a, b) {
    if (!ss.isValue(a))
      throw new ss_NullReferenceException('Object is null');
    else if (a !== ss && typeof (a.equals) === 'function')
      return a.equals(b);
    if (ss.isDate(a) && ss.isDate(b))
      return a.valueOf() === b.valueOf();
    else if (typeof (a) === 'function' && typeof (b) === 'function')
      return ss.delegateEquals(a, b);
    else if (ss.isNullOrUndefined(a) && ss.isNullOrUndefined(b))
      return true;
    else
      return a === b;
  };

  ss.compare = function (a, b) {
    if (!ss.isValue(a))
      throw new ss_NullReferenceException('Object is null');
    else if (typeof (a) === 'number' || typeof (a) === 'string' || typeof (a) === 'boolean')
      return ss.isValue(b) ? (a < b ? -1 : (a > b ? 1 : 0)) : 1;
    else if (ss.isDate(a))
      return ss.isValue(b) ? ss.compare(a.valueOf(), b.valueOf()) : 1;
    else
      return a.compareTo(b);
  };

  ss.equalsT = function (a, b) {
    if (!ss.isValue(a))
      throw new ss_NullReferenceException('Object is null');
    else if (typeof (a) === 'number' || typeof (a) === 'string' || typeof (a) === 'boolean')
      return a === b;
    else if (ss.isDate(a))
      return a.valueOf() === b.valueOf();
    else
      return a.equalsT(b);
  };

  ss.staticEquals = function (a, b) {
    if (!ss.isValue(a))
      return !ss.isValue(b);
    else
      return ss.isValue(b) ? ss.equals(a, b) : false;
  };

  ss.shallowCopy = (function () { try { var x = Object.getOwnPropertyDescriptor({ a: 0 }, 'a').value; return true; } catch (ex) { return false; } })() ?
    function (source, target) {
      var keys = Object.keys(source);
      for (var i = 0, l = keys.length; i < l; i++) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    } :
    function (source, target) {
      var keys = Object.keys(source);
      for (var i = 0, l = keys.length; i < l; i++) {
        target[keys[i]] = source[keys[i]];
      }
    };

  ss.isLower = function (c) {
    informDevOfUnsupportedMethod('ss.isLower');
  };

  ss.isUpper = function (c) {
    informDevOfUnsupportedMethod('ss.isUpper');
  };


///////////////////////////////////////////////////////////////////////////////
// Object Extensions

ss.clearKeys = function (d) {
  for (var n in d) {
    if (d.hasOwnProperty(n))
      delete d[n];
  }
};

ss.keyExists = function (d, key) {
  return d[key] !== undefined;
};

if (!Object.keys) {
  Object.keys = (function () {
    'use strict';
    var hasOwnProperty = Object.prototype.hasOwnProperty,
      hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),
      dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
      dontEnumsLength = dontEnums.length;

    return function (obj) {
      if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
        throw new TypeError('Object.keys called on non-object');
      }

      var result = [], prop, i;

      for (prop in obj) {
        if (hasOwnProperty.call(obj, prop)) {
          result.push(prop);
        }
      }

      if (hasDontEnumBug) {
        for (i = 0; i < dontEnumsLength; i++) {
          if (hasOwnProperty.call(obj, dontEnums[i])) {
            result.push(dontEnums[i]);
          }
        }
      }
      return result;
    };
  }());
}

ss.getKeyCount = function (d) {
  return Object.keys(d).length;
};

////////////////////////////////////////////////////////////////////////////////
// Type System Implementation
////////////////////////////////////////////////////////////////////////////////

// When FULL_TYPE_SYSTEM is not defined, then the code is not the full-blown
// type system. It's Just enough to allow us to call base class methods.

ss.makeGenericType = function (genericType, typeArguments) {
  informDevOfUnsupportedMethod('ss.makeGenericType');
};

ss.registerGenericClassInstance = function (instance, genericType, typeArguments, members, baseType, interfaceTypes) {
  informDevOfUnsupportedMethod('ss.registerGenericClassInstance');
};

ss.registerGenericStructInstance = function (genericType, typeArguments, instance, members, statics, interfaceTypes) {
  informDevOfUnsupportedMethod('ss.registerGenericStructInstance');
}

ss.registerGenericInterfaceInstance = function (instance, genericType, typeArguments, members, baseInterfaces) {
  informDevOfUnsupportedMethod('ss.registerGenericInterfaceInstance');
};

ss.isGenericTypeDefinition = function (type) {
  informDevOfUnsupportedMethod('ss.isGenericTypeDefinition');
};

ss.getGenericTypeDefinition = function (type) {
  informDevOfUnsupportedMethod('ss.getGenericTypeDefinition');
};

ss.getGenericParameterCount = function (type) {
  informDevOfUnsupportedMethod('ss.getGenericParameterCount');
};

ss.getGenericArguments = function (type) {
  informDevOfUnsupportedMethod('ss.getGenericArguments');
};

ss.setMetadata = function (type, metadata) {
  if (metadata.members || metadata.variance) {
    informDevOfUnsupportedMethod('ss.setMetadata', 'metadata.members and metadata.variance aren\'t supported');
  }
};

ss.mkType = function (asm, typeName, ctor, members, statics) {
  if (!ctor) ctor = function() {};
  if (members) ctor.__members = members;
  if (statics) ss.shallowCopy(statics, ctor);
  return ctor;
};

ss.mkEnum = function (asm, typeName, values, namedValues) {
  var result = ss.mkType(asm, typeName);
  ss.shallowCopy(values, result.prototype);
  result.getDefaultValue = result.createInstance = function() { return namedValues ? null : 0; };
  result.isInstanceOfType = function(instance) { return typeof(instance) === (namedValues ? 'string' : 'number'); };
  return result;
};

ss.initClass = function (ctor, baseType, interfaces) {
  if (baseType && baseType !== Object) {
    var f = function (){ };
    f.prototype = baseType.prototype;
    ctor.prototype = new f();
    ctor.prototype.constructor = ctor;
  }
  if (ctor.__members) {
    ss.shallowCopy(ctor.__members, ctor.prototype);
    delete ctor.__members;
  }
};

ss.initStruct = function (ctor, interfaces) {
  ss.initClass(ctor, null, interfaces);
  ctor.getDefaultValue = ctor.getDefaultValue || ctor.createInstance || function () { return new ctor(); };
};

ss.initGenericClass = function (ctor, typeArgumentCount) {
  informDevOfUnsupportedMethod('ss.initGenericClass');
};

ss.initGenericStruct = function (ctor, typeArgumentCount) {
  informDevOfUnsupportedMethod('ss.initGenericStruct');
};

ss.initInterface = function (ctor, asm, members, baseInterfaces) {
  informDevOfUnsupportedMethod('ss.initInterface', 'Interfaces should be marked as [Imported]');
};

ss.initInterface = function (ctor, members, baseInterfaces) {
  informDevOfUnsupportedMethod('ss.initGenericInterface');
};

ss.initGenericInterface = function (ctor, typeArgumentCount) {
  informDevOfUnsupportedMethod('ss.initGenericInterface');
};

ss.getBaseType = function (type) {
  throw new Error('Not implemented yet');
};

ss.getTypeFullName = function (type) {
  informDevOfUnsupportedMethod('ss.getTypeFullName');
};

ss.getTypeQName = function (type) {
  informDevOfUnsupportedMethod('ss.getTypeQName');
};

ss.getTypeName = function (type) {
  informDevOfUnsupportedMethod('ss.getTypeName');
};

ss.getTypeNamespace = function (type) {
  informDevOfUnsupportedMethod('ss.getTypeNamespace');
};

ss.getTypeAssembly = function (type) {
  informDevOfUnsupportedMethod('ss.getTypeAssembly');
};

ss.getAssemblyTypes = function (asm) {
  informDevOfUnsupportedMethod('ss.getAssemblyTypes');
};

ss.createAssemblyInstance = function (asm, typeName) {
  informDevOfUnsupportedMethod('ss.createAssemblyInstance');
};

ss.getInterfaces = function (type) {
  informDevOfUnsupportedMethod('ss.getInterfaces');
};

ss.isInstanceOfType = function (instance, type) {
  if (ss.isNullOrUndefined(instance))
    return false;

  if (typeof (type.isInstanceOfType) === 'function')
    return type.isInstanceOfType(instance);

  return ss.isAssignableFrom(type, ss.getInstanceType(instance));
};

ss.isAssignableFrom = function (target, type) {
  return target === type || (typeof (target.isAssignableFrom) === 'function' && target.isAssignableFrom(type)) || type.prototype instanceof target;
};

ss.isClass = function (type) {
  informDevOfUnsupportedMethod('ss.isClass');
};

ss.isEnum = function (type) {
  informDevOfUnsupportedMethod('ss.isEnum');
};

ss.isFlags = function (type) {
  informDevOfUnsupportedMethod('ss.isFlags');
};

ss.isInterface = function (type) {
  informDevOfUnsupportedMethod('ss.isInterface');
};

ss.safeCast = function (instance, type) {
  if (type === true)
    return instance;
  else if (type === false)
    return null;
  else
    return ss.isInstanceOfType(instance, type) ? instance : null;
};

ss.cast = function (instance, type) {
  if (instance === null || typeof (instance) === 'undefined')
    return instance;
  else if (type === true || (type !== false && ss.isInstanceOfType(instance, type)))
    return instance;
  throw new ss_InvalidCastException('Cannot cast object to requested type');
};

ss.getInstanceType = function (instance) {
  if (!ss.isValue(instance))
    throw new ss_NullReferenceException('Cannot get type of null');

  // NOTE: We have to catch exceptions because the constructor
  //       cannot be looked up on native COM objects
  try {
    return instance.constructor;
  }
  catch (ex) {
    return Object;
  }
};

ss.getType = function (typeName, asm) {
  informDevOfUnsupportedMethod('ss.getType');
};

ss.getDefaultValue = function (type) {
  if (typeof (type.getDefaultValue) === 'function')
    return type.getDefaultValue();
  else if (type === Boolean)
    return false;
  else if (type === Date)
    return new Date(0);
  else if (type === Number)
    return 0;
  return null;
};

ss.createInstance = function (type) {
  informDevOfUnsupportedMethod('ss.createInstance');
};

ss.applyConstructor = function (constructor, args) {
  informDevOfUnsupportedMethod('ss.applyConstructor');
};

ss.getAttributes = function (type, attrType, inherit) {
  informDevOfUnsupportedMethod('ss.getAttributes');
};

ss.getMembers = function (type, memberTypes, bindingAttr, name, params) {
  informDevOfUnsupportedMethod('ss.getMembers');
};

ss.midel = function (mi, target, typeArguments) {
  informDevOfUnsupportedMethod('ss.midel');
};

ss.invokeCI = function (ci, args) {
  informDevOfUnsupportedMethod('ss.invokeCI');
};

ss.fieldAccess = function (fi, obj) {
  informDevOfUnsupportedMethod('ss.fieldAccess');
};

///////////////////////////////////////////////////////////////////////////////
// IFormattable

var ss_IFormattable = ss.IFormattable = ss.mkType(ss, 'ss.IFormattable');

ss.format = function (obj, fmt) {
  informDevOfUnsupportedMethod('ss.format');
};

///////////////////////////////////////////////////////////////////////////////
// IComparable

var ss_IComparable = ss.IComparable = ss.mkType(ss, 'ss.IComparable');

///////////////////////////////////////////////////////////////////////////////
// IEquatable

var ss_IEquatable = ss.IEquatable = ss.mkType(ss, 'ss.IEquatable');

///////////////////////////////////////////////////////////////////////////////
// Number Extensions

ss.formatNumber = function (num, format) {
  informDevOfUnsupportedMethod('ss.formatNumber');
};

ss.localeFormatNumber = function (num, format) {
  informDevOfUnsupportedMethod('ss.localeFormatNumber');
};

ss.netFormatNumber = function (num, format, numberFormat) {
  informDevOfUnsupportedMethod('ss.netFormatNumber');
};

///////////////////////////////////////////////////////////////////////////////
// String Extensions

ss.netSplit = function (s, strings, limit, options) {
  informDevOfUnsupportedMethod('ss.netSplit');
};

ss.compareStrings = function (s1, s2, ignoreCase) {
  informDevOfUnsupportedMethod('ss.compareStrings');
};

ss.endsWithString = function (s, suffix) {
  informDevOfUnsupportedMethod('ss.endsWithString');
};

ss.formatString = function (format) {
  informDevOfUnsupportedMethod('ss.formatString');
};

ss.stringFromChar = function (ch, count) {
  informDevOfUnsupportedMethod('ss.stringFromChar');
};

ss.htmlDecode = function (s) {
  informDevOfUnsupportedMethod('ss.htmlDecode');
};

ss.htmlEncode = function (s) {
  informDevOfUnsupportedMethod('ss.htmlEncode');
};

ss.jsEncode = function (s, q) {
  informDevOfUnsupportedMethod('ss.jsEncode');
};

ss.indexOfAnyString = function (s, chars, startIndex, count) {
  informDevOfUnsupportedMethod('ss.indexOfAnyString');
};

ss.insertString = function (s, index, value) {
  informDevOfUnsupportedMethod('ss.insertString');
};

ss.isNullOrEmptyString = function (s) {
  return !s || !s.length;
};

ss.lastIndexOfAnyString = function (s, chars, startIndex, count) {
  informDevOfUnsupportedMethod('ss.lastIndexOfAnyString');
};

ss.localeFormatString = function (format) {
  informDevOfUnsupportedMethod('ss.localeFormatString');
};

ss.padLeftString = function (s, totalWidth, ch) {
  informDevOfUnsupportedMethod('ss.padLeftString');
};

ss.padRightString = function (s, totalWidth, ch) {
  informDevOfUnsupportedMethod('ss.padRightString');
};

ss.removeString = function (s, index, count) {
  informDevOfUnsupportedMethod('ss.removeString');
};

ss.replaceAllString = function (s, oldValue, newValue) {
  informDevOfUnsupportedMethod('ss.replaceAllString');
};

ss.startsWithString = function (s, prefix) {
  informDevOfUnsupportedMethod('ss.startsWithString');
};

if (!String.prototype.trim) {
  String.prototype.trim = function () {
    return ss.trimStartString(ss.trimEndString(this));
  };
}

ss.trimEndString = function (s, chars) {
  return s.replace(chars ? new RegExp('[' + String.fromCharCode.apply(null, chars) + ']+$') : /\s*$/, '');
};

ss.trimStartString = function (s, chars) {
  return s.replace(chars ? new RegExp('^[' + String.fromCharCode.apply(null, chars) + ']+') : /^\s*/, '');
};

ss.trimString = function (s, chars) {
  return ss.trimStartString(ss.trimEndString(s, chars), chars);
};

ss.lastIndexOfString = function (s, search, startIndex, count) {
  informDevOfUnsupportedMethod('ss.lastIndexOfString');
};

ss.indexOfString = function (s, search, startIndex, count) {
  informDevOfUnsupportedMethod('ss.indexOfString');
};

///////////////////////////////////////////////////////////////////////////////
// Math Extensions

ss.divRem = function (a, b, result) {
  informDevOfUnsupportedMethod('ss.divRem');
};

ss.round = function (n, d, rounding) {
  informDevOfUnsupportedMethod('ss.round');
};

///////////////////////////////////////////////////////////////////////////////
// IFormatProvider

///////////////////////////////////////////////////////////////////////////////
// NumberFormatInfo

///////////////////////////////////////////////////////////////////////////////
// DateTimeFormatInfo

///////////////////////////////////////////////////////////////////////////////
// Array Extensions

ss.arrayGet2 = function (arr, indices) {
  informDevOfUnsupportedMethod('ss.arrayGet2');
};

ss.arrayGet = function (arr) {
  informDevOfUnsupportedMethod('ss.arrayGet');
}

ss.arraySet2 = function (arr, value, indices) {
  informDevOfUnsupportedMethod('ss.arraySet2');
};

ss.arraySet = function () {
  informDevOfUnsupportedMethod('ss.arraySet');
};

ss.arrayRank = function (arr) {
  informDevOfUnsupportedMethod('ss.arrayRank');
};

ss.arrayLength = function (arr, dimension) {
  informDevOfUnsupportedMethod('ss.arrayLength');
};

ss.arrayExtract = function (arr, start, count) {
  informDevOfUnsupportedMethod('ss.arrayExtract');
};

ss.arrayAddRange = function (arr, items) {
  informDevOfUnsupportedMethod('ss.arrayAddRange');
};

ss.arrayClone = function (arr) {
  if (arr.length === 1) {
    return [arr[0]];
  }
  else {
    return Array.apply(null, arr);
  }
};

ss.arrayPeekFront = function (arr) {
  informDevOfUnsupportedMethod('ss.arrayPeekFront');
};

ss.arrayPeekBack = function (arr) {
  informDevOfUnsupportedMethod('ss.arrayPeekBack');
};

ss.indexOfArray = function (arr, item, startIndex) {
  informDevOfUnsupportedMethod('ss.indexOfArray');
}

ss.arrayInsertRange = function (arr, index, items) {
  informDevOfUnsupportedMethod('ss.arrayInsertRange');
};


ss.arrayRemoveRange = function (arr, index, count) {
  informDevOfUnsupportedMethod('ss.arrayRemoveRange');
};




ss.arrayFromEnumerable = function (enm) {
  informDevOfUnsupportedMethod('ss.arrayFromEnumerable');
};

ss.multidimArray = function (defvalue) {
  informDevOfUnsupportedMethod('ss.multidimArray');
};

ss.repeat = function (value, count) {
  informDevOfUnsupportedMethod('ss.repeat');
};

ss.arrayFill = function (dst, val, index, count) {
  informDevOfUnsupportedMethod('ss.arrayFill');
};

ss.arrayCopy = function (src, spos, dst, dpos, len) {
  informDevOfUnsupportedMethod('ss.arrayCopy');
};

///////////////////////////////////////////////////////////////////////////////
// Date Extensions

ss.utcNow = function () {
  informDevOfUnsupportedMethod('ss.utcNow');
};

ss.toUTC = function (d) {
  informDevOfUnsupportedMethod('ss.toUTC');
};

ss.fromUTC = function (d) {
  informDevOfUnsupportedMethod('ss.fromUTC');
};

ss.today = function () {
  informDevOfUnsupportedMethod('ss.today');
};

ss.formatDate = function (date, format) {
  informDevOfUnsupportedMethod('ss.formatDate');
};

ss.localeFormatDate = function (date, format) {
  informDevOfUnsupportedMethod('ss.localeFormatDate');
};

ss.parseExactDate = function (val, format, provider) {
  informDevOfUnsupportedMethod('ss.parseExactDate');
};

ss.parseExactDateUTC = function (val, format, provider) {
  informDevOfUnsupportedMethod('ss.parseExactDateUTC');
};

///////////////////////////////////////////////////////////////////////////////
// Function Extensions

ss._delegateContains = function (targets, object, method) {
  for (var i = 0; i < targets.length; i += 2) {
    if (targets[i] === object && targets[i + 1] === method) {
      return true;
    }
  }
  return false;
};

ss._mkdel = function (targets) {
  var delegate = function () {
    if (targets.length === 2) {
      return targets[1].apply(targets[0], arguments);
    }
    else {
      var clone = ss.arrayClone(targets);
      for (var i = 0; i < clone.length; i += 2) {
        if (ss._delegateContains(targets, clone[i], clone[i + 1])) {
          clone[i + 1].apply(clone[i], arguments);
        }
      }
      return null;
    }
  };
  delegate._targets = targets;

  return delegate;
};

ss.mkdel = function (object, method) {
  if (!object) {
    return method;
  }
  if (typeof method === 'string') {
    method = object[method];
  }
  return ss._mkdel([object, method]);
};

ss.delegateCombine = function (delegate1, delegate2) {
  if (!delegate1) {
    if (!delegate2._targets) {
      return ss.mkdel(null, delegate2);
    }
    return delegate2;
  }
  if (!delegate2) {
    if (!delegate1._targets) {
      return ss.mkdel(null, delegate1);
    }
    return delegate1;
  }

  var targets1 = delegate1._targets ? delegate1._targets : [null, delegate1];
  var targets2 = delegate2._targets ? delegate2._targets : [null, delegate2];

  return ss._mkdel(targets1.concat(targets2));
};

ss.delegateRemove = function (delegate1, delegate2) {
  if (!delegate1 || (delegate1 === delegate2)) {
    return null;
  }

  var targets = delegate1._targets;
  if (!delegate2 || !targets) {
    return delegate1;
  }

  var object = null;
  var method;
  if (delegate2._targets) {
    object = delegate2._targets[0];
    method = delegate2._targets[1];
  }
  else {
    method = delegate2;
  }

  for (var i = 0; i < targets.length; i += 2) {
    if ((targets[i] === object) && (targets[i + 1] === method)) {
      if (targets.length === 2) {
        return null;
      }
      var t = ss.arrayClone(targets);
      t.splice(i, 2);
      return ss._mkdel(t);
    }
  }

  return delegate1;
};

ss.delegateEquals = function (a, b) {
  if (a === b)
    return true;
  if (!a._targets && !b._targets)
    return false;
  var ta = a._targets || [null, a], tb = b._targets || [null, b];
  if (ta.length !== tb.length)
    return false;
  for (var i = 0; i < ta.length; i++) {
    if (ta[i] !== tb[i])
      return false;
  }
  return true;
};

ss.delegateClone = function (source) {
  informDevOfUnsupportedMethod('ss.delegateClone');
};

ss.thisFix = function (source) {
  informDevOfUnsupportedMethod('ss.thisFix');
};

ss.getInvocationList = function (delegate) {
  informDevOfUnsupportedMethod('ss.getInvocationList');
};

///////////////////////////////////////////////////////////////////////////////
// RegExp Extensions

ss.regexpEscape = function (s) {
  informDevOfUnsupportedMethod('ss.regexpEscape');
};

///////////////////////////////////////////////////////////////////////////////
// Debug Extensions

ss.Debug = global.Debug || function () { };

if (!ss.Debug.writeln) {
  ss.Debug.writeln = function (text) {
    informDevOfUnsupportedMethod('ss.Debug.writeln');
  }
};

ss.Debug.assert = function (condition, message) {
  informDevOfUnsupportedMethod('ss.Debug.assert');
};

ss.Debug.fail = function (message) {
  informDevOfUnsupportedMethod('ss.Debug.fail');
};

///////////////////////////////////////////////////////////////////////////////
// Enum

var ss_Enum = ss.Enum = ss.mkType(ss, 'ss.Enum', {});
ss.initClass(ss_Enum);

ss_Enum.parse = function Enum$parse(enumType, s) {
  informDevOfUnsupportedMethod('ss.Enum.parse');
};

ss_Enum.toString = function  Enum$toString(enumType, value) {
  informDevOfUnsupportedMethod('ss.Enum.toString');
};

ss_Enum.getValues = function Enum$getValues(enumType) {
  var parts = [];
  var values = enumType.prototype;
  for (var i in values) {
    if (values.hasOwnProperty(i))
      parts.push(values[i]);
  }
  return parts;
};

///////////////////////////////////////////////////////////////////////////////
// CultureInfo

var ss_CultureInfo = function CultureInfo$(name, numberFormat, dateTimeFormat) {
  informDevOfUnsupportedMethod('ss.CultureInfo');
};
ss.CultureInfo = ss_CultureInfo;

///////////////////////////////////////////////////////////////////////////////
// IEnumerator

var ss_IEnumerator = ss.IEnumerator = ss.mkType(ss, 'ss.IEnumerator');

///////////////////////////////////////////////////////////////////////////////
// IEnumerable

var ss_IEnumerable = ss.IEnumerable = ss.mkType(ss, 'ss.IEnumerable');

ss.getEnumerator = function (obj) {
  return obj.getEnumerator ? obj.getEnumerator() : new ss_ArrayEnumerator(obj);
};

///////////////////////////////////////////////////////////////////////////////
// ICollection

var ss_ICollection = ss.ICollection = ss.mkType(ss, 'ss.ICollection');

ss.count = function (obj) {
  informDevOfUnsupportedMethod('ss.count', 'Use JsArray<T> instead.');
};

ss.add = function (obj, item) {
  informDevOfUnsupportedMethod('ss.add', 'Use JsArray<T> instead.');
};

ss.clear = function (obj) {
  informDevOfUnsupportedMethod('ss.clear', 'Use JsArray<T> instead.');
};

ss.remove = function (obj, item) {
  informDevOfUnsupportedMethod('ss.remove', 'Use JsArray<T> instead.');
};

ss.contains = function (obj, item) {
  informDevOfUnsupportedMethod('ss.contains', 'Use JsArray<T> instead.');
};

///////////////////////////////////////////////////////////////////////////////
// IReadOnlyCollection

var ss_IReadOnlyCollection = ss.IReadOnlyCollection = ss.mkType(ss, 'ss.IReadOnlyCollection');

  //#include "TimeSpan.js"

///////////////////////////////////////////////////////////////////////////////
// IEqualityComparer

var ss_IEqualityComparer = ss.IEqualityComparer = ss.mkType(ss, 'ss.IEqualityComparer');

///////////////////////////////////////////////////////////////////////////////
// IComparer

var ss_IComparer = ss.IComparer = ss.mkType(ss, 'ss.IComparer');

///////////////////////////////////////////////////////////////////////////////
// Nullable

ss.unbox = function (instance) {
  if (!ss.isValue(instance))
    throw new ss_InvalidOperationException('Nullable object must have a value.');
  return instance;
};


///////////////////////////////////////////////////////////////////////////////
// IList

var ss_IList = ss.IList = ss.mkType(ss, 'ss.IList');

ss.getItem = function (obj, index) {
  informDevOfUnsupportedMethod('ss.getItem', 'Use JsArray<T> instead.');
}

ss.setItem = function (obj, index, value) {
  informDevOfUnsupportedMethod('ss.setItem', 'Use JsArray<T> instead.');
}

ss.indexOf = function (obj, item) {
  informDevOfUnsupportedMethod('ss.indexOf', 'Use JsArray<T> instead.');
};

ss.insert = function (obj, index, item) {
  informDevOfUnsupportedMethod('ss.insert', 'Use JsArray<T> instead.');
};

ss.removeAt = function (obj, index) {
  informDevOfUnsupportedMethod('ss.removeAt', 'Use JsArray<T> instead.');
};

///////////////////////////////////////////////////////////////////////////////
// IReadOnlyList

var ss_IReadOnlyList = ss.IReadOnlyList = ss.mkType(ss, 'ss.IReadOnlyList');

  // #include "IDictionary.js"

  // #include "IReadOnlyDictionary.js"

///////////////////////////////////////////////////////////////////////////////
// Int32

var defInt = function (name, min, max) {
  var type = ss[name] = ss.mkType(ss, 'ss.' + name,
    function () {
    },
    null,
    {
      isInstanceOfType: function (instance) {
        return typeof (instance) === 'number' && Math.round(instance, 0) === instance && instance >= min && instance <= max;
      },
      createInstance: function () {
        return 0;
      },
      parse: function (s) {
        informDevOfUnsupportedMethod('ss.' + name + '.parse');
      },
      tryParse: function (s, result) {
        informDevOfUnsupportedMethod('ss.' + name + '.tryParse');
      }
    }
  );
  ss.initStruct(type, [ss_IEquatable, ss_IComparable, ss_IFormattable]);
  return type;
};

var ss_Byte = defInt('Byte', 0, 255);
var ss_SByte = defInt('SByte', -128, 127);
var ss_Int16 = defInt('Int16', -32768, 32767);
var ss_UInt16 = defInt('UInt16', 0, 65535);
var ss_Int32 = defInt('Int32', -2147483648, 2147483647);
var ss_UInt32 = defInt('UInt32', 0, 4294967295);
var ss_Int64 = defInt('Int64', -9223372036854775808, 9223372036854775807);
var ss_UInt64 = defInt('UInt64', 0, 18446744073709551615);
var ss_Char = defInt('Char', 0, 65535);

ss_Char.tryParse = function (s, result) {
  informDevOfUnsupportedMethod('ss_Char.tryParse');
};

ss_Char.parse = function (s, result) {
  informDevOfUnsupportedMethod('ss_Char.parse');
};

ss.sxb = function (x) {
  return x | (x & 0x80 ? 0xffffff00 : 0);
};

ss.sxs = function (x) {
  return x | (x & 0x8000 ? 0xffff0000 : 0);
};

ss.clip8 = function (x) {
  return ss.isValue(x) ? ss.sxb(x & 0xff) : null;
};

ss.clipu8 = function (x) {
  return ss.isValue(x) ? x & 0xff : null;
};

ss.clip16 = function (x) {
  return ss.isValue(x) ? ss.sxs(x & 0xffff) : null;
};

ss.clipu16 = function (x) {
  return ss.isValue(x) ? x & 0xffff : null;
};

ss.clip32 = function (x) {
  return ss.isValue(x) ? x | 0 : null;
};

ss.clipu32 = function (x) {
  return ss.isValue(x) ? x >>> 0 : null;
};

ss.clip64 = function (x) {
  return ss.isValue(x) ? (Math.floor(x / 0x100000000) | 0) * 0x100000000 + (x >>> 0) : null;
};

ss.clipu64 = function (x) {
  return ss.isValue(x) ? (Math.floor(x / 0x100000000) >>> 0) * 0x100000000 + (x >>> 0) : null;
};

ss.ck = function (x, tp) {
  if (ss.isValue(x) && !tp.isInstanceOfType(x))
    throw new ss_OverflowException();
  return x;
};

ss.trunc = function (n) {
  return ss.isValue(n) ? (n > 0 ? Math.floor(n) : Math.ceil(n)) : null;
};

ss.idiv = function (a, b) {
  if (!ss.isValue(a) || !ss.isValue(b)) return null;
  if (!b) throw new ss_DivideByZeroException();
  return ss.trunc(a / b);
};

ss.imod = function (a, b) {
  if (!ss.isValue(a) || !ss.isValue(b)) return null;
  if (!b) throw new ss_DivideByZeroException();
  return a % b;
};

///////////////////////////////////////////////////////////////////////////////
// MutableDateTime

var ss_JsDate = ss.JsDate = ss.mkType(ss, 'ss.JsDate',
  function () {
  },
  null,
  {
    createInstance: function () {
      return new Date();
    },
    isInstanceOfType: function (instance) {
      return instance instanceof Date;
    }
  }
);

ss.initClass(ss_JsDate, null, [ss_IEquatable, ss_IComparable]);

///////////////////////////////////////////////////////////////////////////////
// ArrayEnumerator

var ss_ArrayEnumerator = ss.ArrayEnumerator = ss.mkType(ss, 'ss.ArrayEnumerator',
  function (array) {
    this._array = array;
    this._index = -1;
  },
  {
    moveNext: function () {
      this._index++;
      return (this._index < this._array.length);
    },
    reset: function () {
      this._index = -1;
    },
    current: function () {
      if (this._index < 0 || this._index >= this._array.length)
        throw 'Invalid operation';
      return this._array[this._index];
    },
    dispose: function () {
    }
  }
);

ss.initClass(ss_ArrayEnumerator, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// ObjectEnumerator

var ss_ObjectEnumerator = ss.ObjectEnumerator = ss.mkType(ss, 'ss.ObjectEnumerator',
  function (o) {
    this._keys = Object.keys(o);
    this._index = -1;
    this._object = o;
  },
  {
    moveNext: function () {
      this._index++;
      return (this._index < this._keys.length);
    },
    reset: function () {
      this._index = -1;
    },
    current: function () {
      if (this._index < 0 || this._index >= this._keys.length)
        throw new ss_InvalidOperationException('Invalid operation');
      var k = this._keys[this._index];
      return { key: k, value: this._object[k] };
    },
    dispose: function () {
    }
  }
);

ss.initClass(ss_ObjectEnumerator, null, [ss_IEnumerator, ss_IDisposable]);

///////////////////////////////////////////////////////////////////////////////
// EqualityComparer

var ss_EqualityComparer = ss.EqualityComparer = ss.mkType(ss, 'ss.EqualityComparer',
  function () {
    informDevOfUnsupportedMethod('ss.EqualityComparer');
  },
  {
    areEqual: function (x, y) {
      informDevOfUnsupportedMethod('ss.EqualityComparer.areEqual');
    },
    getObjectHashCode: function (obj) {
      informDevOfUnsupportedMethod('ss.EqualityComparer.getObjectHashCode');
    }
  }
);
ss.EqualityComparer = ss_EqualityComparer;

///////////////////////////////////////////////////////////////////////////////
// Comparer

var ss_Comparer = ss.Comparer = ss.mkType(ss, 'ss.Comparer',
  function (f) {
    informDevOfUnsupportedMethod('ss.Comparer');
  },
  {
    compare: function (x, y) {
    informDevOfUnsupportedMethod('ss.Comparer.compare');
    }
  }
);

///////////////////////////////////////////////////////////////////////////////
// KeyValuePair

var ss_KeyValuePair = ss.KeyValuePair = ss.mkType(ss, 'ss.KeyValuePair',
  function () {
    informDevOfUnsupportedMethod('ss.KeyValuePair');
  },
  null,
  {
    createInstance: function () {
      informDevOfUnsupportedMethod('ss.KeyValuePair.createInstance');
    },
    isInstanceOfType: function (o) {
      informDevOfUnsupportedMethod('ss.KeyValuePair.isInstanceOfType');
    }
  }
);

ss.initStruct(ss_KeyValuePair);

  //#include "Dictionary.js"

///////////////////////////////////////////////////////////////////////////////
// IDisposable

var ss_IDisposable = ss.IDisposable = ss.mkType(ss, 'ss.IDisposable');

///////////////////////////////////////////////////////////////////////////////
// StringBuilder

var ss_StringBuilder = ss.StringBuilder = ss.mkType(ss, 'ss.StringBuilder',
  function (s) {
    this._parts = (ss.isValue(s) && s !== '') ? [s] : [];
    this.length = ss.isValue(s) ? s.length : 0;
  },
  {
    append: function (o) {
      if (ss.isValue(o)) {
        var s = o.toString();
        ss.add(this._parts, s);
        this.length += s.length;
      }
      return this;
    },

    appendChar: function (c) {
      return this.append(String.fromCharCode(c));
    },

    appendLine: function (s) {
      this.append(s);
      this.append('\r\n');
      return this;
    },

    appendLineChar: function (c) {
      return this.appendLine(String.fromCharCode(c));
    },

    clear: function () {
      this._parts = [];
      this.length = 0;
    },

    toString: function () {
      return this._parts.join('');
    }
  }
);

ss.initClass(ss_StringBuilder);

///////////////////////////////////////////////////////////////////////////////
// Random

var ss_Random = ss.Random = ss.mkType(ss, 'ss.Random',
  function (seed) {
    informDevOfUnsupportedMethod('ss.Random');
  },
  {
    next: function () {
      informDevOfUnsupportedMethod('ss.Random.next');
    },
    nextMax: function (max) {
      informDevOfUnsupportedMethod('ss.Random.nextMax');
    },
    nextMinMax: function (min, max) {
      informDevOfUnsupportedMethod('ss.Random.nextMinMax');
    },
    nextBytes: function (bytes) {
      informDevOfUnsupportedMethod('ss.Random.nextBytes');
    },
    nextDouble: function () {
      informDevOfUnsupportedMethod('ss.Random.nextDouble');
    },
    sample: function () {
      informDevOfUnsupportedMethod('ss.Random.nextSample');
    }
  }
);

ss.initClass(ss_Random);

///////////////////////////////////////////////////////////////////////////////
// EventArgs


///////////////////////////////////////////////////////////////////////////////
// Exception

var ss_Exception = ss.Exception = ss.mkType(ss, 'ss.Exception',
  function (message, innerException) {
    this._message = message || 'An error occurred.';
    this._innerException = innerException || null;
    this._error = new Error();
  },
  {
    get_message: function () {
      return this._message;
    },
    get_innerException: function () {
      return this._innerException;
    },
    get_stack: function () {
      return this._error.stack;
    },
    toString: function () {
      var message = this._message;
      var exception = this;
      if (ss.isNullOrEmptyString(message)) {
        if (ss.isValue(ss.getInstanceType(exception)) && ss.isValue(ss.getTypeFullName(ss.getInstanceType(exception)))) {
          message = ss.getTypeFullName(ss.getInstanceType(exception));
        }
        else {
          message = '[object Exception]';
        }
      }
      return message;
    }
  },
  {
    wrap: function (o) {
      if (ss.isInstanceOfType(o, ss_Exception)) {
        return o;
      }
      else if (o instanceof TypeError) {
        // TypeError can either be 'cannot read property blah of null/undefined' (proper NullReferenceException), or it can be eg. accessing a non-existent method of an object.
        // As long as all code is compiled, they should with a very high probability indicate the use of a null reference.
        return new ss_NullReferenceException(o.message, new ss_JsErrorException(o));
      }
      else if (o instanceof RangeError) {
        return new ss_ArgumentOutOfRangeException(null, o.message, new ss_JsErrorException(o));
      }
      else if (o instanceof Error) {
        return new ss_JsErrorException(o);
      }
      else {
        return new ss_Exception(o.toString());
      }
    }
  }
);

ss.initClass(ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NotImplementedException

var ss_NotImplementedException = ss.NotImplementedException = ss.mkType(ss, 'ss.NotImplementedException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'The method or operation is not implemented.', innerException);
  }
);

ss.initClass(ss_NotImplementedException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NotSupportedException

var ss_NotSupportedException = ss.NotSupportedException = ss.mkType(ss, 'ss.NotSupportedException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'Specified method is not supported.', innerException);
  }
);

ss.initClass(ss_NotSupportedException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// AggregateException

var ss_AggregateException = ss.AggregateException = ss.mkType(ss, 'ss.AggregateException',
  function (message, innerExceptions) {
    informDevOfUnsupportedMethod('ss.AggregateException');
  },
  {
    flatten: function () {
      informDevOfUnsupportedMethod('ss.AggregateException.flatten');
    }
  }
);

ss.initClass(ss_AggregateException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// PromiseException

var ss_PromiseException = ss.PromiseException = ss.mkType(ss, 'ss.PromiseException',
  function (args, message, innerException) {
    informDevOfUnsupportedMethod('ss.PromiseException');
  },
  {
    get_arguments: function () {
      informDevOfUnsupportedMethod('ss.AggregateException.get_arguments');
    }
  }
);

ss.initClass(ss_PromiseException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// JsErrorException

var ss_JsErrorException = ss.JsErrorException = ss.mkType(ss, 'ss.JsErrorException', function (error, message, innerException) {
  ss_Exception.call(this, message || error.message, innerException);
  this.error = error;
},
  {
    get_stack: function () {
      return this.error.stack;
    }
  }
);

ss.initClass(ss_JsErrorException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArgumentException

var ss_ArgumentException = ss.ArgumentException = ss.mkType(ss, 'ss.ArgumentException',
  function (message, paramName, innerException) {
    ss_Exception.call(this, message || 'Value does not fall within the expected range.', innerException);
    this.paramName = paramName || null;
  }
);

ss.initClass(ss_ArgumentException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArgumentNullException

var ss_ArgumentNullException = ss.ArgumentNullException = ss.mkType(ss, 'ss.ArgumentNullException',
  function (paramName, message, innerException) {
    if (!message) {
      message = 'Value cannot be null.';
      if (paramName)
        message += '\nParameter name: ' + paramName;
    }

    ss_ArgumentException.call(this, message, paramName, innerException);
  }
);

ss.initClass(ss_ArgumentNullException, ss_ArgumentException);

////////////////////////////////////////////////////////////////////////////////
// ArgumentOutOfRangeException

var ss_ArgumentOutOfRangeException = ss.ArgumentOutOfRangeException = ss.mkType(ss, 'ss.ArgumentOutOfRangeException',
  function (paramName, message, innerException, actualValue) {
    if (!message) {
      message = 'Value is out of range.';
      if (paramName)
        message += '\nParameter name: ' + paramName;
    }

    ss_ArgumentException.call(this, message, paramName, innerException);
    this.actualValue = actualValue || null;
  }
);

ss.initClass(ss_ArgumentOutOfRangeException, ss_ArgumentException);

////////////////////////////////////////////////////////////////////////////////
// FormatException

var ss_FormatException = ss.FormatException = ss.mkType(ss, 'ss.FormatException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'Invalid format.', innerException);
  }
);

ss.initClass(ss_FormatException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// ArithmeticException

var ss_ArithmeticException = ss.ArithmeticException = ss.mkType(ss, 'ss.ArithmeticException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'Overflow or underflow in the arithmetic operation.', innerException);
  }
);

ss.initClass(ss_ArithmeticException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// OverflowException

var ss_OverflowException = ss.OverflowException = ss.mkType(ss, 'ss.OverflowException',
  function (message, innerException) {
    ss_ArithmeticException.call(this, message || 'Arithmetic operation resulted in an overflow.', innerException);
  }
);

ss.initClass(ss_OverflowException, ss_ArithmeticException);

////////////////////////////////////////////////////////////////////////////////
// DivideByZeroException

var ss_DivideByZeroException = ss.DivideByZeroException = ss.mkType(ss, 'ss.DivideByZeroException',
  function (message, innerException) {
    ss_ArithmeticException.call(this, message || 'Division by 0.', innerException);
  }
);

ss.initClass(ss_DivideByZeroException, ss_ArithmeticException);

////////////////////////////////////////////////////////////////////////////////
// InvalidCastException

var ss_InvalidCastException = ss.InvalidCastException = ss.mkType(ss, 'ss.InvalidCastException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'The cast is not valid.', innerException);
  }
);

ss.initClass(ss_InvalidCastException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidOperationException

var ss_InvalidOperationException = ss.InvalidOperationException = ss.mkType(ss, 'ss.InvalidOperationException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'Operation is not valid due to the current state of the object.', innerException);
  }
);
ss.initClass(ss_InvalidOperationException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// NullReferenceException

var ss_NullReferenceException = ss.NullReferenceException = ss.mkType(ss, 'ss.NullReferenceException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'Object is null.', innerException);
  }
);

ss.initClass(ss_NullReferenceException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// KeyNotFoundException

var ss_KeyNotFoundException = ss.KeyNotFoundException = ss.mkType(ss, 'ss.KeyNotFoundException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'Key not found.', innerException);
  }
);
ss.initClass(ss_KeyNotFoundException, ss_Exception);

////////////////////////////////////////////////////////////////////////////////
// InvalidOperationException

var ss_AmbiguousMatchException = ss.AmbiguousMatchException = ss.mkType(ss, 'ss.AmbiguousMatchException',
  function (message, innerException) {
    ss_Exception.call(this, message || 'Ambiguous match.', innerException);
  }
);

ss.initClass(ss_AmbiguousMatchException, ss_Exception);

///////////////////////////////////////////////////////////////////////////////
// IteratorBlockEnumerable

var ss_IteratorBlockEnumerable = ss.IteratorBlockEnumerable = ss.mkType(ss, 'ss.IteratorBlockEnumerable',
  function (getEnumerator, $this) {
    informDevOfUnsupportedMethod('ss.IteratorBlockEnumerable');
  },
  {
    getEnumerator: function () {
      informDevOfUnsupportedMethod('ss.IteratorBlockEnumerable.getEnumerator');
    }
  }
);

///////////////////////////////////////////////////////////////////////////////
// IteratorBlockEnumerator

var ss_IteratorBlockEnumerator = ss.IteratorBlockEnumerator = ss.mkType(ss, 'ss.IteratorBlockEnumerator',
  function (moveNext, getCurrent, dispose, $this) {
    informDevOfUnsupportedMethod('ss.IteratorBlockEnumerator');
  },
  {
    moveNext: function () {
      informDevOfUnsupportedMethod('ss.IteratorBlockEnumerator.moveNext');
    },
    current: function () {
      informDevOfUnsupportedMethod('ss.IteratorBlockEnumerator.current');
    },
    reset: function () {
      informDevOfUnsupportedMethod('ss.IteratorBlockEnumerator.reset');
    },
    dispose: function () {
      informDevOfUnsupportedMethod('ss.IteratorBlockEnumerator.dispose');
    }
  }
);

///////////////////////////////////////////////////////////////////////////////
// Lazy

var ss_Lazy = ss.Lazy = ss.mkType(ss, 'ss.Lazy',
  function (valueFactory) {
    this._valueFactory = valueFactory;
    this.isValueCreated = false;
  },
  {
    value: function () {
      if (!this.isValueCreated) {
        this._value = this._valueFactory();
        delete this._valueFactory;
        this.isValueCreated = true;
      }
      return this._value;
    }
  }
);

ss.initClass(ss_Lazy);

////////////////////////////////////////////////////////////////////////////////
// OperationCanceledException

var ss_OperationCanceledException = ss.OperationCanceledException = ss.mkType(ss, 'ss.OperationCanceledException',
  function (message, token, innerException) {
    informDevOfUnsupportedMethod('ss.OperationCanceledException');
  }
);

///////////////////////////////////////////////////////////////////////////////
// CancellationTokenRegistration

var ss_CancellationTokenRegistration = ss.CancellationTokenRegistration = ss.mkType(ss, 'ss.CancellationTokenRegistration',
  function (cts, o) {
    informDevOfUnsupportedMethod('ss.CancellationTokenRegistration');
  },
  {
    dispose: function () {
      informDevOfUnsupportedMethod('ss.CancellationTokenRegistration.dispose');
    },
    equalsT: function (o) {
      informDevOfUnsupportedMethod('ss.CancellationTokenRegistration.equalsT');
    }
  }
);

ss.initStruct(ss_CancellationTokenRegistration, [ss_IDisposable, ss_IEquatable]);

///////////////////////////////////////////////////////////////////////////////
// CancellationTokenSource

var ss_CancellationTokenSource = ss.CancellationTokenSource = ss.mkType(ss, 'ss.CancellationTokenSource',
  function (delay) {
    informDevOfUnsupportedMethod('ss.CancellationTokenRegistration');
  },
  {
    cancel: function (throwFirst) {
      informDevOfUnsupportedMethod('ss.CancellationTokenRegistration.cancel');
    },
    cancelAfter: function (delay) {
      informDevOfUnsupportedMethod('ss.CancellationTokenRegistration.cancelAfter');
    },
    dispose: function () {
      informDevOfUnsupportedMethod('ss.CancellationTokenRegistration.dispose');
    }
  },
  {
    createLinked: function () {
      informDevOfUnsupportedMethod('ss.CancellationTokenRegistration.createLinked');
    }
  }
);

///////////////////////////////////////////////////////////////////////////////
// CancellationToken

var ss_CancellationToken = ss.CancellationToken = ss.mkType(ss, 'ss.CancellationToken',
  function (source) {
    informDevOfUnsupportedMethod('ss.CancellationToken');
  },
  {
    get_canBeCanceled: function () {
      informDevOfUnsupportedMethod('ss.CancellationToken.get_canBeCanceled');
    },
    get_isCancellationRequested: function () {
      informDevOfUnsupportedMethod('ss.CancellationToken.get_isCancellationRequested');
    },
    throwIfCancellationRequested: function () {
      informDevOfUnsupportedMethod('ss.CancellationToken.throwIfCancellationRequested');
    },
    register: function (cb, s) {
      informDevOfUnsupportedMethod('ss.CancellationToken.register');
    }
  }
);

ss.initStruct(ss_CancellationToken);

////////////////////////////////////////////////////////////////////////////////
// TaskCanceledException

var ss_TaskCanceledException = ss.TaskCanceledException = ss.mkType(ss, 'ss.TaskCanceledException',
  function (message, task, innerException) {
    informDevOfUnsupportedMethod('ss.TaskCanceledException');
  }
);
ss.initClass(ss_TaskCanceledException, ss_OperationCanceledException);

///////////////////////////////////////////////////////////////////////////////
// Task

var ss_Task = ss.Task = ss.mkType(ss, 'ss.Task',
  function (action, state) {
    informDevOfUnsupportedMethod('ss.Task');
  },
  {
    continueWith: function (continuation) {
      informDevOfUnsupportedMethod('ss.Task.continueWith');
    },
    start: function () {
      informDevOfUnsupportedMethod('ss.Task.start');
    },
    isCanceled: function () {
      informDevOfUnsupportedMethod('ss.Task.isCanceled');
    },
    isCompleted: function () {
      informDevOfUnsupportedMethod('ss.Task.isCompleted');
    },
    isFaulted: function () {
      informDevOfUnsupportedMethod('ss.Task.isFaulted');
    },
    getResult: function () {
      informDevOfUnsupportedMethod('ss.Task.getResult');
    },
    getAwaitedResult: function () {
      informDevOfUnsupportedMethod('ss.Task.getAwaitedResult');
    },
    dispose: function () {
      informDevOfUnsupportedMethod('ss.Task.dispose');
    }
  },
  {
    delay: function (delay) {
      informDevOfUnsupportedMethod('ss.Task.delay');
    },
    fromResult: function (result) {
      informDevOfUnsupportedMethod('ss.Task.fromResult');
    },
    run: function (f) {
      informDevOfUnsupportedMethod('ss.Task.run');
    },
    whenAll: function (tasks) {
      informDevOfUnsupportedMethod('ss.Task.whenAll');
    },
    whenAny: function (tasks) {
      informDevOfUnsupportedMethod('ss.Task.whenAny');
    },
    fromDoneCallback: function (t, i, m) {
      informDevOfUnsupportedMethod('ss.Task.fromDoneCallback');
    },
    fromPromise: function (p, f) {
      informDevOfUnsupportedMethod('ss.Task.fromPromise');
    },
    fromNode: function (t, f, m) {
      informDevOfUnsupportedMethod('ss.Task.fromNode');
    }
  }
);

////////////////////////////////////////////////////////////////////////////////
// TaskStatus

///////////////////////////////////////////////////////////////////////////////
// TaskCompletionSource

var ss_TaskCompletionSource = ss.TaskCompletionSource = ss.mkType(ss, 'ss.TaskCompletionSource',
  function () {
    informDevOfUnsupportedMethod('ss.TaskCompletionSource');
  },
  {
    setCanceled: function () {
      informDevOfUnsupportedMethod('ss.TaskCompletionSource.setCanceled');
    },
    setResult: function (result) {
      informDevOfUnsupportedMethod('ss.TaskCompletionSource.setResult');
    },
    setException: function (exception) {
      informDevOfUnsupportedMethod('ss.TaskCompletionSource.setException');
    },
    trySetCanceled: function () {
      informDevOfUnsupportedMethod('ss.TaskCompletionSource.trySetCanceled');
    },
    trySetResult: function (result) {
      informDevOfUnsupportedMethod('ss.TaskCompletionSource.trySetResult');
    },
    trySetException: function (exception) {
      informDevOfUnsupportedMethod('ss.TaskCompletionSource.trySetException');
    }
  }
);

ss.initClass(ss_TaskCompletionSource);

///////////////////////////////////////////////////////////////////////////////
// CancelEventArgs

var ss_CancelEventArgs = ss.CancelEventArgs = ss.mkType(ss, 'ss.CancelEventArgs',
  function () {
    informDevOfUnsupportedMethod('ss.CancelEventArgs');
  }
);

  //#include "Guid.js"

////////////////////////////////////////////////////////////////////////////////
// Global Registration
////////////////////////////////////////////////////////////////////////////////

  global.ss = ss;
})(global);

  // BEGIN BrowserSupport
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["BrowserSupport"] = factory();
	else
		root["BrowserSupport"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./lib/src/BrowserSupport.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./lib/src/BrowserSupport.js":
/*!***********************************!*\
  !*** ./lib/src/BrowserSupport.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var JsMapPolyfillImpl_1 = __webpack_require__(/*! ./JsMapPolyfillImpl */ "./lib/src/JsMapPolyfillImpl.js");
var JsSetPolyfillImpl_1 = __webpack_require__(/*! ./JsSetPolyfillImpl */ "./lib/src/JsSetPolyfillImpl.js");
var TouchScreenUtil_1 = __webpack_require__(/*! ./TouchScreenUtil */ "./lib/src/TouchScreenUtil.js");
/**
 * This is your main. This is where you re-export everything you want to be publicly available.
 *
 * The build enforces that the file has the same name as the global variable that is exported.
 */
var selectStart = false;
var fonts = 'fonts' in document;
var postMessage = false;
var historyApi = false;
var cssTransformName = 'transform';
var cssTransitionName = 'transition';
var shouldUseAlternateHitStrategy = false;
var canvasLinePattern = false;
var isSafari = false;
var isChrome = false;
var isIE = false;
var isLegacyEdge = false;
var isChrEdge = false;
var isEdgeIos = false;
var internetExplorerVersion = 0.0;
var chrEdgeVersion = 0.0;
var googleChromeVersion = 0.0;
var safariVersion = 0.0;
var iosVersion = 0.0;
var isFF = false;
var isOpera = false;
var isKhtml = false;
var isWebKit = false;
var isMozilla = false;
var isIos = false;
var isAndroid = false;
var isMac = false;
var isWindows = false;
var isTouch = false;
var isTableau = false;
var isMobileBrowser = false;
var devicePixelRatio = 1.0;
var backingStoragePixelRatio = 1.0;
var dateInput = false;
var dateTimeInput = false;
var dateTimeLocalInput = false;
var timeInput = false;
var setSelectionRange = false;
var supportsDragAndDropEvents = false;
var supportsSvgElements = false;
var scrollbarWidth = 0.0;
var config = {
    isMobile: function () { return false; },
};
/**
 * Contains information about what is currently supported in the browser or environment.
 */
var BrowserSupport = /** @class */ (function () {
    function BrowserSupport() {
    }
    /**
     * Note: setConfig doesn't currently trigger DetectBrowser to be re-run, so
     * if there's ever code run by DetectBrowserSupport that depends on the config,
     * then we'll need to re-run DetectBrowserSupport here.
     */
    BrowserSupport.setConfig = function (newConfig) {
        config = newConfig;
    };
    /**
     * Gets a value indicating whether the browser supports getComputedStyle.
     * https://developer.mozilla.org/en-US/docs/DOM/window.getComputedStyle
     */
    BrowserSupport.GetComputedStyle = function () {
        return 'getComputedStyle' in window;
    };
    /** Gets a value indicating whether the browser supports addEventListener. */
    BrowserSupport.AddEventListener = function () {
        return 'addEventListener' in document;
    };
    /** Gets a value indicating whether the selectstart event is supported. */
    BrowserSupport.SelectStart = function () {
        return selectStart;
    };
    /**
     * Gets a value indicating whether touch events are supported. Note that this does not imply that it's a mobile
     * browser since many Windows 7 devices support touch and may still have a mouse.
     * WARNING: This method only detects whether or not there is a potential support for touch, not if a touch screen is actually connected.
     * To check if the current screen is a touch screen use IsTouchScreen instead.
     */
    BrowserSupport.IsTouch = function () {
        return isTouch;
    };
    /**
     * Gets a value indicating whether the browser supports the CSS Font Loader API.
     * See https://drafts.csswg.org/css-font-loading
     */
    BrowserSupport.FontLoader = function () {
        return fonts;
    };
    /**
     * Gets a value indicating if JavaScript Promises are supported.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
     */
    BrowserSupport.Promise = function () {
        return 'Promise' in window;
    };
    /** Gets a value indicating whether or not this browser supports postMessage. */
    BrowserSupport.PostMessage = function () {
        return postMessage;
    };
    BrowserSupport.HistoryApi = function () {
        return historyApi;
    };
    BrowserSupport.IsMobile = function () {
        return isAndroid || isIos;
    };
    BrowserSupport.IsIos = function () {
        return isIos;
    };
    BrowserSupport.IsAndroid = function () {
        return isAndroid;
    };
    /**
     * Google's Chrome browser. If you are using this check for the rendering engine of Chrome, see @IsChromium
     */
    BrowserSupport.IsChrome = function () {
        return isChrome;
    };
    BrowserSupport.IsMac = function () {
        return !isIos && isMac;
    };
    BrowserSupport.IsIE = function () {
        return isIE;
    };
    /**
     * Microsoft's Edge browser using the Trident rendering engine
     * @see IsLegacyEdge
     * @see IsChrEdge for modern Edge detection
     * @deprecated
     */
    BrowserSupport.IsEdge = function () {
        return isLegacyEdge;
    };
    /**
     * Microsoft's Edge browser using the Trident rendering engine
     * @see IsChrEdge
     */
    BrowserSupport.IsLegacyEdge = function () {
        return isLegacyEdge;
    };
    /**
     * Microsoft's Edge browser using the Blink rendering engine
     * Chromium + Edge = ChrEdge
     * @see IsLegacyEdge
     */
    BrowserSupport.IsChrEdge = function () {
        return isChrEdge;
    };
    /**
     * Microsoft's Edge browser on iOS using the WebKit rendering engine.
     *
     * TFSID:1131754 If what you care about is availability of Safari/WebKit functionality, use feature detection or
     * either IsSafari() or IsWebKit() instead. This was added to support a very targted servicing fix for an issue
     * that only appeared on Edge on iOS, despite the fact that it's a wrapper around a WebKit-based webview.
     */
    BrowserSupport.IsEdgeIos = function () {
        return isEdgeIos;
    };
    /**
     * Any Chromium based browser
     * @example Chrome, Chromium, Brave and Chromium based Edge (ChrEdge)
     */
    BrowserSupport.IsChromium = function () {
        return isChrome || isChrEdge;
    };
    BrowserSupport.IsFF = function () {
        return isFF;
    };
    BrowserSupport.IsOpera = function () {
        return isOpera;
    };
    BrowserSupport.IsSafari = function () {
        return isSafari;
    };
    BrowserSupport.IsWindows = function () {
        return isWindows;
    };
    BrowserSupport.IsHighDpi = function () {
        return window.matchMedia('(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)').matches;
    };
    /**
     * This just checks for "Tableau" in the user agent. Tableau Apps typically will include it (e.g. Phoenix, Tableau Desktop)
     * Caution: There may be Tableau Applications that do not include this. Please manually verify if unsure.
     */
    BrowserSupport.IsTableau = function () {
        return isTableau;
    };
    /**
     * Detects whether the request is from a browser from a mobile device. Note that
     * this will return false if a request is coming from a web view on a mobile device.
     */
    BrowserSupport.IsMobileBrowser = function () {
        return isMobileBrowser;
    };
    /**
     * Returns the version of Internet Explorer that made this request.
     * If the client is not IE, this returns 0.0
     */
    BrowserSupport.BrowserVersion = function () {
        return internetExplorerVersion;
    };
    /**
     * Returns the version of Chromium-based Edge that made this request
     * If the client is not Chromium-based Edge, this returns 0.0
     */
    BrowserSupport.ChrEdgeVersion = function () {
        return chrEdgeVersion;
    };
    BrowserSupport.SafariVersion = function () {
        return safariVersion;
    };
    /**
     * Returns the version of Google Chrome that made this request.
     * If the client is not GC, this returns 0.0
     */
    BrowserSupport.GoogleChromeVersion = function () {
        return googleChromeVersion;
    };
    /**
     * Returns the version of iOS that made this request.
     * If the client is not iOS, this returns 0.0
     */
    BrowserSupport.IosVersion = function () {
        if (BrowserSupport.IsIOSDeviceInDesktopMode()) {
            return BrowserSupport.SafariVersion();
        }
        return iosVersion;
    };
    BrowserSupport.RaisesEventOnImageReassignment = function () {
        // $NOTE-rbunker-2008-06-17: B17794, safari doesn't fire
        // onload if the src doesn't change
        return !isSafari;
    };
    BrowserSupport.ImageLoadIsSynchronous = function () {
        return isIE;
    };
    /**
     * Gets a value indicating whether document.elementFromPoint on the current browser
     * requires screen vs. client coordinates for reasons of DPI, etc.
     * See BUGZID 55280
     */
    BrowserSupport.UseAlternateHitStrategy = function () {
        return shouldUseAlternateHitStrategy;
    };
    /** Gets a value indicating the name of the CSS transform property. */
    BrowserSupport.CssTransformName = function () {
        return cssTransformName;
    };
    /** Gets a value indicating the name of the CSS transition property. */
    BrowserSupport.CssTransitionName = function () {
        return cssTransitionName;
    };
    BrowserSupport.BackingStoragePixelRatio = function () {
        return backingStoragePixelRatio;
    };
    BrowserSupport.DevicePixelRatio = function () {
        return devicePixelRatio;
    };
    BrowserSupport.CanvasLinePattern = function () {
        return canvasLinePattern;
    };
    /**
     * Gets a value indicating whether the device supports a native HTML5 date picker.
     * http://www.w3.org/TR/html-markup/input.date.html
     */
    BrowserSupport.DateInput = function () {
        return dateInput;
    };
    /**
     * Gets a value indicating whether the device supports a native HTML5 datetime picker.
     * http://www.w3.org/TR/html-markup/input.datetime.html
     */
    BrowserSupport.DateTimeInput = function () {
        return dateTimeInput;
    };
    /**
     *  Gets a value indicating whether the device supports a native HTML5 local datetime picker.
     * http://www.w3.org/TR/html-markup/input.datetime-local.html
     */
    BrowserSupport.DateTimeLocalInput = function () {
        return dateTimeLocalInput;
    };
    /**
     * Gets a value indicating whether the device supports a native HTML5 local time picker.
     * http://www.w3.org/TR/html-markup/input.time.html
     */
    BrowserSupport.TimeInput = function () {
        return timeInput;
    };
    /** Indicates whether setSelectionRange is supported on an input element */
    BrowserSupport.SetSelectionRange = function () {
        return setSelectionRange;
    };
    /**
     * Gets the mousewheel event to use via feature detection.
     * https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel
     */
    BrowserSupport.MouseWheelEvent = function () {
        // Used by all modern browsers, except IE. There is no onwheel attribute on DOM objects in IE; it does support 'mousewheel' though.
        if ('onwheel' in window.document.documentElement) {
            return 'wheel';
        }
        // Deprecated; used in Chrome before version 31, Safari before version 7
        if ('onmousewheel' in window.document.documentElement) {
            return 'mousewheel';
        }
        // Deprecated; used in Firefox before version 17
        return 'MozMousePixelScroll';
    };
    /**
     * Tests if mouse capture support is present.  As of 6/1/14, only IE and Firefox support this.
     * https://developer.mozilla.org/en-US/docs/Web/API/Element.setCapture
     *
     * See the comments in <see cref='MouseCapture'/>) for how this is used during dragging. We have some
     * special browser-specific logic there.
     */
    BrowserSupport.MouseCapture = function () {
        return 'releaseCapture' in document;
    };
    /** Indicates whether orientationchange event is supported by the browser */
    BrowserSupport.OrientationChange = function () {
        return 'onorientationchange' in window;
    };
    /** Indicates whether HTML5 Proxy objects are supported by the browser */
    BrowserSupport.ProxyObjectSupport = function () {
        return 'Proxy' in window;
    };
    /** Reports whether browser supports geolocation */
    BrowserSupport.IsGeolocationSupported = function () {
        return window.navigator.geolocation !== null || window.navigator.geolocation !== undefined;
    };
    BrowserSupport.SupportsFormData = function () {
        // tslint:disable:no-any
        return window.FormData !== undefined;
    };
    BrowserSupport.SupportsFileReader = function () {
        return window.FileReader !== undefined;
    };
    BrowserSupport.SupportsDragAndDropEvents = function () {
        return supportsDragAndDropEvents;
    };
    BrowserSupport.SupportsSvgElements = function () {
        return supportsSvgElements;
    };
    BrowserSupport.ScrollbarWidth = function () {
        return scrollbarWidth;
    };
    /**
     * Gets a value indicating whether the browser is running on an iPad.
     * @returns {boolean} - true if running on iPad; otherwise, false.
     */
    BrowserSupport.IsIpad = function () {
        return BrowserSupport.GetUserAgent().indexOf('iPad') !== -1 || BrowserSupport.IsIOSDeviceInDesktopMode();
    };
    /**
     * TFSID 940092 - As of iOS 13, Safari on iPads will impersonate a desktop browser by default.
     * This makes it impossible to detect iPads by user agent alone. To get around this we infer
     * iPads in desktop browser mode by checking for a Macintosh user agent string and touch support.
     * TFSID:960184 We also have to check that the request is not coming from a tableau application
     * since the webview on a tableau desktop (mac) used for authentication can meet the first two
     * conditionals. They have touch events due to it using QWebView. So we exclude this case by
     * making sure "Tableau" is not in the user agent string
     */
    BrowserSupport.IsIOSDeviceInDesktopMode = function () {
        return BrowserSupport.GetUserAgent().indexOf('Macintosh') !== -1 && BrowserSupport.IsTouch() && !BrowserSupport.IsTableau();
    };
    /**
     * This method returns true only if this is a touch screen of a non-mobile device. Mobile devices should have their own logic.
     * Can only detect a touch screen, after the user has touched the screen for the first time.
     */
    BrowserSupport.IsTouchAndNonMobile = function () {
        return TouchScreenUtil_1.TouchScreenUtil.HasUserTouchedScreen && !config.isMobile();
    };
    /**
     * Returns whether or not the current screen is a touch screen.
     * Can only detect it after the user has touched the screen for the first time.
     * @returns true if this is an actual touch screen, and the user used it as such, false otherwise
     */
    BrowserSupport.IsTouchScreen = function () {
        return TouchScreenUtil_1.TouchScreenUtil.HasUserTouchedScreen;
    };
    /**
     * This is checking if the TouchEvent interface is supported NOT detecting touch screens.
     * You can use this to check if it's even possible for the browser to send touch events.
     * IE 11, Legacy Edge, and desktop Safari do not support the TouchEvent interface for example.
     */
    BrowserSupport.IsTouchEventSupported = function () {
        return typeof TouchEvent !== 'undefined';
    };
    BrowserSupport.GetUserAgent = function () {
        return window.navigator.userAgent;
    };
    /**
     * Gets the location.origin property in a browser-independent way.
     * IE still does not support location.origin. Use a polyfill:
     * @see {@link http://stackoverflow.com/questions/1420881/javascript-jquery-method-to-find-base-url-from-a-string}
     */
    BrowserSupport.GetOrigin = function (location) {
        var origin = location.origin;
        if (origin === null || origin === undefined) {
            origin = location.protocol + '//' + location.host;
        }
        return origin;
    };
    /** Public only for testing purposes.  Real consumers shouldn't need to call this function */
    BrowserSupport.DetectBrowserSupport = function () {
        // Taken from jQuery UI
        var body = document.body;
        var div = document.createElement('div');
        body.appendChild(div);
        selectStart = 'onselectstart' in div;
        // set display to none to avoid a layout bug in IE
        // http://dev.jquery.com/ticket/4014
        body.removeChild(div).style.display = 'none';
        postMessage = 'postMessage' in window;
        historyApi = typeof window.history.pushState === 'function' && typeof window.history.replaceState === 'function';
        DetectBrowser();
        DetectTransitionSupport();
        DetectTransformSupport();
        DetectDocumentElementFromPoint();
        DetectDevicePixelRatio();
        DetectBackingStoragePixelRatio();
        DetectDateInputSupport();
        DetectCanvasLinePattern();
        DetectSetSelectionRangeSupport();
        DetectDragAndDropEventSupport();
        DetectSvgElementSupport();
        DetectScrollbarWidth();
    };
    return BrowserSupport;
}());
exports.BrowserSupport = BrowserSupport;
/**
 * Initialize fields used by BrowserSupport
 */
(function () {
    config = {
        isMobile: function () { return false; },
    };
    DetectBrowser();
    var init = function () {
        TouchScreenUtil_1.TouchScreenUtil.Init();
        BrowserSupport.DetectBrowserSupport();
    };
    // tslint:disable:no-any
    if (document.readyState === 'complete' || (document.readyState !== 'loading' && !document.documentElement.doScroll)) {
        init();
    }
    else {
        document.addEventListener('DOMContentLoaded', init);
    }
    // tslint:enable:no-any
    InstallPolyfill('Set', function () { return new JsSetPolyfillImpl_1.JsSetPolyfillImpl(); });
    InstallPolyfill('Map', function () { return new JsMapPolyfillImpl_1.JsMapPolyfillImpl(); });
})();
/**
 * Our default hit-testing uses coordinates which assume we aren't scrolled. This tests for a scroll possibility
 * and then also checks an actual hit test on absolute-positioned temporary DOM element.
 * Call this statically or rarely (once per drag at most).
 */
function DetectDocumentElementFromPoint() {
    var body = window.document.body;
    if (isWebKit && BrowserSupport.IsMobile()) {
        // Perform a hit test far from origin to ensure that window.devicePixelRation is a factor.
        // BUGZID 63572 For Google Nexus tablets until fixed. This just tests brokenness.
        var target = document.createElement('div');
        // Coordinates fit within minimum viable dashboard size but far from origin for scaling bugs.
        // Also tests with a target large enough to matter for touch/pill/cursor size.
        target.style.setProperty('position', 'absolute');
        target.style.setProperty('top', '300px');
        target.style.setProperty('left', '300px');
        target.style.setProperty('width', '25px');
        target.style.setProperty('height', '25px');
        target.style.setProperty('z-index', '10000');
        try {
            body.appendChild(target);
            shouldUseAlternateHitStrategy = document.elementFromPoint(310, 310) !== target;
        }
        catch (err) {
            // Do nothing
        }
        finally {
            target.remove();
        }
    }
}
/**
 * NOTE-jrockwood-2012-11-29: Avoid browser detection like the plague.
 * Instead use feature detection. However, there are some small cases
 * where you have to sniff the browser user agent. Just be careful.
 */
function DetectBrowser() {
    var ua = BrowserSupport.GetUserAgent();
    isKhtml = ua.indexOf('Konqueror') >= 0;
    isWebKit = ua.indexOf('WebKit') >= 0;
    isChrome = ua.indexOf('Chrome') >= 0 || ua.indexOf('CriOS') >= 0;
    isEdgeIos = ua.indexOf('EdgiOS') >= 0;
    // NOTE-jfurdell-2015-01-21: Chrome's user agent string currently contains 'Safari'.
    // Check that the user agent string has 'Safari' and not 'Chrome'; if so, we're Safari.
    isSafari = ua.indexOf('Safari') >= 0 && !isChrome;
    isOpera = ua.indexOf('Opera') >= 0;
    // Check Safari version
    if (isSafari) {
        var versionMatches = ua.match(/\bVersion\/(\d+\.\d+)/);
        if (versionMatches !== null) {
            safariVersion = parseFloat(versionMatches[1]);
        }
    }
    // Check Chrome version
    if (isChrome) {
        var versionMatches = ua.match(/\bChrome\/(\d+\.\d+)/);
        if (versionMatches !== null) {
            googleChromeVersion = parseFloat(versionMatches[1]);
        }
    }
    // Check for IE versions (10 and earlier)
    internetExplorerVersion = 0.0;
    isIE = false;
    var oldIEVersions = ua.match(/\bMSIE (\d+\.\d+)/);
    if (oldIEVersions !== null) {
        isIE = true;
        // Element 0 is the whole 'MSIE: #.#' string
        internetExplorerVersion = parseFloat(oldIEVersions[1]);
    }
    // Check for IE and Edge versions (11 and later)
    // note: "Edg" is not a typo - it is to support ChrEdge
    if (!isIE && !isOpera && (ua.indexOf('Trident') >= 0 || ua.indexOf('Edge/') >= 0 || ua.indexOf('Edg/') >= 0)) {
        var tridentIEVersions = ua.match(/\brv:(\d+\.\d+)/);
        var edgeIEVersions = ua.match(/Edge\/(\d+\.\d+)/);
        var chrEdgeVersions = ua.match(/Edg\/(\d+\.\d+)/);
        if (tridentIEVersions !== null) {
            isIE = true;
            isLegacyEdge = false;
            // Element 0 is the whole 'rv:##.#' string
            internetExplorerVersion = parseFloat(tridentIEVersions[1]);
        }
        else if (edgeIEVersions !== null) {
            isIE = true;
            isLegacyEdge = true;
            isChrome = false;
            isSafari = false;
            // Element 0 is the whole 'Edge/##.#' string
            internetExplorerVersion = parseFloat(edgeIEVersions[1]);
        }
        else if (chrEdgeVersions !== null) {
            isChrEdge = true;
            isChrome = false;
            isSafari = false;
            // Element 0 is the whole 'Edg/##.#' string
            chrEdgeVersion = parseFloat(chrEdgeVersions[1]);
        }
    }
    // NOTE-rshasan-2015-01-27: IE11's user agent string contains 'Gecko', which
    // is historically associated with Mozilla.
    // To avoid identifying IE11 as Mozilla, we make sure that 'IE words' are
    // absent ('MSIE' and 'Trident').
    isMozilla = !isKhtml && !isWebKit && !isIE && ua.indexOf('Gecko') >= 0;
    isFF = isMozilla || ua.indexOf('Firefox') >= 0 || ua.indexOf('Minefield') >= 0;
    var commandRegex = /iPhone|iPod|iPad/;
    isIos = commandRegex.test(ua)
        || BrowserSupport.IsIOSDeviceInDesktopMode();
    if (isIos) {
        var iosVersions = ua.match(/\bOS ([\d+_?]+) like Mac OS X/);
        if (iosVersions !== null) {
            iosVersion = parseFloat(iosVersions[1].replace(/_/, '.').replace(/_/g, ''));
        }
    }
    isAndroid = ua.indexOf('Android') >= 0 && !isIE;
    isMac = ua.indexOf('Mac') >= 0;
    isWindows = ua.indexOf('Windows') >= 0;
    isTouch = GetIsTouch();
    isTableau = ua.indexOf('Tableau') >= 0;
    isMobileBrowser = GetIsMobileBrowser();
}
/**
 * This is a static way of detecting a touch screen without user interaction. Note that the only guaranteed way
 * of detecting touch is by listening for touch start when waiting for a user to touch.
 */
function GetIsTouch() {
    var isTouchEnabled;
    try {
        isTouchEnabled = 'ontouchstart' in window || HasDocumentTouch();
    }
    catch (err) {
        isTouchEnabled = false;
    }
    return isTouchEnabled;
}
function HasDocumentTouch() {
    // tslint:disable:no-any
    return !!window.DocumentTouch && document instanceof window.DocumentTouch;
    // tslint:enable:no-any
}
/**
 * Detects whether the request is from a browser from a mobile device. Note that
 * this will return false if a request is coming from a web view on a mobile device.
 */
function GetIsMobileBrowser() {
    var ua = BrowserSupport.GetUserAgent();
    var isIosBrowser = BrowserSupport.IsIos() && (BrowserSupport.IsSafari() || BrowserSupport.IsChrome());
    var isAndroidChrome = BrowserSupport.IsChrome() && BrowserSupport.IsAndroid();
    // The following two regex are to be used to distinguish android chrome vs android webview chrome
    // Logic is from here: https://developer.chrome.com/multidevice/user-agent#webview_user_agent
    var isWebView = (/Version\/[0-9]+\.[0-9]+/i).test(ua) || (/wv/i).test(ua);
    var isAndroidChromeBrowser = isAndroidChrome && !isWebView;
    return BrowserSupport.IsMobile() && (isIosBrowser || BrowserSupport.IsFF() || isAndroidChromeBrowser);
}
function DetectTransitionSupport() {
    var transitions = {
        transition: 'transition',
        webkitTransition: '-webkit-transition',
        msTransition: '-ms-transition',
        mozTransition: '-moz-transition',
        oTransition: '-o-transition',
    };
    cssTransitionName = DetectCssStyleSupport(transitions) || cssTransitionName;
}
function DetectTransformSupport() {
    var transforms = {
        transform: 'transform',
        webkitTransform: '-webkit-transform',
        msTransform: '-ms-transform',
        mozTransform: '-moz-transform',
        oTransform: '-o-transform',
    };
    cssTransformName = DetectCssStyleSupport(transforms) || cssTransformName;
}
function DetectCssStyleSupport(browserNames) {
    var keys = Object.keys(browserNames);
    for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];
        if (key in document.body.style) {
            return browserNames[key];
        }
    }
    return null;
}
function DetectDevicePixelRatio() {
    devicePixelRatio = window.self.devicePixelRatio || 1.0;
}
function DetectBackingStoragePixelRatio() {
    var canvas = document.createElement('canvas');
    if (canvas === null || canvas === undefined) {
        backingStoragePixelRatio = 1.0;
        return;
    }
    var context = null;
    if ('getContext' in canvas && typeof canvas.getContext === 'function') {
        context = canvas.getContext('2d');
    }
    if (context === null || context === undefined) {
        backingStoragePixelRatio = 1.0;
        return;
    }
    // tslint:disable:no-any
    var ctx = context;
    backingStoragePixelRatio =
        ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || 1.0;
    // tslint:enable:no-any
}
/** Detects if the canvas supports custom line patterns. */
function DetectCanvasLinePattern() {
    var canvas = document.createElement('canvas');
    if (canvas === null || canvas === undefined) {
        return;
    }
    var context = null;
    if ('getContext' in canvas && typeof canvas.getContext === 'function') {
        context = canvas.getContext('2d');
    }
    if (context === null || context === undefined) {
        return;
    }
    canvasLinePattern =
        // Chrome
        typeof context.setLineDash === 'function' ||
            // Mozilla Firefox
            'mozDash' in context ||
            // Safari
            'webkitLineDash' in context;
}
function DetectSetSelectionRangeSupport() {
    var inputObject = document.createElement('input');
    // tslint:disable:no-any
    setSelectionRange = typeof inputObject.setSelectionRange === 'function';
    // tslint:enable:no-any
}
function DetectDateInputSupport() {
    dateInput = DetectCustomInputSupport('date');
    dateTimeInput = DetectCustomInputSupport('datetime');
    dateTimeLocalInput = DetectCustomInputSupport('datetime-local');
    timeInput = DetectCustomInputSupport('time');
}
function DetectCustomInputSupport(inputType) {
    var input = document.createElement('input');
    input.setAttribute('type', inputType);
    input.style.setProperty('position', 'absolute');
    input.style.setProperty('visibility', 'hidden');
    document.body.appendChild(input);
    // if a device does not have an custom HTML5 input widget, this will usually get reset to 'text'.
    var reportedInputType = input.getAttribute('type');
    // a real custom input will filter out invalid data (e.g., http://www.w3.org/tr/html5/forms.html#date-state-%28type=date%29)
    var invalidDataString = '@inva/1d:)';
    input.value = invalidDataString;
    var supportsInput = reportedInputType === inputType && input.value !== invalidDataString;
    document.body.removeChild(input);
    return supportsInput;
}
/**
 * This method will create polyfill for the ES6 set if not supported
 * #crossbrowser: Remove once Android browsers for 4.4 and 5.0 no longer supported
 * @param T - The implementation of the missing functionality
 * @param {string} constructorName Native name of the constructor
 */
function InstallPolyfill(constructorName, constructor) {
    var supported = constructorName in window;
    if (!supported) {
        // tslint:disable:no-any
        var windowAsDynamic = window;
        // tslint:enable:no-any
        windowAsDynamic[constructorName] = constructor;
    }
}
function DetectDragAndDropEventSupport() {
    var div = document.documentElement;
    supportsDragAndDropEvents = ('ondragstart' in div && 'ondrop' in div);
}
function DetectSvgElementSupport() {
    supportsSvgElements = !!('createElementNS' in document &&
        document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);
}
function DetectScrollbarWidth() {
    var div = document.createElement('div');
    div.style.visibility = 'hidden';
    div.style.position = 'absolute';
    div.style.width = '100px';
    div.style.height = '100px';
    div.style.overflow = 'scroll';
    document.body.appendChild(div);
    var noScrollbarWidth = div.clientWidth;
    var withScrollbarWidth = div.offsetWidth;
    if (div.parentNode) {
        div.parentNode.removeChild(div);
    }
    scrollbarWidth = withScrollbarWidth - noScrollbarWidth;
}


/***/ }),

/***/ "./lib/src/JsMapPolyfillImpl.js":
/*!**************************************!*\
  !*** ./lib/src/JsMapPolyfillImpl.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <summary>
/// Polyfill for the EcmaScript6 data type (JsMap)
/// This is mainly for Android browsers (4.4 and 5.0 does not support maps) + PhantomJS
/// #crossbrowser: Remove once Android browsers for 4.4 and 5.0 no longer supported
/// </summary>
var JsMapPolyfillImpl = /** @class */ (function () {
    function JsMapPolyfillImpl() {
        // tslint:disable:no-any
        this.store = {};
    }
    Object.defineProperty(JsMapPolyfillImpl.prototype, "size", {
        // tslint:enable:no-any
        get: function () {
            return Object.keys(this.store).length;
        },
        enumerable: true,
        configurable: true
    });
    /// <summary>
    /// Sets the value for the key in the Map object.
    /// </summary>
    /// <param name="key"></param>
    /// <param name="value"></param>
    /// <returns>Returns the Map object (this).</returns>
    JsMapPolyfillImpl.prototype.set = function (key, value) {
        // Debug.Assert(key is string || key is int, "Invalid type of the dictionary key.");
        this.store[key] = value;
        return this;
    };
    /// <summary>
    /// Gets the value from the map associated with given key
    /// </summary>
    /// <param name="key"></param>
    /// <returns>Value object associated with given key</returns>
    JsMapPolyfillImpl.prototype.get = function (key) {
        return this.store[key];
    };
    /// <summary>
    /// Removes the element associated to the value
    /// </summary>
    /// <param name="i">The value that Set.prototype.has(value) would have previously returned</param>
    JsMapPolyfillImpl.prototype.delete = function (i) {
        var result = this.has(i);
        delete this.store[i];
        return result;
    };
    /// <summary>
    /// Removes all elements from the Set object.
    /// </summary>
    JsMapPolyfillImpl.prototype.clear = function () {
        this.store = {};
    };
    /// <summary>
    /// Returns a boolean asserting whether an element is present with the given value in the Set object or not.
    /// </summary>
    /// <param name="i"></param>
    /// <returns>true if entry present in the set</returns>
    JsMapPolyfillImpl.prototype.has = function (i) {
        return this.store.propertyIsEnumerable(i);
    };
    /// <summary>
    /// Executes a provided function once per each key/value pair in the Map object, in insertion order.
    /// </summary>
    /// <param name="callbackFn">Function to execute for each element.</param>
    JsMapPolyfillImpl.prototype.forEach = function (callbackFn) {
        var _this = this;
        Object.keys(this.store).forEach(function (itemKey) {
            callbackFn(_this.store[itemKey], itemKey);
        });
    };
    return JsMapPolyfillImpl;
}());
exports.JsMapPolyfillImpl = JsMapPolyfillImpl;


/***/ }),

/***/ "./lib/src/JsSetPolyfillImpl.js":
/*!**************************************!*\
  !*** ./lib/src/JsSetPolyfillImpl.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <summary>
/// Polyfill for the EcmaScript6 data type (JsSet)
/// This is mainly for Android browsers (4.4 and 5.0 does not support sets yet)
/// #crossbrowser: Remove once Android browsers for 4.4 and 5.0 no longer supported
/// </summary>
var JsSetPolyfillImpl = /** @class */ (function () {
    function JsSetPolyfillImpl() {
        // tslint:disable:no-any
        this.store = {};
    }
    Object.defineProperty(JsSetPolyfillImpl.prototype, "size", {
        // tslint:enable:no-any
        get: function () {
            return Object.keys(this.store).length;
        },
        enumerable: true,
        configurable: true
    });
    /// <summary>
    /// Appends a new element with the given value to the Set object.
    /// </summary>
    /// <param name="i"></param>
    /// <returns>Returns the Set object (this)</returns>
    JsSetPolyfillImpl.prototype.add = function (i) {
        // todo: handle asserts
        // Debug.Assert(i is string || i is int, "Invalid type of the dictionary key.");
        this.store[i] = i;
        return this;
    };
    /// <summary>
    /// Removes the element associated to the value
    /// </summary>
    /// <param name="i">The value that Set.prototype.has(value) would have previously returned</param>
    JsSetPolyfillImpl.prototype.delete = function (i) {
        var result = this.has(i);
        delete this.store[i];
        return result;
    };
    /// <summary>
    /// Removes all elements from the Set object.
    /// </summary>
    JsSetPolyfillImpl.prototype.clear = function () {
        this.store = {};
    };
    /// <summary>
    /// Returns a boolean asserting whether an element is present with the given value in the Set object or not.
    /// </summary>
    /// <param name="i"></param>
    /// <returns>true if entry present in the set</returns>
    JsSetPolyfillImpl.prototype.has = function (i) {
        return this.store.propertyIsEnumerable(i);
    };
    /// <summary>
    /// Calls callbackFn once for each value present in the Set object, in insertion order
    /// </summary>
    /// <param name="callbackFn">Function to invoke for every entry in the set</param>
    JsSetPolyfillImpl.prototype.forEach = function (callbackFn) {
        var _this = this;
        Object.keys(this.store).forEach(function (key) {
            callbackFn(_this.store[key]);
        });
    };
    return JsSetPolyfillImpl;
}());
exports.JsSetPolyfillImpl = JsSetPolyfillImpl;


/***/ }),

/***/ "./lib/src/TouchScreenUtil.js":
/*!************************************!*\
  !*** ./lib/src/TouchScreenUtil.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/// <summary>
/// Detects and saves if this is a touch screen of a non-mobile device.
/// The only reliable way to detect if this is actually a touch screen, is to catch a touch event.
/// </summary>
var TouchScreenUtil = /** @class */ (function () {
    function TouchScreenUtil() {
    }
    Object.defineProperty(TouchScreenUtil, "HasUserTouchedScreen", {
        /// <summary>
        /// Returns whether or not the user has touched a touch screen.
        /// This can be used to determine if the current connected screen is a touch screen or not.
        /// (Best way found so far, to check an actual connection of a touch screen).
        /// </summary>
        get: function () {
            return TouchScreenUtil.hasUserTouchedScreen;
        },
        enumerable: true,
        configurable: true
    });
    /// <summary>
    /// Starts listening to the TouchStart event to detect the first StartTouch event.
    /// </summary>
    TouchScreenUtil.Init = function () {
        if (document.body !== null && document.body !== undefined) {
            document.body.addEventListener('touchstart', TouchScreenUtil.HandleTouchStart, false);
        }
    };
    /// <summary>
    /// Updates the userHasTouchedScreen variable once a TouchStart event has been detected.
    /// No need to keep listening to the event. Once a touch event has detected, it must be a touch screen.
    /// </summary>
    TouchScreenUtil.HandleTouchStart = function (e) {
        if (TouchScreenUtil.hasUserTouchedScreen) {
            return;
        }
        TouchScreenUtil.hasUserTouchedScreen = true;
        document.body.removeEventListener('touchstart', TouchScreenUtil.HandleTouchStart, false);
    };
    TouchScreenUtil.hasUserTouchedScreen = false;
    return TouchScreenUtil;
}());
exports.TouchScreenUtil = TouchScreenUtil;


/***/ })

/******/ });
});
//# sourceMappingURL=browser-support.js.map
  // END BrowserSupport


/*! BEGIN Bootstrap */
'use strict';

if (typeof module !== 'undefined' && module.exports) {
    module.exports = isSupported;
} else if (window) {
    window.mapboxgl = window.mapboxgl || {};
    window.mapboxgl.supported = isSupported;
    window.mapboxgl.notSupportedReason = notSupportedReason;
}

/**
 * Test whether the current browser supports Mapbox GL JS
 * @param {Object} options
 * @param {boolean} [options.failIfMajorPerformanceCaveat=false] Return `false`
 *   if the performance of Mapbox GL JS would be dramatically worse than
 *   expected (i.e. a software renderer is would be used)
 * @return {boolean}
 */
function isSupported(options) {
    return !notSupportedReason(options);
}

function notSupportedReason(options) {
    if (!isBrowser()) return 'not a browser';
    if (!isArraySupported()) return 'insufficent Array support';
    if (!isFunctionSupported()) return 'insufficient Function support';
    if (!isObjectSupported()) return 'insufficient Object support';
    if (!isJSONSupported()) return 'insufficient JSON support';
    if (!isWorkerSupported()) return 'insufficient worker support';
    if (!isUint8ClampedArraySupported()) return 'insufficient Uint8ClampedArray support';
    if (!isArrayBufferSupported()) return 'insufficient ArrayBuffer support';
    if (!isCanvasGetImageDataSupported()) return 'insufficient Canvas/getImageData support';
    if (!isWebGLSupportedCached(options && options.failIfMajorPerformanceCaveat)) return 'insufficient WebGL support';
}

function isBrowser() {
    return typeof window !== 'undefined' && typeof document !== 'undefined';
}

function isArraySupported() {
    return (
        Array.prototype &&
        Array.prototype.every &&
        Array.prototype.filter &&
        Array.prototype.forEach &&
        Array.prototype.indexOf &&
        Array.prototype.lastIndexOf &&
        Array.prototype.map &&
        Array.prototype.some &&
        Array.prototype.reduce &&
        Array.prototype.reduceRight &&
        Array.isArray
    );
}

function isFunctionSupported() {
    return Function.prototype && Function.prototype.bind;
}

function isObjectSupported() {
    return (
        Object.keys &&
        Object.create &&
        Object.getPrototypeOf &&
        Object.getOwnPropertyNames &&
        Object.isSealed &&
        Object.isFrozen &&
        Object.isExtensible &&
        Object.getOwnPropertyDescriptor &&
        Object.defineProperty &&
        Object.defineProperties &&
        Object.seal &&
        Object.freeze &&
        Object.preventExtensions
    );
}

function isJSONSupported() {
    return 'JSON' in window && 'parse' in JSON && 'stringify' in JSON;
}

function isWorkerSupported() {
    if (!('Worker' in window && 'Blob' in window && 'URL' in window)) {
        return false;
    }

    var blob = new Blob([''], { type: 'text/javascript' });
    var workerURL = URL.createObjectURL(blob);
    var supported;
    var worker;

    try {
        worker = new Worker(workerURL);
        supported = true;
    } catch (e) {
        supported = false;
    }

    if (worker) {
        worker.terminate();
    }
    URL.revokeObjectURL(workerURL);

    return supported;
}

// IE11 only supports `Uint8ClampedArray` as of version
// [KB2929437](https://support.microsoft.com/en-us/kb/2929437)
function isUint8ClampedArraySupported() {
    return 'Uint8ClampedArray' in window;
}

// https://github.com/mapbox/mapbox-gl-supported/issues/19
function isArrayBufferSupported() {
    return ArrayBuffer.isView;
}

// Some browsers or browser extensions block access to canvas data to prevent fingerprinting.
// Mapbox GL uses this API to load sprites and images in general.
function isCanvasGetImageDataSupported() {
    const canvas = document.createElement('canvas');
    canvas.width = canvas.height = 1;
    const context = canvas.getContext('2d');
    if (!context) {
        return false;
    }
    const imageData = context.getImageData(0, 0, 1, 1);
    return imageData && imageData.width === canvas.width;
}

var isWebGLSupportedCache = {};
function isWebGLSupportedCached(failIfMajorPerformanceCaveat) {

    if (isWebGLSupportedCache[failIfMajorPerformanceCaveat] === undefined) {
        isWebGLSupportedCache[failIfMajorPerformanceCaveat] = isWebGLSupported(failIfMajorPerformanceCaveat);
    }

    return isWebGLSupportedCache[failIfMajorPerformanceCaveat];
}

isSupported.webGLContextAttributes = {
    antialias: false,
    alpha: true,
    stencil: true,
    depth: true
};

function getWebGLContext(failIfMajorPerformanceCaveat) {
    var canvas = document.createElement('canvas');

    var attributes = Object.create(isSupported.webGLContextAttributes);
    attributes.failIfMajorPerformanceCaveat = failIfMajorPerformanceCaveat;

    if (canvas.probablySupportsContext) {
        return (
            canvas.probablySupportsContext('webgl', attributes) ||
            canvas.probablySupportsContext('experimental-webgl', attributes)
        );

    } else if (canvas.supportsContext) {
        return (
            canvas.supportsContext('webgl', attributes) ||
            canvas.supportsContext('experimental-webgl', attributes)
        );

    } else {
        return (
            canvas.getContext('webgl', attributes) ||
            canvas.getContext('experimental-webgl', attributes)
        );
    }
}

function isWebGLSupported(failIfMajorPerformanceCaveat) {
    const gl = getWebGLContext(failIfMajorPerformanceCaveat);
    if (!gl) {
        return false;
    }

    // Try compiling a shader and get its compile status. Some browsers like Brave block this API
    // to prevent fingerprinting. Unfortunately, this also means that Mapbox GL won't work.
    const shader = gl.createShader(gl.VERTEX_SHADER);
    if (!shader || gl.isContextLost()) {
        return false;
    }
    gl.shaderSource(shader, 'void main() {}');
    gl.compileShader(shader);
    return gl.getShaderParameter(shader, gl.COMPILE_STATUS) === true;
}
(function() {
  'dont use strict';
  var $asm = {};
  global.tab = global.tab || {};
  global.tabBootstrap = global.tabBootstrap || {};
  ss.initAssembly($asm, 'ViewerBootstrap');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.ApiCommand
  var $tab__ApiCommand = global.tab._ApiCommand = ss.mkType($asm, 'tab._ApiCommand', function(name, commandId, hostId, parameters) {
    this.$1$NameField = null;
    this.$1$HostIdField = null;
    this.$1$CommandIdField = null;
    this.$1$ParametersField = null;
    this.set_name(name);
    this.set_commandId(commandId);
    this.set_hostId(hostId);
    this.set_parameters(parameters);
  }, {
    get_name: function ApiCommand$get_Name() {
      return this.$1$NameField;
    },
    set_name: function ApiCommand$set_Name(value) {
      this.$1$NameField = value;
    },
    get_hostId: function ApiCommand$get_HostId() {
      return this.$1$HostIdField;
    },
    set_hostId: function ApiCommand$set_HostId(value) {
      this.$1$HostIdField = value;
    },
    get_commandId: function ApiCommand$get_CommandId() {
      return this.$1$CommandIdField;
    },
    set_commandId: function ApiCommand$set_CommandId(value) {
      this.$1$CommandIdField = value;
    },
    get_parameters: function ApiCommand$get_Parameters() {
      return this.$1$ParametersField;
    },
    set_parameters: function ApiCommand$set_Parameters(value) {
      this.$1$ParametersField = value;
    },
    get_isApiCommandName: function ApiCommand$get_IsApiCommandName() {
      return this.get_rawName().indexOf('api.', 0) === 0;
    },
    get_rawName: function ApiCommand$get_RawName() {
      return this.get_name().toString();
    },
    serialize: function ApiCommand$Serialize() {
      var message = [];
      message.push(this.get_name());
      message.push(this.get_commandId());
      message.push(this.get_hostId());
      if (ss.isValue(this.get_parameters())) {
        message.push(this.get_parameters());
      }
      var serializedMessage = message.join(',');
      $tab__ApiCommand.lastRequestMessage = serializedMessage;
      return serializedMessage;
    }
  }, {
    generateNextCommandId: function ApiCommand$GenerateNextCommandId() {
      var commandId = 'cmd' + $tab__ApiCommand.$nextCommandId;
      $tab__ApiCommand.$nextCommandId++;
      return commandId;
    },
    parse: function ApiCommand$Parse(serialized) {
      var name;
      var index = serialized.indexOf(String.fromCharCode(44));
      if (index < 0) {
        name = ss.cast(serialized, String);
        return new $tab__ApiCommand(name, null, null, null);
      }
      name = ss.cast(serialized.substr(0, index), String);
      var sourceId;
      var secondPart = serialized.substr(index + 1);
      index = secondPart.indexOf(String.fromCharCode(44));
      if (index < 0) {
        sourceId = secondPart;
        return new $tab__ApiCommand(name, sourceId, null, null);
      }
      sourceId = secondPart.substr(0, index);
      var hostId;
      var thirdPart = secondPart.substr(index + 1);
      index = thirdPart.indexOf(String.fromCharCode(44));
      if (index < 0) {
        hostId = thirdPart;
        return new $tab__ApiCommand(name, sourceId, hostId, null);
      }
      hostId = thirdPart.substr(0, index);
      var parameters = thirdPart.substr(index + 1);
      $tab__ApiCommand.lastResponseMessage = serialized;
      if (name === 'api.GetClientInfoCommand') {
        $tab__ApiCommand.lastClientInfoResponseMessage = serialized;
      }
      return new $tab__ApiCommand(name, sourceId, hostId, parameters);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.ApiServerNotification
  var $tab__ApiServerNotification = global.tab._ApiServerNotification = ss.mkType($asm, 'tab._ApiServerNotification', function(workbookName, worksheetName, data) {
    this.$workbookName = null;
    this.$worksheetName = null;
    this.$data = null;
    this.$workbookName = workbookName;
    this.$worksheetName = worksheetName;
    this.$data = data;
  }, {
    get_workbookName: function ApiServerNotification$get_WorkbookName() {
      return this.$workbookName;
    },
    get_worksheetName: function ApiServerNotification$get_WorksheetName() {
      return this.$worksheetName;
    },
    get_data: function ApiServerNotification$get_Data() {
      return this.$data;
    },
    serialize: function ApiServerNotification$Serialize() {
      var serialized = {};
      serialized['api.workbookName'] = this.$workbookName;
      serialized['api.worksheetName'] = this.$worksheetName;
      serialized['api.commandData'] = this.$data;
      return JSON.stringify(serialized);
    }
  }, {
    deserialize: function ApiServerNotification$Deserialize(json) {
      var param = JSON.parse(json);
      var workbookName = ss.cast(param['api.workbookName'], String);
      var worksheetName = ss.cast(param['api.worksheetName'], String);
      var data = param['api.commandData'];
      return new $tab__ApiServerNotification(workbookName, worksheetName, data);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.ApiServerResultParser
  var $tab__ApiServerResultParser = global.tab._ApiServerResultParser = ss.mkType($asm, 'tab._ApiServerResultParser', function(serverResult) {
    this.$commandResult = null;
    this.$commandData = null;
    var param = JSON.parse(serverResult);
    this.$commandResult = ss.cast(param['api.commandResult'], String);
    this.$commandData = param['api.commandData'];
  }, {
    get_result: function ApiServerResultParser$get_Result() {
      return this.$commandResult;
    },
    get_data: function ApiServerResultParser$get_Data() {
      return this.$commandData;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.NonApiCommand
  var $tab_NonApiCommand = global.tab.NonApiCommand = ss.mkType($asm, 'tab.NonApiCommand', function(name, parameters) {
    this.$parameters = null;
    this.$1$NameField = null;
    this.set_name(name);
    this.$parameters = parameters;
  }, {
    get_name: function NonApiCommand$get_Name() {
      return this.$1$NameField;
    },
    set_name: function NonApiCommand$set_Name(value) {
      this.$1$NameField = value;
    },
    get_parameters: function NonApiCommand$get_Parameters() {
      return this.$parameters;
    },
    serialize: function NonApiCommand$Serialize() {
      var message = [];
      message.push(this.get_name().toString());
      message = message.concat.apply(message, this.$parameters);
      return message.join(',');
    }
  }, {
    parse: function NonApiCommand$Parse(serialized) {
      var args = serialized.split(String.fromCharCode(44));
      var name = ss.cast(args[0], String);
      var parameters = args.slice(1);
      return new $tab_NonApiCommand(name, parameters);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Core.AffordanceSetLookup
  var $tabBootstrap_$AffordanceSetLookup = ss.mkType($asm, 'tabBootstrap.$AffordanceSetLookup', function(listedState, unlistedState, list) {
    this.$affordanceLookup = null;
    this.$1$ListedStateField = null;
    this.$1$UnlistedStateField = null;
    this.set_$listedState(listedState);
    this.set_$unlistedState(unlistedState);
    this.$affordanceLookup = new Set();
    if (ss.isValue(list)) {
      for (var $t1 = 0; $t1 < list.length; $t1++) {
        var id = list[$t1];
        this.$affordanceLookup.add(id);
      }
    }
  }, {
    get_$listedState: function AffordanceSetLookup$get_ListedState() {
      return this.$1$ListedStateField;
    },
    set_$listedState: function AffordanceSetLookup$set_ListedState(value) {
      this.$1$ListedStateField = value;
    },
    get_$unlistedState: function AffordanceSetLookup$get_UnlistedState() {
      return this.$1$UnlistedStateField;
    },
    set_$unlistedState: function AffordanceSetLookup$set_UnlistedState(value) {
      this.$1$UnlistedStateField = value;
    },
    $getState: function AffordanceSetLookup$GetState(id) {
      return (this.$affordanceLookup.has(id) ? this.get_$listedState() : this.get_$unlistedState());
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.BootstrapRequestBuilder
  var $tabBootstrap_$BootstrapRequestBuilder = ss.mkType($asm, 'tabBootstrap.$BootstrapRequestBuilder', null, null, {
    $createBootstrapParams: function BootstrapRequestBuilder$CreateBootstrapParams(clientDimension) {
      var bootstrapParams = {};
      if (!tsConfig.is_authoring) {
        bootstrapParams['clientDimension'] = clientDimension;
      }
      bootstrapParams['renderMapsClientSide'] = $tabBootstrap_MapboxGLSupport.isSupported();
      bootstrapParams['isBrowserRendering'] = tsConfig.is_browser_rendering_requested;
      bootstrapParams['browserRenderingThreshold'] = tsConfig.browser_rendering_threshold;
      bootstrapParams['formatDataValueLocally'] = tsConfig.formatDataValueLocally;
      bootstrapParams['clientNum'] = $tabBootstrap_UrlLocationHashManager.get_hashClientNumber();
      var navInfo = new $tabBootstrap_NavigationInfo();
      bootstrapParams['navType'] = navInfo.$navType;
      bootstrapParams['navSrc'] = navInfo.$navSrc;
      var devicePixelRatio = $tabBootstrap_RenderingConstantsAndHelpers.$getDevicePixelRatio();
      bootstrapParams['devicePixelRatio'] = devicePixelRatio;
      if (ss.isValue(tsConfig.is_mobile) && tsConfig.is_mobile) {
        bootstrapParams['imageSizeLimit'] = $tabBootstrap_RenderingConstantsAndHelpers.get_imageSizeLimit();
        bootstrapParams['transparentLineMarkLimit'] = $tabBootstrap_RenderingConstantsAndHelpers.transparentLineMarkLimit;
      }
      bootstrapParams['clientRenderPixelLimit'] = $tabBootstrap_RenderingConstantsAndHelpers.get_canvasPixelLimit();
      bootstrapParams['allowAutogenWorksheetPhoneLayouts'] = $tabBootstrap_DeviceDetector.get_shouldAllowAutogenWorksheetPhoneLayouts();
      if (!ss.isNullOrEmptyString(tsConfig.deviceTypeOverride)) {
        bootstrapParams[':device'] = tsConfig.deviceTypeOverride;
      }
      if (ss.isValue(tsConfig.sheetId)) {
        bootstrapParams['sheet_id'] = tsConfig.sheetId;
      }
      if (ss.isValue(tsConfig.showParams)) {
        bootstrapParams['showParams'] = tsConfig.showParams;
      }
      if (ss.isValue(tsConfig.stickySessionKey)) {
        bootstrapParams['stickySessionKey'] = tsConfig.stickySessionKey;
      }
      if (ss.isValue(tsConfig.filterTileSize)) {
        bootstrapParams['filterTileSize'] = tsConfig.filterTileSize;
      }
      if (ss.isValue(tsConfig.workbookLocale)) {
        bootstrapParams['workbookLocale'] = tsConfig.workbookLocale;
      }
      if (ss.isValue(tsConfig.locale)) {
        bootstrapParams['locale'] = tsConfig.locale;
      }
      if (ss.isValue(tsConfig.language)) {
        bootstrapParams['language'] = tsConfig.language;
      }
      if (ss.isValue(tsConfig.syncSession) && tsConfig.syncSession.length !== 0 && typeof(tsConfig.syncSession) === 'string') {
        bootstrapParams['sync_session_state'] = $tabBootstrap_$BootstrapRequestBuilder.getSyncSessionState(tsConfig.syncSession);
      }
      if (ss.isValue(tsConfig.debugMode)) {
        bootstrapParams['verboseMode'] = tsConfig.debugMode;
      }
      if (ss.isValue(tsConfig.features_json)) {
        bootstrapParams[':session_feature_flags'] = tsConfig.features_json;
      }
      if (ss.isValue(tsConfig.keychain_version)) {
        bootstrapParams['keychain_version'] = tsConfig.keychain_version;
      }
      return bootstrapParams;
    },
    getSyncSessionState: function BootstrapRequestBuilder$GetSyncSessionState(sessionId) {
      var srcSessionData = sessionId.split(String.fromCharCode(47));
      var uri = $tabBootstrap_BaseUrlFormatter.formatBootstrapSessionMethod('get_global_filters', srcSessionData[1], '/' + srcSessionData[0]);
      return $tabBootstrap_Utility.$xhrGetXmlSynchronous(uri, null);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.BootstrapState
  var $tabBootstrap_$BootstrapState = ss.mkEnum($asm, 'tabBootstrap.$BootstrapState', { $uninitialized: 1, $requestingBootstrapData: 2, $readyToBootstrap: 3, $bootstrapSucceeded: 4, $bootstrapFailed: 5 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.DojoConfigInitializer
  var $tabBootstrap_$DojoConfigInitializer = ss.mkType($asm, 'tabBootstrap.$DojoConfigInitializer', function() {
  }, null, {
    $configureDojo: function DojoConfigInitializer$ConfigureDojo() {
      var dojoConfig = { parseOnLoad: true, usePlainJson: true, noFirebugLite: true, useXDomain: tsConfig.xdomain_active, locale: $tabBootstrap_$DojoConfigInitializer.$dojoLocale };
      if (tsConfig.xdomain_active) {
        var modulePaths = { tableau: tsConfig.external_static_asset_prefix + '/javascripts/built-dojo/tableau' };
        dojoConfig.modulePaths = modulePaths;
        dojoConfig.baseUrl = tsConfig.external_static_asset_prefix + '/javascripts/built-dojo/dojo/';
        dojoConfig.dojoBlankHtmlUrl = tsConfig.local_static_asset_prefix + '/javascripts/blank.html';
      }
      if (tsConfig.debugMode) {
        try {
          var debugModeRegex = new RegExp('[?&][:]?debug=');
          if (window.location.search.search(debugModeRegex) !== -1) {
            dojoConfig.isDebug = true;
            dojoConfig.debugAtAllCosts = true;
          }
        }
        catch ($t1) {
        }
      }
      window.self['djConfig'] = dojoConfig;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.LocalMetricsContext
  var $tabBootstrap_$LocalMetricsContext = ss.mkType($asm, 'tabBootstrap.$LocalMetricsContext', function(suite, desc, extraInfo) {
    this.$metricName = null;
    $tabBootstrap_MetricsContext.$ctor1.call(this, $tabBootstrap_MetricsController.get_$instance().$getContextIDThenIncrement(), suite, desc);
    desc = $tabBootstrap_$LocalWebClientMetricsLogger.$buildDescriptionName(desc, extraInfo);
    this.open = true;
    this.$metricName = desc + '#' + $tabBootstrap_$LocalMetricsContext.$eventCount++;
    $tabBootstrap_$LocalWebClientMetricsLogger.$logLocalMetricStart(this.$metricName);
  }, {
    close: function LocalMetricsContext$Close() {
      if (this.open) {
        this.open = false;
        $tabBootstrap_$LocalWebClientMetricsLogger.$logLocalMetricEnd(this.$metricName, null);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.LocalWebClientMetricsLogger
  var $tabBootstrap_$LocalWebClientMetricsLogger = ss.mkType($asm, 'tabBootstrap.$LocalWebClientMetricsLogger', function() {
  }, {
    logEvent: function LocalWebClientMetricsLogger$LogEvent(evt) {
      var desc = $tabBootstrap_$LocalWebClientMetricsLogger.$buildDescriptionName(evt.parameters.d, evt.parameters.ei);
      var startMarkName;
      if (evt.metricSuite === 2 && ss.isValue(evt.parameters.e)) {
        startMarkName = $tabBootstrap_$LocalWebClientMetricsLogger.$appStartMarker;
      }
      else {
        startMarkName = $tabBootstrap_$LocalWebClientMetricsLogger.$logLocalMetricStart(desc);
      }
      $tabBootstrap_$LocalWebClientMetricsLogger.$logLocalMetricEnd(desc, startMarkName);
    }
  }, {
    $logLocalMetricStart: function LocalWebClientMetricsLogger$LogLocalMetricStart(metricName) {
      var startMarkName = $tabBootstrap_$LocalWebClientMetricsLogger.$buildStartName(metricName);
      $tabBootstrap_PerformanceReporting.mark(startMarkName);
      return startMarkName;
    },
    $markAppStart: function LocalWebClientMetricsLogger$MarkAppStart() {
      $tabBootstrap_PerformanceReporting.mark($tabBootstrap_$LocalWebClientMetricsLogger.$appStartMarker);
    },
    $logLocalMetricEnd: function LocalWebClientMetricsLogger$LogLocalMetricEnd(metricName, startMarkName) {
      var endMarkName = $tabBootstrap_$LocalWebClientMetricsLogger.$buildEndName(metricName);
      var $t1 = startMarkName;
      if (ss.isNullOrUndefined($t1)) {
        $t1 = $tabBootstrap_$LocalWebClientMetricsLogger.$buildStartName(metricName);
      }
      startMarkName = $t1;
      $tabBootstrap_PerformanceReporting.mark(endMarkName);
      $tabBootstrap_PerformanceReporting.measure('✚ ' + metricName, startMarkName, endMarkName);
    },
    $buildDescriptionName: function LocalWebClientMetricsLogger$BuildDescriptionName(message, extraInfo) {
      message = $tabBootstrap_MetricsController.getFriendlyEventDescription(message);
      if (ss.isValue(extraInfo)) {
        message += ' ' + extraInfo;
      }
      return message;
    },
    $buildStartName: function LocalWebClientMetricsLogger$BuildStartName(desc) {
      return '__start__' + desc;
    },
    $buildEndName: function LocalWebClientMetricsLogger$BuildEndName(desc) {
      return '__end__' + desc;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.NullMetricsContext
  var $tabBootstrap_$NullMetricsContext = ss.mkType($asm, 'tabBootstrap.$NullMetricsContext', function() {
    $tabBootstrap_MetricsContext.call(this, -1, 0, '', null);
    this.open = false;
    this.start = 0;
    this.end = 0;
  }, {
    close: function NullMetricsContext$Close() {
    }
  }, {
    get_$instance: function NullMetricsContext$get_Instance() {
      if (ss.isNullOrUndefined($tabBootstrap_$NullMetricsContext.$instance)) {
        $tabBootstrap_$NullMetricsContext.$instance = new $tabBootstrap_$NullMetricsContext();
      }
      return $tabBootstrap_$NullMetricsContext.$instance;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.ViewerInitializer
  var $tabBootstrap_$ViewerInitializer = ss.mkType($asm, 'tabBootstrap.$ViewerInitializer', null, null, {
    $hideElement: function ViewerInitializer$HideElement(id) {
      var el = document.getElementById(id);
      if (ss.isValue(el)) {
        el.style.display = 'none';
      }
    },
    $parseTsConfig: function ViewerInitializer$ParseTsConfig() {
      var tsConfigContainer = document.getElementById('tsConfigContainer');
      var tsConfig = JSON.parse(tsConfigContainer.value);
      window.self['tsConfig'] = tsConfig;
    },
    $globalErrorHandler: function ViewerInitializer$GlobalErrorHandler(message, err) {
      if ($tabBootstrap_Utility.shouldIgnoreScriptError(message, err)) {
        return false;
      }
      var errEl = document.getElementById('tabBootErr');
      var messEl = errEl.childNodes[1].lastChild;
      messEl.textContent += '\n' + message;
      errEl.style.display = 'block';
      $tabBootstrap_$ViewerInitializer.$hideElement('loadingGlassPane');
      $tabBootstrap_$ViewerInitializer.$hideElement('loadingSpinner');
      try {
        window.parent.postMessage('tableau.completed', '*');
      }
      catch ($t1) {
      }
      return false;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Core.Affordances
  var $tabBootstrap_Affordances = global.tabBootstrap.Affordances = ss.mkType($asm, 'tabBootstrap.Affordances', function() {
    this.$affordanceSets = [];
    this.$1$AffordancesChangedField = null;
  }, {
    add_affordancesChanged: function Affordances$add_AffordancesChanged(value) {
      this.$1$AffordancesChangedField = ss.delegateCombine(this.$1$AffordancesChangedField, value);
    },
    remove_affordancesChanged: function Affordances$remove_AffordancesChanged(value) {
      this.$1$AffordancesChangedField = ss.delegateRemove(this.$1$AffordancesChangedField, value);
    },
    isOn: function Affordances$IsOn(id) {
      for (var $t1 = 0; $t1 < this.$affordanceSets.length; $t1++) {
        var set = this.$affordanceSets[$t1];
        if (set.getState(id) === 'off') {
          return false;
        }
      }
      return true;
    },
    register: function Affordances$Register(affordanceSet) {
      this.$affordanceSets.push(affordanceSet);
      affordanceSet.add_affordanceSetChanged(ss.mkdel(this, this.$onAffordanceSetChanged));
    },
    unregister: function Affordances$Unregister(affordanceSet) {
      this.$affordanceSets.splice(this.$affordanceSets.indexOf(affordanceSet), 1);
      affordanceSet.remove_affordanceSetChanged(ss.mkdel(this, this.$onAffordanceSetChanged));
    },
    $onAffordanceSetChanged: function Affordances$OnAffordanceSetChanged() {
      if (!ss.staticEquals(this.$1$AffordancesChangedField, null)) {
        this.$1$AffordancesChangedField();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.ApiCommandResponder
  var $tabBootstrap_ApiCommandResponder = global.tabBootstrap.ApiCommandResponder = ss.mkType($asm, 'tabBootstrap.ApiCommandResponder', function() {
  }, {
    sendResponse: null,
    sendEventNotification: function ApiCommandResponder$SendEventNotification(eventName, sheetName, data) {
      var jsonResult = $tabBootstrap_ApiCommandResponder.$buildNotification(tsConfig.workbookName, ss.coalesce(sheetName, ''), ss.coalesce(data, ''));
      var command = new $tab__ApiCommand(eventName, $tab__ApiCommand.crossDomainEventNotificationId, tsConfig.apiID, jsonResult);
      this.sendResponse(command, jsonResult);
    }
  }, {
    $buildNotification: function ApiCommandResponder$BuildNotification(workbookName, sheetName, data) {
      var param = {};
      param['api.workbookName'] = workbookName;
      param['api.worksheetName'] = sheetName;
      param['api.commandData'] = data;
      return JSON.stringify(param);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.ApiCrossDomainResponder
  var $tabBootstrap_ApiCrossDomainResponder = global.tabBootstrap.ApiCrossDomainResponder = ss.mkType($asm, 'tabBootstrap.ApiCrossDomainResponder', function() {
    $tabBootstrap_ApiCommandResponder.call(this);
  }, {
    get_$isInIframe: function ApiCrossDomainResponder$get_IsInIframe() {
      return !ss.referenceEquals(window.window, window.parent);
    },
    sendResponse: function ApiCrossDomainResponder$SendResponse(requestCommand, result) {
      if (!('postMessage' in window) || !this.get_$isInIframe()) {
        return;
      }
      var commandName = requestCommand.get_name();
      var response = new $tab__ApiCommand(commandName, requestCommand.get_commandId(), requestCommand.get_hostId(), result);
      var message = response.serialize();
      window.parent.postMessage(message, '*');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.ApiNativeHostResponder
  var $tabBootstrap_ApiNativeHostResponder = global.tabBootstrap.ApiNativeHostResponder = ss.mkType($asm, 'tabBootstrap.ApiNativeHostResponder', function(responseAction) {
    this.$2$ResponseActionField = null;
    $tabBootstrap_ApiCommandResponder.call(this);
    this.set_responseAction(responseAction);
  }, {
    get_responseAction: function ApiNativeHostResponder$get_ResponseAction() {
      return this.$2$ResponseActionField;
    },
    set_responseAction: function ApiNativeHostResponder$set_ResponseAction(value) {
      this.$2$ResponseActionField = value;
    },
    sendResponse: function ApiNativeHostResponder$SendResponse(requestCommand, result) {
      if (!ss.staticEquals(this.get_responseAction(), null)) {
        this.get_responseAction()(requestCommand, result);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.BaseUrlFormatter
  var $tabBootstrap_BaseUrlFormatter = global.tabBootstrap.BaseUrlFormatter = ss.mkType($asm, 'tabBootstrap.BaseUrlFormatter', null, null, {
    formatBaseUrl: function BaseUrlFormatter$FormatBaseUrl() {
      return window.location.protocol + '//' + window.location.host;
    },
    formatUrlRoot: function BaseUrlFormatter$FormatUrlRoot(baseUrl, prefix) {
      var urlRoot = baseUrl;
      if (ss.isValue(prefix)) {
        urlRoot += prefix;
      }
      else if (ss.isValue(tsConfig.vizql_root)) {
        urlRoot += tsConfig.vizql_root;
      }
      else {
        var pathName = window.location.pathname;
        pathName = pathName.replace(new RegExp('\\/[^\\/]*$'), '');
        urlRoot += pathName;
      }
      return urlRoot;
    },
    formatSessionMethod: function BaseUrlFormatter$FormatSessionMethod(method, id, urlRoot) {
      return urlRoot + '/' + method + '/sessions/' + id;
    },
    formatBootstrapSessionMethod: function BaseUrlFormatter$FormatBootstrapSessionMethod(method, sessionId, prefix) {
      return $tabBootstrap_BaseUrlFormatter.formatSessionMethod(method, sessionId, $tabBootstrap_BaseUrlFormatter.formatUrlRoot($tabBootstrap_BaseUrlFormatter.formatBaseUrl(), prefix));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.CommandNameBuilder
  var $tabBootstrap_CommandNameBuilder = global.tabBootstrap.CommandNameBuilder = ss.mkType($asm, 'tabBootstrap.CommandNameBuilder', null, null, {
    buildDocCommandName: function CommandNameBuilder$BuildDocCommandName(command) {
      return $tabBootstrap_CommandNameBuilder.buildQualifiedCommandName('tabdoc', command.cmd);
    },
    buildQualifiedCommandName: function CommandNameBuilder$BuildQualifiedCommandName(commandNamespace, command) {
      return commandNamespace + ':' + command;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.CommandResponseHandler
  var $tabBootstrap_CommandResponseHandler = global.tabBootstrap.CommandResponseHandler = ss.mkType($asm, 'tabBootstrap.CommandResponseHandler', null, null, {
    $commandResultByName: function CommandResponseHandler$CommandResultByName(response, c) {
      ss.Debug.assert(ss.isValue(response['vqlCmdResponse'.toString()]), 'The server response is not a VqlCommandResponseRoot object.');
      var fullName = $tabBootstrap_CommandNameBuilder.buildQualifiedCommandName(c.commandNamespace, c.commandName);
      var commandResponse = response['vqlCmdResponse'.toString()];
      var commandResults = commandResponse.cmdResultList;
      for (var $t1 = 0; $t1 < commandResults.length; $t1++) {
        var result = commandResults[$t1];
        if (ss.referenceEquals(result.commandName, fullName)) {
          return result.commandReturn;
        }
      }
      return null;
    },
    getCommandReturnValue: function CommandResponseHandler$GetCommandReturnValue(response, c) {
      var root = $tabBootstrap_CommandResponseHandler.$commandResultByName(response, c);
      if (!c.preserveRootResult && ss.isValue(root) && ss.getKeyCount(root) === 1 && !ss.keyExists(root, 'commandRedirectType'.toString())) {
        var $t1 = new ss.ObjectEnumerator(root);
        try {
          while ($t1.moveNext()) {
            var entry = $t1.current();
            return entry.value;
          }
        }
        finally {
          $t1.dispose();
        }
      }
      else {
        return root;
      }
      return null;
    },
    getConnectionAttemptInfo: function CommandResponseHandler$GetConnectionAttemptInfo(response) {
      var commandResponse = response['vqlCmdResponse'.toString()];
      ss.Debug.assert(ss.isValue(commandResponse), 'The server response is not a VqlCommandResponseRoot object.');
      if (ss.isValue(commandResponse.layoutStatus)) {
        var layoutStatus = commandResponse.layoutStatus;
        if (ss.isValue(layoutStatus.connectionAttemptInfo) && layoutStatus.connectionAttemptInfo.dataSourceConnectionAttemptInfos.length > 0) {
          return layoutStatus.connectionAttemptInfo;
        }
      }
      return null;
    },
    getException: function CommandResponseHandler$GetException(commandResponse) {
      if (ss.isNullOrUndefined(commandResponse)) {
        return null;
      }
      var response = commandResponse['vqlCmdResponse'.toString()];
      if (ss.isValue(response) && response.cmdResultList.length > 0) {
        var resultPM = response.cmdResultList[0];
        var result = resultPM.commandReturn;
        if (ss.isValue(result) && ss.keyExists(result, 'commandValidationPresModel')) {
          var validation = result['commandValidationPresModel'];
          if (!validation.valid) {
            return new ss.Exception(ss.formatString('{0}: {1}', resultPM.commandName, validation.errorMessage));
          }
        }
      }
      return null;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.VizBackendInitializer.DesktopVizBackendInitializer
  var $tabBootstrap_DesktopVizBackendInitializer = global.tabBootstrap.DesktopVizBackendInitializer = ss.mkType($asm, 'tabBootstrap.DesktopVizBackendInitializer', function(sessionService) {
    this.$1$SessionServiceField = null;
    if (ss.isNullOrUndefined(sessionService)) {
      throw new ss.ArgumentNullException('sessionService');
    }
    this.set_sessionService(sessionService);
  }, {
    get_sessionService: function DesktopVizBackendInitializer$get_SessionService() {
      return this.$1$SessionServiceField;
    },
    set_sessionService: function DesktopVizBackendInitializer$set_SessionService(value) {
      this.$1$SessionServiceField = value;
    },
    initialize: function DesktopVizBackendInitializer$Initialize(uri, parameters, onInitial, onSecondary, onError) {
      this.get_sessionService().initialize(parameters.worksheetPortSize.w, parameters.worksheetPortSize.h, parameters.dashboardPortSize.w, parameters.dashboardPortSize.h).then(ss.mkdel(this, function(resp) {
        var remoteException = $tabBootstrap_CommandResponseHandler.getException(resp);
        if (ss.isValue(remoteException)) {
          onError(remoteException);
          return;
        }
        var pm = $tabBootstrap_DesktopVizBackendInitializer.$extractPresModel(resp);
        var connectionAttemptInfo = $tabBootstrap_CommandResponseHandler.getConnectionAttemptInfo(resp);
        var primary = $tabBootstrap_DesktopVizBackendInitializer.$constructBootstrapResponse(pm, connectionAttemptInfo);
        onInitial(primary, null);
        var secondary = { secondaryInfo: pm.vizclientBootstrapSecondaryData };
        onSecondary(secondary);
      }), null).catch(onError);
    }
  }, {
    $extractPresModel: function DesktopVizBackendInitializer$ExtractPresModel(commandResponse) {
      var command = { commandNamespace: { ns: 'tabsrv', cmd: 'get-viz-client-bootstrap-data' }.ns, commandName: { ns: 'tabsrv', cmd: 'get-viz-client-bootstrap-data' }.cmd, commandParams: null, preserveRootResult: false, noExceptionDialog: false };
      var pm = $tabBootstrap_CommandResponseHandler.getCommandReturnValue(commandResponse, command);
      return pm;
    },
    $constructBootstrapResponse: function DesktopVizBackendInitializer$ConstructBootstrapResponse(vizClientBootstrapPresModel, connectionAttemptInfo) {
      var primaryData = vizClientBootstrapPresModel.vizclientBootstrapPrimaryData;
      var bootstrapResponse = { allowSubscribeOnDataPresent: false, allowSubscriptions: false, connectionAttemptInfo: connectionAttemptInfo, layoutId: primaryData.layoutId, newClientNum: null, newSessionId: primaryData.sessionId, sessionState: null, sheetName: primaryData.sheetName, workbookLocale: 'en_US', worldUpdate: primaryData.worldUpdate };
      return bootstrapResponse;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.DeviceDetector
  var $tabBootstrap_DeviceDetector = global.tabBootstrap.DeviceDetector = ss.mkType($asm, 'tabBootstrap.DeviceDetector', function() {
    this.$deviceType = null;
    this.$detectedDeviceType = null;
    this.$clientDimension = null;
  }, {
    get_deviceType: function DeviceDetector$get_DeviceType() {
      return this.$deviceType;
    },
    get_detectedDeviceType: function DeviceDetector$get_DetectedDeviceType() {
      return this.$detectedDeviceType;
    },
    get_deviceLayoutPreference: function DeviceDetector$get_DeviceLayoutPreference() {
      switch (this.get_deviceType()) {
        case 'desktop':
        default: {
          return 'desktop';
        }
        case 'tablet': {
          return 'tablet';
        }
        case 'phone': {
          return ($tabBootstrap_DeviceDetector.get_shouldAllowAutogenWorksheetPhoneLayouts() ? 'phoneAutogen' : 'phone');
        }
      }
    },
    get_clientDimension: function DeviceDetector$get_ClientDimension() {
      if (ss.isValue(this.$clientDimension)) {
        return this.$clientDimension;
      }
      var availableSize = $tabBootstrap_UrlLocationHashManager.get_urlLocationSearchParams()[':size'];
      var sizes = (ss.isValue(availableSize) ? availableSize.split(String.fromCharCode(44)).map(function(size) {
        return parseInt(size);
      }) : null);
      this.$clientDimension = ((ss.isNullOrUndefined(sizes) || isNaN(sizes[0]) || isNaN(sizes[1])) ? { w: document.documentElement.clientWidth, h: document.documentElement.clientHeight } : { w: sizes[0], h: sizes[1] });
      return this.$clientDimension;
    },
    $detectDeviceType: function DeviceDetector$DetectDeviceType() {
      var di = Math.min(this.get_clientDimension().w, this.get_clientDimension().h);
      this.$detectedDeviceType = ((di <= tsConfig.dsd_phone_max_size) ? 'phone' : ((di <= tsConfig.dsd_tablet_max_size) ? 'tablet' : 'desktop'));
      var deviceStr = tsConfig.deviceTypeOverride;
      if (!ss.isNullOrEmptyString(deviceStr)) {
        var $t1 = ss.getEnumerator(Object.keys($tabBootstrap_DeviceDetector.$deviceTypeLookup));
        try {
          while ($t1.moveNext()) {
            var dt = $t1.current();
            if (ss.referenceEquals($tabBootstrap_DeviceDetector.$deviceTypeLookup[dt], deviceStr) && dt !== 'default') {
              this.$deviceType = dt;
              return;
            }
          }
        }
        finally {
          $t1.dispose();
        }
      }
      this.$deviceType = this.$detectedDeviceType;
    }
  }, {
    get_shouldAllowAutogenWorksheetPhoneLayouts: function DeviceDetector$get_ShouldAllowAutogenWorksheetPhoneLayouts() {
      return $tabBootstrap_EmbedAndViewportCalculator.get_embedMode() === 'notEmbedded' || tsConfig.isVizPortal;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Core.DisableAffordanceSet
  var $tabBootstrap_DisableAffordanceSet = global.tabBootstrap.DisableAffordanceSet = ss.mkType($asm, 'tabBootstrap.DisableAffordanceSet', function(disabledIds) {
    this.$lookup = null;
    this.$1$AffordanceSetChangedField = null;
    this.$lookup = new $tabBootstrap_$AffordanceSetLookup('off', 'on', disabledIds);
  }, {
    add_affordanceSetChanged: function DisableAffordanceSet$add_AffordanceSetChanged(value) {
      this.$1$AffordanceSetChangedField = ss.delegateCombine(this.$1$AffordanceSetChangedField, value);
    },
    remove_affordanceSetChanged: function DisableAffordanceSet$remove_AffordanceSetChanged(value) {
      this.$1$AffordanceSetChangedField = ss.delegateRemove(this.$1$AffordanceSetChangedField, value);
    },
    get_isSetEnabled: function DisableAffordanceSet$get_IsSetEnabled() {
      return true;
    },
    getState: function DisableAffordanceSet$GetState(id) {
      if (this.get_isSetEnabled()) {
        return this.$lookup.$getState(id);
      }
      return 'on';
    },
    raiseAffordanceSetChanged: function DisableAffordanceSet$RaiseAffordanceSetChanged() {
      if (!ss.staticEquals(this.$1$AffordanceSetChangedField, null)) {
        this.$1$AffordanceSetChangedField();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.EmbedAndViewportCalculator
  var $tabBootstrap_EmbedAndViewportCalculator = global.tabBootstrap.EmbedAndViewportCalculator = ss.mkType($asm, 'tabBootstrap.EmbedAndViewportCalculator', null, null, {
    get_embedMode: function EmbedAndViewportCalculator$get_EmbedMode() {
      return $tabBootstrap_EmbedAndViewportCalculator.$embedModeVar;
    },
    get_isEmbeddedInsideAnotherPage: function EmbedAndViewportCalculator$get_IsEmbeddedInsideAnotherPage() {
      return $tabBootstrap_EmbedAndViewportCalculator.get_embedMode() === 'sameDomainEmbedded' || $tabBootstrap_EmbedAndViewportCalculator.get_embedMode() === 'crossDomainEmbedded';
    },
    get_$inLandscapeMode: function EmbedAndViewportCalculator$get_InLandscapeMode() {
      try {
        var win = $tabBootstrap_Utility.$getTopmostWindow();
        var orientation = win.orientation;
        return ss.isValue(orientation) && (orientation === 90 || orientation === -90);
      }
      catch ($t1) {
      }
      return false;
    },
    $getViewport: function EmbedAndViewportCalculator$GetViewport() {
      var docElem = window.document.documentElement;
      return { w: docElem.clientWidth, h: docElem.clientHeight };
    },
    $getWindowSize: function EmbedAndViewportCalculator$GetWindowSize() {
      return { w: window.innerWidth, h: window.innerHeight };
    },
    $getNonEmbeddedMobileViewport: function EmbedAndViewportCalculator$GetNonEmbeddedMobileViewport() {
      var temp, chromeSpace;
      var w = window.document.documentElement.clientWidth;
      var h = window.document.documentElement.clientHeight;
      var isAndroid = window.navigator.userAgent.indexOf('Android') !== -1;
      if (isAndroid) {
        if (w === window.screen.height) {
          chromeSpace = window.screen.width - h;
          temp = w - chromeSpace;
          w = h + chromeSpace;
          h = temp;
        }
      }
      else if ($tabBootstrap_EmbedAndViewportCalculator.get_$inLandscapeMode()) {
        if (w === window.screen.width) {
          chromeSpace = window.screen.height - h;
          temp = w - chromeSpace;
          w = h + chromeSpace;
          h = temp;
        }
      }
      else if (w === window.screen.height) {
        chromeSpace = window.screen.width - h;
        temp = w - chromeSpace;
        w = h + chromeSpace;
        h = temp;
      }
      return { w: w, h: h };
    },
    $calculateEmbedMode: function EmbedAndViewportCalculator$CalculateEmbedMode() {
      var parentIsSelf = false;
      var cannotAccessParentProperties = false;
      try {
        parentIsSelf = ss.referenceEquals(window.self, window.parent);
        cannotAccessParentProperties = ss.isNullOrUndefined(window.parent.outerWidth);
      }
      catch ($t1) {
        cannotAccessParentProperties = true;
      }
      if (parentIsSelf) {
        return 'notEmbedded';
      }
      else if (cannotAccessParentProperties) {
        return 'crossDomainEmbedded';
      }
      else {
        return 'sameDomainEmbedded';
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.EmbedMode
  var $tabBootstrap_EmbedMode = global.tabBootstrap.EmbedMode = ss.mkEnum($asm, 'tabBootstrap.EmbedMode', { notEmbedded: 'notEmbedded', sameDomainEmbedded: 'sameDomainEmbedded', crossDomainEmbedded: 'crossDomainEmbedded' }, true);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.IOS13MobileRedirectWorkaround
  var $tabBootstrap_IOS13MobileRedirectWorkaround = global.tabBootstrap.IOS13MobileRedirectWorkaround = ss.mkType($asm, 'tabBootstrap.IOS13MobileRedirectWorkaround', function() {
  }, null, {
    $isMobileParamPresent: function IOS13MobileRedirectWorkaround$IsMobileParamPresent() {
      return ss.keyExists($tabBootstrap_UrlLocationHashManager.get_urlLocationSearchParams(), $tabBootstrap_IOS13MobileRedirectWorkaround.mobilE_PARAM) || ss.keyExists($tabBootstrap_UrlLocationHashManager.get_urlLocationSearchParams(), $tabBootstrap_IOS13MobileRedirectWorkaround.coloN_MOBILE_PARAM);
    },
    redirectIfNeeded: function IOS13MobileRedirectWorkaround$RedirectIfNeeded() {
      if (BrowserSupport.BrowserSupport.IsIOSDeviceInDesktopMode() && !$tabBootstrap_IOS13MobileRedirectWorkaround.$isMobileParamPresent()) {
        var redirectURL = new URL($tabBootstrap_Utility.get_locationWindow().location.href);
        var searchParams = new URLSearchParams(redirectURL.search);
        searchParams.append($tabBootstrap_IOS13MobileRedirectWorkaround.coloN_MOBILE_PARAM, 'true');
        redirectURL.search = searchParams.toString();
        $tabBootstrap_Utility.get_locationWindow().location.replace(redirectURL.href);
        return true;
      }
      return false;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.MapboxGLSupport
  var $tabBootstrap_MapboxGLSupport = global.tabBootstrap.MapboxGLSupport = ss.mkType($asm, 'tabBootstrap.MapboxGLSupport', null, null, {
    isSupported: function MapboxGLSupport$IsSupported() {
      return ss.isNullOrUndefined($tabBootstrap_MapboxGLSupport.$notSupportedReason);
    },
    getNotSupportedReason: function MapboxGLSupport$GetNotSupportedReason() {
      if ($tabBootstrap_MapboxGLSupport.isSupported()) {
        return '';
      }
      return $tabBootstrap_MapboxGLSupport.$notSupportedReason;
    },
    $initNotSupportedReason: function MapboxGLSupport$InitNotSupportedReason() {
      var mapboxGLReason = mapboxgl.notSupportedReason();
      if (ss.isValue(mapboxGLReason)) {
        return mapboxGLReason;
      }
      if (!$tabBootstrap_MapboxGLSupport.$isAppendChildSupported()) {
        return 'error when appending child element to document';
      }
      return null;
    },
    $isAppendChildSupported: function MapboxGLSupport$IsAppendChildSupported() {
      try {
        var element = document.createElement('div');
        document.body.appendChild(element);
        document.body.removeChild(element);
      }
      catch ($t1) {
        return false;
      }
      return true;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.Metric
  var $tabBootstrap_Metric = global.tabBootstrap.Metric = ss.mkType($asm, 'tabBootstrap.Metric', null, null, {
    isEqual: function Metric$IsEqual($this, metric) {
      return $this.w === metric.w && $this.h === metric.h;
    },
    isInstanceOfType: function() {
      return true;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.MetricsContext
  var $tabBootstrap_MetricsContext = global.tabBootstrap.MetricsContext = ss.mkType($asm, 'tabBootstrap.MetricsContext', function(contextID, suite, desc, extraInfo) {
    $tabBootstrap_MetricsContext.$ctor1.call(this, contextID, suite, desc);
    this.$extraInfo = extraInfo;
    if ($tabBootstrap_MetricsController.$reportLocalMetrics) {
      this.$localReporter = new $tabBootstrap_$LocalMetricsContext(suite, desc, extraInfo);
    }
  }, {
    get_$endTime: function MetricsContext$get_EndTime() {
      return this.end;
    },
    get_clientEventId: function MetricsContext$get_ClientEventId() {
      return this.$1$ClientEventIdField;
    },
    set_clientEventId: function MetricsContext$set_ClientEventId(value) {
      this.$1$ClientEventIdField = value;
    },
    dispose: function MetricsContext$Dispose() {
      this.close();
    },
    close: function MetricsContext$Close() {
      if (this.open) {
        this.end = $tabBootstrap_MetricsController.getTiming();
        $tabBootstrap_MetricsController.$closeContext(this);
        this.open = false;
        if (ss.isValue(this.$localReporter)) {
          this.$localReporter.close();
        }
      }
    },
    elapsedMS: function MetricsContext$ElapsedMS() {
      if (!this.open) {
        return this.end - this.start;
      }
      return $tabBootstrap_MetricsController.getTiming() - this.start;
    }
  }, {
    $ctor1: function(contextID, suite, desc) {
      this.$id = 0;
      this.$metricSuite = 0;
      this.$description = null;
      this.$extraInfo = null;
      this.start = 0;
      this.end = 0;
      this.open = false;
      this.$localReporter = null;
      this.$1$ClientEventIdField = null;
      this.$id = contextID;
      this.$metricSuite = suite;
      this.$description = desc;
      this.start = $tabBootstrap_MetricsController.getTiming();
      this.open = true;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.MetricsController
  var $tabBootstrap_MetricsController = global.tabBootstrap.MetricsController = ss.mkType($asm, 'tabBootstrap.MetricsController', function() {
    this.$nextContextID = 0;
    this.$contextStack = [];
    this.$eventBuffer = [];
    this.$eventLoggers = [];
    this.$sessionId = '';
    this.$workbookName = '';
    this.$sheetName = '';
    this.$metricSessionId = '';
    this.$metricsFilter = 0;
    if (ss.isValue(tsConfig.metricsFilter) && tsConfig.metricsFilter !== '') {
      var filter = 0;
      var filters = tsConfig.metricsFilter.split(String.fromCharCode(124));
      for (var $t1 = 0; $t1 < filters.length; $t1++) {
        var suite = filters[$t1];
        var trimmedSuite = ((typeof(suite['trim']) === 'function') ? suite.trim() : suite);
        trimmedSuite = trimmedSuite.toLowerCase();
        if (ss.keyExists($tabBootstrap_MetricsController.$suiteNameLookup, trimmedSuite)) {
          filter |= $tabBootstrap_MetricsController.$suiteNameLookup[trimmedSuite];
        }
      }
      this.$metricsFilter = filter;
    }
  }, {
    $getContextIDThenIncrement: function MetricsController$GetContextIDThenIncrement() {
      var id = this.$nextContextID;
      ++this.$nextContextID;
      return id;
    },
    $getPreviousContextID: function MetricsController$GetPreviousContextID() {
      return this.$nextContextID - 1;
    },
    $logSessionInfo: function MetricsController$LogSessionInfo() {
      var parameters = { id: this.$sessionId, sid: this.$metricSessionId, wb: this.$workbookName, s: this.$sheetName, m: tsConfig.is_mobile };
      $tabBootstrap_MetricsController.logEventInternalUse(new $tabBootstrap_MetricsEvent('init', 2, parameters));
    },
    $logContextEnd: function MetricsController$LogContextEnd(context) {
      var parameters = $tabBootstrap_MetricsController.$buildMetricsEventCommonParameters(context);
      parameters.t = context.get_$endTime();
      parameters.e = context.elapsedMS();
      parameters.m = tsConfig.is_mobile;
      $tabBootstrap_MetricsController.logEventInternalUse(new $tabBootstrap_MetricsEvent('wp', context.$metricSuite, parameters));
    }
  }, {
    get_$instance: function MetricsController$get_Instance() {
      if (ss.isNullOrUndefined($tabBootstrap_MetricsController.$instance)) {
        $tabBootstrap_MetricsController.$instance = new $tabBootstrap_MetricsController();
      }
      return $tabBootstrap_MetricsController.$instance;
    },
    createContext: function MetricsController$CreateContext(description, suite, extraInfo) {
      if (ss.isNullOrUndefined(suite)) {
        suite = 32;
      }
      var filteredMetric = suite === 0 || (suite & $tabBootstrap_MetricsController.get_$instance().$metricsFilter) !== suite;
      var newContext;
      if (filteredMetric) {
        if ($tabBootstrap_MetricsController.$reportLocalMetrics) {
          newContext = new $tabBootstrap_$LocalMetricsContext(suite, description, extraInfo);
        }
        else {
          newContext = $tabBootstrap_$NullMetricsContext.get_$instance();
        }
      }
      else {
        newContext = new $tabBootstrap_MetricsContext($tabBootstrap_MetricsController.get_$instance().$getContextIDThenIncrement(), suite, description, extraInfo);
        $tabBootstrap_MetricsController.get_$instance().$contextStack.push(newContext);
      }
      return newContext;
    },
    logMetricsEvent: function MetricsController$LogMetricsEvent(description, metricsSuite, clientEventId) {
      var parameters = { t: $tabBootstrap_MetricsController.getTiming(), d: description, m: tsConfig.is_mobile };
      if (ss.isValue(clientEventId)) {
        parameters.cid = clientEventId;
      }
      if (metricsSuite === 2) {
        if (ss.referenceEquals(description, 'ADJAZN'.toString())) {
          parameters.e = (($tabBootstrap_MetricsController.$currentBootstrapRequestStartTime !== 0) ? (parameters.t - $tabBootstrap_MetricsController.$currentBootstrapRequestStartTime) : (parameters.t - $tabBootstrap_MetricsController.$appStartEpoch));
          $tabBootstrap_MetricsController.$currentBootstrapRequestStartTime = 0;
        }
        else {
          parameters.e = parameters.t - $tabBootstrap_MetricsController.$appStartEpoch;
        }
      }
      $tabBootstrap_MetricsController.logEventInternalUse(new $tabBootstrap_MetricsEvent('gen', metricsSuite, parameters));
    },
    logEventInternalUse: function MetricsController$LogEventInternalUse(evt) {
      if ($tabBootstrap_MetricsController.$reportLocalMetrics && evt.eventType !== 'init') {
        $tabBootstrap_MetricsController.$localEventLogger.logEvent(evt);
      }
      if (evt.metricSuite === 0 || (evt.metricSuite & $tabBootstrap_MetricsController.get_$instance().$metricsFilter) !== evt.metricSuite) {
        return;
      }
      if ($tabBootstrap_MetricsController.get_$instance().$eventLoggers.length > 0) {
        $tabBootstrap_MetricsController.$sendMetricToAllLoggers(evt);
      }
      else if (!tsConfig.is_desktop) {
        $tabBootstrap_MetricsController.get_$instance().$eventBuffer.push(evt);
      }
      else {
      }
    },
    $updateCurrentBootstrapRequestStartTime: function MetricsController$UpdateCurrentBootstrapRequestStartTime(startTime) {
      $tabBootstrap_MetricsController.$currentBootstrapRequestStartTime = startTime;
    },
    $sendMetricToAllLoggers: function MetricsController$SendMetricToAllLoggers(evt) {
      evt.parameters.sid = $tabBootstrap_MetricsController.get_$instance().$metricSessionId;
      if (ss.isValue(evt.parameters.ei) && ss.isValue(evt.parameters.d)) {
        if (ss.equalsT(evt.parameters.d, 'EXEREM'.toString())) {
          $tabBootstrap_MetricsController.$pushMetricsSessionIdForRemoteCommand(evt);
        }
        else if (ss.equalsT(evt.parameters.d, 'PROREM'.toString())) {
          $tabBootstrap_MetricsController.$assignMetricsSessionIdForRemoteCommandClientProcessing(evt);
        }
        else {
        }
      }
      var $t1 = $tabBootstrap_MetricsController.get_$instance().$eventLoggers;
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var logger = $t1[$t2];
        logger.logEvent(evt);
      }
    },
    $pushMetricsSessionIdForRemoteCommand: function MetricsController$PushMetricsSessionIdForRemoteCommand(evt) {
      if ($tabBootstrap_MetricsController.$commandContextIdStack.length >= $tabBootstrap_MetricsController.$commandContextIdStackMaxSize) {
        do {
          $tabBootstrap_MetricsController.$commandContextIdStack.pop();
        } while ($tabBootstrap_MetricsController.$commandContextIdStack.length > 0);
      }
      evt.parameters.sid += '.' + $tabBootstrap_MetricsController.get_$instance().$getPreviousContextID().toString();
      $tabBootstrap_MetricsController.$commandContextIdStack.push({ item1: evt.parameters.ei, item2: evt.parameters.sid });
    },
    $assignMetricsSessionIdForRemoteCommandClientProcessing: function MetricsController$AssignMetricsSessionIdForRemoteCommandClientProcessing(evt) {
      var currentPair;
      while ($tabBootstrap_MetricsController.$commandContextIdStack.length > 0) {
        currentPair = $tabBootstrap_MetricsController.$commandContextIdStack.pop();
        if (ss.isValue(currentPair.item1) && ss.equalsT(currentPair.item1, evt.parameters.ei)) {
          evt.parameters.sid = currentPair.item2;
          return;
        }
      }
    },
    setEventLoggers: function MetricsController$SetEventLoggers(loggers) {
      ss.Debug.assert(ss.isValue(loggers), "Don't pass in a null set of loggers");
      $tabBootstrap_MetricsController.get_$instance().$eventLoggers = loggers;
      if (ss.isValue(loggers) && $tabBootstrap_MetricsController.$instance.$eventBuffer.length > 0) {
        for (var $t1 = 0; $t1 < $tabBootstrap_MetricsController.$instance.$eventBuffer.length; $t1++) {
          var bufferedEvt = $tabBootstrap_MetricsController.$instance.$eventBuffer[$t1];
          $tabBootstrap_MetricsController.$sendMetricToAllLoggers(bufferedEvt);
        }
        $tabBootstrap_MetricsController.$instance.$eventBuffer = [];
      }
    },
    initSessionInfo: function MetricsController$InitSessionInfo() {
      var localInstance = $tabBootstrap_MetricsController.get_$instance();
      var currentSheet = (ss.isNullOrEmptyString(tsConfig.current_sheet_name) ? tsConfig.sheetId : tsConfig.current_sheet_name);
      if (ss.referenceEquals(localInstance.$sessionId, tsConfig.sessionid) && ss.referenceEquals(localInstance.$workbookName, tsConfig.workbookName) && ss.referenceEquals(localInstance.$sheetName, currentSheet)) {
        return;
      }
      localInstance.$sessionId = tsConfig.sessionid;
      localInstance.$workbookName = tsConfig.workbookName;
      localInstance.$sheetName = currentSheet;
      var now = new Date();
      localInstance.$metricSessionId = now.getTime().toString(36);
      localInstance.$metricSessionId = localInstance.$metricSessionId.substr(localInstance.$metricSessionId.length - 6);
      if (localInstance.$sessionId.length >= 5) {
        localInstance.$metricSessionId = localInstance.$metricSessionId + localInstance.$sessionId.substr(1, 1);
        localInstance.$metricSessionId = localInstance.$metricSessionId + localInstance.$sessionId.substr(4, 1);
      }
      localInstance.$logSessionInfo();
    },
    getFriendlyEventDescription: function MetricsController$GetFriendlyEventDescription(desc) {
      return ss.coalesce($tabBootstrap_MetricsController.$fullMetricNameLookup[desc], desc);
    },
    $closeContext: function MetricsController$CloseContext(context) {
      var id = context.$id;
      var pos = -1;
      for (var i = $tabBootstrap_MetricsController.get_$instance().$contextStack.length - 1; i >= 0; i--) {
        if ($tabBootstrap_MetricsController.$instance.$contextStack[i].$id === id) {
          pos = i;
          break;
        }
      }
      if (pos !== -1) {
        var cnt = $tabBootstrap_MetricsController.$instance.$contextStack.length - pos;
        for (var i1 = 0; i1 < cnt; i1++) {
          $tabBootstrap_MetricsController.$instance.$contextStack.pop();
        }
      }
      $tabBootstrap_MetricsController.$instance.$logContextEnd(context);
    },
    $buildMetricsEventCommonParameters: function MetricsController$BuildMetricsEventCommonParameters(context) {
      var parameters = { id: context.$id.toString(), d: context.$description };
      if (ss.isValue(context.$extraInfo)) {
        parameters.ei = context.$extraInfo;
      }
      if (ss.isValue(context.get_clientEventId())) {
        parameters.cid = context.get_clientEventId();
      }
      return parameters;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.MetricsEvent
  var $tabBootstrap_MetricsEvent = global.tabBootstrap.MetricsEvent = ss.mkType($asm, 'tabBootstrap.MetricsEvent', function(evtType, suite, eventParams) {
    this.eventType = null;
    this.metricSuite = 0;
    this.parameters = null;
    this.eventType = evtType;
    this.metricSuite = suite;
    this.parameters = eventParams;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.MetricsSuites
  var $tabBootstrap_MetricsSuites = global.tabBootstrap.MetricsSuites = ss.mkEnum($asm, 'tabBootstrap.MetricsSuites', { none: 0, navigation: 1, bootstrap: 2, commands: 4, rendering: 16, debug: 32, toolbar: 64, fonts: 128, hitTest: 256, maps: 512, exporting: 1024, min: 3, core: 15, all: 65535 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.NavigationInfo
  var $tabBootstrap_NavigationInfo = global.tabBootstrap.NavigationInfo = ss.mkType($asm, 'tabBootstrap.NavigationInfo', function() {
    this.$navType = null;
    this.$navSrc = null;
    if ($tabBootstrap_EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
      var navType = parseInt($tabBootstrap_NavigationInfo.get_$hashNavType());
      this.$navType = this.$navigationTypeFromNumber(navType);
    }
    if (ss.isValue(this.$navType)) {
      this.$navSrc = $tabBootstrap_NavigationInfo.get_$hashNavSrc();
    }
    else {
      this.$navSrc = ($tabBootstrap_EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage() ? 'Boot'.toString() : 'Top'.toString());
      this.$navType = this.$navigationTypeFromNumber($tabBootstrap_NavigationInfo.get_navigationType());
    }
  }, {
    $navigationTypeFromNumber: function NavigationInfo$NavigationTypeFromNumber(navType) {
      switch (navType) {
        case 0: {
          return 'Nav';
        }
        case 1: {
          return 'Reload';
        }
        case 2: {
          return 'BackFwd';
        }
        case 255: {
          return 'Reserved';
        }
        default: {
          return null;
        }
      }
    }
  }, {
    get_navigationType: function NavigationInfo$get_NavigationType() {
      return window.performance.navigation.type;
    },
    get_$hashNavType: function NavigationInfo$get_HashNavType() {
      var info = $tabBootstrap_UrlLocationHashManager.get_$urlLocationHashData();
      return ((ss.isValue(info) && ss.isValue(info[$tabBootstrap_NavigationInfo.$navTypeKey])) ? info[$tabBootstrap_NavigationInfo.$navTypeKey] : '');
    },
    get_$hashNavSrc: function NavigationInfo$get_HashNavSrc() {
      var info = $tabBootstrap_UrlLocationHashManager.get_$urlLocationHashData();
      return ((ss.isValue(info) && ss.isValue(info[$tabBootstrap_NavigationInfo.$navSrcKey])) ? info[$tabBootstrap_NavigationInfo.$navSrcKey] : '');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.VizBackendInitializer.OfflineVizBackendInitializer
  var $tabBootstrap_OfflineVizBackendInitializer = global.tabBootstrap.OfflineVizBackendInitializer = ss.mkType($asm, 'tabBootstrap.OfflineVizBackendInitializer', function(offlineBootstrapResponse) {
    this.$1$OfflineBootstrapResponseField = null;
    this.set_offlineBootstrapResponse(offlineBootstrapResponse);
  }, {
    get_offlineBootstrapResponse: function OfflineVizBackendInitializer$get_OfflineBootstrapResponse() {
      return this.$1$OfflineBootstrapResponseField;
    },
    set_offlineBootstrapResponse: function OfflineVizBackendInitializer$set_OfflineBootstrapResponse(value) {
      this.$1$OfflineBootstrapResponseField = value;
    },
    initialize: function OfflineVizBackendInitializer$Initialize(uri, parameters, onInitial, onSecondary, onError) {
      if (ss.isNullOrUndefined(this.get_offlineBootstrapResponse()) || this.get_offlineBootstrapResponse().length === 0) {
        throw new ss.Exception('Offline bootstrap response is empty');
      }
      try {
        var bootstrapResponse = JSON.parse(this.get_offlineBootstrapResponse()[0]);
        onInitial(bootstrapResponse, null);
        for (var i = 1; i < this.get_offlineBootstrapResponse().length; i++) {
          var secondaryBootstrapResponse = JSON.parse(this.get_offlineBootstrapResponse()[i]);
          onSecondary(secondaryBootstrapResponse);
        }
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        onError(e);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.PerformanceReporting
  var $tabBootstrap_PerformanceReporting = global.tabBootstrap.PerformanceReporting = ss.mkType($asm, 'tabBootstrap.PerformanceReporting', null, null, {
    mark: function PerformanceReporting$Mark(markName) {
      if ($tabBootstrap_PerformanceReporting.supportsPerfApi) {
        performance.mark(markName);
      }
    },
    measure: function PerformanceReporting$Measure(measureName, startMarkName, endMarkName) {
      if ($tabBootstrap_PerformanceReporting.supportsPerfApi) {
        try {
          performance.measure(measureName, startMarkName, endMarkName);
        }
        catch ($t1) {
          var e = ss.Exception.wrap($t1);
          console.error('Missing a performance mark', e);
        }
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.RenderingConstantsAndHelpers
  var $tabBootstrap_RenderingConstantsAndHelpers = global.tabBootstrap.RenderingConstantsAndHelpers = ss.mkType($asm, 'tabBootstrap.RenderingConstantsAndHelpers', null, null, {
    get_canvasPixelLimit: function RenderingConstantsAndHelpers$get_CanvasPixelLimit() {
      var canvasPixelLimit = 5000 * 5000;
      if (ss.isValue(tsConfig.is_mobile) && tsConfig.is_mobile) {
        var canvasLimitInMegapixels = (tsConfig.features['LargerImageLimits'] ? 6 : 3);
        canvasPixelLimit = canvasLimitInMegapixels * 1024 * 1024;
      }
      return canvasPixelLimit;
    },
    get_imageSizeLimit: function RenderingConstantsAndHelpers$get_ImageSizeLimit() {
      var imageSizeLimitInMegapixels = (tsConfig.features['LargerImageLimits'] ? 10 : 5);
      return imageSizeLimitInMegapixels * 1024 * 1024;
    },
    $getDevicePixelRatio: function RenderingConstantsAndHelpers$GetDevicePixelRatio() {
      var devicePixelRatio = 1;
      if (ss.isValue(tsConfig.highDpi) && tsConfig.highDpi) {
        if (ss.isValue(tsConfig.pixelRatio)) {
          devicePixelRatio = tsConfig.pixelRatio;
        }
        else {
          devicePixelRatio = ss.coalesce(window.self['devicePixelRatio'], 1);
        }
      }
      return devicePixelRatio;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.UrlLocationHashManager
  var $tabBootstrap_UrlLocationHashManager = global.tabBootstrap.UrlLocationHashManager = ss.mkType($asm, 'tabBootstrap.UrlLocationHashManager', null, null, {
    get_urlLocationSearchParams: function UrlLocationHashManager$get_UrlLocationSearchParams() {
      return $tabBootstrap_UrlLocationHashManager.$parseQueryParamString($tabBootstrap_UrlLocationHashManager.get_$urlLocationSearch().substring(1));
    },
    get_hashClientNumber: function UrlLocationHashManager$get_HashClientNumber() {
      var info = $tabBootstrap_UrlLocationHashManager.get_$urlLocationHashData();
      return ((ss.isValue(info) && ss.isValue(info[$tabBootstrap_UrlLocationHashManager.CLIENTNO])) ? info[$tabBootstrap_UrlLocationHashManager.CLIENTNO] : '');
    },
    get_historyApiSupported: function UrlLocationHashManager$get_HistoryApiSupported() {
      return typeof(window.history['pushState']) === 'function' && typeof(window.history['replaceState']) === 'function';
    },
    get_$urlLocationHashData: function UrlLocationHashManager$get_UrlLocationHashData() {
      var urlHashData = {};
      var fragmentId = $tabBootstrap_UrlLocationHashManager.get_urlLocationHash();
      if (fragmentId.length < 2) {
        return {};
      }
      fragmentId = fragmentId.substr(1);
      var pairs = fragmentId.split('&');
      for (var $t1 = 0; $t1 < pairs.length; $t1++) {
        var pair = pairs[$t1];
        var keyVal = pair.split('=');
        if (keyVal.length === 1) {
          urlHashData[$tabBootstrap_UrlLocationHashManager.CLIENTNO] = keyVal[0];
        }
        else if (keyVal.length === 2) {
          var key = decodeURIComponent(keyVal[0]);
          var value = decodeURIComponent(keyVal[1]);
          urlHashData[key] = value;
        }
      }
      return urlHashData;
    },
    set_$urlLocationHashData: function UrlLocationHashManager$set_UrlLocationHashData(value) {
      var newFragmentId = new ss.StringBuilder();
      var first = true;
      var appendSeparator = function() {
        newFragmentId.append((first ? '#' : '&'));
        first = false;
      };
      var $t1 = new ss.ObjectEnumerator(value);
      try {
        while ($t1.moveNext()) {
          var pairs = $t1.current();
          var keyEncoded = encodeURIComponent(pairs.key);
          appendSeparator();
          if (ss.referenceEquals(keyEncoded, $tabBootstrap_UrlLocationHashManager.CLIENTNO)) {
            newFragmentId.append(pairs.value);
          }
          else if (ss.isNullOrUndefined(pairs.value)) {
            newFragmentId.append(keyEncoded);
          }
          else {
            newFragmentId.append(keyEncoded).append('=').append(encodeURIComponent(pairs.value));
          }
        }
      }
      finally {
        $t1.dispose();
      }
      if (ss.isValue(newFragmentId)) {
        var window = $tabBootstrap_Utility.get_locationWindow();
        if ($tabBootstrap_UrlLocationHashManager.get_historyApiSupported()) {
          $tabBootstrap_UrlLocationHashManager.$replaceState(window, null, null, newFragmentId.toString());
        }
        else {
          window.location.hash = newFragmentId.toString();
        }
      }
    },
    get_urlLocationHash: function UrlLocationHashManager$get_UrlLocationHash() {
      var window = $tabBootstrap_Utility.get_locationWindow();
      return window.location.hash;
    },
    get_$urlLocationSearch: function UrlLocationHashManager$get_UrlLocationSearch() {
      var window = $tabBootstrap_Utility.get_locationWindow();
      return window.location.search;
    },
    $parseQueryParamString: function UrlLocationHashManager$ParseQueryParamString(urlStr) {
      var urlData = {};
      var pairs = urlStr.split('&');
      for (var $t1 = 0; $t1 < pairs.length; $t1++) {
        var pair = pairs[$t1];
        var keyVal = pair.split('=');
        if (keyVal.length === 2) {
          var key = decodeURIComponent(keyVal[0]);
          var value = decodeURIComponent(keyVal[1]);
          urlData[key] = value;
        }
      }
      return urlData;
    },
    addToUrlHash: function UrlLocationHashManager$AddToUrlHash(key, value) {
      var urlHash = $tabBootstrap_UrlLocationHashManager.get_$urlLocationHashData();
      urlHash[key] = value;
      $tabBootstrap_UrlLocationHashManager.set_$urlLocationHashData(urlHash);
    },
    $replaceState: function UrlLocationHashManager$ReplaceState(window, state, title, url) {
      try {
        window.history.replaceState(state, title, url);
      }
      catch ($t1) {
      }
    },
    getValueFromUrlHash: function UrlLocationHashManager$GetValueFromUrlHash(key) {
      var urlHash = $tabBootstrap_UrlLocationHashManager.get_$urlLocationHashData();
      return (ss.keyExists(urlHash, key) ? urlHash[key] : '');
    },
    removeEntryFromUrlHash: function UrlLocationHashManager$RemoveEntryFromUrlHash(key) {
      var fragInfo = $tabBootstrap_UrlLocationHashManager.get_$urlLocationHashData();
      delete fragInfo[key];
      $tabBootstrap_UrlLocationHashManager.set_$urlLocationHashData(fragInfo);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.Utility
  var $tabBootstrap_Utility = global.tabBootstrap.Utility = ss.mkType($asm, 'tabBootstrap.Utility', null, null, {
    get_locationWindow: function Utility$get_LocationWindow() {
      return window.self;
    },
    xhrPostJsonChunked: function Utility$XhrPostJsonChunked(uri, param, firstChunkCallback, secondaryChunkCallback, errBack, asynchronous) {
      var xhr = new XMLHttpRequest();
      xhr.open('POST', uri, asynchronous);
      xhr.setRequestHeader('Accept', 'text/javascript');
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      if (!ss.isNullOrUndefined(tsConfig.sheetId)) {
        xhr.setRequestHeader('X-Tsi-Active-Tab', tsConfig.sheetId);
      }
      var invokeError = $tabBootstrap_Utility.$getInvokeErrorDelegate(xhr, errBack);
      var byteOffset = 0;
      var consumeJSONChunks = ss.mkdel(this, function() {
        var buffer = '';
        var requestId = null;
        try {
          buffer = xhr.responseText;
          requestId = xhr.getResponseHeader('X-Tsi-Request-Id');
        }
        catch ($t1) {
        }
        var bufferLength = buffer.length;
        while (byteOffset < bufferLength) {
          var newData = buffer.substr(byteOffset);
          var regex = new RegExp('^(\\d+);');
          var match = newData.match(regex);
          if (!ss.isValue(match)) {
            return;
          }
          var chunkStart = match[0].length;
          var chunkLength = parseInt(match[1]);
          if (chunkStart + chunkLength > newData.length) {
            return;
          }
          newData = newData.substr(chunkStart, chunkLength);
          var json = null;
          try {
            var contextStr = 'Parse ' + ((byteOffset === 0) ? 'Primary' : 'Secondary') + ' JSON';
            {
              var mc = $tabBootstrap_MetricsController.createContext(contextStr, 32, null);
              try {
                json = $tabBootstrap_Utility.$parseJson(Object).call(null, newData);
              }
              finally {
                if (ss.isValue(mc)) {
                  mc.dispose();
                }
              }
            }
          }
          catch ($t2) {
            invokeError(new ss.Exception('Invalid JSON'));
          }
          if (byteOffset === 0) {
            var requestContext = (ss.isNullOrUndefined(requestId) ? null : { requestId: requestId });
            firstChunkCallback(json, requestContext);
          }
          else {
            secondaryChunkCallback(json);
          }
          byteOffset += chunkStart + chunkLength;
        }
      });
      var intervalID = -1;
      var isReceiving = false;
      var cannotTouchXhrWhileDownloading = window.navigator.userAgent.indexOf('MSIE') >= 0 && parseFloat(window.navigator.appVersion.split('MSIE ')[1]) < 10;
      xhr.onreadystatechange = function() {
        try {
          if (!cannotTouchXhrWhileDownloading && xhr.readyState === 3 && xhr.status === 200 && !isReceiving) {
            consumeJSONChunks();
            if (intervalID === -1) {
              intervalID = window.setInterval(consumeJSONChunks, 10);
            }
            isReceiving = true;
            return;
          }
          if (xhr.readyState !== 4) {
            return;
          }
          if (intervalID !== -1) {
            window.clearInterval(intervalID);
            intervalID = -1;
          }
          if ($tabBootstrap_Utility.$isSuccessStatus(xhr)) {
            consumeJSONChunks();
          }
          else {
            invokeError(new ss.Exception('Unable to load ' + uri + '; status: ' + xhr.status));
          }
        }
        catch ($t3) {
          var ex = ss.Exception.wrap($t3);
          if (typeof(ss.getType('ss')) === 'undefined') {
            xhr.abort();
          }
          else {
            throw ex;
          }
        }
      };
      try {
        xhr.send(param);
      }
      catch ($t4) {
        var e = ss.Exception.wrap($t4);
        invokeError(e);
      }
    },
    $xhrGetXmlSynchronous: function Utility$XhrGetXmlSynchronous(uri, errBack) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', uri, false);
      xhr.setRequestHeader('Accept', 'text/xml');
      try {
        xhr.send();
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        $tabBootstrap_Utility.$invokeErrorDelegate(xhr, errBack, e);
        return null;
      }
      return xhr.responseText;
    },
    $xhrPostJson: function Utility$XhrPostJson(uri, param, callback, errBack, asynchronous) {
      var xhr = new XMLHttpRequest();
      xhr.open('POST', uri, asynchronous);
      xhr.setRequestHeader('Accept', 'text/javascript');
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      if (ss.isValue(tsConfig.sheetId)) {
        xhr.setRequestHeader('X-Tsi-Active-Tab', tsConfig.sheetId);
      }
      var invokeError = $tabBootstrap_Utility.$getInvokeErrorDelegate(xhr, errBack);
      xhr.onreadystatechange = function() {
        if (xhr.readyState !== 4) {
          return;
        }
        if ($tabBootstrap_Utility.$isSuccessStatus(xhr)) {
          try {
            var json = $tabBootstrap_Utility.$parseJson(Object).call(null, xhr.responseText);
            callback(json);
          }
          catch ($t1) {
            var x = ss.Exception.wrap($t1);
            invokeError(x);
          }
        }
        else {
          invokeError(new ss.Exception('Unable to load ' + uri + '; status: ' + xhr.status));
        }
      };
      try {
        xhr.send(param);
      }
      catch ($t2) {
        var e = ss.Exception.wrap($t2);
        invokeError(e);
      }
    },
    $attachOneTimeMessageHandler: function Utility$AttachOneTimeMessageHandler(eventHandler) {
      var messageListener = null;
      messageListener = function(ev) {
        var e = ss.cast(ev, MessageEvent);
        if (eventHandler(e)) {
          if (ss.isValue(window.self.removeEventListener)) {
            window.removeEventListener('message', messageListener, false);
          }
          else {
            window.self.detachEvent('onmessage', messageListener);
          }
        }
      };
      if (ss.isValue(window.self.addEventListener)) {
        window.addEventListener('message', messageListener, false);
      }
      else {
        window.self.attachEvent('onmessage', messageListener);
      }
    },
    sendCommandWithContext: function Utility$SendCommandWithContext(commandName) {
      var success = false;
      var parameters = [];
      if (tsConfig.loadOrderID >= 0) {
        parameters.push(tsConfig.loadOrderID);
      }
      if (!ss.isNullOrEmptyString(tsConfig.apiID)) {
        if (tsConfig.loadOrderID < 0) {
          parameters.push(tsConfig.loadOrderID);
        }
        parameters.push(tsConfig.apiID);
      }
      var command = new $tab_NonApiCommand(commandName, parameters);
      success = $tabBootstrap_Utility.doPostMessage(command.serialize());
      return success;
    },
    doPostMessage: function Utility$DoPostMessage(message) {
      var success = false;
      if ('postMessage' in window) {
        try {
          window.parent.postMessage(message, '*');
          success = true;
        }
        catch ($t1) {
        }
      }
      return success;
    },
    $parseJson: function(T) {
      return function Utility$ParseJson(data) {
        if (ss.isNullOrUndefined(data) || typeof(data) !== 'string') {
          return ss.getDefaultValue(T);
        }
        data = data.trim();
        return JSON.parse(data);
      };
    },
    $getTopmostWindow: function Utility$GetTopmostWindow() {
      var win = window.self;
      while (ss.isValue(win.parent) && !ss.referenceEquals(win.parent, win)) {
        win = win.parent;
      }
      return win;
    },
    $isSuccessStatus: function Utility$IsSuccessStatus(xhr) {
      var status = (ss.isValue(xhr.status) ? xhr.status : 0);
      if (status >= 200 && status < 300 || status === 304 || status === 1223 || status === 0 && (window.location.protocol === 'file:' || window.location.protocol === 'chrome:')) {
        return true;
      }
      return false;
    },
    $invokeErrorDelegate: function Utility$InvokeErrorDelegate(xhr, errBack, e) {
      if (ss.staticEquals(errBack, null)) {
        return;
      }
      var invokeError = $tabBootstrap_Utility.$getInvokeErrorDelegate(xhr, errBack);
      invokeError(e);
    },
    $getInvokeErrorDelegate: function Utility$GetInvokeErrorDelegate(xhr, errBack) {
      return function(err) {
        var $t1 = err;
        if (ss.isNullOrUndefined($t1)) {
          $t1 = new Object();
        }
        err = $t1;
        err.status = xhr.status;
        err.responseText = xhr.responseText;
        errBack(err);
      };
    },
    shouldIgnoreScriptError: function Utility$ShouldIgnoreScriptError(message, error) {
      return BrowserSupport.BrowserSupport.IsEdgeIos() && message === 'Script error.' && ss.isNullOrUndefined(error);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.ViewerBootstrap
  var $tabBootstrap_ViewerBootstrap = global.tabBootstrap.ViewerBootstrap = ss.mkType($asm, 'tabBootstrap.ViewerBootstrap', function(apiResponder, vizBackendInitializer) {
    this.location = null;
    this.toolbarDisplayed = false;
    this.rid = 0;
    this.ts = 0;
    this.isVisibleRectCommunicationEnabled = false;
    this.apiResponder = null;
    this.authoringLeftAreaWidth = 0;
    this.rightAreaDrawerWidth = 0;
    this.clearSessionOnUnload = false;
    this.initialLayoutModel = null;
    this.initialLayoutError = null;
    this.secondaryResponses = null;
    this.bootstrapState = 1;
    this._onSuccess = null;
    this.$onSecondary = null;
    this._onError = null;
    this.$sessionBeingCleared = false;
    this.$deviceDetector = new $tabBootstrap_DeviceDetector();
    this.$vizBackendInitializer = null;
    this.$1$AffordancesField = null;
    this.$1$BootstrapRequestIdField = null;
    if (ss.isNullOrUndefined(vizBackendInitializer)) {
      throw new ss.ArgumentNullException('vizBackendInitializer');
    }
    this.$vizBackendInitializer = vizBackendInitializer;
    if (!tsConfig.isPublic && !tsConfig.toolbarvis) {
      tsConfig.blogURI = '';
      tsConfig.downloadURI = '';
    }
    this.toolbarDisplayed = tsConfig.toolbarContainerVis;
    this.ts = (new Date()).getTime();
    this.rid = 0;
    this.location = window.location;
    this.set_affordances(new $tabBootstrap_Affordances());
    tsConfig.showLytebox = ss.referenceEquals(window.self, window.top) && !ss.isNullOrEmptyString(tsConfig.primaryContentUrl) && !tsConfig.is_authoring;
    this.apiResponder = apiResponder || $tabBootstrap_ViewerBootstrap.$createApiResponder();
    this.$setupClearSessionOnBrowserUnload();
    this.$sessionBeingCleared = false;
    if (tsConfig.features['BrowserEverywhere_Hosting_Backend']) {
      tsConfig.is_desktop = ss.keyExists($tabBootstrap_UrlLocationHashManager.get_$urlLocationHashData(), ':desktop');
    }
    this.authoringLeftAreaWidth = $tabBootstrap_ViewerBootstrap.get_initialAuthoringLeftAreaWidth();
    if ($tabBootstrap_EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
      $tabBootstrap_Utility.$attachOneTimeMessageHandler(ss.mkdel(this, function(e) {
        var command = $tab_NonApiCommand.parse(e.data.toString());
        if (command.get_name() === 'tableau.enableVisibleRectCommunication') {
          this.isVisibleRectCommunicationEnabled = true;
          return true;
        }
        return false;
      }));
      $tabBootstrap_Utility.sendCommandWithContext('tableau.listening');
    }
    if (tsConfig.allow_commenting && $tabBootstrap_UrlLocationHashManager.get_urlLocationSearchParams()[':showComments'] === 'true' && tsConfig.commentingEnabled) {
      this.set_rightAreaDrawerWidth($tabBootstrap_VizLayoutConstants.rightAreaDrawerWidth);
    }
  }, {
    get_affordances: function ViewerBootstrap$get_Affordances() {
      return this.$1$AffordancesField;
    },
    set_affordances: function ViewerBootstrap$set_Affordances(value) {
      this.$1$AffordancesField = value;
    },
    get_hasBootstrapCompleted: function ViewerBootstrap$get_HasBootstrapCompleted() {
      return this.bootstrapState === 4 || this.bootstrapState === 5;
    },
    get_hasBootstrapSucceeded: function ViewerBootstrap$get_HasBootstrapSucceeded() {
      return this.bootstrapState === 4;
    },
    get_hasBootstrapFailed: function ViewerBootstrap$get_HasBootstrapFailed() {
      return this.bootstrapState === 5;
    },
    get_authoringLeftAreaWidth: function ViewerBootstrap$get_AuthoringLeftAreaWidth() {
      return (this.get_affordances().isOn('sidePane') ? this.authoringLeftAreaWidth : 0);
    },
    set_authoringLeftAreaWidth: function ViewerBootstrap$set_AuthoringLeftAreaWidth(value) {
      this.authoringLeftAreaWidth = value;
    },
    get_rightAreaDrawerWidth: function ViewerBootstrap$get_RightAreaDrawerWidth() {
      return this.rightAreaDrawerWidth;
    },
    set_rightAreaDrawerWidth: function ViewerBootstrap$set_RightAreaDrawerWidth(value) {
      this.rightAreaDrawerWidth = value;
    },
    get_sessionBeingCleared: function ViewerBootstrap$get_SessionBeingCleared() {
      return this.$sessionBeingCleared;
    },
    get_sizeConstraints: function ViewerBootstrap$get_SizeConstraints() {
      return $tabBootstrap_VizSizeConstraints.getSizeConstraints(this.get_deviceDetector().get_deviceLayoutPreference());
    },
    get_deviceDetector: function ViewerBootstrap$get_DeviceDetector() {
      return this.$deviceDetector;
    },
    get_bootstrapRequestId: function ViewerBootstrap$get_BootstrapRequestId() {
      return this.$1$BootstrapRequestIdField;
    },
    set_bootstrapRequestId: function ViewerBootstrap$set_BootstrapRequestId(value) {
      this.$1$BootstrapRequestIdField = value;
    },
    $setupClearSessionOnBrowserUnload: function ViewerBootstrap$SetupClearSessionOnBrowserUnload() {
      this.clearSessionOnUnload = tsConfig.clear_session_on_unload && !tsConfig.is_mobile_app;
      if (!this.clearSessionOnUnload) {
        return;
      }
      window.addEventListener('beforeunload', ss.mkdel(this, function() {
        this.$sessionBeingCleared = true;
        this.clearSession();
      }), false);
    },
    disableClearSessionOnBrowserUnload: function ViewerBootstrap$DisableClearSessionOnBrowserUnload() {
      this.clearSessionOnUnload = false;
    },
    waitOnInitialLayoutModel: function ViewerBootstrap$WaitOnInitialLayoutModel(successCallback, errorCallback, onSecondaryResponse) {
      if (this.get_hasBootstrapCompleted()) {
        errorCallback(null);
        return;
      }
      if (this.bootstrapState !== 3) {
        this._onSuccess = successCallback;
        this._onError = errorCallback;
        this.$onSecondary = onSecondaryResponse;
      }
      else {
        this._onError = errorCallback;
        this.$onSecondary = onSecondaryResponse;
        var model = this.initialLayoutModel;
        var err = this.initialLayoutError;
        if (ss.isValue(err) || ss.isNullOrUndefined(model)) {
          this.bootstrapState = 5;
          errorCallback(err);
        }
        else {
          successCallback(model);
          this.bootstrapState = 4;
          if (ss.isValue(onSecondaryResponse) && ss.isValue(this.secondaryResponses)) {
            for (var i = 0; i < this.secondaryResponses.length; i++) {
              onSecondaryResponse(this.secondaryResponses[i]);
            }
          }
        }
      }
    },
    $setPortSizeAndRequestInitialLayoutModelWhenNotified: function ViewerBootstrap$SetPortSizeAndRequestInitialLayoutModelWhenNotified() {
      var messageListener = null;
      messageListener = ss.mkdel(this, function(ev) {
        var e = ss.cast(ev, MessageEvent);
        var command = $tab_NonApiCommand.parse(e.data.toString());
        if (command.get_name() === 'tableau.bootstrap') {
          var bootstrapParams = this.$getBootstrapParams();
          this.$setPortSizeAndRequestInitialLayoutModel(bootstrapParams);
          window.removeEventListener('message', messageListener, false);
        }
      });
      window.addEventListener('message', messageListener, false);
    },
    $getBootstrapParams: function ViewerBootstrap$GetBootstrapParams() {
      var worksheetPortSize = this.getWebClientPortSize('worksheet');
      var dashboardPortSize = this.getWebClientPortSize('dashboard');
      var bootstrapParams = $tabBootstrap_$BootstrapRequestBuilder.$createBootstrapParams(this.get_deviceDetector().get_clientDimension());
      return { worksheetPortSize: worksheetPortSize, dashboardPortSize: dashboardPortSize, otherParameters: bootstrapParams };
    },
    bootstrapRecoverSession: function ViewerBootstrap$BootstrapRecoverSession(sessionId, sessionStateIds) {
      this.get_deviceDetector().$detectDeviceType();
      var bootstrapParams = this.$getBootstrapParams();
      bootstrapParams.otherParameters[':recover_old_session_id'] = sessionId;
      bootstrapParams.otherParameters[':recover_session_state_tickets'] = ss.arrayFromEnumerable(sessionStateIds).join(',');
      this.$setPortSizeAndRequestInitialLayoutModel(bootstrapParams);
    },
    bootstrap: function ViewerBootstrap$Bootstrap() {
      if ($tabBootstrap_IOS13MobileRedirectWorkaround.redirectIfNeeded()) {
        return;
      }
      this.get_deviceDetector().$detectDeviceType();
      if (tsConfig.bootstrapWhenNotified && $tabBootstrap_EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
        this.$setPortSizeAndRequestInitialLayoutModelWhenNotified();
      }
      else {
        var performBootstrap = ss.mkdel(this, function() {
          var bootstrapParams = this.$getBootstrapParams();
          this.$setPortSizeAndRequestInitialLayoutModel(bootstrapParams);
        });
        if (window.innerHeight === 0 || window.innerWidth === 0) {
          window.requestAnimationFrame(function(_) {
            performBootstrap();
          });
        }
        else {
          performBootstrap();
        }
      }
      this.$sendInitialSizeToApi();
    },
    $setPortSizeAndRequestInitialLayoutModel: function ViewerBootstrap$SetPortSizeAndRequestInitialLayoutModel(bootstrapParameters) {
      this.rid++;
      var staticImageElement = document.getElementById('staticImage');
      if (tsConfig.bootstrapOnMouseover) {
        this.scaleImageToFit(staticImageElement);
      }
      var uri = $tabBootstrap_BaseUrlFormatter.formatBootstrapSessionMethod('bootstrapSession', tsConfig.sessionid, null);
      var responseId = this.rid;
      var mc = $tabBootstrap_MetricsController.createContext('BTSTRP'.toString(), 2, null);
      var onInitial = ss.mkdel(this, function(jsonResponse, requestContext) {
        if (ss.isValue(requestContext)) {
          mc.set_clientEventId(requestContext.requestId);
          this.set_bootstrapRequestId(requestContext.requestId);
        }
        mc.dispose();
        jsonResponse.rid = responseId;
        if (ss.isValue(this._onSuccess)) {
          this._onSuccess(jsonResponse);
          this.bootstrapState = 4;
        }
        else {
          this.bootstrapState = 3;
        }
        this.markInitialLayoutModelAsFinished(jsonResponse, null);
      });
      var onSecondaryAction = ss.mkdel(this, function(jsonResponse1) {
        if (!ss.staticEquals(this.$onSecondary, null)) {
          this.$onSecondary(jsonResponse1);
        }
        else {
          this.appendSecondaryResponse(jsonResponse1);
        }
      });
      var onErr = ss.mkdel(this, function(err) {
        if (ss.isValue(this._onError)) {
          this.bootstrapState = 5;
          this._onError(err);
        }
        else {
          this.bootstrapState = 3;
        }
        this.markInitialLayoutModelAsFinished(null, err);
        mc.dispose();
      });
      var bootstrap = ss.mkdel(this, function() {
        this.bootstrapState = 2;
        $tabBootstrap_MetricsController.$updateCurrentBootstrapRequestStartTime($tabBootstrap_MetricsController.getTiming());
        this.$vizBackendInitializer.initialize(uri, bootstrapParameters, onInitial, onSecondaryAction, onErr);
      });
      if (!tsConfig.bootstrapOnMouseover) {
        bootstrap();
        return;
      }
      var spinnerGlassElement = document.getElementById('initializing_thin_client');
      this.hideLoadIndicators(spinnerGlassElement, staticImageElement);
      var showLoadIndicatorsAndBootstrap = ss.mkdel(this, function() {
        this.showLoadIndicators(spinnerGlassElement, staticImageElement);
        bootstrap();
      });
      if (ss.isValue(staticImageElement)) {
        staticImageElement.addEventListener('mouseover', $tabBootstrap_ViewerBootstrap.makeOneTimeListener(showLoadIndicatorsAndBootstrap), false);
      }
    },
    showLyteboxIfNeeded: function ViewerBootstrap$ShowLyteboxIfNeeded() {
      if (tsConfig.showLytebox) {
        document.getElementById('primaryContent').style.display = 'block';
        document.getElementById('primaryContentLink').style.display = '';
        document.getElementById('centeringContainer').className = 'lyteboxed';
        document.getElementById('lyteboxClose').style.display = 'block';
        document.body.className += ' lyteboxed';
      }
    },
    getViewport: function ViewerBootstrap$GetViewport() {
      if (tsConfig.is_mobile && !tsConfig.embedded) {
        return $tabBootstrap_EmbedAndViewportCalculator.$getNonEmbeddedMobileViewport();
      }
      return (!tsConfig.is_mobile ? $tabBootstrap_EmbedAndViewportCalculator.$getWindowSize() : $tabBootstrap_EmbedAndViewportCalculator.$getViewport());
    },
    $sendInitialSizeToApi: function ViewerBootstrap$SendInitialSizeToApi() {
      var compositeSize = this.get_sizeConstraints();
      var $t1 = new Object();
      $t1.maxHeight = compositeSize.maxHeight;
      $t1.maxWidth = compositeSize.maxWidth;
      $t1.minHeight = compositeSize.minHeight;
      $t1.minWidth = compositeSize.minWidth;
      var sizeConstraints = $t1;
      var $t2 = new Object();
      $t2.sizeConstraints = sizeConstraints;
      $t2.chromeHeight = this.chromeMetricsForViewingOnly().h;
      var sizeForJsApi = $t2;
      this.apiResponder.sendEventNotification('api.FirstVizSizeKnownEvent', null, JSON.stringify(sizeForJsApi));
    },
    getWebClientDashboardContainerSize: function ViewerBootstrap$GetWebClientDashboardContainerSize(sheetType) {
      var v = this.getViewport();
      var chromeMetrics = this.chromeMetrics(sheetType);
      v.h -= chromeMetrics.h;
      v.w -= chromeMetrics.w;
      return this.adjustForMinMaxDashboardSizes(v);
    },
    getVizClientContainerSize: function ViewerBootstrap$GetVizClientContainerSize(sheetType) {
      var vizClientContainerSize = this.getWebClientDashboardContainerSize(sheetType);
      vizClientContainerSize.h += $tabBootstrap_VizLayoutConstants.get_tabsHeight() + $tabBootstrap_VizLayoutConstants.get_displayToolbarHeight();
      return vizClientContainerSize;
    },
    getWebClientPortSize: function ViewerBootstrap$GetWebClientPortSize(sheetType) {
      var contentSize = this.getWebClientDashboardContainerSize(sheetType);
      if (sheetType === 'dashboard' && ss.isValue(tsConfig.features) && tsConfig.is_authoring) {
        contentSize.h -= $tabBootstrap_VizLayoutConstants.get_authoringGutter().top + $tabBootstrap_VizLayoutConstants.get_authoringGutter().bottom;
        contentSize.w -= $tabBootstrap_VizLayoutConstants.get_authoringGutter().left + $tabBootstrap_VizLayoutConstants.get_authoringGutter().right;
      }
      return this.adjustForMinMaxDashboardSizes(contentSize);
    },
    adjustForMinMaxDashboardSizes: function ViewerBootstrap$AdjustForMinMaxDashboardSizes(v) {
      var compositeSize = this.get_sizeConstraints();
      var minw = compositeSize.minWidth;
      var maxw = compositeSize.maxWidth;
      if (minw !== 0 && v.w < minw) {
        v.w = minw;
      }
      else if (maxw !== 0 && v.w > maxw) {
        v.w = maxw;
      }
      else if (tsConfig.showLytebox) {
        v.w = tsConfig.lyteboxedVizWidth;
      }
      var minh = compositeSize.minHeight;
      if (minh !== 0 && v.h < minh) {
        v.h = minh;
      }
      else {
        var maxh = compositeSize.maxHeight;
        if (maxh !== 0 && v.h > maxh) {
          v.h = maxh;
        }
      }
      return v;
    },
    chromeMetrics: function ViewerBootstrap$ChromeMetrics(sheetType) {
      var h = 0;
      var w = 0;
      if (this.toolbarDisplayed) {
        h += $tabBootstrap_VizLayoutConstants.get_vizToolbarHeight();
      }
      h += $tabBootstrap_VizLayoutConstants.get_authoringToolbarHeight();
      h += $tabBootstrap_VizLayoutConstants.get_authoringMenuBarHeight();
      h += $tabBootstrap_VizLayoutConstants.get_authoringTabsHeight();
      h += $tabBootstrap_VizLayoutConstants.get_tabsHeight();
      if (!tsConfig.is_mobile) {
        h += 2 * $tabBootstrap_VizLayoutConstants.get_authoringVizBorderWidth();
        w += 2 * $tabBootstrap_VizLayoutConstants.get_authoringVizBorderWidth();
      }
      if (sheetType === 'worksheet') {
        h += $tabBootstrap_VizLayoutConstants.get_authoringShelfHeight();
        w += $tabBootstrap_VizLayoutConstants.get_authoringShelfWidth();
        w += this.get_authoringLeftAreaWidth();
        if (!tsConfig.is_mobile) {
          h += $tabBootstrap_VizLayoutConstants.get_authoringVizMargin();
          w += $tabBootstrap_VizLayoutConstants.get_authoringVizMargin();
        }
      }
      else if (sheetType === 'dashboard' || sheetType === 'story') {
        w += this.get_authoringLeftAreaWidth();
      }
      w += this.get_rightAreaDrawerWidth();
      return { w: w, h: h };
    },
    getWebClientContentSizeForViewingOnly: function ViewerBootstrap$GetWebClientContentSizeForViewingOnly() {
      var v = this.getViewport();
      var chromeMetrics = this.chromeMetricsForViewingOnly();
      v.h -= chromeMetrics.h;
      v.w -= chromeMetrics.w;
      return this.adjustForMinMaxDashboardSizes(v);
    },
    chromeMetricsForViewingOnly: function ViewerBootstrap$ChromeMetricsForViewingOnly() {
      var h = 0;
      if (this.toolbarDisplayed) {
        h += $tabBootstrap_VizLayoutConstants.get_vizToolbarHeight();
      }
      h += $tabBootstrap_VizLayoutConstants.get_tabsHeight();
      return { w: 0, h: h };
    },
    showLoadIndicators: function ViewerBootstrap$ShowLoadIndicators(spinnerGlassElement, staticImageElement) {
      if (ss.isValue(spinnerGlassElement)) {
        spinnerGlassElement.style.display = 'block';
      }
      if (ss.isValue(staticImageElement)) {
        staticImageElement.style.cursor = 'wait';
      }
    },
    hideLoadIndicators: function ViewerBootstrap$HideLoadIndicators(spinnerGlassElement, staticImageElement) {
      if (!ss.isNullOrUndefined(spinnerGlassElement)) {
        spinnerGlassElement.style.display = 'none';
      }
      if (!ss.isNullOrUndefined(staticImageElement)) {
        staticImageElement.style.cursor = 'default';
      }
    },
    clearSession: function ViewerBootstrap$ClearSession() {
      if (!this.clearSessionOnUnload) {
        return;
      }
      var uri = $tabBootstrap_BaseUrlFormatter.formatBootstrapSessionMethod('clear', tsConfig.sessionid, null);
      var noOp = function(_) {
      };
      $tabBootstrap_Utility.$xhrPostJson(uri, null, noOp, noOp, false);
    },
    markInitialLayoutModelAsFinished: function ViewerBootstrap$MarkInitialLayoutModelAsFinished(model, err) {
      this.initialLayoutError = err;
      this.initialLayoutModel = model;
      delete this['_onSuccess'];
    },
    appendSecondaryResponse: function ViewerBootstrap$AppendSecondaryResponse(jsonResponse) {
      if (ss.isValue(this.secondaryResponses)) {
        this.secondaryResponses.push(jsonResponse);
      }
      else {
        this.secondaryResponses = [jsonResponse];
      }
    },
    scaleImageToFit: function ViewerBootstrap$ScaleImageToFit(staticImageElement) {
      var staticmageUri = staticImageElement.style.backgroundImage.replace(new RegExp('"', 'g'), '').replace(new RegExp('url\\((.*)\\)', 'gi'), '$1');
      var $t1 = document.createElement('img');
      var imageElement = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'IMG'));
      var fitImage = ss.mkdel(this, function() {
        var portSize = this.getWebClientContentSizeForViewingOnly();
        var chromeMetrics = this.chromeMetricsForViewingOnly();
        var targetSize = { w: portSize.w + chromeMetrics.w - parseInt(staticImageElement.style.left, 10), h: portSize.h + chromeMetrics.h - parseInt(staticImageElement.style.top, 10) };
        if (ss.idiv(targetSize.h, imageElement.height) < ss.idiv(targetSize.w, imageElement.width)) {
          var w = Math.round(targetSize.h * imageElement.width / imageElement.height);
          staticImageElement.style.backgroundSize = w + 'px ' + targetSize.h + 'px';
        }
        else {
          var h = Math.round(targetSize.w * imageElement.height / imageElement.width);
          staticImageElement.style.backgroundSize = targetSize.w + 'px ' + h + 'px';
        }
      });
      imageElement.addEventListener('load', fitImage, false);
      var resetBootstrapOnMouseOver = function() {
        tsConfig.bootstrapOnMouseover = false;
        if (ss.isNullOrUndefined(staticImageElement)) {
          return;
        }
        if (ss.isValue(staticImageElement.dispatchEvent)) {
          var evt = document.createEvent('MouseEvents');
          evt.initMouseEvent('mouseover', true, true, window.self, null, 0, 0, 0, 0, false, false, false, false, null, null);
          staticImageElement.dispatchEvent(evt);
        }
        else if (ss.isValue(staticImageElement['fireEvent'])) {
          staticImageElement['fireEvent']('onmouseover');
        }
      };
      imageElement.addEventListener('error', resetBootstrapOnMouseOver, false);
      imageElement.src = staticmageUri;
    }
  }, {
    get_instance: function ViewerBootstrap$get_Instance() {
      return $tabBootstrap_ViewerBootstrap._instance = $tabBootstrap_ViewerBootstrap._instance || new $tabBootstrap_ViewerBootstrap($tabBootstrap_ViewerBootstrap.$createApiResponder(), $tabBootstrap_WorkbookSessionRegistration.get_vizBackendInitializer());
    },
    get_initialAuthoringLeftAreaWidth: function ViewerBootstrap$get_InitialAuthoringLeftAreaWidth() {
      return ((tsConfig.is_authoring && !tsConfig.is_mobile) ? 200 : 0);
    },
    resetInstance: function ViewerBootstrap$ResetInstance() {
      $tabBootstrap_ViewerBootstrap._instance = null;
    },
    makeOneTimeListener: function ViewerBootstrap$MakeOneTimeListener(f) {
      var called = false;
      return function(e) {
        if (called) {
          return;
        }
        called = true;
        f(e);
      };
    },
    $createApiResponder: function ViewerBootstrap$CreateApiResponder() {
      if (tsConfig.is_mobile_app) {
        return new $tabBootstrap_ApiNativeHostResponder(null);
      }
      else {
        return new $tabBootstrap_ApiCrossDomainResponder();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.VizLayoutConstants
  var $tabBootstrap_VizLayoutConstants = global.tabBootstrap.VizLayoutConstants = ss.mkType($asm, 'tabBootstrap.VizLayoutConstants', null, null, {
    get_vizToolbarHeight: function VizLayoutConstants$get_VizToolbarHeight() {
      return $tabBootstrap_VizLayoutConstants.toolbarHeight;
    },
    get_displayToolbarHeight: function VizLayoutConstants$get_DisplayToolbarHeight() {
      return ($tabBootstrap_ViewerBootstrap.get_instance().toolbarDisplayed ? $tabBootstrap_VizLayoutConstants.get_vizToolbarHeight() : 0);
    },
    get_shouldShowTabs: function VizLayoutConstants$get_ShouldShowTabs() {
      return tsConfig.showTabs;
    },
    get_tabsHeight: function VizLayoutConstants$get_TabsHeight() {
      if (tsConfig.is_authoring) {
        return 0;
      }
      return ($tabBootstrap_VizLayoutConstants.get_shouldShowTabs() ? $tabBootstrap_VizLayoutConstants.tabsHeightPx : 0);
    },
    get_authoringToolbarHeight: function VizLayoutConstants$get_AuthoringToolbarHeight() {
      if (!tsConfig.is_authoring || tsConfig.is_desktop) {
        return 0;
      }
      return (tsConfig.is_mobile ? 44 : 40);
    },
    get_authoringMenuBarHeight: function VizLayoutConstants$get_AuthoringMenuBarHeight() {
      if (!tsConfig.is_authoring || tsConfig.is_desktop) {
        return 0;
      }
      else {
        return (tsConfig.is_mobile_app ? $tabBootstrap_VizLayoutConstants.$authoringMenuHeightMobileApp : $tabBootstrap_VizLayoutConstants.$authoringMenuHeight);
      }
    },
    get_authoringTabsHeight: function VizLayoutConstants$get_AuthoringTabsHeight() {
      var tabAreaHeight = 48;
      return ((tsConfig.is_authoring && !tsConfig.is_desktop) ? tabAreaHeight : 0);
    },
    get_authoringVizBorderWidth: function VizLayoutConstants$get_AuthoringVizBorderWidth() {
      return ((tsConfig.is_authoring && tsConfig.current_sheet_type !== 'worksheet') ? 1 : 0);
    },
    get_authoringShelfWidth: function VizLayoutConstants$get_AuthoringShelfWidth() {
      return (tsConfig.is_authoring ? (tsConfig.is_mobile ? 50 : (185 + 5)) : 0);
    },
    get_authoringShelfHeight: function VizLayoutConstants$get_AuthoringShelfHeight() {
      if (tsConfig.is_metrics_authoring) {
        return 0;
      }
      return (tsConfig.is_authoring ? (tsConfig.is_mobile ? 0 : 68) : 0);
    },
    get_authoringVizMargin: function VizLayoutConstants$get_AuthoringVizMargin() {
      return (tsConfig.is_authoring ? 6 : 0);
    },
    get_authoringGutter: function VizLayoutConstants$get_AuthoringGutter() {
      return { top: 0, left: 6, bottom: 6, right: 15 };
    },
    get_authoringDevicePreviewBarHeight: function VizLayoutConstants$get_AuthoringDevicePreviewBarHeight() {
      return 40;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.VizSizeConstraints
  var $tabBootstrap_VizSizeConstraints = global.tabBootstrap.VizSizeConstraints = ss.mkType($asm, 'tabBootstrap.VizSizeConstraints', null, null, {
    getSizeConstraints: function VizSizeConstraints$GetSizeConstraints(layout) {
      if (tsConfig.is_authoring) {
        var $t1 = new Object();
        $t1.minWidth = 0;
        $t1.minHeight = 0;
        $t1.maxWidth = 0;
        $t1.maxHeight = 0;
        return $t1;
      }
      else if (tsConfig.showTabs || tsConfig.showLytebox) {
        return tsConfig.composite_sizes[layout.toString()];
      }
      else {
        var sheetName = (ss.isNullOrEmptyString(tsConfig.current_sheet_name) ? decodeURIComponent(tsConfig.sheetId) : tsConfig.current_sheet_name.toString());
        if (ss.keyExists(tsConfig.view_sizes, sheetName)) {
          return tsConfig.view_sizes[sheetName][layout.toString()];
        }
      }
      var $t2 = new Object();
      $t2.minWidth = 0;
      $t2.minHeight = 0;
      $t2.maxWidth = 0;
      $t2.maxHeight = 0;
      return $t2;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.VizBackendInitializer.WebVizBackendInitializer
  var $tabBootstrap_WebVizBackendInitializer = global.tabBootstrap.WebVizBackendInitializer = ss.mkType($asm, 'tabBootstrap.WebVizBackendInitializer', function() {
  }, {
    initialize: function WebVizBackendInitializer$Initialize(uri, parameters, onInitial, onSecondary, onError) {
      var queryParams = $tabBootstrap_WebVizBackendInitializer.$constructQueryString(parameters);
      $tabBootstrap_Utility.xhrPostJsonChunked(uri, queryParams, onInitial, onSecondary, onError, true);
    }
  }, {
    $constructQueryString: function WebVizBackendInitializer$ConstructQueryString(parameters) {
      var escapedPairs = [];
      escapedPairs.push($tabBootstrap_WebVizBackendInitializer.$escapeKeyValuePair('worksheetPortSize', parameters.worksheetPortSize));
      escapedPairs.push($tabBootstrap_WebVizBackendInitializer.$escapeKeyValuePair('dashboardPortSize', parameters.dashboardPortSize));
      var $t1 = new ss.ObjectEnumerator(parameters.otherParameters);
      try {
        while ($t1.moveNext()) {
          var otherParameter = $t1.current();
          var escapedPair = $tabBootstrap_WebVizBackendInitializer.$escapeKeyValuePair(otherParameter.key, otherParameter.value);
          escapedPairs.push(escapedPair);
        }
      }
      finally {
        $t1.dispose();
      }
      var fullQueryParams = escapedPairs.join('&');
      return fullQueryParams;
    },
    $escapeKeyValuePair: function WebVizBackendInitializer$EscapeKeyValuePair(key, value) {
      var serializedValue = ((typeof(value) === 'string') ? value : JSON.stringify(value));
      var escapedPair = encodeURIComponent(key) + '=' + encodeURIComponent(serializedValue);
      return escapedPair;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.VizBackendInitializer.WorkbookSessionRegistration
  var $tabBootstrap_WorkbookSessionRegistration = global.tabBootstrap.WorkbookSessionRegistration = ss.mkType($asm, 'tabBootstrap.WorkbookSessionRegistration', null, null, {
    get_vizBackendInitializer: function WorkbookSessionRegistration$get_VizBackendInitializer() {
      return $tabBootstrap_WorkbookSessionRegistration.$createWorkbookSession();
    },
    $createWorkbookSession: function WorkbookSessionRegistration$CreateWorkbookSession() {
      var sessionInitializer;
      if (ss.isValue($tabBootstrap_WorkbookSessionService.get_instance())) {
        sessionInitializer = new $tabBootstrap_DesktopVizBackendInitializer($tabBootstrap_WorkbookSessionService.get_instance());
      }
      else if (ss.isValue(tsConfig.offlineBootstrapResponse)) {
        sessionInitializer = new $tabBootstrap_OfflineVizBackendInitializer(tsConfig.offlineBootstrapResponse);
      }
      else {
        sessionInitializer = new $tabBootstrap_WebVizBackendInitializer();
      }
      return sessionInitializer;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Bootstrap.WorkbookSessionService
  var $tabBootstrap_WorkbookSessionService = global.tabBootstrap.WorkbookSessionService = ss.mkType($asm, 'tabBootstrap.WorkbookSessionService', null, null, {
    get_instance: function WorkbookSessionService$get_Instance() {
      return window.window['WorkbookSessionService'];
    }
  });
  ss.initClass($tab__ApiCommand);
  ss.initClass($tab__ApiServerNotification);
  ss.initClass($tab__ApiServerResultParser);
  ss.initClass($tab_NonApiCommand);
  ss.initClass($tabBootstrap_$AffordanceSetLookup);
  ss.initClass($tabBootstrap_$BootstrapRequestBuilder);
  ss.initClass($tabBootstrap_$DojoConfigInitializer);
  ss.initClass($tabBootstrap_MetricsContext, null, [ss.IDisposable]);
  $tabBootstrap_MetricsContext.$ctor1.prototype = $tabBootstrap_MetricsContext.prototype;
  ss.initClass($tabBootstrap_$LocalMetricsContext, $tabBootstrap_MetricsContext, [ss.IDisposable]);
  ss.initClass($tabBootstrap_$LocalWebClientMetricsLogger);
  ss.initClass($tabBootstrap_$NullMetricsContext, $tabBootstrap_MetricsContext, [ss.IDisposable]);
  ss.initClass($tabBootstrap_$ViewerInitializer);
  ss.initClass($tabBootstrap_Affordances);
  ss.initClass($tabBootstrap_ApiCommandResponder);
  ss.initClass($tabBootstrap_ApiCrossDomainResponder, $tabBootstrap_ApiCommandResponder);
  ss.initClass($tabBootstrap_ApiNativeHostResponder, $tabBootstrap_ApiCommandResponder);
  ss.initClass($tabBootstrap_BaseUrlFormatter);
  ss.initClass($tabBootstrap_CommandNameBuilder);
  ss.initClass($tabBootstrap_CommandResponseHandler);
  ss.initClass($tabBootstrap_DesktopVizBackendInitializer);
  ss.initClass($tabBootstrap_DeviceDetector);
  ss.initClass($tabBootstrap_DisableAffordanceSet);
  ss.initClass($tabBootstrap_EmbedAndViewportCalculator);
  ss.initClass($tabBootstrap_IOS13MobileRedirectWorkaround);
  ss.initClass($tabBootstrap_MapboxGLSupport);
  ss.initClass($tabBootstrap_Metric, Object);
  ss.initClass($tabBootstrap_MetricsController);
  ss.initClass($tabBootstrap_MetricsEvent);
  ss.initClass($tabBootstrap_NavigationInfo);
  ss.initClass($tabBootstrap_OfflineVizBackendInitializer);
  ss.initClass($tabBootstrap_PerformanceReporting);
  ss.initClass($tabBootstrap_RenderingConstantsAndHelpers);
  ss.initClass($tabBootstrap_UrlLocationHashManager);
  ss.initClass($tabBootstrap_Utility);
  ss.initClass($tabBootstrap_ViewerBootstrap);
  ss.initClass($tabBootstrap_VizLayoutConstants);
  ss.initClass($tabBootstrap_VizSizeConstraints);
  ss.initClass($tabBootstrap_WebVizBackendInitializer);
  ss.initClass($tabBootstrap_WorkbookSessionRegistration);
  ss.initClass($tabBootstrap_WorkbookSessionService);
  ss.setMetadata($tabBootstrap_MetricsSuites, { enumFlags: true });
  (function() {
    $tab__ApiCommand.crossDomainEventNotificationId = 'xdomainSourceId';
    $tab__ApiCommand.lastRequestMessage = null;
    $tab__ApiCommand.lastResponseMessage = null;
    $tab__ApiCommand.lastClientInfoResponseMessage = null;
    $tab__ApiCommand.$nextCommandId = 0;
  })();
  (function() {
    $tabBootstrap_MapboxGLSupport.$notSupportedReason = $tabBootstrap_MapboxGLSupport.$initNotSupportedReason();
  })();
  (function() {
    $tabBootstrap_PerformanceReporting.supportsPerfApi = false;
    var windowAsDynamic = window.window;
    $tabBootstrap_PerformanceReporting.supportsPerfApi = !!(ss.isValue(windowAsDynamic['performance']) && ss.isValue(windowAsDynamic['performance']['mark']));
  })();
  (function() {
    $tabBootstrap_$NullMetricsContext.$instance = null;
  })();
  (function() {
    $tabBootstrap_$LocalMetricsContext.$eventCount = 0;
  })();
  (function() {
    $tabBootstrap_$LocalWebClientMetricsLogger.$appStartMarker = 'AppStartEpochMarker';
  })();
  (function() {
    $tabBootstrap_MetricsController.$fullMetricNameLookup = ss.mkdict(['BTSTRP', 'Bootstrap Request', 'PROPRI', 'Process Primary Payload', 'PROSEC', 'Process Secondary Payload', 'MDLINI', 'Initialize Models', 'MDLEVT', 'Handle Model Events', 'EXELOC', 'Execute Local Command', 'EXEREM', 'Execute Remote Command', 'PROLOC', 'Process Local Command Response', 'PROREM', 'Process Remote Command Response', 'RNDRPT', 'Render Panetable', 'RNDRRG', 'Render Region', 'RTCONV', 'Runtime model presmodel conversion', 'CLNTLD', 'Client Loaded', 'APPSTR', 'Application Startup', 'APPINT', 'Application Interactive', 'ALLZNS', 'All Zones Loaded', 'ADJAZN', 'Adjusted All Zones Loaded', 'TBRLAY', 'Toolbar Layout', 'TBRHNT', 'Toolbar HandleNewToolbar', 'TBRADD', 'Toolbar AddToolbar', 'TBRHRE', 'Toolbar HandleResize', 'MDLOAD', 'Load js async', 'EMLOAD', 'Emscripten load', 'RTLOAD', 'Runtime load', 'RTLPRC', 'Runtime command local processing']);
    $tabBootstrap_MetricsController.getTiming = null;
    $tabBootstrap_MetricsController.recordingStart = 0;
    $tabBootstrap_MetricsController.$reportLocalMetrics = false;
    $tabBootstrap_MetricsController.$suiteNameLookup = null;
    $tabBootstrap_MetricsController.$appStartEpoch = 0;
    $tabBootstrap_MetricsController.$currentBootstrapRequestStartTime = 0;
    $tabBootstrap_MetricsController.$instance = null;
    $tabBootstrap_MetricsController.$commandContextIdStack = [];
    $tabBootstrap_MetricsController.$commandContextIdStackMaxSize = 5;
    $tabBootstrap_MetricsController.$localEventLogger = new $tabBootstrap_$LocalWebClientMetricsLogger();
    $tabBootstrap_MetricsController.$reportLocalMetrics = $tabBootstrap_PerformanceReporting.supportsPerfApi;
    $tabBootstrap_MetricsController.recordingStart = (new Date()).getTime();
    if (ss.isValue(window) && ss.isValue(window.self.performance) && ss.isValue(window.self.performance['now'])) {
      var epoch;
      if (ss.isValue(window.self.performance.timing)) {
        epoch = window.self.performance.timing.responseStart - window.self.performance.timing.navigationStart;
      }
      else {
        epoch = 0;
      }
      $tabBootstrap_MetricsController.getTiming = function() {
        return window.self.performance.now() - epoch;
      };
    }
    else {
      var pageNavigationEpoch = (new Date()).getTime();
      $tabBootstrap_MetricsController.getTiming = function() {
        return (new Date()).getTime() - pageNavigationEpoch;
      };
    }
    $tabBootstrap_MetricsController.$appStartEpoch = $tabBootstrap_MetricsController.getTiming();
    if ($tabBootstrap_MetricsController.$reportLocalMetrics) {
      $tabBootstrap_$LocalWebClientMetricsLogger.$markAppStart();
    }
    $tabBootstrap_MetricsController.$suiteNameLookup = {};
    $tabBootstrap_MetricsController.$suiteNameLookup['none'] = 0;
    $tabBootstrap_MetricsController.$suiteNameLookup['navigation'] = 1;
    $tabBootstrap_MetricsController.$suiteNameLookup['bootstrap'] = 2;
    $tabBootstrap_MetricsController.$suiteNameLookup['rendering'] = 16;
    $tabBootstrap_MetricsController.$suiteNameLookup['commands'] = 4;
    $tabBootstrap_MetricsController.$suiteNameLookup['toolbar'] = 64;
    $tabBootstrap_MetricsController.$suiteNameLookup['hittest'] = 256;
    $tabBootstrap_MetricsController.$suiteNameLookup['debug'] = 32;
    $tabBootstrap_MetricsController.$suiteNameLookup['fonts'] = 128;
    $tabBootstrap_MetricsController.$suiteNameLookup['maps'] = 512;
    $tabBootstrap_MetricsController.$suiteNameLookup['exporting'] = 1024;
    $tabBootstrap_MetricsController.$suiteNameLookup['min'] = 3;
    $tabBootstrap_MetricsController.$suiteNameLookup['core'] = 15;
    $tabBootstrap_MetricsController.$suiteNameLookup['all'] = 65535;
  })();
  (function() {
    $tabBootstrap_UrlLocationHashManager.CLIENTNO = 'cn';
  })();
  (function() {
    $tabBootstrap_EmbedAndViewportCalculator.$embedModeVar = null;
    $tabBootstrap_EmbedAndViewportCalculator.$embedModeVar = $tabBootstrap_EmbedAndViewportCalculator.$calculateEmbedMode();
  })();
  (function() {
    $tabBootstrap_NavigationInfo.$navTypeKey = 'navType';
    $tabBootstrap_NavigationInfo.$navSrcKey = 'navSrc';
  })();
  (function() {
    $tabBootstrap_RenderingConstantsAndHelpers.transparentLineMarkLimit = 1200;
  })();
  (function() {
    $tabBootstrap_DeviceDetector.$deviceTypeLookup = ss.mkdict(['phone', 'phone', 'tablet', 'tablet', 'desktop', 'desktop', 'default', 'default']);
  })();
  (function() {
    $tabBootstrap_$DojoConfigInitializer.$dojoLocale = 'en-us';
  })();
  (function() {
    window.onerror = ss.delegateCombine(window.onerror, function(message, source, lineno, column, error) {
      return $tabBootstrap_$ViewerInitializer.$globalErrorHandler(message, error);
    });
    $tabBootstrap_$ViewerInitializer.$parseTsConfig();
    $tabBootstrap_$DojoConfigInitializer.$configureDojo();
  })();
  (function() {
    $tabBootstrap_IOS13MobileRedirectWorkaround.mobilE_PARAM = 'mobile';
    $tabBootstrap_IOS13MobileRedirectWorkaround.coloN_MOBILE_PARAM = ':mobile';
  })();
  (function() {
    $tabBootstrap_ViewerBootstrap._instance = null;
  })();
  (function() {
    $tabBootstrap_VizLayoutConstants.toolbarHeight = 27;
    $tabBootstrap_VizLayoutConstants.tabsHeightPx = 23;
    $tabBootstrap_VizLayoutConstants.rightAreaDrawerWidth = 320;
    $tabBootstrap_VizLayoutConstants.$authoringMenuHeight = 60;
    $tabBootstrap_VizLayoutConstants.$authoringMenuHeightMobileApp = 44;
  })();
})();

var viewerBootstrap = tabBootstrap.ViewerBootstrap.get_instance();
viewerBootstrap.bootstrap();
viewerBootstrap.showLyteboxIfNeeded();

})();

// END Bootstrap
