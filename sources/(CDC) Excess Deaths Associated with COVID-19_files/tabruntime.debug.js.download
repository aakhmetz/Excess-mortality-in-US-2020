/*! BEGIN TableauRuntime */

(function() {
  'dont use strict';
  var $asm = {};
  global.tab = global.tab || {};
  ss.initAssembly($asm, 'tabruntime');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.ObjectBuilder
  var $tab_$ObjectBuilder = ss.mkType($asm, 'tab.$ObjectBuilder', function(marshaller) {
    this.$integerOffset = 0;
    this.$doubleOffset = 0;
    this.$opcodeOffset = 0;
    this.$inObject = new Array();
    this.$objects = new Array();
    this.$arrays = new Array();
    this.$marshaller = null;
    this.$baseObject = null;
    this.$marshaller = marshaller;
    this.$inObject.push(true);
    this.$baseObject = {};
    this.$objects.push(this.$baseObject);
    this.$arrays.push([]);
  }, {
    $buildObject: function ObjectBuilder$BuildObject() {
      var opcode_len = this.$marshaller.data.opCodes.length;
      this.$opcodeOffset = 0;
      while (this.$opcodeOffset < opcode_len) {
        var type = this.$marshaller.data.opCodes[this.$opcodeOffset];
        if (3 === type) {
          this.$handleEndContainer();
        }
        else {
          this.$handleAdditiveOpcode(type);
        }
        ++this.$opcodeOffset;
      }
      if ($tab_$ObjectBuilder.$useWriteDetector) {
        var rop = new tab.ReadOnlyProxy();
        this.$baseObject = rop.instrument(this.$baseObject);
      }
      return this.$baseObject;
    },
    $handleConstVector: function ObjectBuilder$HandleConstVector(vecType) {
      var val = null;
      if (vecType === 5) {
        val = this.$marshaller.data.intBuffer[this.$integerOffset++];
      }
      else if (vecType === 4) {
        val = this.$marshaller.data.doubleBuffer[this.$doubleOffset++];
      }
      else if (vecType === 6) {
        val = true;
      }
      else if (vecType === 7) {
        val = false;
      }
      var arr = [];
      var len = this.$marshaller.data.intBuffer[this.$integerOffset++];
      for (var i = 0; i < len; ++i) {
        arr[i] = val;
      }
      return arr;
    },
    $handleEndContainer: function ObjectBuilder$HandleEndContainer() {
      if (ss.arrayPeekBack(this.$inObject)) {
        this.$objects.pop();
      }
      else {
        this.$arrays.pop();
      }
      this.$inObject.pop();
    },
    $handleAdditiveOpcode: function ObjectBuilder$HandleAdditiveOpcode(type) {
      var builtMember = null;
      var objectId = '';
      var inObjectNow = ss.arrayPeekBack(this.$inObject);
      var currentObject = ss.arrayPeekBack(this.$objects);
      var currentArray = ss.arrayPeekBack(this.$arrays);
      if (inObjectNow) {
        var idStringId = this.$marshaller.data.intBuffer[this.$integerOffset++];
        if (idStringId < 0) {
          objectId = -idStringId;
        }
        else {
          objectId = this.$marshaller.stringTable[idStringId];
        }
      }
      if (65 === type) {
        ++this.$opcodeOffset;
        var vecType = this.$marshaller.data.opCodes[this.$opcodeOffset];
        builtMember = this.$handleConstVector(vecType);
      }
      else if (64 === type) {
        builtMember = this.$handleStringVector();
      }
      else if (type >= 32 && type < 64) {
        builtMember = this.$handleTypedArray(type);
      }
      else {
        builtMember = this.$handlePrimitive(type);
      }
      if (inObjectNow) {
        currentObject[objectId] = builtMember;
      }
      else {
        currentArray.push(builtMember);
      }
    },
    $handleStringVector: function ObjectBuilder$HandleStringVector() {
      var offset = this.$marshaller.data.intBuffer[this.$integerOffset++];
      var length = this.$marshaller.data.intBuffer[this.$integerOffset++];
      var vec = [];
      var stringIds;
      if (ss.isValue(this.$marshaller.jabba)) {
        stringIds = ss.cast(this.$marshaller.jabba.unpacked[offset], Uint32Array);
      }
      else {
        stringIds = new Uint32Array(this.$marshaller.heap, offset, length);
      }
      var local_stringtable = this.$marshaller.stringTable;
      for (var $t1 = 0; $t1 < stringIds.length; $t1++) {
        var id = stringIds[$t1];
        vec.push(local_stringtable[id]);
      }
      return vec;
    },
    $handleTypedArray: function ObjectBuilder$HandleTypedArray(type) {
      var offset = this.$marshaller.data.intBuffer[this.$integerOffset++];
      var count = this.$marshaller.data.intBuffer[this.$integerOffset++];
      if (ss.isValue(this.$marshaller.jabba)) {
        return this.$marshaller.jabba.unpacked[offset];
      }
      else {
        return $tab_HuttUtils.getMappedArray(type, this.$marshaller.heap, offset, count);
      }
    },
    $handlePrimitive: function ObjectBuilder$HandlePrimitive(type) {
      switch (type) {
        case 1: {
          this.$inObject.push(true);
          this.$objects.push({});
          return ss.arrayPeekBack(this.$objects);
        }
        case 2: {
          this.$inObject.push(false);
          this.$arrays.push([]);
          return ss.arrayPeekBack(this.$arrays);
        }
        case 4: {
          return this.$marshaller.data.doubleBuffer[this.$doubleOffset++];
        }
        case 5: {
          return this.$marshaller.data.intBuffer[this.$integerOffset++];
        }
        case 6: {
          return true;
        }
        case 7: {
          return false;
        }
        case 8: {
          return this.$marshaller.stringTable[this.$marshaller.data.intBuffer[this.$integerOffset++]];
        }
        case 9: {
          return null;
        }
      }
      throw new ss.Exception('Invalid OpCode: ' + type.toString());
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RWAL.RuntimeWebHost.RuntimeWebHostArg
  var $tab_$RuntimeWebHost$RuntimeWebHostArg = ss.mkType($asm, 'tab.$RuntimeWebHost$RuntimeWebHostArg', null, null, {
    $ctor: function(type, value) {
      var $this = new Object();
      $this.type = null;
      $this.value = null;
      $this.type = type;
      $this.value = value;
      return $this;
    },
    isInstanceOfType: function() {
      return true;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AdjustAxisRangeOutputTableKeys
  var $tab_AdjustAxisRangeOutputTableKeys = global.tab.AdjustAxisRangeOutputTableKeys = ss.mkType($asm, 'tab.AdjustAxisRangeOutputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    min: function AdjustAxisRangeOutputTableKeys$Min() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Min'));
    },
    max: function AdjustAxisRangeOutputTableKeys$Max() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Max'));
    },
    paneId: function AdjustAxisRangeOutputTableKeys$PaneId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneId'));
    },
    uniqueID: function AdjustAxisRangeOutputTableKeys$UniqueID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UniqueID'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AnnexedDataKeys
  var $tab_AnnexedDataKeys = global.tab.AnnexedDataKeys = ss.mkType($asm, 'tab.AnnexedDataKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    drawFirsts: function AnnexedDataKeys$DrawFirsts() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DrawFirsts'));
    },
    drawLasts: function AnnexedDataKeys$DrawLasts() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DrawLasts'));
    },
    sceneMarginBackgroundColor: function AnnexedDataKeys$SceneMarginBackgroundColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SceneMarginBackgroundColor'));
    },
    inheritedSceneBackgroundColor: function AnnexedDataKeys$InheritedSceneBackgroundColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('InheritedSceneBackgroundColor'));
    },
    isSceneBackgroundOpaque: function AnnexedDataKeys$IsSceneBackgroundOpaque() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsSceneBackgroundOpaque'));
    },
    labelStore: function AnnexedDataKeys$LabelStore() {
      return new $tab_LabelStoreKeys.$ctor1(this.get_base().add('LabelStore'));
    },
    mapPackage: function AnnexedDataKeys$MapPackage() {
      return new $tab_MapPackageKeys.$ctor1(this.get_base().add('MapPackage'));
    },
    panes: function AnnexedDataKeys$Panes() {
      return new $tab_PaneMarksKeys.$ctor1(this.get_base().add('Panes'));
    },
    userPaneInfo: function AnnexedDataKeys$UserPaneInfo() {
      return new $tab_UserPaneInfoKeys.$ctor1(this.get_base().add('UserPaneInfo'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisDescriptorHeadersTableKeys
  var $tab_AxisDescriptorHeadersTableKeys = global.tab.AxisDescriptorHeadersTableKeys = ss.mkType($asm, 'tab.AxisDescriptorHeadersTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    id: function AxisDescriptorHeadersTableKeys$Id() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Id'));
    },
    nodeId: function AxisDescriptorHeadersTableKeys$NodeId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('NodeId'));
    },
    duplicateFieldIndex: function AxisDescriptorHeadersTableKeys$DuplicateFieldIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DuplicateFieldIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisDescriptorNodesTableKeys
  var $tab_AxisDescriptorNodesTableKeys = global.tab.AxisDescriptorNodesTableKeys = ss.mkType($asm, 'tab.AxisDescriptorNodesTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    id: function AxisDescriptorNodesTableKeys$Id() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Id'));
    },
    parentId: function AxisDescriptorNodesTableKeys$ParentId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ParentId'));
    },
    headerId: function AxisDescriptorNodesTableKeys$HeaderId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderId'));
    },
    isLeaf: function AxisDescriptorNodesTableKeys$IsLeaf() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsLeaf'));
    },
    label: function AxisDescriptorNodesTableKeys$Label() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Label'));
    },
    borderStartLevel: function AxisDescriptorNodesTableKeys$BorderStartLevel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BorderStartLevel'));
    },
    enclosedIndex: function AxisDescriptorNodesTableKeys$EnclosedIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EnclosedIndex'));
    },
    level: function AxisDescriptorNodesTableKeys$Level() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Level'));
    },
    hierarchicalParentNodeIndex: function AxisDescriptorNodesTableKeys$HierarchicalParentNodeIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HierarchicalParentNodeIndex'));
    },
    hierarchicalParentLevel: function AxisDescriptorNodesTableKeys$HierarchicalParentLevel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HierarchicalParentLevel'));
    },
    leftmostLeafIndex: function AxisDescriptorNodesTableKeys$LeftmostLeafIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LeftmostLeafIndex'));
    },
    numLeaves: function AxisDescriptorNodesTableKeys$NumLeaves() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('NumLeaves'));
    },
    totalType: function AxisDescriptorNodesTableKeys$TotalType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TotalType'));
    },
    canShowHoverSortIndicator: function AxisDescriptorNodesTableKeys$CanShowHoverSortIndicator() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CanShowHoverSortIndicator'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisModelDataTableKeys
  var $tab_AxisModelDataTableKeys = global.tab.AxisModelDataTableKeys = ss.mkType($asm, 'tab.AxisModelDataTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    dataType: function AxisModelDataTableKeys$DataType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DataType'));
    },
    scaleType: function AxisModelDataTableKeys$ScaleType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaleType'));
    },
    canShowHoverSortIndicator: function AxisModelDataTableKeys$CanShowHoverSortIndicator() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CanShowHoverSortIndicator'));
    },
    hasSortIndicator: function AxisModelDataTableKeys$HasSortIndicator() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasSortIndicator'));
    },
    sortDirection: function AxisModelDataTableKeys$SortDirection() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortDirection'));
    },
    sortIndicatorType: function AxisModelDataTableKeys$SortIndicatorType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorType'));
    },
    sortIndicatorTooltip: function AxisModelDataTableKeys$SortIndicatorTooltip() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorTooltip'));
    },
    foldState: function AxisModelDataTableKeys$FoldState() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FoldState'));
    },
    isReversed: function AxisModelDataTableKeys$IsReversed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsReversed'));
    },
    includeZero: function AxisModelDataTableKeys$IncludeZero() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IncludeZero'));
    },
    omitSpecials: function AxisModelDataTableKeys$OmitSpecials() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OmitSpecials'));
    },
    useAutoSubtitle: function AxisModelDataTableKeys$UseAutoSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UseAutoSubtitle'));
    },
    axisTitle: function AxisModelDataTableKeys$AxisTitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisTitle'));
    },
    axisSubtitle: function AxisModelDataTableKeys$AxisSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisSubtitle'));
    },
    duplicateFieldNameIndex: function AxisModelDataTableKeys$DuplicateFieldNameIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DuplicateFieldNameIndex'));
    },
    titlePadding: function AxisModelDataTableKeys$TitlePadding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitlePadding'));
    },
    titleStyleIndex: function AxisModelDataTableKeys$TitleStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitleStyleIndex'));
    },
    perFieldStyleIndex: function AxisModelDataTableKeys$PerFieldStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerFieldStyleIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisProducerInputKeys
  var $tab_AxisProducerInputKeys = global.tab.AxisProducerInputKeys = ss.mkType($asm, 'tab.AxisProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    xAxisModelData: function AxisProducerInputKeys$XAxisModelData() {
      return new $tab_AxisModelDataTableKeys.$ctor1(this.get_base().add('XAxisModelData'));
    },
    yAxisModelData: function AxisProducerInputKeys$YAxisModelData() {
      return new $tab_AxisModelDataTableKeys.$ctor1(this.get_base().add('YAxisModelData'));
    },
    xAxisRangeData: function AxisProducerInputKeys$XAxisRangeData() {
      return new $tab_AxisRangeDataTableKeys.$ctor1(this.get_base().add('XAxisRangeData'));
    },
    yAxisRangeData: function AxisProducerInputKeys$YAxisRangeData() {
      return new $tab_AxisRangeDataTableKeys.$ctor1(this.get_base().add('YAxisRangeData'));
    },
    style: function AxisProducerInputKeys$Style() {
      return new $tab_PerFieldAxisStyleTableKeys.$ctor1(this.get_base().add('Style'));
    },
    titleStyle: function AxisProducerInputKeys$TitleStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitleStyle'));
    },
    titleFontMetrics: function AxisProducerInputKeys$TitleFontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitleFontMetrics'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisProducerOutputKeys
  var $tab_AxisProducerOutputKeys = global.tab.AxisProducerOutputKeys = ss.mkType($asm, 'tab.AxisProducerOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    xAxisTable: function AxisProducerOutputKeys$XAxisTable() {
      return new $tab_AxisTableKeys.$ctor1(this.get_base().add('XAxisTable'));
    },
    yAxisTable: function AxisProducerOutputKeys$YAxisTable() {
      return new $tab_AxisTableKeys.$ctor1(this.get_base().add('YAxisTable'));
    },
    style: function AxisProducerOutputKeys$Style() {
      return new $tab_PerFieldAxisStyleTableKeys.$ctor1(this.get_base().add('Style'));
    },
    titleStyle: function AxisProducerOutputKeys$TitleStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitleStyle'));
    },
    titleFontMetrics: function AxisProducerOutputKeys$TitleFontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitleFontMetrics'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisRangeDataTableKeys
  var $tab_AxisRangeDataTableKeys = global.tab.AxisRangeDataTableKeys = ss.mkType($asm, 'tab.AxisRangeDataTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    rangeType: function AxisRangeDataTableKeys$RangeType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangeType'));
    },
    min: function AxisRangeDataTableKeys$Min() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Min'));
    },
    max: function AxisRangeDataTableKeys$Max() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Max'));
    },
    fieldId: function AxisRangeDataTableKeys$FieldId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FieldId'));
    },
    uniqueID: function AxisRangeDataTableKeys$UniqueID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UniqueID'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisRangeKeys
  var $tab_AxisRangeKeys = global.tab.AxisRangeKeys = ss.mkType($asm, 'tab.AxisRangeKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    domainMin: function AxisRangeKeys$DomainMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainMin'));
    },
    domainMax: function AxisRangeKeys$DomainMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainMax'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisRangeTableColumnsKeys
  var $tab_AxisRangeTableColumnsKeys = global.tab.AxisRangeTableColumnsKeys = ss.mkType($asm, 'tab.AxisRangeTableColumnsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    cellCount: function AxisRangeTableColumnsKeys$CellCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellCount'));
    },
    dataType: function AxisRangeTableColumnsKeys$DataType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DataType'));
    },
    min: function AxisRangeTableColumnsKeys$Min() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Min'));
    },
    max: function AxisRangeTableColumnsKeys$Max() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Max'));
    },
    rangeType: function AxisRangeTableColumnsKeys$RangeType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangeType'));
    },
    scaleType: function AxisRangeTableColumnsKeys$ScaleType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaleType'));
    },
    foldState: function AxisRangeTableColumnsKeys$FoldState() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FoldState'));
    },
    isReversed: function AxisRangeTableColumnsKeys$IsReversed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsReversed'));
    },
    includeZero: function AxisRangeTableColumnsKeys$IncludeZero() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IncludeZero'));
    },
    pixelSize: function AxisRangeTableColumnsKeys$PixelSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PixelSize'));
    },
    uniqueID: function AxisRangeTableColumnsKeys$UniqueID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UniqueID'));
    },
    barLabelsOverflow: function AxisRangeTableColumnsKeys$BarLabelsOverflow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BarLabelsOverflow'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisRangeTableKeys
  var $tab_AxisRangeTableKeys = global.tab.AxisRangeTableKeys = ss.mkType($asm, 'tab.AxisRangeTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    cellCount: function AxisRangeTableKeys$CellCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellCount'));
    },
    dataType: function AxisRangeTableKeys$DataType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DataType'));
    },
    min: function AxisRangeTableKeys$Min() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Min'));
    },
    max: function AxisRangeTableKeys$Max() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Max'));
    },
    rangeType: function AxisRangeTableKeys$RangeType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangeType'));
    },
    scaleType: function AxisRangeTableKeys$ScaleType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaleType'));
    },
    foldState: function AxisRangeTableKeys$FoldState() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FoldState'));
    },
    isReversed: function AxisRangeTableKeys$IsReversed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsReversed'));
    },
    includeZero: function AxisRangeTableKeys$IncludeZero() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IncludeZero'));
    },
    pixelSize: function AxisRangeTableKeys$PixelSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PixelSize'));
    },
    uniqueID: function AxisRangeTableKeys$UniqueID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UniqueID'));
    },
    barLabelsOverflow: function AxisRangeTableKeys$BarLabelsOverflow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BarLabelsOverflow'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisSizeTableKeys
  var $tab_AxisSizeTableKeys = global.tab.AxisSizeTableKeys = ss.mkType($asm, 'tab.AxisSizeTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    pixelSize: function AxisSizeTableKeys$PixelSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PixelSize'));
    },
    barLabelsOverflow: function AxisSizeTableKeys$BarLabelsOverflow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BarLabelsOverflow'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisTableColumnsKeys
  var $tab_AxisTableColumnsKeys = global.tab.AxisTableColumnsKeys = ss.mkType($asm, 'tab.AxisTableColumnsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    dataType: function AxisTableColumnsKeys$DataType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DataType'));
    },
    min: function AxisTableColumnsKeys$Min() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Min'));
    },
    max: function AxisTableColumnsKeys$Max() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Max'));
    },
    rangeType: function AxisTableColumnsKeys$RangeType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangeType'));
    },
    scaleType: function AxisTableColumnsKeys$ScaleType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaleType'));
    },
    canShowHoverSortIndicator: function AxisTableColumnsKeys$CanShowHoverSortIndicator() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CanShowHoverSortIndicator'));
    },
    hasSortIndicator: function AxisTableColumnsKeys$HasSortIndicator() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasSortIndicator'));
    },
    sortDirection: function AxisTableColumnsKeys$SortDirection() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortDirection'));
    },
    sortIndicatorType: function AxisTableColumnsKeys$SortIndicatorType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorType'));
    },
    sortIndicatorTooltip: function AxisTableColumnsKeys$SortIndicatorTooltip() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorTooltip'));
    },
    foldState: function AxisTableColumnsKeys$FoldState() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FoldState'));
    },
    isReversed: function AxisTableColumnsKeys$IsReversed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsReversed'));
    },
    includeZero: function AxisTableColumnsKeys$IncludeZero() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IncludeZero'));
    },
    useAutoSubtitle: function AxisTableColumnsKeys$UseAutoSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UseAutoSubtitle'));
    },
    uniqueID: function AxisTableColumnsKeys$UniqueID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UniqueID'));
    },
    axisTitle: function AxisTableColumnsKeys$AxisTitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisTitle'));
    },
    axisSubtitle: function AxisTableColumnsKeys$AxisSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisSubtitle'));
    },
    duplicateFieldNameIndex: function AxisTableColumnsKeys$DuplicateFieldNameIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DuplicateFieldNameIndex'));
    },
    titlePadding: function AxisTableColumnsKeys$TitlePadding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitlePadding'));
    },
    titleStyleIndex: function AxisTableColumnsKeys$TitleStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitleStyleIndex'));
    },
    perFieldStyleIndex: function AxisTableColumnsKeys$PerFieldStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerFieldStyleIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.AxisTableKeys
  var $tab_AxisTableKeys = global.tab.AxisTableKeys = ss.mkType($asm, 'tab.AxisTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    dataType: function AxisTableKeys$DataType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DataType'));
    },
    min: function AxisTableKeys$Min() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Min'));
    },
    max: function AxisTableKeys$Max() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Max'));
    },
    rangeType: function AxisTableKeys$RangeType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangeType'));
    },
    scaleType: function AxisTableKeys$ScaleType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaleType'));
    },
    canShowHoverSortIndicator: function AxisTableKeys$CanShowHoverSortIndicator() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CanShowHoverSortIndicator'));
    },
    hasSortIndicator: function AxisTableKeys$HasSortIndicator() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasSortIndicator'));
    },
    sortDirection: function AxisTableKeys$SortDirection() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortDirection'));
    },
    sortIndicatorType: function AxisTableKeys$SortIndicatorType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorType'));
    },
    sortIndicatorTooltip: function AxisTableKeys$SortIndicatorTooltip() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorTooltip'));
    },
    foldState: function AxisTableKeys$FoldState() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FoldState'));
    },
    isReversed: function AxisTableKeys$IsReversed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsReversed'));
    },
    includeZero: function AxisTableKeys$IncludeZero() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IncludeZero'));
    },
    useAutoSubtitle: function AxisTableKeys$UseAutoSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UseAutoSubtitle'));
    },
    uniqueID: function AxisTableKeys$UniqueID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UniqueID'));
    },
    axisTitle: function AxisTableKeys$AxisTitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisTitle'));
    },
    axisSubtitle: function AxisTableKeys$AxisSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisSubtitle'));
    },
    duplicateFieldNameIndex: function AxisTableKeys$DuplicateFieldNameIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DuplicateFieldNameIndex'));
    },
    titlePadding: function AxisTableKeys$TitlePadding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitlePadding'));
    },
    titleStyleIndex: function AxisTableKeys$TitleStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TitleStyleIndex'));
    },
    perFieldStyleIndex: function AxisTableKeys$PerFieldStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerFieldStyleIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.Base64HeapDecoder
  var $tab_Base64HeapDecoder = global.tab.Base64HeapDecoder = ss.mkType($asm, 'tab.Base64HeapDecoder', null, null, {
    $indexOfChar: function Base64HeapDecoder$IndexOfChar(base64CharCode) {
      if (ss.isNullOrUndefined($tab_Base64HeapDecoder.$charLookup)) {
        $tab_Base64HeapDecoder.$charLookup = new Array(1 << 2);
        for (var i = 0; i < $tab_Base64HeapDecoder.$supportedChars.length; ++i) {
          $tab_Base64HeapDecoder.$charLookup[$tab_Base64HeapDecoder.$supportedChars.charCodeAt(i)] = i;
        }
      }
      if (base64CharCode === 61) {
        return 0;
      }
      else {
        return $tab_Base64HeapDecoder.$charLookup[base64CharCode];
      }
    },
    decodedLength: function Base64HeapDecoder$DecodedLength(base64) {
      var bitsToSubtract = 0;
      var base64Length = base64.length;
      var numEncodedChars = base64Length;
      if (base64.charCodeAt(base64Length - 2) === 61) {
        bitsToSubtract = 4;
        numEncodedChars -= 2;
        if (base64.charCodeAt(base64Length - 1) !== 61) {
          throw new ss.Exception('Received incorrectly formatted base64 string!');
        }
      }
      else if (base64.charCodeAt(base64Length - 1) === 61) {
        numEncodedChars -= 1;
        bitsToSubtract = 2;
      }
      return ss.idiv(numEncodedChars * 6 - bitsToSubtract, 8);
    },
    run: function Base64HeapDecoder$Run(p, heap, base64) {
      var len = base64.length;
      var encoded1 = 0, encoded2 = 0, encoded3 = 0, encoded4 = 0;
      var numDecoded = 0;
      var decodedLen = $tab_Base64HeapDecoder.decodedLength(base64);
      for (var i = 0; i < len; i += 4) {
        encoded1 = $tab_Base64HeapDecoder.$indexOfChar(base64.charCodeAt(i));
        encoded2 = $tab_Base64HeapDecoder.$indexOfChar(base64.charCodeAt(i + 1));
        encoded3 = $tab_Base64HeapDecoder.$indexOfChar(base64.charCodeAt(i + 2));
        encoded4 = $tab_Base64HeapDecoder.$indexOfChar(base64.charCodeAt(i + 3));
        heap[p++] = encoded1 << 2 | encoded2 >>> 4;
        numDecoded++;
        if (numDecoded < decodedLen) {
          heap[p++] = (encoded2 & 15) << 4 | encoded3 >>> 2;
          numDecoded++;
        }
        if (numDecoded < decodedLen) {
          heap[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
          numDecoded++;
        }
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.BorderStylesProducerInputKeys
  var $tab_BorderStylesProducerInputKeys = global.tab.BorderStylesProducerInputKeys = ss.mkType($asm, 'tab.BorderStylesProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    x: function BorderStylesProducerInputKeys$X() {
      return new $tab_PerAxisBorderStylesProducerInputKeys.$ctor1(this.get_base().add('X'));
    },
    y: function BorderStylesProducerInputKeys$Y() {
      return new $tab_PerAxisBorderStylesProducerInputKeys.$ctor1(this.get_base().add('Y'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.CommonEncodingsKeys
  var $tab_CommonEncodingsKeys = global.tab.CommonEncodingsKeys = ss.mkType($asm, 'tab.CommonEncodingsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    colorEncodingKeys: function CommonEncodingsKeys$ColorEncodingKeys() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColorEncodingKeys'));
    },
    shapeEncodingKeys: function CommonEncodingsKeys$ShapeEncodingKeys() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShapeEncodingKeys'));
    },
    sizeEncodingKeys: function CommonEncodingsKeys$SizeEncodingKeys() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SizeEncodingKeys'));
    },
    measureNamesKeys: function CommonEncodingsKeys$MeasureNamesKeys() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MeasureNamesKeys'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ComposedTextResultKeys
  var $tab_ComposedTextResultKeys = global.tab.ComposedTextResultKeys = ss.mkType($asm, 'tab.ComposedTextResultKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    height: function ComposedTextResultKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    },
    textRunCount: function ComposedTextResultKeys$TextRunCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunCount'));
    },
    textRunOffset: function ComposedTextResultKeys$TextRunOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunOffset'));
    },
    textRunTable: function ComposedTextResultKeys$TextRunTable() {
      return new $tab_TextRunTableKeys.$ctor1(this.get_base().add('TextRunTable'));
    },
    width: function ComposedTextResultKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ComputeAxisExtentsOutputsKeys
  var $tab_ComputeAxisExtentsOutputsKeys = global.tab.ComputeAxisExtentsOutputsKeys = ss.mkType($asm, 'tab.ComputeAxisExtentsOutputsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    minResult: function ComputeAxisExtentsOutputsKeys$minResult() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('minResult'));
    },
    maxResult: function ComputeAxisExtentsOutputsKeys$maxResult() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('maxResult'));
    },
    zeroResult: function ComputeAxisExtentsOutputsKeys$zeroResult() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('zeroResult'));
    },
    minRangeResult: function ComputeAxisExtentsOutputsKeys$minRangeResult() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('minRangeResult'));
    },
    maxRangeResult: function ComputeAxisExtentsOutputsKeys$maxRangeResult() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('maxRangeResult'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ComputeTreemapLayoutOutputTableKeys
  var $tab_ComputeTreemapLayoutOutputTableKeys = global.tab.ComputeTreemapLayoutOutputTableKeys = ss.mkType($asm, 'tab.ComputeTreemapLayoutOutputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    x: function ComputeTreemapLayoutOutputTableKeys$X() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X'));
    },
    x1: function ComputeTreemapLayoutOutputTableKeys$X1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X1'));
    },
    y: function ComputeTreemapLayoutOutputTableKeys$Y() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y'));
    },
    y1: function ComputeTreemapLayoutOutputTableKeys$Y1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y1'));
    },
    tupleId: function ComputeTreemapLayoutOutputTableKeys$TupleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TupleId'));
    },
    markId: function ComputeTreemapLayoutOutputTableKeys$MarkId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkId'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ConstraintSystemKeys
  var $tab_ConstraintSystemKeys = global.tab.ConstraintSystemKeys = ss.mkType($asm, 'tab.ConstraintSystemKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    expressions: function ConstraintSystemKeys$Expressions() {
      return new $tab_ExpressionCoefficientTableKeys.$ctor1(this.get_base().add('Expressions'));
    },
    constants: function ConstraintSystemKeys$Constants() {
      return new $tab_ExpressionConstantTableKeys.$ctor1(this.get_base().add('Constants'));
    },
    constraints: function ConstraintSystemKeys$Constraints() {
      return new $tab_ConstraintTableKeys.$ctor1(this.get_base().add('Constraints'));
    },
    variableNames: function ConstraintSystemKeys$VariableNames() {
      return new $tab_VariableNameTableKeys.$ctor1(this.get_base().add('VariableNames'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ConstraintTableKeys
  var $tab_ConstraintTableKeys = global.tab.ConstraintTableKeys = ss.mkType($asm, 'tab.ConstraintTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    expression1: function ConstraintTableKeys$Expression1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Expression1'));
    },
    expression2: function ConstraintTableKeys$Expression2() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Expression2'));
    },
    comparisonKind: function ConstraintTableKeys$ComparisonKind() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ComparisonKind'));
    },
    priority: function ConstraintTableKeys$Priority() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Priority'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.DatastoreHandle
  var $tab_DatastoreHandle = global.tab.DatastoreHandle = ss.mkType($asm, 'tab.DatastoreHandle', function(handleValue, disposeMethod) {
    $tab_OpaqueHandle.call(this, handleValue, disposeMethod);
  }, {
    get_typeCode: function DatastoreHandle$get_TypeCode() {
      return 16;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.DateTimeTickPerHeaderInputTableKeys
  var $tab_DateTimeTickPerHeaderInputTableKeys = global.tab.DateTimeTickPerHeaderInputTableKeys = ss.mkType($asm, 'tab.DateTimeTickPerHeaderInputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    headerIndex: function DateTimeTickPerHeaderInputTableKeys$HeaderIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderIndex'));
    },
    vtlBlockIndex: function DateTimeTickPerHeaderInputTableKeys$VtlBlockIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VtlBlockIndex'));
    },
    columnFormatIndex: function DateTimeTickPerHeaderInputTableKeys$ColumnFormatIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColumnFormatIndex'));
    },
    showMajorTicks: function DateTimeTickPerHeaderInputTableKeys$ShowMajorTicks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowMajorTicks'));
    },
    showMinorTicks: function DateTimeTickPerHeaderInputTableKeys$ShowMinorTicks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowMinorTicks'));
    },
    dateTimeOriginReference: function DateTimeTickPerHeaderInputTableKeys$DateTimeOriginReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DateTimeOriginReference'));
    },
    dateTimeSpacingReference: function DateTimeTickPerHeaderInputTableKeys$DateTimeSpacingReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DateTimeSpacingReference'));
    },
    dateTimeSpacingUnitsReference: function DateTimeTickPerHeaderInputTableKeys$DateTimeSpacingUnitsReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DateTimeSpacingUnitsReference'));
    },
    majorLabelWidthReference: function DateTimeTickPerHeaderInputTableKeys$MajorLabelWidthReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MajorLabelWidthReference'));
    },
    labelFormat: function DateTimeTickPerHeaderInputTableKeys$LabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelFormat'));
    },
    subtitleString: function DateTimeTickPerHeaderInputTableKeys$SubtitleString() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubtitleString'));
    },
    daysLabelFormat: function DateTimeTickPerHeaderInputTableKeys$DaysLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DaysLabelFormat'));
    },
    daysLabelWidth: function DateTimeTickPerHeaderInputTableKeys$DaysLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DaysLabelWidth'));
    },
    daysSubtitle: function DateTimeTickPerHeaderInputTableKeys$DaysSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DaysSubtitle'));
    },
    hoursLabelFormat: function DateTimeTickPerHeaderInputTableKeys$HoursLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HoursLabelFormat'));
    },
    hoursLabelWidth: function DateTimeTickPerHeaderInputTableKeys$HoursLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HoursLabelWidth'));
    },
    hoursSubtitle: function DateTimeTickPerHeaderInputTableKeys$HoursSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HoursSubtitle'));
    },
    hoursTruncatedLabelFormat: function DateTimeTickPerHeaderInputTableKeys$HoursTruncatedLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HoursTruncatedLabelFormat'));
    },
    hoursTruncatedLabelWidth: function DateTimeTickPerHeaderInputTableKeys$HoursTruncatedLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HoursTruncatedLabelWidth'));
    },
    hoursTruncatedSubtitle: function DateTimeTickPerHeaderInputTableKeys$HoursTruncatedSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HoursTruncatedSubtitle'));
    },
    labelHeight: function DateTimeTickPerHeaderInputTableKeys$LabelHeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelHeight'));
    },
    perpendicularLabels: function DateTimeTickPerHeaderInputTableKeys$PerpendicularLabels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerpendicularLabels'));
    },
    fiscalYearStart: function DateTimeTickPerHeaderInputTableKeys$FiscalYearStart() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FiscalYearStart'));
    },
    labelStyleIndex: function DateTimeTickPerHeaderInputTableKeys$LabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyleIndex'));
    },
    monthsLabelFormat: function DateTimeTickPerHeaderInputTableKeys$MonthsLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MonthsLabelFormat'));
    },
    monthsLabelWidth: function DateTimeTickPerHeaderInputTableKeys$MonthsLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MonthsLabelWidth'));
    },
    monthsSubtitle: function DateTimeTickPerHeaderInputTableKeys$MonthsSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MonthsSubtitle'));
    },
    minorDTOriginReference: function DateTimeTickPerHeaderInputTableKeys$MinorDTOriginReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinorDTOriginReference'));
    },
    minorDTSpacingReference: function DateTimeTickPerHeaderInputTableKeys$MinorDTSpacingReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinorDTSpacingReference'));
    },
    minorDTSpacingUnitsReference: function DateTimeTickPerHeaderInputTableKeys$MinorDTSpacingUnitsReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinorDTSpacingUnitsReference'));
    },
    minutesLabelFormat: function DateTimeTickPerHeaderInputTableKeys$MinutesLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinutesLabelFormat'));
    },
    minutesLabelWidth: function DateTimeTickPerHeaderInputTableKeys$MinutesLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinutesLabelWidth'));
    },
    minutesSubtitle: function DateTimeTickPerHeaderInputTableKeys$MinutesSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinutesSubtitle'));
    },
    minutesTruncatedLabelFormat: function DateTimeTickPerHeaderInputTableKeys$MinutesTruncatedLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinutesTruncatedLabelFormat'));
    },
    minutesTruncatedLabelWidth: function DateTimeTickPerHeaderInputTableKeys$MinutesTruncatedLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinutesTruncatedLabelWidth'));
    },
    minutesTruncatedSubtitle: function DateTimeTickPerHeaderInputTableKeys$MinutesTruncatedSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinutesTruncatedSubtitle'));
    },
    quartersLabelFormat: function DateTimeTickPerHeaderInputTableKeys$QuartersLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('QuartersLabelFormat'));
    },
    quartersLabelWidth: function DateTimeTickPerHeaderInputTableKeys$QuartersLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('QuartersLabelWidth'));
    },
    quartersSubtitle: function DateTimeTickPerHeaderInputTableKeys$QuartersSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('QuartersSubtitle'));
    },
    secondsLabelFormat: function DateTimeTickPerHeaderInputTableKeys$SecondsLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SecondsLabelFormat'));
    },
    secondsLabelWidth: function DateTimeTickPerHeaderInputTableKeys$SecondsLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SecondsLabelWidth'));
    },
    secondsSubtitle: function DateTimeTickPerHeaderInputTableKeys$SecondsSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SecondsSubtitle'));
    },
    targetTickSpacing: function DateTimeTickPerHeaderInputTableKeys$TargetTickSpacing() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TargetTickSpacing'));
    },
    weeksLabelFormat: function DateTimeTickPerHeaderInputTableKeys$WeeksLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WeeksLabelFormat'));
    },
    weeksLabelWidth: function DateTimeTickPerHeaderInputTableKeys$WeeksLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WeeksLabelWidth'));
    },
    weeksSubtitle: function DateTimeTickPerHeaderInputTableKeys$WeeksSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WeeksSubtitle'));
    },
    yearsLabelFormat: function DateTimeTickPerHeaderInputTableKeys$YearsLabelFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YearsLabelFormat'));
    },
    yearsLabelWidth: function DateTimeTickPerHeaderInputTableKeys$YearsLabelWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YearsLabelWidth'));
    },
    yearsSubtitle: function DateTimeTickPerHeaderInputTableKeys$YearsSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YearsSubtitle'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.DomainLookupKeys
  var $tab_DomainLookupKeys = global.tab.DomainLookupKeys = ss.mkType($asm, 'tab.DomainLookupKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    domainMax: function DomainLookupKeys$DomainMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainMax'));
    },
    domainMin: function DomainLookupKeys$DomainMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainMin'));
    },
    lookup: function DomainLookupKeys$Lookup() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Lookup'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.DropSpotDataKeys
  var $tab_DropSpotDataKeys = global.tab.DropSpotDataKeys = ss.mkType($asm, 'tab.DropSpotDataKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    labelStyles: function DropSpotDataKeys$LabelStyles() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyles'));
    },
    sceneMarginData: function DropSpotDataKeys$SceneMarginData() {
      return new $tab_DropSpotTextTableKeys.$ctor1(this.get_base().add('SceneMarginData'));
    },
    padding: function DropSpotDataKeys$Padding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Padding'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.DropSpotTextTableKeys
  var $tab_DropSpotTextTableKeys = global.tab.DropSpotTextTableKeys = ss.mkType($asm, 'tab.DropSpotTextTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    sceneMarginLocation: function DropSpotTextTableKeys$SceneMarginLocation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SceneMarginLocation'));
    },
    label: function DropSpotTextTableKeys$Label() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Label'));
    },
    labelStyleIndex: function DropSpotTextTableKeys$LabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyleIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.EllipsisTableKeys
  var $tab_EllipsisTableKeys = global.tab.EllipsisTableKeys = ss.mkType($asm, 'tab.EllipsisTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneIndex: function EllipsisTableKeys$PaneIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneIndex'));
    },
    cellX: function EllipsisTableKeys$CellX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellX'));
    },
    cellY: function EllipsisTableKeys$CellY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellY'));
    },
    x: function EllipsisTableKeys$X() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X'));
    },
    y: function EllipsisTableKeys$Y() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y'));
    },
    xFloat: function EllipsisTableKeys$XFloat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XFloat'));
    },
    yFloat: function EllipsisTableKeys$YFloat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YFloat'));
    },
    width: function EllipsisTableKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    },
    height: function EllipsisTableKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.EmscriptenSupport
  var $tab_EmscriptenSupport = global.tab.EmscriptenSupport = ss.mkType($asm, 'tab.EmscriptenSupport', function() {
  }, null, {
    getExceptionInformation: function EmscriptenSupport$GetExceptionInformation(e) {
      var parsed = e.get_message().split(' ', 1);
      if (parsed.length === 1) {
        var exceptionPtr = parseInt(parsed[0]);
        var functionPtr = RuntimeWebModule.HEAPU32[RuntimeWebModule.HEAPU32[exceptionPtr >> 2] + 8 >>> 2];
        if (functionPtr === 0) {
          return e;
        }
        var strPtr = RuntimeWebModule.dynCall_ii(functionPtr, exceptionPtr);
        if (strPtr === 0) {
          return e;
        }
        var endPtr = strPtr;
        for (; endPtr < RuntimeWebModule.HEAPU8.length; endPtr++) {
          if (RuntimeWebModule.HEAPU8[endPtr] === 0) {
            break;
          }
        }
        try {
          var cppException = $tab_Utf8TextDecoder.decode(RuntimeWebModule.HEAPU8.subarray(strPtr, endPtr));
          return new ss.Exception("Emscripten thrown exception: '" + cppException + "'", e);
        }
        catch ($t1) {
          return e;
        }
      }
      return e;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.EncodingsTableKeys
  var $tab_EncodingsTableKeys = global.tab.EncodingsTableKeys = ss.mkType($asm, 'tab.EncodingsTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    cellX: function EncodingsTableKeys$CellX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellX'));
    },
    cellY: function EncodingsTableKeys$CellY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellY'));
    },
    clipHeight: function EncodingsTableKeys$ClipHeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ClipHeight'));
    },
    clipWidth: function EncodingsTableKeys$ClipWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ClipWidth'));
    },
    color: function EncodingsTableKeys$Color() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Color'));
    },
    geometry: function EncodingsTableKeys$Geometry() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Geometry'));
    },
    height: function EncodingsTableKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    },
    isMarkStacked: function EncodingsTableKeys$IsMarkStacked() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsMarkStacked'));
    },
    markFlags: function EncodingsTableKeys$MarkFlags() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkFlags'));
    },
    markId: function EncodingsTableKeys$MarkId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkId'));
    },
    paneIndex: function EncodingsTableKeys$PaneIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneIndex'));
    },
    paneCol: function EncodingsTableKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    panePage: function EncodingsTableKeys$PanePage() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PanePage'));
    },
    paneRow: function EncodingsTableKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    predictionIntervalLowerEnd: function EncodingsTableKeys$PredictionIntervalLowerEnd() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PredictionIntervalLowerEnd'));
    },
    predictionIntervalUpperEnd: function EncodingsTableKeys$PredictionIntervalUpperEnd() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PredictionIntervalUpperEnd'));
    },
    predictionWhiskerWidth: function EncodingsTableKeys$PredictionWhiskerWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PredictionWhiskerWidth'));
    },
    rho: function EncodingsTableKeys$Rho() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Rho'));
    },
    rho1: function EncodingsTableKeys$Rho1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Rho1'));
    },
    scaledEndPoint: function EncodingsTableKeys$ScaledEndPoint() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaledEndPoint'));
    },
    shapeId: function EncodingsTableKeys$ShapeId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShapeId'));
    },
    size: function EncodingsTableKeys$Size() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Size'));
    },
    sizeLabel: function EncodingsTableKeys$SizeLabel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SizeLabel'));
    },
    textRunCount: function EncodingsTableKeys$TextRunCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunCount'));
    },
    textRunOffset: function EncodingsTableKeys$TextRunOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunOffset'));
    },
    theta: function EncodingsTableKeys$Theta() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Theta'));
    },
    theta1: function EncodingsTableKeys$Theta1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Theta1'));
    },
    trailId: function EncodingsTableKeys$TrailId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TrailId'));
    },
    tupleId: function EncodingsTableKeys$TupleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TupleId'));
    },
    width: function EncodingsTableKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    },
    userPaneRow: function EncodingsTableKeys$UserPaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UserPaneRow'));
    },
    userPaneCol: function EncodingsTableKeys$UserPaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UserPaneCol'));
    },
    webClientShouldRenderLabel: function EncodingsTableKeys$WebClientShouldRenderLabel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WebClientShouldRenderLabel'));
    },
    weight: function EncodingsTableKeys$Weight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Weight'));
    },
    x: function EncodingsTableKeys$X() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X'));
    },
    x1: function EncodingsTableKeys$X1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X1'));
    },
    xNext: function EncodingsTableKeys$XNext() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XNext'));
    },
    xPrev: function EncodingsTableKeys$XPrev() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XPrev'));
    },
    y: function EncodingsTableKeys$Y() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y'));
    },
    y1: function EncodingsTableKeys$Y1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y1'));
    },
    yNext: function EncodingsTableKeys$YNext() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YNext'));
    },
    yPrev: function EncodingsTableKeys$YPrev() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YPrev'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.EnumConversions
  var $tab_EnumConversions = global.tab.EnumConversions = ss.mkType($asm, 'tab.EnumConversions', null, null, {
    tableauFontStyleFromInt: function EnumConversions$TableauFontStyleFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$tableauFontStyleArray)) {
        $tab_EnumConversions.$tableauFontStyleArray = ['font-style-normal', 'font-style-italic'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$tableauFontStyleArray.length, 'Found an unexpected value when trying to convert from int to TableauFontStyle!!!');
      return $tab_EnumConversions.$tableauFontStyleArray[value];
    },
    textDecorationFromInt: function EnumConversions$TextDecorationFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$textDecorationArray)) {
        $tab_EnumConversions.$textDecorationArray = ['text-decoration-none', 'text-decoration-underline', 'text-decoration-overline', 'text-decoration-strikethrough'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$textDecorationArray.length, 'Found an unexpected value when trying to convert from int to TextDecoration!!!');
      return $tab_EnumConversions.$textDecorationArray[value];
    },
    fontWeightFromInt: function EnumConversions$FontWeightFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$fontWeightArray)) {
        $tab_EnumConversions.$fontWeightArray = ['font-weight-normal', 'font-weight-bold'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$fontWeightArray.length, 'Found an unexpected value when trying to convert from int to FontWeight!!!');
      return $tab_EnumConversions.$fontWeightArray[value];
    },
    textOrientFromInt: function EnumConversions$TextOrientFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$textOrientArray)) {
        $tab_EnumConversions.$textOrientArray = ['text-orient-auto', 'text-orient-horizontal', 'text-orient-vertical-up', 'text-orient-vertical-down'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$textOrientArray.length, 'Found an unexpected value when trying to convert from int to TextOrient!!!');
      return $tab_EnumConversions.$textOrientArray[value];
    },
    textWrapModeFromInt: function EnumConversions$TextWrapModeFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$textWrapModeArray)) {
        $tab_EnumConversions.$textWrapModeArray = ['text-wrap-off', 'text-wrap-truncate', 'text-wrap-on', 'text-wrap-auto'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$textWrapModeArray.length, 'Found an unexpected value when trying to convert from int to TextWrapMode!!!');
      return $tab_EnumConversions.$textWrapModeArray[value];
    },
    datePeriodTypeFromInt: function EnumConversions$DatePeriodTypeFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$datePeriodTypeArray)) {
        $tab_EnumConversions.$datePeriodTypeArray = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'iso-year', 'iso-quarter', 'iso-week'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$datePeriodTypeArray.length, 'Found an unexpected value when trying to convert from int to DatePeriodType!!!');
      return $tab_EnumConversions.$datePeriodTypeArray[value];
    },
    labelHAlignmentFromInt: function EnumConversions$LabelHAlignmentFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$labelHAlignmentArray)) {
        $tab_EnumConversions.$labelHAlignmentArray = ['h-align-left', 'h-align-center', 'h-align-right', 'h-align-auto'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$labelHAlignmentArray.length, 'Found an unexpected value when trying to convert from int to LabelHAlignment!!!');
      return $tab_EnumConversions.$labelHAlignmentArray[value];
    },
    labelVAlignmentFromInt: function EnumConversions$LabelVAlignmentFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$labelVAlignmentArray)) {
        $tab_EnumConversions.$labelVAlignmentArray = ['v-align-bottom', 'v-align-center', 'v-align-top', 'v-align-auto'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$labelVAlignmentArray.length, 'Found an unexpected value when trying to convert from int to LabelVAlignment!!!');
      return $tab_EnumConversions.$labelVAlignmentArray[value];
    },
    linePatternFromInt: function EnumConversions$LinePatternFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$linePatternArray)) {
        $tab_EnumConversions.$linePatternArray = ['none', 'solid', 'dashed', 'dotted'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$linePatternArray.length, 'Found an unexpected value when trying to convert from int to LinePattern!!!');
      return $tab_EnumConversions.$linePatternArray[value];
    },
    lineCapFromInt: function EnumConversions$LineCapFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$lineCapArray)) {
        $tab_EnumConversions.$lineCapArray = ['flat', 'square', 'round', 'triangle'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$lineCapArray.length, 'Found an unexpected value when trying to convert from int to LineCap!!!');
      return $tab_EnumConversions.$lineCapArray[value];
    },
    lineJoinFromInt: function EnumConversions$LineJoinFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$lineJoinArray)) {
        $tab_EnumConversions.$lineJoinArray = ['bevel', 'miter', 'round'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$lineJoinArray.length, 'Found an unexpected value when trying to convert from int to LineJoin!!!');
      return $tab_EnumConversions.$lineJoinArray[value];
    },
    zoomTypeFromInt: function EnumConversions$ZoomTypeFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$zoomTypeArray)) {
        $tab_EnumConversions.$zoomTypeArray = ['percent', 'entire-view', 'fit-width', 'fit-height'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$zoomTypeArray.length, 'Found an unexpected value when trying to convert from int to ZoomType!!!');
      return $tab_EnumConversions.$zoomTypeArray[value];
    },
    primitiveFromInt: function EnumConversions$PrimitiveFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$primitiveArray)) {
        $tab_EnumConversions.$primitiveArray = ['shape', 'line', 'bar', 'polar-bar', 'text', 'label', 'pie', 'area', 'polygon', 'multipolygon', 'square', 'heatmap', 'count'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$primitiveArray.length, 'Found an unexpected value when trying to convert from int to Primitive!!!');
      return $tab_EnumConversions.$primitiveArray[value];
    },
    vizTypeFromInt: function EnumConversions$VizTypeFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$vizTypeArray)) {
        $tab_EnumConversions.$vizTypeArray = ['standard', 'oo-stacked', 'gantt-stacked', 'treemap', 'bubble', 'wordle', 'highlight', 'count'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$vizTypeArray.length, 'Found an unexpected value when trying to convert from int to VizType!!!');
      return $tab_EnumConversions.$vizTypeArray[value];
    },
    visualPartFromInt: function EnumConversions$VisualPartFromInt(value) {
      if (ss.isNullOrUndefined($tab_EnumConversions.$visualPartArray)) {
        $tab_EnumConversions.$visualPartArray = ['misc', 'annotations', 'axis-rules', 'top-axis', 'bottom-axis', 'left-axis', 'right-axis', 'background', 'borders', 'caption', 'cell-borders', 'decoration', 'drop-lines', 'x-labels', 'y-labels', 'legends', 'marks', 'mark-labels', 'mark-trails', 'ref-bands', 'ref-lines', 'pane-borders', 'scroll-bars', 'title', 'trend-lines', 'upper-map-layers', 'header', 'axis'];
      }
      ss.Debug.assert(value >= 0 && value < $tab_EnumConversions.$visualPartArray.length, 'Found an unexpected value when trying to convert from int to VisualPart!!!');
      return $tab_EnumConversions.$visualPartArray[value];
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ExpressionCoefficientTableKeys
  var $tab_ExpressionCoefficientTableKeys = global.tab.ExpressionCoefficientTableKeys = ss.mkType($asm, 'tab.ExpressionCoefficientTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    expressionID: function ExpressionCoefficientTableKeys$ExpressionID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ExpressionID'));
    },
    coefficient: function ExpressionCoefficientTableKeys$Coefficient() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Coefficient'));
    },
    variableID: function ExpressionCoefficientTableKeys$VariableID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VariableID'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ExpressionConstantTableKeys
  var $tab_ExpressionConstantTableKeys = global.tab.ExpressionConstantTableKeys = ss.mkType($asm, 'tab.ExpressionConstantTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    expressionID: function ExpressionConstantTableKeys$ExpressionID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ExpressionID'));
    },
    constant: function ExpressionConstantTableKeys$Constant() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Constant'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ExtendedDomainKeys
  var $tab_ExtendedDomainKeys = global.tab.ExtendedDomainKeys = ss.mkType($asm, 'tab.ExtendedDomainKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    haveAnyMarks: function ExtendedDomainKeys$HaveAnyMarks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HaveAnyMarks'));
    },
    paneExtentsStaticInput: function ExtendedDomainKeys$PaneExtentsStaticInput() {
      return new $tab_PaneExtentsStaticInputTableKeys.$ctor1(this.get_base().add('PaneExtentsStaticInput'));
    },
    paneExtentsPixelPositions: function ExtendedDomainKeys$PaneExtentsPixelPositions() {
      return new $tab_PaneExtentsPixelPositionsTableKeys.$ctor1(this.get_base().add('PaneExtentsPixelPositions'));
    },
    paneExtents: function ExtendedDomainKeys$PaneExtents() {
      return new $tab_PaneExtentsTableKeys.$ctor1(this.get_base().add('PaneExtents'));
    },
    paneCount: function ExtendedDomainKeys$PaneCount() {
      return new $tab_PaneCountersKeys.$ctor1(this.get_base().add('PaneCount'));
    },
    pageIntervalTable: function ExtendedDomainKeys$PageIntervalTable() {
      return new $tab_PageIntervalTableKeys.$ctor1(this.get_base().add('PageIntervalTable'));
    },
    noMarksColumnTemplate: function ExtendedDomainKeys$NoMarksColumnTemplate() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('NoMarksColumnTemplate'));
    },
    noPanesColumnTemplate: function ExtendedDomainKeys$NoPanesColumnTemplate() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('NoPanesColumnTemplate'));
    },
    paneRow: function ExtendedDomainKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    paneCol: function ExtendedDomainKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    mappedRows: function ExtendedDomainKeys$MappedRows() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MappedRows'));
    },
    mappedCols: function ExtendedDomainKeys$MappedCols() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MappedCols'));
    },
    rangePaddingMin: function ExtendedDomainKeys$RangePaddingMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangePaddingMin'));
    },
    mapBoundaries: function ExtendedDomainKeys$MapBoundaries() {
      return new $tab_MapBoundsKeys.$ctor1(this.get_base().add('MapBoundaries'));
    },
    showEntireImageHasImages: function ExtendedDomainKeys$ShowEntireImageHasImages() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowEntireImageHasImages'));
    },
    lockedRatio: function ExtendedDomainKeys$LockedRatio() {
      return new $tab_LockedRatioKeys.$ctor1(this.get_base().add('LockedRatio'));
    },
    mapProvider: function ExtendedDomainKeys$MapProvider() {
      return new $tab_MapProviderKeys.$ctor1(this.get_base().add('MapProvider'));
    },
    mapLayersModelUpdate: function ExtendedDomainKeys$MapLayersModelUpdate() {
      return new $tab_MapLayersModelUpdateKeys.$ctor1(this.get_base().add('MapLayersModelUpdate'));
    },
    x: function ExtendedDomainKeys$X() {
      return new $tab_ExtendedDomainPerAxisKeys.$ctor1(this.get_base().add('X'));
    },
    y: function ExtendedDomainKeys$Y() {
      return new $tab_ExtendedDomainPerAxisKeys.$ctor1(this.get_base().add('Y'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ExtendedDomainPerAxisKeys
  var $tab_ExtendedDomainPerAxisKeys = global.tab.ExtendedDomainPerAxisKeys = ss.mkType($asm, 'tab.ExtendedDomainPerAxisKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    axisSizes: function ExtendedDomainPerAxisKeys$AxisSizes() {
      return new $tab_AxisSizeTableKeys.$ctor1(this.get_base().add('AxisSizes'));
    },
    ranges: function ExtendedDomainPerAxisKeys$Ranges() {
      return new $tab_AxisRangeTableKeys.$ctor1(this.get_base().add('Ranges'));
    },
    uniqueRanges: function ExtendedDomainPerAxisKeys$UniqueRanges() {
      return new $tab_AxisRangeTableKeys.$ctor1(this.get_base().add('UniqueRanges'));
    },
    rangeMap: function ExtendedDomainPerAxisKeys$RangeMap() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangeMap'));
    },
    pointExtendedRanges: function ExtendedDomainPerAxisKeys$PointExtendedRanges() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PointExtendedRanges'));
    },
    beforeMarkExtendRanges: function ExtendedDomainPerAxisKeys$BeforeMarkExtendRanges() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BeforeMarkExtendRanges'));
    },
    afterMarkExtendRanges: function ExtendedDomainPerAxisKeys$AfterMarkExtendRanges() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AfterMarkExtendRanges'));
    },
    relevantRanges: function ExtendedDomainPerAxisKeys$RelevantRanges() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RelevantRanges'));
    },
    refLineExtents: function ExtendedDomainPerAxisKeys$RefLineExtents() {
      return new $tab_RefLineExtentsKeys.$ctor1(this.get_base().add('RefLineExtents'));
    },
    showEntireImagePaneIndex: function ExtendedDomainPerAxisKeys$ShowEntireImagePaneIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowEntireImagePaneIndex'));
    },
    showEntireImageMax: function ExtendedDomainPerAxisKeys$ShowEntireImageMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowEntireImageMax'));
    },
    showEntireImageMin: function ExtendedDomainPerAxisKeys$ShowEntireImageMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowEntireImageMin'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.FallbackTextDecoder
  var $tab_FallbackTextDecoder = global.tab.FallbackTextDecoder = ss.mkType($asm, 'tab.FallbackTextDecoder', function() {
  }, null, {
    decode: function FallbackTextDecoder$Decode(u8Array) {
      var u0, u1, u2, u3, u4, u5;
      var idx = 0;
      var str = '';
      var len = u8Array.length;
      while (idx < len) {
        u0 = u8Array[idx++];
        if (u0 === 0) {
          return str;
        }
        if ((u0 & 128) === 0) {
          str += String.fromCharCode(u0);
          continue;
        }
        u1 = u8Array[idx++] & 63;
        if ((u0 & 224) === 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        u2 = u8Array[idx++] & 63;
        if ((u0 & 240) === 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u2;
        }
        else {
          u3 = u8Array[idx++] & 63;
          if ((u0 & 248) === 240) {
            u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
          }
          else {
            u4 = u8Array[idx++] & 63;
            if ((u0 & 252) === 248) {
              u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
            }
            else {
              u5 = u8Array[idx++] & 63;
              u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
            }
          }
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        }
        else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
      return str;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.FallbackTextEncoder
  var $tab_FallbackTextEncoder = global.tab.FallbackTextEncoder = ss.mkType($asm, 'tab.FallbackTextEncoder', function() {
  }, null, {
    $stringBytesLength: function FallbackTextEncoder$StringBytesLength(str) {
      var len = 0;
      for (var i = 0; i < str.length; i++) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) {
          u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        }
        if (u <= 127) {
          ++len;
        }
        else if (u <= 2047) {
          len += 2;
        }
        else if (u <= 65535) {
          len += 3;
        }
        else if (u <= 2097151) {
          len += 4;
        }
        else if (u <= 67108863) {
          len += 5;
        }
        else {
          len += 6;
        }
      }
      return len;
    },
    encode: function FallbackTextEncoder$Encode(str) {
      var outputLength = $tab_FallbackTextEncoder.$stringBytesLength(str);
      var outU8Array = new Uint8Array(outputLength);
      var outIdx = 0;
      for (var i = 0; i < str.length; i++) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) {
          u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        }
        if (u <= 127) {
          outU8Array[outIdx++] = u;
        }
        else if (u <= 2047) {
          outU8Array[outIdx++] = 192 | u >> 6;
          outU8Array[outIdx++] = 128 | u & 63;
        }
        else if (u <= 65535) {
          outU8Array[outIdx++] = 224 | u >> 12;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        }
        else if (u <= 2097151) {
          outU8Array[outIdx++] = 240 | u >> 18;
          outU8Array[outIdx++] = 128 | u >> 12 & 63;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        }
        else if (u <= 67108863) {
          outU8Array[outIdx++] = 248 | u >> 24;
          outU8Array[outIdx++] = 128 | u >> 18 & 63;
          outU8Array[outIdx++] = 128 | u >> 12 & 63;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        }
        else {
          outU8Array[outIdx++] = 252 | u >> 30;
          outU8Array[outIdx++] = 128 | u >> 24 & 63;
          outU8Array[outIdx++] = 128 | u >> 18 & 63;
          outU8Array[outIdx++] = 128 | u >> 12 & 63;
          outU8Array[outIdx++] = 128 | u >> 6 & 63;
          outU8Array[outIdx++] = 128 | u & 63;
        }
      }
      return outU8Array;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.FieldLabelsTextAndShadingTableKeys
  var $tab_FieldLabelsTextAndShadingTableKeys = global.tab.FieldLabelsTextAndShadingTableKeys = ss.mkType($asm, 'tab.FieldLabelsTextAndShadingTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    sceneMarginLocation: function FieldLabelsTextAndShadingTableKeys$SceneMarginLocation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SceneMarginLocation'));
    },
    sceneMarginFieldLabelsText: function FieldLabelsTextAndShadingTableKeys$SceneMarginFieldLabelsText() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SceneMarginFieldLabelsText'));
    },
    fillColor: function FieldLabelsTextAndShadingTableKeys$FillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FillColor'));
    },
    highlightedFillColor: function FieldLabelsTextAndShadingTableKeys$HighlightedFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HighlightedFillColor'));
    },
    labelStyleIndex: function FieldLabelsTextAndShadingTableKeys$LabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyleIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.FlattenedAxisDescriptorKeys
  var $tab_FlattenedAxisDescriptorKeys = global.tab.FlattenedAxisDescriptorKeys = ss.mkType($asm, 'tab.FlattenedAxisDescriptorKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    nodes: function FlattenedAxisDescriptorKeys$Nodes() {
      return new $tab_AxisDescriptorNodesTableKeys.$ctor1(this.get_base().add('Nodes'));
    },
    headers: function FlattenedAxisDescriptorKeys$Headers() {
      return new $tab_AxisDescriptorHeadersTableKeys.$ctor1(this.get_base().add('Headers'));
    },
    perHeaderFields: function FlattenedAxisDescriptorKeys$PerHeaderFields() {
      return new $tab_PerHeaderFieldDataTableKeys.$ctor1(this.get_base().add('PerHeaderFields'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.FormattedTextInputKeys
  var $tab_FormattedTextInputKeys = global.tab.FormattedTextInputKeys = ss.mkType($asm, 'tab.FormattedTextInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    fontMetrics: function FormattedTextInputKeys$FontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontMetrics'));
    },
    styleTable: function FormattedTextInputKeys$StyleTable() {
      return new $tab_TextStyleTableKeys.$ctor1(this.get_base().add('StyleTable'));
    },
    runOffset: function FormattedTextInputKeys$RunOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RunOffset'));
    },
    runCount: function FormattedTextInputKeys$RunCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RunCount'));
    },
    runTable: function FormattedTextInputKeys$RunTable() {
      return new $tab_TextRunTableKeys.$ctor1(this.get_base().add('RunTable'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.GridLineProducerInputKeys
  var $tab_GridLineProducerInputKeys = global.tab.GridLineProducerInputKeys = ss.mkType($asm, 'tab.GridLineProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    x: function GridLineProducerInputKeys$X() {
      return new $tab_PerAxisGridLineProducerInputKeys.$ctor1(this.get_base().add('X'));
    },
    y: function GridLineProducerInputKeys$Y() {
      return new $tab_PerAxisGridLineProducerInputKeys.$ctor1(this.get_base().add('Y'));
    },
    isQuantitativeTickType: function GridLineProducerInputKeys$IsQuantitativeTickType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsQuantitativeTickType'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.GridLineProducerOutputKeys
  var $tab_GridLineProducerOutputKeys = global.tab.GridLineProducerOutputKeys = ss.mkType($asm, 'tab.GridLineProducerOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    zeroPoint: function GridLineProducerOutputKeys$ZeroPoint() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZeroPoint'));
    },
    isQuantitativeTickType: function GridLineProducerOutputKeys$IsQuantitativeTickType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsQuantitativeTickType'));
    },
    x: function GridLineProducerOutputKeys$X() {
      return new $tab_PerAxisGridLineProducerOutputKeys.$ctor1(this.get_base().add('X'));
    },
    y: function GridLineProducerOutputKeys$Y() {
      return new $tab_PerAxisGridLineProducerOutputKeys.$ctor1(this.get_base().add('Y'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.HeaderLevelStyleDataTableKeys
  var $tab_HeaderLevelStyleDataTableKeys = global.tab.HeaderLevelStyleDataTableKeys = ss.mkType($asm, 'tab.HeaderLevelStyleDataTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    headerDepth: function HeaderLevelStyleDataTableKeys$HeaderDepth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderDepth'));
    },
    labelStyleIndex: function HeaderLevelStyleDataTableKeys$LabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyleIndex'));
    },
    brushedStyleIndex: function HeaderLevelStyleDataTableKeys$BrushedStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BrushedStyleIndex'));
    },
    highlightedStyleIndex: function HeaderLevelStyleDataTableKeys$HighlightedStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HighlightedStyleIndex'));
    },
    selectedStyleIndex: function HeaderLevelStyleDataTableKeys$SelectedStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedStyleIndex'));
    },
    subtotalsStyleIndex: function HeaderLevelStyleDataTableKeys$SubtotalsStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubtotalsStyleIndex'));
    },
    brushedSubtotalsStyleIndex: function HeaderLevelStyleDataTableKeys$BrushedSubtotalsStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BrushedSubtotalsStyleIndex'));
    },
    highlightedSubtotalsStyleIndex: function HeaderLevelStyleDataTableKeys$HighlightedSubtotalsStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HighlightedSubtotalsStyleIndex'));
    },
    selectedSubtotalsStyleIndex: function HeaderLevelStyleDataTableKeys$SelectedSubtotalsStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedSubtotalsStyleIndex'));
    },
    grandTotalsStyleIndex: function HeaderLevelStyleDataTableKeys$GrandTotalsStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('GrandTotalsStyleIndex'));
    },
    brushedGrandTotalsStyleIndex: function HeaderLevelStyleDataTableKeys$BrushedGrandTotalsStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BrushedGrandTotalsStyleIndex'));
    },
    highlightedGrandTotalsStyleIndex: function HeaderLevelStyleDataTableKeys$HighlightedGrandTotalsStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HighlightedGrandTotalsStyleIndex'));
    },
    selectedGrandTotalsStyleIndex: function HeaderLevelStyleDataTableKeys$SelectedGrandTotalsStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedGrandTotalsStyleIndex'));
    },
    fillColor: function HeaderLevelStyleDataTableKeys$FillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FillColor'));
    },
    brushedFillColor: function HeaderLevelStyleDataTableKeys$BrushedFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BrushedFillColor'));
    },
    highlightedFillColor: function HeaderLevelStyleDataTableKeys$HighlightedFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HighlightedFillColor'));
    },
    selectedFillColor: function HeaderLevelStyleDataTableKeys$SelectedFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedFillColor'));
    },
    textFitStyle: function HeaderLevelStyleDataTableKeys$TextFitStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextFitStyle'));
    },
    leftPadding: function HeaderLevelStyleDataTableKeys$LeftPadding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LeftPadding'));
    },
    rightPadding: function HeaderLevelStyleDataTableKeys$RightPadding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RightPadding'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.HeatmapInputEncodingKeys
  var $tab_HeatmapInputEncodingKeys = global.tab.HeatmapInputEncodingKeys = ss.mkType($asm, 'tab.HeatmapInputEncodingKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    size: function HeatmapInputEncodingKeys$Size() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Size'));
    },
    palette: function HeatmapInputEncodingKeys$Palette() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Palette'));
    },
    steps: function HeatmapInputEncodingKeys$Steps() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Steps'));
    },
    isReversed: function HeatmapInputEncodingKeys$IsReversed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsReversed'));
    },
    minRequiredDensity: function HeatmapInputEncodingKeys$MinRequiredDensity() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinRequiredDensity'));
    },
    intensity: function HeatmapInputEncodingKeys$Intensity() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Intensity'));
    },
    maxValue: function HeatmapInputEncodingKeys$MaxValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MaxValue'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.HeatmapOutputEncodingKeys
  var $tab_HeatmapOutputEncodingKeys = global.tab.HeatmapOutputEncodingKeys = ss.mkType($asm, 'tab.HeatmapOutputEncodingKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    kernelRadius: function HeatmapOutputEncodingKeys$KernelRadius() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('KernelRadius'));
    },
    palette: function HeatmapOutputEncodingKeys$Palette() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Palette'));
    },
    steps: function HeatmapOutputEncodingKeys$Steps() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Steps'));
    },
    minValue: function HeatmapOutputEncodingKeys$MinValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinValue'));
    },
    maxValue: function HeatmapOutputEncodingKeys$MaxValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MaxValue'));
    },
    underlyingMarkSize: function HeatmapOutputEncodingKeys$UnderlyingMarkSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UnderlyingMarkSize'));
    },
    underlyingMarkColor: function HeatmapOutputEncodingKeys$UnderlyingMarkColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UnderlyingMarkColor'));
    },
    intensity: function HeatmapOutputEncodingKeys$Intensity() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Intensity'));
    },
    markWeights: function HeatmapOutputEncodingKeys$MarkWeights() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkWeights'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.HeatmapProducerInputKeys
  var $tab_HeatmapProducerInputKeys = global.tab.HeatmapProducerInputKeys = ss.mkType($asm, 'tab.HeatmapProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    encoding: function HeatmapProducerInputKeys$Encoding(encodingKey) {
      if (ss.startsWithString(encodingKey, String.fromCharCode(39)) || ss.startsWithString(encodingKey, String.fromCharCode(34))) {
        return new $tab_HeatmapInputEncodingKeys.$ctor1(this.get_base().add('Encoding').add(encodingKey));
      }
      return new $tab_HeatmapInputEncodingKeys.$ctor1(this.get_base().add('Encoding').add(ss.formatString("'{0}'", encodingKey)));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.HeatmapProducerOutputKeys
  var $tab_HeatmapProducerOutputKeys = global.tab.HeatmapProducerOutputKeys = ss.mkType($asm, 'tab.HeatmapProducerOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    encoding: function HeatmapProducerOutputKeys$Encoding(encodingKey) {
      if (ss.startsWithString(encodingKey, String.fromCharCode(39)) || ss.startsWithString(encodingKey, String.fromCharCode(34))) {
        return new $tab_HeatmapOutputEncodingKeys.$ctor1(this.get_base().add('Encoding').add(encodingKey));
      }
      return new $tab_HeatmapOutputEncodingKeys.$ctor1(this.get_base().add('Encoding').add(ss.formatString("'{0}'", encodingKey)));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.HexEncoder
  var $tab_HexEncoder = global.tab.HexEncoder = ss.mkType($asm, 'tab.HexEncoder', function() {
  }, null, {
    $initialize: function HexEncoder$Initialize() {
      if (!$tab_HexEncoder.$initialized) {
        $tab_HexEncoder.$initialized = true;
        $tab_HexEncoder.$byteLookup = new Array(256);
        for (var i = 0; i < 16; i++) {
          $tab_HexEncoder.$byteLookup[i] = '0' + i.toString(16);
        }
        for (var i1 = 16; i1 < 256; i1++) {
          $tab_HexEncoder.$byteLookup[i1] = i1.toString(16);
        }
      }
    },
    encodeBufferToHex: function HexEncoder$EncodeBufferToHex(toEncode) {
      $tab_HexEncoder.$initialize();
      var bytesEncoded = new Array(toEncode.byteLength * 2);
      for (var i = 0; i < toEncode.byteLength; i++) {
        bytesEncoded[i] = $tab_HexEncoder.$byteLookup[toEncode[i]];
      }
      return bytesEncoded.join('');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.HexHeapDecoder
  var $tab_HexHeapDecoder = global.tab.HexHeapDecoder = ss.mkType($asm, 'tab.HexHeapDecoder', null, null, {
    decodedLength: function HexHeapDecoder$DecodedLength(hex) {
      return ss.idiv(hex.length, 2);
    },
    run: function HexHeapDecoder$Run(heapOffset, heap, hex) {
      var i = 0;
      while (i < hex.length) {
        heap[heapOffset++] = $tab_HexHeapDecoder.$decoderLookup[hex.charCodeAt(i++)] * 16 | $tab_HexHeapDecoder.$decoderLookup[hex.charCodeAt(i++)];
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.HiddenMarksKeys
  var $tab_HiddenMarksKeys = global.tab.HiddenMarksKeys = ss.mkType($asm, 'tab.HiddenMarksKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneIndex: function HiddenMarksKeys$PaneIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneIndex'));
    },
    cellIndex: function HiddenMarksKeys$CellIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellIndex'));
    },
    min: function HiddenMarksKeys$Min() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Min'));
    },
    max: function HiddenMarksKeys$Max() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Max'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.HuttUtils
  var $tab_HuttUtils = global.tab.HuttUtils = ss.mkType($asm, 'tab.HuttUtils', function() {
  }, null, {
    getMappedArray: function HuttUtils$GetMappedArray(type, heap, offset, count) {
      switch (type) {
        case 32: {
          return new Uint8Array(heap, offset, count);
        }
        case 33: {
          return new Uint16Array(heap, offset, count);
        }
        case 34: {
          return new Uint32Array(heap, offset, count);
        }
        case 40: {
          return new Int8Array(heap, offset, count);
        }
        case 41: {
          return new Int16Array(heap, offset, count);
        }
        case 42: {
          return new Int32Array(heap, offset, count);
        }
        case 50: {
          return new Float32Array(heap, offset, count);
        }
        case 51: {
          return new Float64Array(heap, offset, count);
        }
      }
      throw new ss.Exception('Unsupported array type: ' + type);
    },
    getMappedArrayJabba: function HuttUtils$GetMappedArrayJabba(type, heap, offset, size) {
      var sizePerByte = $tab_HuttUtils.$getTypeByteSize(type);
      ss.Debug.assert(sizePerByte !== 0, "hutt type byte size can't be 0");
      var count = ss.idiv(size, $tab_HuttUtils.$getTypeByteSize(type));
      switch (type) {
        case 32: {
          return new Uint8Array(heap, offset, count);
        }
        case 33: {
          return new Uint16Array(heap, offset, count);
        }
        case 34: {
          return new Uint32Array(heap, offset, count);
        }
        case 40: {
          return new Int8Array(heap, offset, count);
        }
        case 41: {
          return new Int16Array(heap, offset, count);
        }
        case 42: {
          return new Int32Array(heap, offset, count);
        }
        case 50: {
          return new Float32Array(heap, offset, count);
        }
        case 51: {
          return new Float64Array(heap, offset, count);
        }
      }
      throw new ss.Exception('Unsupported array type: ' + type);
    },
    $getTypeByteSize: function HuttUtils$GetTypeByteSize(type) {
      var typeAsInt = type;
      return 1 << (typeAsInt & 7);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ImportKeys
  var $tab_ImportKeys = global.tab.ImportKeys = ss.mkType($asm, 'tab.ImportKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    dataTable: function ImportKeys$DataTable() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DataTable'));
    },
    flattenedColorEncodings: function ImportKeys$FlattenedColorEncodings() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FlattenedColorEncodings'));
    },
    flattenedShapeEncodings: function ImportKeys$FlattenedShapeEncodings() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FlattenedShapeEncodings'));
    },
    flattenedSizeEncodings: function ImportKeys$FlattenedSizeEncodings() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FlattenedSizeEncodings'));
    },
    cellXProvided: function ImportKeys$CellXProvided() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellXProvided'));
    },
    cellYProvided: function ImportKeys$CellYProvided() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellYProvided'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.IncrementalUpdateInputKeys
  var $tab_IncrementalUpdateInputKeys = global.tab.IncrementalUpdateInputKeys = ss.mkType($asm, 'tab.IncrementalUpdateInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    supportedClientUpdates: function IncrementalUpdateInputKeys$SupportedClientUpdates() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SupportedClientUpdates'));
    },
    supportedDesktopUpdates: function IncrementalUpdateInputKeys$SupportedDesktopUpdates() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SupportedDesktopUpdates'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.IndexedFieldNameKeys
  var $tab_IndexedFieldNameKeys = global.tab.IndexedFieldNameKeys = ss.mkType($asm, 'tab.IndexedFieldNameKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    fieldName: function IndexedFieldNameKeys$FieldName() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FieldName'));
    },
    index: function IndexedFieldNameKeys$Index() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Index'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RWAL.IRuntimeWebModule
  var $tab_IRuntimeWebModule = global.tab.IRuntimeWebModule = ss.mkType($asm, 'tab.IRuntimeWebModule');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.IRWALSupport
  var $tab_IRWALSupport = global.tab.IRWALSupport = ss.mkType($asm, 'tab.IRWALSupport');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.JabbaManifest
  var $tab_JabbaManifest = global.tab.JabbaManifest = ss.mkType($asm, 'tab.JabbaManifest', function(manifests, offset) {
    this.typeId = 0;
    this.encoding = 0;
    this.dataOffset = 0;
    this.dataSize = 0;
    this.typeId = manifests[offset + 0];
    this.encoding = manifests[offset + 1];
    this.dataOffset = manifests[offset + 2];
    this.dataSize = manifests[offset + 3];
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.JabbaUnpacker
  var $tab_JabbaUnpacker = global.tab.JabbaUnpacker = ss.mkType($asm, 'tab.JabbaUnpacker', function(jabbaBlob) {
    this.$byteHeap = null;
    this.$jabbaBlob = null;
    this.$manifestCount = 0;
    this.$dataOffset = 0;
    this.$destinationSize = 0;
    this.$manifests = [];
    this.unpacked = [];
    this.$jabbaBlob = jabbaBlob;
    this.$unpackBlob();
  }, {
    $rehydrateRLE: function JabbaUnpacker$RehydrateRLE(packedRle) {
      var totalCount = 0;
      for (var i = 0; i < packedRle.length; i += 2) {
        totalCount += ss.trunc(packedRle[i]);
      }
      var rehydrated = new Float32Array(totalCount);
      var offset = 0;
      for (var i1 = 0; i1 < packedRle.length; i1 += 2) {
        var count = ss.trunc(packedRle[i1]);
        var val = packedRle[i1 + 1];
        for (var j = 0; j < count; j++) {
          rehydrated[offset++] = val;
        }
      }
      return rehydrated;
    },
    $rehydrateRLE$1: function JabbaUnpacker$RehydrateRLE(packedRle) {
      var totalCount = 0;
      for (var i = 0; i < packedRle.length; i += 2) {
        totalCount += ss.trunc(packedRle[i]);
      }
      var rehydrated = new Float64Array(totalCount);
      var offset = 0;
      for (var i1 = 0; i1 < packedRle.length; i1 += 2) {
        var count = ss.trunc(packedRle[i1]);
        var val = packedRle[i1 + 1];
        for (var j = 0; j < count; j++) {
          rehydrated[offset++] = val;
        }
      }
      return rehydrated;
    },
    $unpackBlob: function JabbaUnpacker$UnpackBlob() {
      this.$readHeader();
      this.$readManifests();
      this.$byteHeap = new Uint8Array(this.$destinationSize);
      var heapOffset = 0;
      var currentOffset = 0;
      for (var $t1 = 0; $t1 < this.$manifests.length; $t1++) {
        var m = this.$manifests[$t1];
        currentOffset = heapOffset;
        var unpackedSize = this.$decodeManifest(m, heapOffset);
        heapOffset += unpackedSize;
        heapOffset += this.$computeAlignmentPadding(heapOffset, 8);
        if (m.encoding === 3) {
          if (m.typeId === 51) {
            var packedRle = ss.cast($tab_HuttUtils.getMappedArrayJabba(51, this.$byteHeap.buffer, currentOffset, unpackedSize), Float64Array);
            var rehydrated = this.$rehydrateRLE$1(packedRle);
            this.unpacked.push(rehydrated);
          }
          else if (m.typeId === 50) {
            var packedRle1 = ss.cast($tab_HuttUtils.getMappedArrayJabba(50, this.$byteHeap.buffer, currentOffset, unpackedSize), Float32Array);
            var rehydrated1 = this.$rehydrateRLE(packedRle1);
            this.unpacked.push(rehydrated1);
          }
        }
        else {
          this.unpacked.push($tab_HuttUtils.getMappedArrayJabba(m.typeId, this.$byteHeap.buffer, currentOffset, unpackedSize));
        }
      }
    },
    $computeAlignmentPadding: function JabbaUnpacker$ComputeAlignmentPadding(size, boundary) {
      return ss.imod(boundary - ss.imod(size, boundary), boundary);
    },
    $decodeManifest: function JabbaUnpacker$DecodeManifest(m, heapOffset) {
      var manifestData = new Uint8Array(this.$jabbaBlob, this.$dataOffset + m.dataOffset, m.dataSize);
      if (m.encoding === 0 || m.encoding === 3) {
        this.$byteHeap.set(manifestData, heapOffset);
      }
      else if (m.encoding === 2) {
        return this.$decodeDeltaVliSigned(manifestData, heapOffset);
      }
      else {
        throw new ss.Exception('Unsupported encoding: ' + m.encoding);
      }
      return m.dataSize;
    },
    $decodeDeltaVliSigned: function JabbaUnpacker$DecodeDeltaVliSigned(manifestData, heapOffset) {
      var lastVal = 0;
      var dataOffset = 0;
      var destinationOffset = 0;
      var destination = new Int32Array(this.$byteHeap.buffer, heapOffset);
      while (dataOffset < manifestData.length) {
        if (manifestData[dataOffset] <= 240) {
          var $t1 = manifestData[dataOffset];
          lastVal = ($t1 >>> 1 ^ -($t1 & 1)) + lastVal;
          dataOffset += 1;
        }
        else if (manifestData[dataOffset] <= 248) {
          var $t2 = 240 + 256 * (manifestData[dataOffset] - 241) + manifestData[dataOffset + 1];
          lastVal = ($t2 >>> 1 ^ -($t2 & 1)) + lastVal;
          dataOffset += 2;
        }
        else if (manifestData[dataOffset] === 249) {
          var $t3 = 2288 + 256 * manifestData[dataOffset + 1] + manifestData[dataOffset + 2];
          lastVal = ($t3 >>> 1 ^ -($t3 & 1)) + lastVal;
          dataOffset += 3;
        }
        else if (manifestData[dataOffset] === 250) {
          var $t4 = manifestData[dataOffset + 1] * (1 << 16) + manifestData[dataOffset + 2] * (1 << 8) + manifestData[dataOffset + 3];
          lastVal = ($t4 >>> 1 ^ -($t4 & 1)) + lastVal;
          dataOffset += 4;
        }
        else if (manifestData[dataOffset] === 251) {
          var $t5 = manifestData[dataOffset + 1] * (1 << 24) + manifestData[dataOffset + 2] * (1 << 16) + manifestData[dataOffset + 3] * (1 << 8) + manifestData[dataOffset + 4];
          lastVal = ($t5 >>> 1 ^ -($t5 & 1)) + lastVal;
          dataOffset += 5;
        }
        else if (manifestData[dataOffset] === 252) {
          var $t6 = manifestData[dataOffset + 1] * (1 << 32) + manifestData[dataOffset + 2] * (1 << 24) + manifestData[dataOffset + 3] * (1 << 16) + manifestData[dataOffset + 4] * (1 << 8) + manifestData[dataOffset + 5];
          lastVal = ($t6 >>> 1 ^ -($t6 & 1)) + lastVal;
          dataOffset += 6;
        }
        destination[destinationOffset++] = ss.trunc(lastVal);
      }
      return destinationOffset * 4;
    },
    $readHeader: function JabbaUnpacker$ReadHeader() {
      var reader = new DataView(this.$jabbaBlob);
      var magic = reader.getUint16(0, true);
      var version = reader.getUint16(2, true);
      this.$destinationSize = reader.getInt32(4, true);
      this.$manifestCount = reader.getInt32(8, true);
      this.$dataOffset = reader.getInt32(12, true);
      if (magic !== 43962) {
        throw new ss.Exception('Magic number mismatch: ' + magic);
      }
      if (version !== 1) {
        throw new ss.Exception('Unsupported JABBA version ' + version);
      }
    },
    $readManifests: function JabbaUnpacker$ReadManifests() {
      var manifestData = new Uint32Array(this.$jabbaBlob, 16, this.$manifestCount * Uint32Array.BYTES_PER_ELEMENT);
      for (var i = 0; i < this.$manifestCount; i++) {
        this.$manifests.push(new $tab_JabbaManifest(manifestData, i * Uint32Array.BYTES_PER_ELEMENT));
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.JsHeapMarshaller
  var $tab_JsHeapMarshaller = global.tab.JsHeapMarshaller = ss.mkType($asm, 'tab.JsHeapMarshaller', function(heap) {
    this.data = null;
    this.stringTable = {};
    this.marshalled = {};
    this.heap = null;
    this.jabba = null;
    this.heap = heap;
    this.jabba = new $tab_JabbaUnpacker(heap);
    this.data = new $tab_MarshalledVectors(this.jabba);
    this.$populateStringTable();
  }, {
    $populateStringTable: function JsHeapMarshaller$PopulateStringTable() {
      var curOffset = this.data.stringBuffer.byteOffset;
      var len = this.data.stringLengths.length;
      for (var i = 0; i < len; i++) {
        var curLength = this.data.stringLengths[i];
        this.stringTable[i] = $tab_Utf8TextDecoder.decode(new Uint8Array(this.data.stringBuffer.buffer, curOffset, curLength));
        curOffset += curLength;
      }
    }
  }, {
    $ctor1: function(heap, heapoffset) {
      this.data = null;
      this.stringTable = {};
      this.marshalled = {};
      this.heap = null;
      this.jabba = null;
      this.heap = heap;
      this.jabba = null;
      var marshalled_struct = new Int32Array(this.heap, heapoffset, 10);
      this.data = new $tab_MarshalledVectors.$ctor1(marshalled_struct, this.heap);
      this.$populateStringTable();
    },
    unmarshall$1: function JsHeapMarshaller$Unmarshall(heap, heapoffset) {
      var marshaller = new $tab_JsHeapMarshaller.$ctor1(heap, heapoffset);
      var builder = new $tab_$ObjectBuilder(marshaller);
      return builder.$buildObject();
    },
    unmarshall: function JsHeapMarshaller$Unmarshall(heap) {
      var marshaller = new $tab_JsHeapMarshaller(heap);
      var builder = new $tab_$ObjectBuilder(marshaller);
      return builder.$buildObject();
    },
    unmarshallHex: function JsHeapMarshaller$UnmarshallHex(hexstr) {
      if (!ss.keyExists($tab_JsHeapMarshaller.$decoderCache, hexstr)) {
        $tab_JsHeapMarshaller.$decoderCache[hexstr] = $tab_JsHeapMarshaller.unmarshall($tab_JsHeapMarshaller.$fromHex(hexstr));
      }
      if ($tab_$ObjectBuilder.$useWriteDetector) {
        return $tab_JsHeapMarshaller.$decoderCache[hexstr];
      }
      else {
        var copy = {};
        _.extend(copy, $tab_JsHeapMarshaller.$decoderCache[hexstr]);
        return copy;
      }
    },
    unmarshallBase64: function JsHeapMarshaller$UnmarshallBase64(b64str) {
      var decodedLen = $tab_Base64HeapDecoder.decodedLength(b64str);
      var decoded = new Uint8Array(decodedLen);
      $tab_Base64HeapDecoder.run(0, decoded, b64str);
      return $tab_JsHeapMarshaller.unmarshall(decoded.buffer);
    },
    $fromHex: function JsHeapMarshaller$FromHex(hex) {
      var unpacked = new Uint8Array($tab_HexHeapDecoder.decodedLength(hex));
      $tab_HexHeapDecoder.run(0, unpacked, hex);
      return unpacked.buffer;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.KeyPath
  var $tab_KeyPath = global.tab.KeyPath = ss.mkType($asm, 'tab.KeyPath', function() {
    this.$keyPath = null;
    this.$parent = null;
    this.$initialize('', null);
  }, {
    get_base: function KeyPath$get_Base() {
      return this;
    },
    get_parent: function KeyPath$get_Parent() {
      return this.$parent;
    },
    get_isEmpty: function KeyPath$get_IsEmpty() {
      return this.$keyPath.length === 0;
    },
    $initialize: function KeyPath$Initialize(key_path, parent_key) {
      this.$keyPath = key_path;
      this.$parent = parent_key;
    },
    add: function KeyPath$Add(key_path) {
      if (key_path.length === 0) {
        throw new ss.Exception("LogicAssert: Can't add empty key");
      }
      if (this.$keyPath.length === 0) {
        return new $tab_KeyPath.$ctor3(key_path, this);
      }
      return new $tab_KeyPath.$ctor3(this.get_base() + $tab_KeyPath.$separtor + key_path, this);
    },
    add$1: function KeyPath$Add(key_path) {
      return this.add(key_path.$keyPath);
    },
    toString: function KeyPath$ToString() {
      return this.$keyPath;
    }
  }, {
    $ctor1: function(key_path) {
      this.$keyPath = null;
      this.$parent = null;
      this.$initialize(key_path, null);
    },
    $ctor2: function(base_key) {
      this.$keyPath = null;
      this.$parent = null;
      this.$initialize(base_key.$keyPath, null);
    },
    $ctor3: function(key_path, parent_key) {
      this.$keyPath = null;
      this.$parent = null;
      this.$initialize(key_path, parent_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LabelPlacementKeys
  var $tab_LabelPlacementKeys = global.tab.LabelPlacementKeys = ss.mkType($asm, 'tab.LabelPlacementKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    textEncodingTable: function LabelPlacementKeys$TextEncodingTable() {
      return new $tab_TextEncodingTableKeys.$ctor1(this.get_base().add('TextEncodingTable'));
    },
    textRunTable: function LabelPlacementKeys$TextRunTable() {
      return new $tab_TextRunTableKeys.$ctor1(this.get_base().add('TextRunTable'));
    },
    textStyleTable: function LabelPlacementKeys$TextStyleTable() {
      return new $tab_TextStyleTableKeys.$ctor1(this.get_base().add('TextStyleTable'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LabelSkipInputKeys
  var $tab_LabelSkipInputKeys = global.tab.LabelSkipInputKeys = ss.mkType($asm, 'tab.LabelSkipInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    perHeaderMajorTickPlacement: function LabelSkipInputKeys$PerHeaderMajorTickPlacement() {
      return new $tab_TickProducerPerHeaderOutputTableKeys.$ctor1(this.get_base().add('PerHeaderMajorTickPlacement'));
    },
    columnFormat: function LabelSkipInputKeys$ColumnFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColumnFormat'));
    },
    updatedColumnFormat: function LabelSkipInputKeys$UpdatedColumnFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UpdatedColumnFormat'));
    },
    labelStyle: function LabelSkipInputKeys$LabelStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyle'));
    },
    encodedTickPositions: function LabelSkipInputKeys$EncodedTickPositions() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EncodedTickPositions'));
    },
    tickLabelValues: function LabelSkipInputKeys$TickLabelValues() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TickLabelValues'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LabelSkipOutputTableKeys
  var $tab_LabelSkipOutputTableKeys = global.tab.LabelSkipOutputTableKeys = ss.mkType($asm, 'tab.LabelSkipOutputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    skip: function LabelSkipOutputTableKeys$Skip() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Skip'));
    },
    includeFirstLabel: function LabelSkipOutputTableKeys$IncludeFirstLabel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IncludeFirstLabel'));
    },
    includeLastLabel: function LabelSkipOutputTableKeys$IncludeLastLabel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IncludeLastLabel'));
    },
    headerIndex: function LabelSkipOutputTableKeys$HeaderIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderIndex'));
    },
    labelOffset: function LabelSkipOutputTableKeys$LabelOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelOffset'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LabelStoreKeys
  var $tab_LabelStoreKeys = global.tab.LabelStoreKeys = ss.mkType($asm, 'tab.LabelStoreKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    pdMarks: function LabelStoreKeys$PDMarks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PDMarks'));
    },
    pageIntervalTable: function LabelStoreKeys$PageIntervalTable() {
      return new $tab_PageIntervalTableKeys.$ctor1(this.get_base().add('PageIntervalTable'));
    },
    panes: function LabelStoreKeys$Panes() {
      return new $tab_PaneMarksKeys.$ctor1(this.get_base().add('Panes'));
    },
    userPaneInfo: function LabelStoreKeys$UserPaneInfo() {
      return new $tab_UserPaneInfoKeys.$ctor1(this.get_base().add('UserPaneInfo'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LayoutInputStoreKeys
  var $tab_LayoutInputStoreKeys = global.tab.LayoutInputStoreKeys = ss.mkType($asm, 'tab.LayoutInputStoreKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    axisProducerData: function LayoutInputStoreKeys$AxisProducerData() {
      return new $tab_AxisProducerInputKeys.$ctor1(this.get_base().add('AxisProducerData'));
    },
    sceneMarginStylesData: function LayoutInputStoreKeys$SceneMarginStylesData() {
      return new $tab_SceneMarginStylesProducerInputKeys.$ctor1(this.get_base().add('SceneMarginStylesData'));
    },
    encodingData: function LayoutInputStoreKeys$EncodingData() {
      return new $tab_CommonEncodingsKeys.$ctor1(this.get_base().add('EncodingData'));
    },
    extendedDomain: function LayoutInputStoreKeys$ExtendedDomain() {
      return new $tab_ExtendedDomainKeys.$ctor1(this.get_base().add('ExtendedDomain'));
    },
    gridLineProducerData: function LayoutInputStoreKeys$GridLineProducerData() {
      return new $tab_GridLineProducerInputKeys.$ctor1(this.get_base().add('GridLineProducerData'));
    },
    markLayoutTempKeys: function LayoutInputStoreKeys$MarkLayoutTempKeys() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkLayoutTempKeys'));
    },
    tickProducerData: function LayoutInputStoreKeys$TickProducerData() {
      return new $tab_TickProducerInputKeys.$ctor1(this.get_base().add('TickProducerData'));
    },
    pdMarksData: function LayoutInputStoreKeys$PDMarksData(pDMarksDataKey) {
      if (ss.startsWithString(pDMarksDataKey, String.fromCharCode(39)) || ss.startsWithString(pDMarksDataKey, String.fromCharCode(34))) {
        return new $tab_MarkLayoutDataKeys.$ctor1(this.get_base().add('PDMarksData').add(pDMarksDataKey));
      }
      return new $tab_MarkLayoutDataKeys.$ctor1(this.get_base().add('PDMarksData').add(ss.formatString("'{0}'", pDMarksDataKey)));
    },
    partitionResultStore: function LayoutInputStoreKeys$PartitionResultStore() {
      return new $tab_PartitionResultStoreKeys.$ctor1(this.get_base().add('PartitionResultStore'));
    },
    importData: function LayoutInputStoreKeys$ImportData(importDataKey) {
      if (ss.startsWithString(importDataKey, String.fromCharCode(39)) || ss.startsWithString(importDataKey, String.fromCharCode(34))) {
        return new $tab_ImportKeys.$ctor1(this.get_base().add('ImportData').add(importDataKey));
      }
      return new $tab_ImportKeys.$ctor1(this.get_base().add('ImportData').add(ss.formatString("'{0}'", importDataKey)));
    },
    refLinesData: function LayoutInputStoreKeys$RefLinesData() {
      return new $tab_ReferenceLineProducerInputKeys.$ctor1(this.get_base().add('RefLinesData'));
    },
    refLinesTotalTableMapData: function LayoutInputStoreKeys$RefLinesTotalTableMapData(refLinesTotalTableMapDataKey) {
      if (ss.startsWithString(refLinesTotalTableMapDataKey, String.fromCharCode(39)) || ss.startsWithString(refLinesTotalTableMapDataKey, String.fromCharCode(34))) {
        return new $tab_ReferenceLineTotalTableMapDataKeys.$ctor1(this.get_base().add('RefLinesTotalTableMapData').add(refLinesTotalTableMapDataKey));
      }
      return new $tab_ReferenceLineTotalTableMapDataKeys.$ctor1(this.get_base().add('RefLinesTotalTableMapData').add(ss.formatString("'{0}'", refLinesTotalTableMapDataKey)));
    },
    selectionData: function LayoutInputStoreKeys$SelectionData() {
      return new $tab_SelectionProducerInputKeys.$ctor1(this.get_base().add('SelectionData'));
    },
    incrementalUpdateData: function LayoutInputStoreKeys$IncrementalUpdateData() {
      return new $tab_IncrementalUpdateInputKeys.$ctor1(this.get_base().add('IncrementalUpdateData'));
    },
    paneStylesData: function LayoutInputStoreKeys$PaneStylesData() {
      return new $tab_PaneStylesTableKeys.$ctor1(this.get_base().add('PaneStylesData'));
    },
    heatmapData: function LayoutInputStoreKeys$HeatmapData() {
      return new $tab_HeatmapProducerInputKeys.$ctor1(this.get_base().add('HeatmapData'));
    },
    visualLayoutData: function LayoutInputStoreKeys$VisualLayoutData() {
      return new $tab_VisualLayoutProducerInputKeys.$ctor1(this.get_base().add('VisualLayoutData'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LayoutResultStoreKeys
  var $tab_LayoutResultStoreKeys = global.tab.LayoutResultStoreKeys = ss.mkType($asm, 'tab.LayoutResultStoreKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    axisOutput: function LayoutResultStoreKeys$AxisOutput() {
      return new $tab_AxisProducerOutputKeys.$ctor1(this.get_base().add('AxisOutput'));
    },
    gridLines: function LayoutResultStoreKeys$GridLines() {
      return new $tab_GridLineProducerOutputKeys.$ctor1(this.get_base().add('GridLines'));
    },
    heatmap: function LayoutResultStoreKeys$Heatmap() {
      return new $tab_HeatmapProducerOutputKeys.$ctor1(this.get_base().add('Heatmap'));
    },
    pdMarks: function LayoutResultStoreKeys$PDMarks(pDMarksKey) {
      if (ss.startsWithString(pDMarksKey, String.fromCharCode(39)) || ss.startsWithString(pDMarksKey, String.fromCharCode(34))) {
        return new $tab_MarkLayoutOutputKeys.$ctor1(this.get_base().add('PDMarks').add(pDMarksKey));
      }
      return new $tab_MarkLayoutOutputKeys.$ctor1(this.get_base().add('PDMarks').add(ss.formatString("'{0}'", pDMarksKey)));
    },
    pageIntervalTable: function LayoutResultStoreKeys$PageIntervalTable() {
      return new $tab_PageIntervalTableKeys.$ctor1(this.get_base().add('PageIntervalTable'));
    },
    paneCount: function LayoutResultStoreKeys$PaneCount() {
      return new $tab_PaneCountersKeys.$ctor1(this.get_base().add('PaneCount'));
    },
    paneStyles: function LayoutResultStoreKeys$PaneStyles() {
      return new $tab_PaneStylesTableKeys.$ctor1(this.get_base().add('PaneStyles'));
    },
    firstPassRefLines: function LayoutResultStoreKeys$FirstPassRefLines(firstPassRefLinesKey) {
      if (ss.startsWithString(firstPassRefLinesKey, String.fromCharCode(39)) || ss.startsWithString(firstPassRefLinesKey, String.fromCharCode(34))) {
        return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('FirstPassRefLines').add(firstPassRefLinesKey));
      }
      return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('FirstPassRefLines').add(ss.formatString("'{0}'", firstPassRefLinesKey)));
    },
    refLines: function LayoutResultStoreKeys$RefLines(refLinesKey) {
      if (ss.startsWithString(refLinesKey, String.fromCharCode(39)) || ss.startsWithString(refLinesKey, String.fromCharCode(34))) {
        return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('RefLines').add(refLinesKey));
      }
      return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('RefLines').add(ss.formatString("'{0}'", refLinesKey)));
    },
    sceneMargin: function LayoutResultStoreKeys$SceneMargin() {
      return new $tab_SceneMarginKeys.$ctor1(this.get_base().add('SceneMargin'));
    },
    instantRefLines: function LayoutResultStoreKeys$InstantRefLines(instantRefLinesKey) {
      if (ss.startsWithString(instantRefLinesKey, String.fromCharCode(39)) || ss.startsWithString(instantRefLinesKey, String.fromCharCode(34))) {
        return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('InstantRefLines').add(instantRefLinesKey));
      }
      return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('InstantRefLines').add(ss.formatString("'{0}'", instantRefLinesKey)));
    },
    supportedIncrementalUpdates: function LayoutResultStoreKeys$SupportedIncrementalUpdates() {
      return new $tab_IncrementalUpdateInputKeys.$ctor1(this.get_base().add('SupportedIncrementalUpdates'));
    },
    tickPlacement: function LayoutResultStoreKeys$TickPlacement() {
      return new $tab_TickProducerOutputKeys.$ctor1(this.get_base().add('TickPlacement'));
    },
    viewpoint: function LayoutResultStoreKeys$Viewpoint() {
      return new $tab_ViewpointKeys.$ctor1(this.get_base().add('Viewpoint'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LinearFloatGeometryDecoder
  var $tab_LinearFloatGeometryDecoder = global.tab.LinearFloatGeometryDecoder = ss.mkType($asm, 'tab.LinearFloatGeometryDecoder', function(geomEncoded) {
    this.$geomOffset = 0;
    this.$geomEncoded = null;
    this.$geomOffset = 0;
    this.$geomEncoded = geomEncoded;
  }, {
    processEncodedGeometry: function LinearFloatGeometryDecoder$ProcessEncodedGeometry() {
      var result;
      switch (ss.trunc(this.$geomEncoded[this.$geomOffset++])) {
        case 1: {
          result = this.$processMultiPolygon();
          break;
        }
        case 2: {
          result = this.$processMultiLine();
          break;
        }
        case 3: {
          result = this.$processMultiPoint();
          break;
        }
        default: {
          this.$failDueToInvalidData();
          return null;
        }
      }
      if (this.$geomEncoded[this.$geomOffset++] !== 7) {
        this.$failDueToInvalidData();
      }
      if (this.$geomOffset !== this.$geomEncoded.length) {
        this.$failDueToInvalidData();
      }
      return result;
    },
    $processMultiPoint: function LinearFloatGeometryDecoder$ProcessMultiPoint() {
      var geometryPM = {};
      var biasX = 0;
      var biasY = 0;
      geometryPM.geometryType = 'multiPoint';
      var curMppm = {};
      geometryPM.multiPoint = curMppm;
      if (this.$geomOffset + 2 > this.$geomEncoded.length) {
        this.$failDueToInvalidData();
      }
      biasX = this.$geomEncoded[this.$geomOffset++];
      biasY = this.$geomEncoded[this.$geomOffset++];
      curMppm.pointsF = this.$copyFloats(biasX, biasY);
      return geometryPM;
    },
    $processMultiLine: function LinearFloatGeometryDecoder$ProcessMultiLine() {
      var geometryPM = { geometryType: 'multiLineString' };
      var curMlpm = {};
      var curLpm = null;
      if (this.$geomOffset + 2 > this.$geomEncoded.length) {
        this.$failDueToInvalidData();
      }
      var biasX = this.$geomEncoded[this.$geomOffset++];
      var biasY = this.$geomEncoded[this.$geomOffset++];
      while (this.$geomOffset < this.$geomEncoded.length && this.$geomEncoded[this.$geomOffset] !== 7) {
        switch (ss.trunc(this.$geomEncoded[this.$geomOffset++])) {
          case 4: {
            curMlpm = { lineList: [] };
            geometryPM.multiLine = curMlpm;
            break;
          }
          case 6: {
            curLpm = {};
            curMlpm.lineList.push(curLpm);
            curLpm.pointsF = this.$copyFloats(biasX, biasY);
            break;
          }
          default: {
            this.$failDueToInvalidData();
            break;
          }
        }
      }
      return geometryPM;
    },
    $processMultiPolygon: function LinearFloatGeometryDecoder$ProcessMultiPolygon() {
      var geometryPM = { geometryType: 'multiPolygon' };
      var curMppm = null;
      var curPpm = null;
      var curLpm = null;
      if (this.$geomOffset + 2 > this.$geomEncoded.length) {
        this.$failDueToInvalidData();
      }
      var biasX = this.$geomEncoded[this.$geomOffset++];
      var biasY = this.$geomEncoded[this.$geomOffset++];
      while (this.$geomOffset < this.$geomEncoded.length && this.$geomEncoded[this.$geomOffset] !== 7) {
        switch (ss.trunc(this.$geomEncoded[this.$geomOffset++])) {
          case 4: {
            curMppm = {};
            geometryPM.multiPolygon = curMppm;
            curMppm.polygonList = [];
            break;
          }
          case 5: {
            curPpm = { lineList: [] };
            curMppm.polygonList.push(curPpm);
            break;
          }
          case 6: {
            curLpm = {};
            curPpm.lineList.push(curLpm);
            curLpm.pointsF = this.$copyFloats(biasX, biasY);
            break;
          }
          default: {
            this.$failDueToInvalidData();
            break;
          }
        }
      }
      return geometryPM;
    },
    $copyFloats: function LinearFloatGeometryDecoder$CopyFloats(biasX, biasY) {
      if (this.$geomOffset >= this.$geomEncoded.length) {
        this.$failDueToInvalidData();
      }
      var lineLen = ss.trunc(this.$geomEncoded[this.$geomOffset++]);
      if (this.$geomOffset + lineLen > this.$geomEncoded.length) {
        this.$failDueToInvalidData();
      }
      var rval = new Array(lineLen);
      for (var i = 0; i < lineLen; i += 2) {
        rval[i] = this.$geomEncoded[this.$geomOffset++] + biasX;
        rval[i + 1] = this.$geomEncoded[this.$geomOffset++] + biasY;
      }
      return rval;
    },
    $failDueToInvalidData: function LinearFloatGeometryDecoder$FailDueToInvalidData() {
      throw new ss.Exception('Invalid geometry data around position ' + this.$geomOffset);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RWAL.LocalEmscripten
  var $tab_LocalEmscripten = global.tab.LocalEmscripten = ss.mkType($asm, 'tab.LocalEmscripten', function() {
  }, {
    executeVM: function LocalEmscripten$ExecuteVM(vmHandle) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_ExecuteVM', 32, null);
      try {
        var result = new $tab_DatastoreHandle(Module._ExecuteVM(vmHandle.handleValue), function(handleValue) {
          RuntimeHandleManager._HandleManagerReleaseDatastoreHandle(handleValue);
        });
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in ExecuteVM';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    $buildVMDirectBuffer: function LocalEmscripten$BuildVMDirectBuffer(vtl_ptr, vtl_count, dsHandle) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_BuildVM', 32, null);
      try {
        var result = new $tab_VMHandle(Module._BuildVM(vtl_ptr, vtl_count, dsHandle.handleValue), function(handleValue) {
          RuntimeHandleManager._HandleManagerReleaseVMHandle(handleValue);
        });
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in BuildVM';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    buildVMHex: function LocalEmscripten$BuildVMHex(vtlAsHex, dsHandle) {
      var vtl_size = $tab_HexHeapDecoder.decodedLength(vtlAsHex);
      var vtl_ptr = RuntimeWebModule._malloc(vtl_size);
      $tab_HexHeapDecoder.run(vtl_ptr, RuntimeWebModule.HEAPU8, vtlAsHex);
      var result = this.$buildVMDirectBuffer(vtl_ptr, vtl_size, dsHandle);
      RuntimeWebModule._free(vtl_ptr);
      return result;
    },
    $loadBinaryDatastoreDirectBuffer: function LocalEmscripten$LoadBinaryDatastoreDirectBuffer(buffer_ptr, buffer_count) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_LoadBinaryDatastore', 32, null);
      try {
        var result = new $tab_DatastoreHandle(Module._LoadBinaryDatastore(buffer_ptr, buffer_count), function(handleValue) {
          RuntimeHandleManager._HandleManagerReleaseDatastoreHandle(handleValue);
        });
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in LoadBinaryDatastore';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    loadBinaryDatastoreHex: function LocalEmscripten$LoadBinaryDatastoreHex(bufferAsHex) {
      var buffer_size = $tab_HexHeapDecoder.decodedLength(bufferAsHex);
      var buffer_ptr = RuntimeWebModule._malloc(buffer_size);
      $tab_HexHeapDecoder.run(buffer_ptr, RuntimeWebModule.HEAPU8, bufferAsHex);
      var result = this.$loadBinaryDatastoreDirectBuffer(buffer_ptr, buffer_size);
      RuntimeWebModule._free(buffer_ptr);
      return result;
    },
    initializeRuntime: function LocalEmscripten$InitializeRuntime() {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_InitializeRuntime', 32, null);
      try {
        Module._InitializeRuntime();
        deferred.resolve();
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in InitializeRuntime';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    marshallDatastore: function LocalEmscripten$MarshallDatastore(dsHandle) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_MarshallDatastore', 32, null);
      try {
        var huttOffset = Module._MarshallDatastore(dsHandle.handleValue);
        var result = $tab_JsHeapMarshaller.unmarshall$1(RuntimeWebModule.HEAPU8.buffer, huttOffset);
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in MarshallDatastore';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    $marshallDatastoreSubKeyDirectBuffer: function LocalEmscripten$MarshallDatastoreSubKeyDirectBuffer(dsHandle, subKey_ptr, subKey_count) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_MarshallDatastoreSubKey', 32, null);
      try {
        var huttOffset = Module._MarshallDatastoreSubKey(dsHandle.handleValue, subKey_ptr, subKey_count);
        var result = $tab_JsHeapMarshaller.unmarshall$1(RuntimeWebModule.HEAPU8.buffer, huttOffset);
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in MarshallDatastoreSubKey';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    marshallDatastoreSubKeyHex: function LocalEmscripten$MarshallDatastoreSubKeyHex(dsHandle, subKeyAsHex) {
      var subKey_size = $tab_HexHeapDecoder.decodedLength(subKeyAsHex);
      var subKey_ptr = RuntimeWebModule._malloc(subKey_size);
      $tab_HexHeapDecoder.run(subKey_ptr, RuntimeWebModule.HEAPU8, subKeyAsHex);
      var result = this.$marshallDatastoreSubKeyDirectBuffer(dsHandle, subKey_ptr, subKey_size);
      RuntimeWebModule._free(subKey_ptr);
      return result;
    },
    $loadAndApplyDataStoreUpdaterDirectBuffer: function LocalEmscripten$LoadAndApplyDataStoreUpdaterDirectBuffer(buffer_ptr, buffer_count, vmHandle) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_LoadAndApplyDataStoreUpdater', 32, null);
      try {
        var result = new $tab_DatastoreHandle(Module._LoadAndApplyDataStoreUpdater(buffer_ptr, buffer_count, vmHandle.handleValue), function(handleValue) {
          RuntimeHandleManager._HandleManagerReleaseDatastoreHandle(handleValue);
        });
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in LoadAndApplyDataStoreUpdater';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    loadAndApplyDataStoreUpdaterHex: function LocalEmscripten$LoadAndApplyDataStoreUpdaterHex(bufferAsHex, vmHandle) {
      var buffer_size = $tab_HexHeapDecoder.decodedLength(bufferAsHex);
      var buffer_ptr = RuntimeWebModule._malloc(buffer_size);
      $tab_HexHeapDecoder.run(buffer_ptr, RuntimeWebModule.HEAPU8, bufferAsHex);
      var result = this.$loadAndApplyDataStoreUpdaterDirectBuffer(buffer_ptr, buffer_size, vmHandle);
      RuntimeWebModule._free(buffer_ptr);
      return result;
    },
    localPanCommand: function LocalEmscripten$LocalPanCommand(vmHandle, initialDataStoreHandle, dataStoreHandle, deltaX, deltaY) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_LocalPanCommand', 32, null);
      try {
        var result = new $tab_DatastoreHandle(Module._LocalPanCommand(vmHandle.handleValue, initialDataStoreHandle.handleValue, dataStoreHandle.handleValue, deltaX, deltaY), function(handleValue) {
          RuntimeHandleManager._HandleManagerReleaseDatastoreHandle(handleValue);
        });
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in LocalPanCommand';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    localZoomCommand: function LocalEmscripten$LocalZoomCommand(vmHandle, initialDataStoreHandle, dataStoreHandle, x, y, w, h, isZoomIn) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_LocalZoomCommand', 32, null);
      try {
        var result = new $tab_DatastoreHandle(Module._LocalZoomCommand(vmHandle.handleValue, initialDataStoreHandle.handleValue, dataStoreHandle.handleValue, x, y, w, h, isZoomIn), function(handleValue) {
          RuntimeHandleManager._HandleManagerReleaseDatastoreHandle(handleValue);
        });
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in LocalZoomCommand';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    localZoomFactorCommand: function LocalEmscripten$LocalZoomFactorCommand(vmHandle, initialDataStoreHandle, dataStoreHandle, x, y, zoomFactor) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_LocalZoomFactorCommand', 32, null);
      try {
        var result = new $tab_DatastoreHandle(Module._LocalZoomFactorCommand(vmHandle.handleValue, initialDataStoreHandle.handleValue, dataStoreHandle.handleValue, x, y, zoomFactor), function(handleValue) {
          RuntimeHandleManager._HandleManagerReleaseDatastoreHandle(handleValue);
        });
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in LocalZoomFactorCommand';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    $rueUpdateCommandDirectBuffer: function LocalEmscripten$RueUpdateCommandDirectBuffer(vmHandle, rueUpdate_ptr, rueUpdate_count) {
      var deferred = $.Deferred();
      var mc = tabBootstrap.MetricsController.createContext('RW_RueUpdateCommand', 32, null);
      try {
        var result = new $tab_DatastoreHandle(Module._RueUpdateCommand(vmHandle.handleValue, rueUpdate_ptr, rueUpdate_count), function(handleValue) {
          RuntimeHandleManager._HandleManagerReleaseDatastoreHandle(handleValue);
        });
        deferred.resolve(result);
      }
      catch ($t1) {
        var e = ss.Exception.wrap($t1);
        deferred.reject();
        e = $tab_EmscriptenSupport.getExceptionInformation(e);
        e.name = 'RuntimeWebModule Error in RueUpdateCommand';
        console.error(e);
        tab.ErrorTrace.report(e, false);
      }
      mc.dispose();
      return deferred.promise();
    },
    rueUpdateCommandHex: function LocalEmscripten$RueUpdateCommandHex(vmHandle, rueUpdateAsHex) {
      var rueUpdate_size = $tab_HexHeapDecoder.decodedLength(rueUpdateAsHex);
      var rueUpdate_ptr = RuntimeWebModule._malloc(rueUpdate_size);
      $tab_HexHeapDecoder.run(rueUpdate_ptr, RuntimeWebModule.HEAPU8, rueUpdateAsHex);
      var result = this.$rueUpdateCommandDirectBuffer(vmHandle, rueUpdate_ptr, rueUpdate_size);
      RuntimeWebModule._free(rueUpdate_ptr);
      return result;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.LocalEmscriptenSupport
  var $tab_LocalEmscriptenSupport = global.tab.LocalEmscriptenSupport = ss.mkType($asm, 'tab.LocalEmscriptenSupport', function() {
  }, {
    paramToByteBuffer: function LocalEmscriptenSupport$ParamToByteBuffer(param) {
      var heapOffset = ss.unbox(ss.cast(param, ss.Int32));
      var bufferPtr = RuntimeWebModule.HEAPU32[heapOffset >> 2];
      var bufferSize = RuntimeWebModule.HEAPU32[(heapOffset >> 2) + 1];
      return RuntimeWebModule.HEAPU8.buffer.slice(bufferPtr, bufferPtr + bufferSize);
    },
    byteBufferToHeap: function LocalEmscriptenSupport$ByteBufferToHeap(buffer) {
      var bufferPtr = RuntimeWebModule._malloc(buffer.byteLength + 2);
      var bufferDestination = bufferPtr + 8;
      RuntimeWebModule.HEAPU32[bufferPtr >> 2] = bufferDestination;
      RuntimeWebModule.HEAPU32[(bufferPtr >> 2) + 1] = buffer.byteLength;
      RuntimeWebModule.HEAPU8.set(new Uint8Array(buffer), bufferDestination);
      return bufferPtr;
    },
    paramToString: function LocalEmscriptenSupport$ParamToString(param) {
      var heapOffset = ss.unbox(ss.cast(param, ss.Int32));
      return $tab_Utf8TextDecoder.decodeNullTerminated(RuntimeWebModule.HEAPU8.subarray(heapOffset));
    },
    stringToHeap: function LocalEmscriptenSupport$StringToHeap(str) {
      var encoded = $tab_Utf8TextEncoder.encode(str);
      var strPtr = RuntimeWebModule._malloc(encoded.length + 1);
      RuntimeWebModule.HEAPU8[strPtr + encoded.length] = 0;
      RuntimeWebModule.HEAPU8.set(encoded, strPtr);
      return strPtr;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LockedRatioKeys
  var $tab_LockedRatioKeys = global.tab.LockedRatioKeys = ss.mkType($asm, 'tab.LockedRatioKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    isMap: function LockedRatioKeys$IsMap() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsMap'));
    },
    hasPosition: function LockedRatioKeys$HasPosition() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasPosition'));
    },
    lockedRatioOfScales: function LockedRatioKeys$LockedRatioOfScales() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LockedRatioOfScales'));
    },
    defaultMinX: function LockedRatioKeys$DefaultMinX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultMinX'));
    },
    defaultMaxX: function LockedRatioKeys$DefaultMaxX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultMaxX'));
    },
    defaultMinY: function LockedRatioKeys$DefaultMinY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultMinY'));
    },
    defaultMaxY: function LockedRatioKeys$DefaultMaxY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultMaxY'));
    },
    defaultXSize: function LockedRatioKeys$DefaultXSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultXSize'));
    },
    defaultYSize: function LockedRatioKeys$DefaultYSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultYSize'));
    },
    singleItemMapDelta: function LockedRatioKeys$SingleItemMapDelta() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SingleItemMapDelta'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.LogTickPerHeaderInputTableKeys
  var $tab_LogTickPerHeaderInputTableKeys = global.tab.LogTickPerHeaderInputTableKeys = ss.mkType($asm, 'tab.LogTickPerHeaderInputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    headerIndex: function LogTickPerHeaderInputTableKeys$HeaderIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderIndex'));
    },
    vtlBlockIndex: function LogTickPerHeaderInputTableKeys$VtlBlockIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VtlBlockIndex'));
    },
    columnFormatIndex: function LogTickPerHeaderInputTableKeys$ColumnFormatIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColumnFormatIndex'));
    },
    showMajorTicks: function LogTickPerHeaderInputTableKeys$ShowMajorTicks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowMajorTicks'));
    },
    showMinorTicks: function LogTickPerHeaderInputTableKeys$ShowMinorTicks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowMinorTicks'));
    },
    labelStyleIndex: function LogTickPerHeaderInputTableKeys$LabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyleIndex'));
    },
    labelHeight: function LogTickPerHeaderInputTableKeys$LabelHeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelHeight'));
    },
    logBaseReference: function LogTickPerHeaderInputTableKeys$LogBaseReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LogBaseReference'));
    },
    originReference: function LogTickPerHeaderInputTableKeys$OriginReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OriginReference'));
    },
    perpendicularLabels: function LogTickPerHeaderInputTableKeys$PerpendicularLabels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerpendicularLabels'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.MapBoundsKeys
  var $tab_MapBoundsKeys = global.tab.MapBoundsKeys = ss.mkType($asm, 'tab.MapBoundsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    boundingBoxTops: function MapBoundsKeys$BoundingBoxTops() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BoundingBoxTops'));
    },
    boundingBoxBottoms: function MapBoundsKeys$BoundingBoxBottoms() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BoundingBoxBottoms'));
    },
    boundingBoxLefts: function MapBoundsKeys$BoundingBoxLefts() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BoundingBoxLefts'));
    },
    boundingBoxRights: function MapBoundsKeys$BoundingBoxRights() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BoundingBoxRights'));
    },
    latitudesForNullGeometries: function MapBoundsKeys$LatitudesForNullGeometries() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LatitudesForNullGeometries'));
    },
    longitudesForNullGeometries: function MapBoundsKeys$LongitudesForNullGeometries() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LongitudesForNullGeometries'));
    },
    latitudes: function MapBoundsKeys$Latitudes() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Latitudes'));
    },
    longitudes: function MapBoundsKeys$Longitudes() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Longitudes'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.MapLayersModelUpdateKeys
  var $tab_MapLayersModelUpdateKeys = global.tab.MapLayersModelUpdateKeys = ss.mkType($asm, 'tab.MapLayersModelUpdateKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    isValid: function MapLayersModelUpdateKeys$IsValid() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsValid'));
    },
    displayScale: function MapLayersModelUpdateKeys$DisplayScale() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DisplayScale'));
    },
    actualZoomLevel: function MapLayersModelUpdateKeys$ActualZoomLevel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ActualZoomLevel'));
    },
    coverage: function MapLayersModelUpdateKeys$Coverage() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Coverage'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.MapPackageKeys
  var $tab_MapPackageKeys = global.tab.MapPackageKeys = ss.mkType($asm, 'tab.MapPackageKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    mapCode: function MapPackageKeys$MapCode() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapCode'));
    },
    mapLayersModel: function MapPackageKeys$MapLayersModel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapLayersModel'));
    },
    mapProvider: function MapPackageKeys$MapProvider() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapProvider'));
    },
    mappedImageModel: function MapPackageKeys$MappedImageModel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MappedImageModel'));
    },
    mapSceneModel: function MapPackageKeys$MapSceneModel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapSceneModel'));
    },
    modelNumber: function MapPackageKeys$ModelNumber() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ModelNumber'));
    },
    sourceName: function MapPackageKeys$SourceName() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SourceName'));
    },
    styleName: function MapPackageKeys$StyleName() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('StyleName'));
    },
    waitForImages: function MapPackageKeys$WaitForImages() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WaitForImages'));
    },
    waitTileFill: function MapPackageKeys$WaitTileFill() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WaitTileFill'));
    },
    wrapCount: function MapPackageKeys$WrapCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WrapCount'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.MapProviderKeys
  var $tab_MapProviderKeys = global.tab.MapProviderKeys = ss.mkType($asm, 'tab.MapProviderKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    pixelsPerCRSUnitAtZoomLevel1: function MapProviderKeys$PixelsPerCRSUnitAtZoomLevel1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PixelsPerCRSUnitAtZoomLevel1'));
    },
    maxScaleLevel: function MapProviderKeys$MaxScaleLevel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MaxScaleLevel'));
    },
    tileSize: function MapProviderKeys$TileSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TileSize'));
    },
    intermediateLevels: function MapProviderKeys$IntermediateLevels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IntermediateLevels'));
    },
    isTileSizeAdjustable: function MapProviderKeys$IsTileSizeAdjustable() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsTileSizeAdjustable'));
    },
    minShrink: function MapProviderKeys$MinShrink() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinShrink'));
    },
    maxStretch: function MapProviderKeys$MaxStretch() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MaxStretch'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.MarkLayoutDataKeys
  var $tab_MarkLayoutDataKeys = global.tab.MarkLayoutDataKeys = ss.mkType($asm, 'tab.MarkLayoutDataKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    parameters: function MarkLayoutDataKeys$Parameters() {
      return new $tab_MarkLayoutParametersKeys.$ctor1(this.get_base().add('Parameters'));
    },
    geometryTable: function MarkLayoutDataKeys$GeometryTable() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('GeometryTable'));
    },
    textCompositionInputKeys: function MarkLayoutDataKeys$TextCompositionInputKeys() {
      return new $tab_TextCompositionInputKeys.$ctor1(this.get_base().add('TextCompositionInputKeys'));
    },
    textTableHelper: function MarkLayoutDataKeys$TextTableHelper() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextTableHelper'));
    },
    wordleRandomKeys: function MarkLayoutDataKeys$WordleRandomKeys() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WordleRandomKeys'));
    },
    xDomains: function MarkLayoutDataKeys$XDomains() {
      return new $tab_DomainLookupKeys.$ctor1(this.get_base().add('XDomains'));
    },
    xHiddenMarks: function MarkLayoutDataKeys$XHiddenMarks() {
      return new $tab_HiddenMarksKeys.$ctor1(this.get_base().add('XHiddenMarks'));
    },
    yDomains: function MarkLayoutDataKeys$YDomains() {
      return new $tab_DomainLookupKeys.$ctor1(this.get_base().add('YDomains'));
    },
    yHiddenMarks: function MarkLayoutDataKeys$YHiddenMarks() {
      return new $tab_HiddenMarksKeys.$ctor1(this.get_base().add('YHiddenMarks'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.MarkLayoutOutputKeys
  var $tab_MarkLayoutOutputKeys = global.tab.MarkLayoutOutputKeys = ss.mkType($asm, 'tab.MarkLayoutOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    color: function MarkLayoutOutputKeys$Color() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Color'));
    },
    domain: function MarkLayoutOutputKeys$Domain() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Domain'));
    },
    ellipses: function MarkLayoutOutputKeys$Ellipses() {
      return new $tab_EllipsisTableKeys.$ctor1(this.get_base().add('Ellipses'));
    },
    encodingData: function MarkLayoutOutputKeys$EncodingData() {
      return new $tab_CommonEncodingsKeys.$ctor1(this.get_base().add('EncodingData'));
    },
    encodings: function MarkLayoutOutputKeys$Encodings() {
      return new $tab_EncodingsTableKeys.$ctor1(this.get_base().add('Encodings'));
    },
    height: function MarkLayoutOutputKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    },
    hasPerMarkColorEncoding: function MarkLayoutOutputKeys$HasPerMarkColorEncoding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasPerMarkColorEncoding'));
    },
    hasPerMarkSizeEncoding: function MarkLayoutOutputKeys$HasPerMarkSizeEncoding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasPerMarkSizeEncoding'));
    },
    isMarkStacked: function MarkLayoutOutputKeys$IsMarkStacked() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsMarkStacked'));
    },
    markLayoutData: function MarkLayoutOutputKeys$MarkLayoutData() {
      return new $tab_MarkLayoutDataKeys.$ctor1(this.get_base().add('MarkLayoutData'));
    },
    scaledStartPoint: function MarkLayoutOutputKeys$ScaledStartPoint() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaledStartPoint'));
    },
    scaledEndPoint: function MarkLayoutOutputKeys$ScaledEndPoint() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaledEndPoint'));
    },
    textRunCount: function MarkLayoutOutputKeys$TextRunCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunCount'));
    },
    textRunOffset: function MarkLayoutOutputKeys$TextRunOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunOffset'));
    },
    textRunTable: function MarkLayoutOutputKeys$TextRunTable() {
      return new $tab_TextRunTableKeys.$ctor1(this.get_base().add('TextRunTable'));
    },
    textTable: function MarkLayoutOutputKeys$TextTable() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextTable'));
    },
    textStyleTable: function MarkLayoutOutputKeys$TextStyleTable() {
      return new $tab_TextStyleTableKeys.$ctor1(this.get_base().add('TextStyleTable'));
    },
    fontMetrics: function MarkLayoutOutputKeys$FontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontMetrics'));
    },
    treemapKeys: function MarkLayoutOutputKeys$TreemapKeys() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TreemapKeys'));
    },
    showLabels: function MarkLayoutOutputKeys$ShowLabels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowLabels'));
    },
    labelMode: function MarkLayoutOutputKeys$LabelMode() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelMode'));
    },
    width: function MarkLayoutOutputKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.MarkLayoutParametersKeys
  var $tab_MarkLayoutParametersKeys = global.tab.MarkLayoutParametersKeys = ss.mkType($asm, 'tab.MarkLayoutParametersKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    alpha: function MarkLayoutParametersKeys$Alpha() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Alpha'));
    },
    backgroundColor: function MarkLayoutParametersKeys$BackgroundColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BackgroundColor'));
    },
    borderColor: function MarkLayoutParametersKeys$BorderColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BorderColor'));
    },
    cellHeight: function MarkLayoutParametersKeys$CellHeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellHeight'));
    },
    cellWidth: function MarkLayoutParametersKeys$CellWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellWidth'));
    },
    clipHeight: function MarkLayoutParametersKeys$ClipHeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ClipHeight'));
    },
    clipWidth: function MarkLayoutParametersKeys$ClipWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ClipWidth'));
    },
    color: function MarkLayoutParametersKeys$Color() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Color'));
    },
    drawBorder: function MarkLayoutParametersKeys$DrawBorder() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DrawBorder'));
    },
    dropLineFlags: function MarkLayoutParametersKeys$DropLineFlags() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DropLineFlags'));
    },
    haloColor: function MarkLayoutParametersKeys$HaloColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HaloColor'));
    },
    hasFoldedAxis: function MarkLayoutParametersKeys$HasFoldedAxis() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasFoldedAxis'));
    },
    hasHalos: function MarkLayoutParametersKeys$HasHalos() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasHalos'));
    },
    handleSpecialsX: function MarkLayoutParametersKeys$HandleSpecialsX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HandleSpecialsX'));
    },
    handleSpecialsY: function MarkLayoutParametersKeys$HandleSpecialsY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HandleSpecialsY'));
    },
    hasEmptyOrEqualAxis: function MarkLayoutParametersKeys$HasEmptyOrEqualAxis() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasEmptyOrEqualAxis'));
    },
    hasSortEncoding: function MarkLayoutParametersKeys$HasSortEncoding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasSortEncoding'));
    },
    independentAxis: function MarkLayoutParametersKeys$IndependentAxis() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IndependentAxis'));
    },
    height: function MarkLayoutParametersKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    },
    highlightedHaloColor: function MarkLayoutParametersKeys$HighlightedHaloColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HighlightedHaloColor'));
    },
    scaleTypeX: function MarkLayoutParametersKeys$ScaleTypeX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaleTypeX'));
    },
    scaleTypeY: function MarkLayoutParametersKeys$ScaleTypeY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaleTypeY'));
    },
    labelOnePerGroup: function MarkLayoutParametersKeys$LabelOnePerGroup() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelOnePerGroup'));
    },
    labelTargetPrimitiveId: function MarkLayoutParametersKeys$LabelTargetPrimitiveId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelTargetPrimitiveId'));
    },
    lineInterpolation: function MarkLayoutParametersKeys$LineInterpolation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineInterpolation'));
    },
    markFlags: function MarkLayoutParametersKeys$MarkFlags() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkFlags'));
    },
    markLabelPadding: function MarkLayoutParametersKeys$MarkLabelPadding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkLabelPadding'));
    },
    markTrailAutoColor: function MarkLayoutParametersKeys$MarkTrailAutoColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkTrailAutoColor'));
    },
    markTrailColor: function MarkLayoutParametersKeys$MarkTrailColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkTrailColor'));
    },
    markTrailCount: function MarkLayoutParametersKeys$MarkTrailCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkTrailCount'));
    },
    markTrailEndEffect: function MarkLayoutParametersKeys$MarkTrailEndEffect() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkTrailEndEffect'));
    },
    markTrailStartEffect: function MarkLayoutParametersKeys$MarkTrailStartEffect() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkTrailStartEffect'));
    },
    markTrailTransparency: function MarkLayoutParametersKeys$MarkTrailTransparency() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkTrailTransparency'));
    },
    minBarHeight: function MarkLayoutParametersKeys$MinBarHeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinBarHeight'));
    },
    minBarWidth: function MarkLayoutParametersKeys$MinBarWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinBarWidth'));
    },
    pageTrailMarksToTrail: function MarkLayoutParametersKeys$PageTrailMarksToTrail() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PageTrailMarksToTrail'));
    },
    paneFlags: function MarkLayoutParametersKeys$PaneFlags() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneFlags'));
    },
    paneHasBackground: function MarkLayoutParametersKeys$PaneHasBackground() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneHasBackground'));
    },
    primitiveType: function MarkLayoutParametersKeys$PrimitiveType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PrimitiveType'));
    },
    selectedHaloColor: function MarkLayoutParametersKeys$SelectedHaloColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedHaloColor'));
    },
    selectedMultiPrimHaloColor: function MarkLayoutParametersKeys$SelectedMultiPrimHaloColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedMultiPrimHaloColor'));
    },
    shapeId: function MarkLayoutParametersKeys$ShapeId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShapeId'));
    },
    showRunningOrderLabels: function MarkLayoutParametersKeys$ShowRunningOrderLabels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowRunningOrderLabels'));
    },
    size: function MarkLayoutParametersKeys$Size() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Size'));
    },
    trailOverrides: function MarkLayoutParametersKeys$TrailOverrides() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TrailOverrides'));
    },
    vizType: function MarkLayoutParametersKeys$VizType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VizType'));
    },
    width: function MarkLayoutParametersKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    },
    wrapDomain: function MarkLayoutParametersKeys$WrapDomain() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WrapDomain'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.MarkLayoutTempKeys
  var $tab_MarkLayoutTempKeys = global.tab.MarkLayoutTempKeys = ss.mkType($asm, 'tab.MarkLayoutTempKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    cellSizeDefault: function MarkLayoutTempKeys$CellSizeDefault() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellSizeDefault'));
    },
    cellSizeDefaultConst: function MarkLayoutTempKeys$CellSizeDefaultConst() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellSizeDefaultConst'));
    },
    cellX: function MarkLayoutTempKeys$CellX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellX'));
    },
    cellY: function MarkLayoutTempKeys$CellY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellY'));
    },
    clipHeight: function MarkLayoutTempKeys$ClipHeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ClipHeight'));
    },
    clipWidth: function MarkLayoutTempKeys$ClipWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ClipWidth'));
    },
    color: function MarkLayoutTempKeys$Color() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Color'));
    },
    colorBeforeAlpha: function MarkLayoutTempKeys$ColorBeforeAlpha() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColorBeforeAlpha'));
    },
    geometry: function MarkLayoutTempKeys$Geometry() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Geometry'));
    },
    height: function MarkLayoutTempKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    },
    isMarkStacked: function MarkLayoutTempKeys$IsMarkStacked() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsMarkStacked'));
    },
    markStackIndex: function MarkLayoutTempKeys$MarkStackIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkStackIndex'));
    },
    markFlagsX: function MarkLayoutTempKeys$MarkFlagsX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkFlagsX'));
    },
    markFlagsY: function MarkLayoutTempKeys$MarkFlagsY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkFlagsY'));
    },
    markFlags: function MarkLayoutTempKeys$MarkFlags() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkFlags'));
    },
    markId: function MarkLayoutTempKeys$MarkId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkId'));
    },
    paneIndex: function MarkLayoutTempKeys$PaneIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneIndex'));
    },
    paneCol: function MarkLayoutTempKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    panePage: function MarkLayoutTempKeys$PanePage() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PanePage'));
    },
    paneRow: function MarkLayoutTempKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    predictionIntervalLowerEnd: function MarkLayoutTempKeys$PredictionIntervalLowerEnd() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PredictionIntervalLowerEnd'));
    },
    predictionIntervalUpperEnd: function MarkLayoutTempKeys$PredictionIntervalUpperEnd() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PredictionIntervalUpperEnd'));
    },
    predictionWhiskerWidth: function MarkLayoutTempKeys$PredictionWhiskerWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PredictionWhiskerWidth'));
    },
    primitiveId: function MarkLayoutTempKeys$PrimitiveId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PrimitiveId'));
    },
    shapeId: function MarkLayoutTempKeys$ShapeId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShapeId'));
    },
    rho: function MarkLayoutTempKeys$Rho() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Rho'));
    },
    rho1: function MarkLayoutTempKeys$Rho1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Rho1'));
    },
    size: function MarkLayoutTempKeys$Size() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Size'));
    },
    sizeGantt: function MarkLayoutTempKeys$SizeGantt() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SizeGantt'));
    },
    sizeLabel: function MarkLayoutTempKeys$SizeLabel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SizeLabel'));
    },
    sizeOutputs: function MarkLayoutTempKeys$SizeOutputs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SizeOutputs'));
    },
    xRawInput: function MarkLayoutTempKeys$XRawInput() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XRawInput'));
    },
    yRawInput: function MarkLayoutTempKeys$YRawInput() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YRawInput'));
    },
    lookupColor: function MarkLayoutTempKeys$LookupColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LookupColor'));
    },
    theta: function MarkLayoutTempKeys$Theta() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Theta'));
    },
    theta1: function MarkLayoutTempKeys$Theta1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Theta1'));
    },
    trailId: function MarkLayoutTempKeys$TrailId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TrailId'));
    },
    tupleId: function MarkLayoutTempKeys$TupleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TupleId'));
    },
    userPaneCol: function MarkLayoutTempKeys$UserPaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UserPaneCol'));
    },
    userPaneRow: function MarkLayoutTempKeys$UserPaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UserPaneRow'));
    },
    weight: function MarkLayoutTempKeys$Weight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Weight'));
    },
    width: function MarkLayoutTempKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    },
    x: function MarkLayoutTempKeys$X() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X'));
    },
    x1: function MarkLayoutTempKeys$X1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X1'));
    },
    xNext: function MarkLayoutTempKeys$XNext() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XNext'));
    },
    xPrev: function MarkLayoutTempKeys$XPrev() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XPrev'));
    },
    xPriorToWrap: function MarkLayoutTempKeys$XPriorToWrap() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XPriorToWrap'));
    },
    xProj: function MarkLayoutTempKeys$XProj() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XProj'));
    },
    y: function MarkLayoutTempKeys$Y() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y'));
    },
    y1: function MarkLayoutTempKeys$Y1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y1'));
    },
    yNext: function MarkLayoutTempKeys$YNext() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YNext'));
    },
    yPrev: function MarkLayoutTempKeys$YPrev() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YPrev'));
    },
    yProj: function MarkLayoutTempKeys$YProj() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YProj'));
    },
    xDomains: function MarkLayoutTempKeys$XDomains() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XDomains'));
    },
    yDomains: function MarkLayoutTempKeys$YDomains() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YDomains'));
    },
    ellipses: function MarkLayoutTempKeys$Ellipses() {
      return new $tab_EllipsisTableKeys.$ctor1(this.get_base().add('Ellipses'));
    },
    packedLayout: function MarkLayoutTempKeys$PackedLayout() {
      return new $tab_PackedLayoutKeys.$ctor1(this.get_base().add('PackedLayout'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.MarshalledVectors
  var $tab_MarshalledVectors = global.tab.MarshalledVectors = ss.mkType($asm, 'tab.MarshalledVectors', function(jabba) {
    this.stringBuffer = null;
    this.stringLengths = null;
    this.opCodes = null;
    this.intBuffer = null;
    this.doubleBuffer = null;
    var hfsStart = jabba.unpacked.length - 5;
    this.stringBuffer = ss.cast(jabba.unpacked[hfsStart], Uint8Array);
    this.stringLengths = ss.cast(jabba.unpacked[hfsStart + 1], Uint32Array);
    this.opCodes = ss.cast(jabba.unpacked[hfsStart + 2], Uint8Array);
    this.intBuffer = ss.cast(jabba.unpacked[hfsStart + 3], Int32Array);
    this.doubleBuffer = ss.cast(jabba.unpacked[hfsStart + 4], Float64Array);
  }, null, {
    $ctor1: function(marshalled, heap) {
      this.stringBuffer = null;
      this.stringLengths = null;
      this.opCodes = null;
      this.intBuffer = null;
      this.doubleBuffer = null;
      this.stringBuffer = new Uint8Array(heap, marshalled[0], marshalled[1]);
      this.stringLengths = new Uint32Array(heap, marshalled[2], marshalled[3]);
      this.opCodes = new Uint8Array(heap, marshalled[4], marshalled[5]);
      this.intBuffer = new Int32Array(heap, marshalled[6], marshalled[7]);
      this.doubleBuffer = new Float64Array(heap, marshalled[8], marshalled[9]);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.MarshallerHandle
  var $tab_MarshallerHandle = global.tab.MarshallerHandle = ss.mkType($asm, 'tab.MarshallerHandle', function(handleValue, disposeMethod) {
    $tab_OpaqueHandle.call(this, handleValue, disposeMethod);
  }, {
    get_typeCode: function MarshallerHandle$get_TypeCode() {
      return 18;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.NestedSortIndicatorDataTableKeys
  var $tab_NestedSortIndicatorDataTableKeys = global.tab.NestedSortIndicatorDataTableKeys = ss.mkType($asm, 'tab.NestedSortIndicatorDataTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    sortIndicatorDirection: function NestedSortIndicatorDataTableKeys$SortIndicatorDirection() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorDirection'));
    },
    sortIndicatorHash: function NestedSortIndicatorDataTableKeys$SortIndicatorHash() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorHash'));
    },
    sortIndicatorTooltip: function NestedSortIndicatorDataTableKeys$SortIndicatorTooltip() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SortIndicatorTooltip'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.NodeLevelStyleDataTableKeys
  var $tab_NodeLevelStyleDataTableKeys = global.tab.NodeLevelStyleDataTableKeys = ss.mkType($asm, 'tab.NodeLevelStyleDataTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    totalType: function NodeLevelStyleDataTableKeys$TotalType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TotalType'));
    },
    shouldUseBandFillColor: function NodeLevelStyleDataTableKeys$ShouldUseBandFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShouldUseBandFillColor'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.NoneTickPerHeaderInputTableKeys
  var $tab_NoneTickPerHeaderInputTableKeys = global.tab.NoneTickPerHeaderInputTableKeys = ss.mkType($asm, 'tab.NoneTickPerHeaderInputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    headerIndex: function NoneTickPerHeaderInputTableKeys$HeaderIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderIndex'));
    },
    vtlBlockIndex: function NoneTickPerHeaderInputTableKeys$VtlBlockIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VtlBlockIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.NumberMapKeys
  var $tab_NumberMapKeys = global.tab.NumberMapKeys = ss.mkType($asm, 'tab.NumberMapKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    dataType: function NumberMapKeys$DataType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DataType'));
    },
    fieldType: function NumberMapKeys$FieldType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FieldType'));
    },
    domainMin: function NumberMapKeys$DomainMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainMin'));
    },
    domainMax: function NumberMapKeys$DomainMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainMax'));
    },
    rangeMin: function NumberMapKeys$RangeMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangeMin'));
    },
    rangeMax: function NumberMapKeys$RangeMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RangeMax'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.OpaqueHandle
  var $tab_OpaqueHandle = global.tab.OpaqueHandle = ss.mkType($asm, 'tab.OpaqueHandle', function(handleValue, disposeMethod) {
    this.handleValue = 0;
    this.$disposeMethod = null;
    this.$disposedValue = false;
    ss.Debug.assert((handleValue & 255) === this.get_typeCode(), handleValue + ' given handleValue does not have right type tag for typeCode ' + this.get_typeCode());
    this.handleValue = handleValue;
    this.$disposeMethod = disposeMethod;
  }, {
    get_typeCode: null,
    dispose: function OpaqueHandle$Dispose() {
      ss.Debug.assert(!this.$disposedValue, 'Disposing an already disposed object');
      if (!this.$disposedValue) {
        this.$disposeMethod(this.handleValue);
        this.$disposedValue = true;
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PackedLayoutKeys
  var $tab_PackedLayoutKeys = global.tab.PackedLayoutKeys = ss.mkType($asm, 'tab.PackedLayoutKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    size: function PackedLayoutKeys$Size() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Size'));
    },
    x: function PackedLayoutKeys$X() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X'));
    },
    y: function PackedLayoutKeys$Y() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y'));
    },
    x1: function PackedLayoutKeys$X1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X1'));
    },
    y1: function PackedLayoutKeys$Y1() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y1'));
    },
    hierarchyDepth: function PackedLayoutKeys$HierarchyDepth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HierarchyDepth'));
    },
    hierarchyTables: function PackedLayoutKeys$HierarchyTables() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HierarchyTables'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PageIntervalKeys
  var $tab_PageIntervalKeys = global.tab.PageIntervalKeys = ss.mkType($asm, 'tab.PageIntervalKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneCol: function PageIntervalKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    paneRow: function PageIntervalKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    paneLayer: function PageIntervalKeys$PaneLayer() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneLayer'));
    },
    panePage: function PageIntervalKeys$PanePage() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PanePage'));
    },
    startIndex: function PageIntervalKeys$StartIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('StartIndex'));
    },
    endIndex: function PageIntervalKeys$EndIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EndIndex'));
    },
    paneKey: function PageIntervalKeys$PaneKey() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneKey'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PageIntervalTableColumnsKeys
  var $tab_PageIntervalTableColumnsKeys = global.tab.PageIntervalTableColumnsKeys = ss.mkType($asm, 'tab.PageIntervalTableColumnsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneCol: function PageIntervalTableColumnsKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    paneRow: function PageIntervalTableColumnsKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    paneLayer: function PageIntervalTableColumnsKeys$PaneLayer() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneLayer'));
    },
    panePage: function PageIntervalTableColumnsKeys$PanePage() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PanePage'));
    },
    startIndex: function PageIntervalTableColumnsKeys$StartIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('StartIndex'));
    },
    endIndex: function PageIntervalTableColumnsKeys$EndIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EndIndex'));
    },
    paneKey: function PageIntervalTableColumnsKeys$PaneKey() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneKey'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PageIntervalTableKeys
  var $tab_PageIntervalTableKeys = global.tab.PageIntervalTableKeys = ss.mkType($asm, 'tab.PageIntervalTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneCol: function PageIntervalTableKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    paneRow: function PageIntervalTableKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    paneLayer: function PageIntervalTableKeys$PaneLayer() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneLayer'));
    },
    panePage: function PageIntervalTableKeys$PanePage() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PanePage'));
    },
    startIndex: function PageIntervalTableKeys$StartIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('StartIndex'));
    },
    endIndex: function PageIntervalTableKeys$EndIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EndIndex'));
    },
    paneKey: function PageIntervalTableKeys$PaneKey() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneKey'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PaneCountersKeys
  var $tab_PaneCountersKeys = global.tab.PaneCountersKeys = ss.mkType($asm, 'tab.PaneCountersKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    rowCount: function PaneCountersKeys$RowCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RowCount'));
    },
    columnCount: function PaneCountersKeys$ColumnCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColumnCount'));
    },
    layerCount: function PaneCountersKeys$LayerCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LayerCount'));
    },
    pageCount: function PaneCountersKeys$PageCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PageCount'));
    },
    paneCount: function PaneCountersKeys$PaneCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCount'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.PaneDataStoreTable
  var $tab_PaneDataStoreTable = global.tab.PaneDataStoreTable = ss.mkType($asm, 'tab.PaneDataStoreTable', function(pageIntervalsTable, paneCount) {
    this.$intervalsTable = null;
    if (!ss.isNullOrUndefined(pageIntervalsTable.StartIndex)) {
      var rowCount = pageIntervalsTable.StartIndex.length;
      var paneCol = pageIntervalsTable.PaneCol;
      var panePage = pageIntervalsTable.PanePage;
      var paneRow = pageIntervalsTable.PaneRow;
      var paneLayer = pageIntervalsTable.PaneLayer;
      var paneColumnCount = paneCount.ColumnCount;
      var paneRowCount = paneCount.RowCount;
      var paneLayerCount = paneCount.LayerCount;
      var startIndices = pageIntervalsTable.StartIndex;
      var endIndices = pageIntervalsTable.EndIndex;
      this.$intervalsTable = new Array(paneColumnCount * paneRowCount * paneLayerCount);
      for (var intervalIndex = 0; intervalIndex < this.$intervalsTable.length; ++intervalIndex) {
        this.$intervalsTable[intervalIndex] = new Array(2 * paneCount.PageCount);
        for (var i = 0; i < this.$intervalsTable[intervalIndex].length; ++i) {
          this.$intervalsTable[intervalIndex][i] = 0;
        }
      }
      for (var i1 = 0; i1 < rowCount; ++i1) {
        var curPaneIndex = paneCol[i1] + paneRow[i1] * paneColumnCount + paneLayer[i1] * paneRowCount * paneColumnCount;
        var curPageIndex = panePage[i1];
        this.$intervalsTable[curPaneIndex][curPageIndex * 2] = startIndices[i1];
        this.$intervalsTable[curPaneIndex][curPageIndex * 2 + 1] = endIndices[i1];
      }
    }
  }, {
    getStartIndex: function PaneDataStoreTable$GetStartIndex(paneIndex, page) {
      return this.$intervalsTable[paneIndex][page * 2];
    },
    getEndIndex: function PaneDataStoreTable$GetEndIndex(paneIndex, page) {
      return this.$intervalsTable[paneIndex][page * 2 + 1];
    },
    getPageIndices: function PaneDataStoreTable$GetPageIndices(paneIndex) {
      return this.$intervalsTable[paneIndex];
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PaneDescriptorDataKeys
  var $tab_PaneDescriptorDataKeys = global.tab.PaneDescriptorDataKeys = ss.mkType($asm, 'tab.PaneDescriptorDataKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    xIndexedAxis: function PaneDescriptorDataKeys$XIndexedAxis() {
      return new $tab_IndexedFieldNameKeys.$ctor1(this.get_base().add('XIndexedAxis'));
    },
    yIndexedAxis: function PaneDescriptorDataKeys$YIndexedAxis() {
      return new $tab_IndexedFieldNameKeys.$ctor1(this.get_base().add('YIndexedAxis'));
    },
    paneCount: function PaneDescriptorDataKeys$PaneCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCount'));
    },
    importData: function PaneDescriptorDataKeys$ImportData() {
      return new $tab_ImportKeys.$ctor1(this.get_base().add('ImportData'));
    },
    stackedMarkAttributes: function PaneDescriptorDataKeys$StackedMarkAttributes() {
      return new $tab_StackedMarkAttributesKeys.$ctor1(this.get_base().add('StackedMarkAttributes'));
    },
    trailDescriptor: function PaneDescriptorDataKeys$TrailDescriptor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TrailDescriptor'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PaneExtentsPixelPositionsTableKeys
  var $tab_PaneExtentsPixelPositionsTableKeys = global.tab.PaneExtentsPixelPositionsTableKeys = ss.mkType($asm, 'tab.PaneExtentsPixelPositionsTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    pxLeft: function PaneExtentsPixelPositionsTableKeys$PxLeft() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxLeft'));
    },
    pxTop: function PaneExtentsPixelPositionsTableKeys$PxTop() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxTop'));
    },
    pxRight: function PaneExtentsPixelPositionsTableKeys$PxRight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxRight'));
    },
    pxBottom: function PaneExtentsPixelPositionsTableKeys$PxBottom() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxBottom'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PaneExtentsStaticInputTableKeys
  var $tab_PaneExtentsStaticInputTableKeys = global.tab.PaneExtentsStaticInputTableKeys = ss.mkType($asm, 'tab.PaneExtentsStaticInputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneCol: function PaneExtentsStaticInputTableKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    paneRow: function PaneExtentsStaticInputTableKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    paneLayer: function PaneExtentsStaticInputTableKeys$PaneLayer() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneLayer'));
    },
    key: function PaneExtentsStaticInputTableKeys$Key() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Key'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PaneExtentsTableColumnsKeys
  var $tab_PaneExtentsTableColumnsKeys = global.tab.PaneExtentsTableColumnsKeys = ss.mkType($asm, 'tab.PaneExtentsTableColumnsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneCol: function PaneExtentsTableColumnsKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    paneRow: function PaneExtentsTableColumnsKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    paneLayer: function PaneExtentsTableColumnsKeys$PaneLayer() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneLayer'));
    },
    domainLeft: function PaneExtentsTableColumnsKeys$DomainLeft() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainLeft'));
    },
    domainTop: function PaneExtentsTableColumnsKeys$DomainTop() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainTop'));
    },
    domainRight: function PaneExtentsTableColumnsKeys$DomainRight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainRight'));
    },
    domainBottom: function PaneExtentsTableColumnsKeys$DomainBottom() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainBottom'));
    },
    key: function PaneExtentsTableColumnsKeys$Key() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Key'));
    },
    mapDomainLeft: function PaneExtentsTableColumnsKeys$MapDomainLeft() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapDomainLeft'));
    },
    mapDomainTop: function PaneExtentsTableColumnsKeys$MapDomainTop() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapDomainTop'));
    },
    mapDomainRight: function PaneExtentsTableColumnsKeys$MapDomainRight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapDomainRight'));
    },
    mapDomainBottom: function PaneExtentsTableColumnsKeys$MapDomainBottom() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapDomainBottom'));
    },
    mapCenterLongitude: function PaneExtentsTableColumnsKeys$MapCenterLongitude() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapCenterLongitude'));
    },
    mapCenterLatitude: function PaneExtentsTableColumnsKeys$MapCenterLatitude() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapCenterLatitude'));
    },
    originX: function PaneExtentsTableColumnsKeys$OriginX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OriginX'));
    },
    originY: function PaneExtentsTableColumnsKeys$OriginY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OriginY'));
    },
    pxLeft: function PaneExtentsTableColumnsKeys$PxLeft() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxLeft'));
    },
    pxTop: function PaneExtentsTableColumnsKeys$PxTop() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxTop'));
    },
    pxRight: function PaneExtentsTableColumnsKeys$PxRight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxRight'));
    },
    pxBottom: function PaneExtentsTableColumnsKeys$PxBottom() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxBottom'));
    },
    xRangeMin: function PaneExtentsTableColumnsKeys$XRangeMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XRangeMin'));
    },
    xRangeMax: function PaneExtentsTableColumnsKeys$XRangeMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XRangeMax'));
    },
    yRangeMin: function PaneExtentsTableColumnsKeys$YRangeMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YRangeMin'));
    },
    yRangeMax: function PaneExtentsTableColumnsKeys$YRangeMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YRangeMax'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PaneExtentsTableKeys
  var $tab_PaneExtentsTableKeys = global.tab.PaneExtentsTableKeys = ss.mkType($asm, 'tab.PaneExtentsTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneCol: function PaneExtentsTableKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    paneRow: function PaneExtentsTableKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    paneLayer: function PaneExtentsTableKeys$PaneLayer() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneLayer'));
    },
    domainLeft: function PaneExtentsTableKeys$DomainLeft() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainLeft'));
    },
    domainTop: function PaneExtentsTableKeys$DomainTop() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainTop'));
    },
    domainRight: function PaneExtentsTableKeys$DomainRight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainRight'));
    },
    domainBottom: function PaneExtentsTableKeys$DomainBottom() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DomainBottom'));
    },
    key: function PaneExtentsTableKeys$Key() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Key'));
    },
    mapDomainLeft: function PaneExtentsTableKeys$MapDomainLeft() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapDomainLeft'));
    },
    mapDomainTop: function PaneExtentsTableKeys$MapDomainTop() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapDomainTop'));
    },
    mapDomainRight: function PaneExtentsTableKeys$MapDomainRight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapDomainRight'));
    },
    mapDomainBottom: function PaneExtentsTableKeys$MapDomainBottom() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapDomainBottom'));
    },
    mapCenterLongitude: function PaneExtentsTableKeys$MapCenterLongitude() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapCenterLongitude'));
    },
    mapCenterLatitude: function PaneExtentsTableKeys$MapCenterLatitude() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MapCenterLatitude'));
    },
    originX: function PaneExtentsTableKeys$OriginX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OriginX'));
    },
    originY: function PaneExtentsTableKeys$OriginY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OriginY'));
    },
    pxLeft: function PaneExtentsTableKeys$PxLeft() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxLeft'));
    },
    pxTop: function PaneExtentsTableKeys$PxTop() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxTop'));
    },
    pxRight: function PaneExtentsTableKeys$PxRight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxRight'));
    },
    pxBottom: function PaneExtentsTableKeys$PxBottom() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxBottom'));
    },
    xRangeMin: function PaneExtentsTableKeys$XRangeMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XRangeMin'));
    },
    xRangeMax: function PaneExtentsTableKeys$XRangeMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XRangeMax'));
    },
    yRangeMin: function PaneExtentsTableKeys$YRangeMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YRangeMin'));
    },
    yRangeMax: function PaneExtentsTableKeys$YRangeMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YRangeMax'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.PaneMarksInfo
  var $tab_PaneMarksInfo = global.tab.PaneMarksInfo = ss.mkType($asm, 'tab.PaneMarksInfo', function(startIndex, endIndex) {
    this.$startIndex = 0;
    this.$endIndex = 0;
    this.$paneIndex = 0;
    this.$pageIndices = null;
    this.$paneKey = null;
    this.$paneId = null;
    this.$startIndex = startIndex;
    this.$endIndex = endIndex;
  }, {
    get_startIndex: function PaneMarksInfo$get_StartIndex() {
      return this.$startIndex;
    },
    get_endIndex: function PaneMarksInfo$get_EndIndex() {
      return this.$endIndex;
    },
    get_pageIndices: function PaneMarksInfo$get_PageIndices() {
      return this.$pageIndices;
    },
    get_paneKey: function PaneMarksInfo$get_PaneKey() {
      return this.$paneKey;
    },
    get_paneId: function PaneMarksInfo$get_PaneId() {
      return this.$paneId;
    },
    get_paneIndex: function PaneMarksInfo$get_PaneIndex() {
      return this.$paneIndex;
    }
  }, {
    $ctor1: function(paneExtents, paneDataStoreTable, paneIndex, page, row, column, layer) {
      this.$startIndex = 0;
      this.$endIndex = 0;
      this.$paneIndex = 0;
      this.$pageIndices = null;
      this.$paneKey = null;
      this.$paneId = null;
      this.$startIndex = paneDataStoreTable.getStartIndex(paneIndex, page);
      this.$endIndex = paneDataStoreTable.getEndIndex(paneIndex, page);
      this.$pageIndices = paneDataStoreTable.getPageIndices(paneIndex);
      this.$paneKey = paneExtents.PaneKey[paneIndex];
      this.$paneId = {};
      this.$paneId['columnIndex'.toString()] = column;
      this.$paneId['rowIndex'.toString()] = row;
      this.$paneId['layerIndex'.toString()] = layer;
      this.$paneIndex = paneIndex;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PaneMarksKeys
  var $tab_PaneMarksKeys = global.tab.PaneMarksKeys = ss.mkType($asm, 'tab.PaneMarksKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    column: function PaneMarksKeys$Column() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Column'));
    },
    row: function PaneMarksKeys$Row() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Row'));
    },
    layer: function PaneMarksKeys$Layer() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Layer'));
    },
    drawPanes: function PaneMarksKeys$DrawPanes() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DrawPanes'));
    },
    rect: function PaneMarksKeys$Rect() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Rect'));
    },
    predictionMarks: function PaneMarksKeys$PredictionMarks() {
      return new $tab_PredictionMarkKeys.$ctor1(this.get_base().add('PredictionMarks'));
    },
    xNumberMap: function PaneMarksKeys$XNumberMap() {
      return new $tab_NumberMapKeys.$ctor1(this.get_base().add('XNumberMap'));
    },
    yNumberMap: function PaneMarksKeys$YNumberMap() {
      return new $tab_NumberMapKeys.$ctor1(this.get_base().add('YNumberMap'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PaneStylesTableKeys
  var $tab_PaneStylesTableKeys = global.tab.PaneStylesTableKeys = ss.mkType($asm, 'tab.PaneStylesTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    defaultMarkColor: function PaneStylesTableKeys$DefaultMarkColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultMarkColor'));
    },
    defaultShape: function PaneStylesTableKeys$DefaultShape() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultShape'));
    },
    defaultSize: function PaneStylesTableKeys$DefaultSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultSize'));
    },
    key: function PaneStylesTableKeys$Key() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Key'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.PaneStylesTableUtils
  var $tab_PaneStylesTableUtils = global.tab.PaneStylesTableUtils = ss.mkType($asm, 'tab.PaneStylesTableUtils', null, null, {
    toRuePacker: function PaneStylesTableUtils$ToRuePacker(tableName, toPack) {
      var columnCount = 0;
      if (ss.isValue(toPack.DefaultMarkColor)) {
        columnCount++;
      }
      if (ss.isValue(toPack.DefaultShape)) {
        columnCount++;
      }
      if (ss.isValue(toPack.DefaultSize)) {
        columnCount++;
      }
      if (ss.isValue(toPack.Key)) {
        columnCount++;
      }
      var packedData = new $tab_RuePacker();
      packedData.startTable(tableName, columnCount);
      if (ss.isValue(toPack.DefaultMarkColor)) {
        packedData.addColorArray('DefaultMarkColor', toPack.DefaultMarkColor);
      }
      if (ss.isValue(toPack.DefaultShape)) {
        packedData.addInt32Array('DefaultShape', toPack.DefaultShape);
      }
      if (ss.isValue(toPack.DefaultSize)) {
        packedData.addReal64Array('DefaultSize', toPack.DefaultSize);
      }
      if (ss.isValue(toPack.Key)) {
        packedData.addInt64Array('Key', toPack.Key[0]);
      }
      return packedData;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PartitionedDataTableKeys
  var $tab_PartitionedDataTableKeys = global.tab.PartitionedDataTableKeys = ss.mkType($asm, 'tab.PartitionedDataTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    tupleId: function PartitionedDataTableKeys$TupleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TupleId'));
    },
    markId: function PartitionedDataTableKeys$MarkId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkId'));
    },
    paneCol: function PartitionedDataTableKeys$PaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneCol'));
    },
    paneRow: function PartitionedDataTableKeys$PaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneRow'));
    },
    cellX: function PartitionedDataTableKeys$CellX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellX'));
    },
    cellY: function PartitionedDataTableKeys$CellY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellY'));
    },
    xProj: function PartitionedDataTableKeys$XProj() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XProj'));
    },
    yProj: function PartitionedDataTableKeys$YProj() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YProj'));
    },
    currentStackValue: function PartitionedDataTableKeys$CurrentStackValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CurrentStackValue'));
    },
    previousStackValue: function PartitionedDataTableKeys$PreviousStackValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PreviousStackValue'));
    },
    primitiveId: function PartitionedDataTableKeys$PrimitiveId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PrimitiveId'));
    },
    scaledStartPoint: function PartitionedDataTableKeys$ScaledStartPoint() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaledStartPoint'));
    },
    scaledEndPoint: function PartitionedDataTableKeys$ScaledEndPoint() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ScaledEndPoint'));
    },
    prevLowerValue: function PartitionedDataTableKeys$PrevLowerValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PrevLowerValue'));
    },
    nextLowerValue: function PartitionedDataTableKeys$NextLowerValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('NextLowerValue'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PartitionResultStoreKeys
  var $tab_PartitionResultStoreKeys = global.tab.PartitionResultStoreKeys = ss.mkType($asm, 'tab.PartitionResultStoreKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    paneCount: function PartitionResultStoreKeys$PaneCount() {
      return new $tab_PaneCountersKeys.$ctor1(this.get_base().add('PaneCount'));
    },
    orderedPaneKeys: function PartitionResultStoreKeys$OrderedPaneKeys() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OrderedPaneKeys'));
    },
    paneDescriptorsData: function PartitionResultStoreKeys$PaneDescriptorsData(paneDescriptorsDataKey) {
      if (ss.startsWithString(paneDescriptorsDataKey, String.fromCharCode(39)) || ss.startsWithString(paneDescriptorsDataKey, String.fromCharCode(34))) {
        return new $tab_PaneDescriptorDataKeys.$ctor1(this.get_base().add('PaneDescriptorsData').add(paneDescriptorsDataKey));
      }
      return new $tab_PaneDescriptorDataKeys.$ctor1(this.get_base().add('PaneDescriptorsData').add(ss.formatString("'{0}'", paneDescriptorsDataKey)));
    },
    xAxis: function PartitionResultStoreKeys$XAxis() {
      return new $tab_FlattenedAxisDescriptorKeys.$ctor1(this.get_base().add('XAxis'));
    },
    yAxis: function PartitionResultStoreKeys$YAxis() {
      return new $tab_FlattenedAxisDescriptorKeys.$ctor1(this.get_base().add('YAxis'));
    },
    nestedSortIndicatorData: function PartitionResultStoreKeys$NestedSortIndicatorData() {
      return new $tab_NestedSortIndicatorDataTableKeys.$ctor1(this.get_base().add('NestedSortIndicatorData'));
    },
    spatialProjector: function PartitionResultStoreKeys$SpatialProjector() {
      return new $tab_SpatialProjectorKeys.$ctor1(this.get_base().add('SpatialProjector'));
    },
    fieldLabels: function PartitionResultStoreKeys$FieldLabels() {
      return new $tab_SceneMarginFieldLabelsKeys.$ctor1(this.get_base().add('FieldLabels'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PerAxisBorderStylesProducerInputKeys
  var $tab_PerAxisBorderStylesProducerInputKeys = global.tab.PerAxisBorderStylesProducerInputKeys = ss.mkType($asm, 'tab.PerAxisBorderStylesProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    defaultDividerPenColor: function PerAxisBorderStylesProducerInputKeys$DefaultDividerPenColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultDividerPenColor'));
    },
    defaultDividerPenStyle: function PerAxisBorderStylesProducerInputKeys$DefaultDividerPenStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultDividerPenStyle'));
    },
    defaultDividerPenWidth: function PerAxisBorderStylesProducerInputKeys$DefaultDividerPenWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultDividerPenWidth'));
    },
    customDividerPenColor: function PerAxisBorderStylesProducerInputKeys$CustomDividerPenColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CustomDividerPenColor'));
    },
    customDividerPenStyle: function PerAxisBorderStylesProducerInputKeys$CustomDividerPenStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CustomDividerPenStyle'));
    },
    customDividerPenWidth: function PerAxisBorderStylesProducerInputKeys$CustomDividerPenWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CustomDividerPenWidth'));
    },
    customDividerTargetDepth: function PerAxisBorderStylesProducerInputKeys$CustomDividerTargetDepth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CustomDividerTargetDepth'));
    },
    subtotalDividerPenColor: function PerAxisBorderStylesProducerInputKeys$SubtotalDividerPenColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubtotalDividerPenColor'));
    },
    subtotalDividerPenStyle: function PerAxisBorderStylesProducerInputKeys$SubtotalDividerPenStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubtotalDividerPenStyle'));
    },
    subtotalDividerPenWidth: function PerAxisBorderStylesProducerInputKeys$SubtotalDividerPenWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubtotalDividerPenWidth'));
    },
    grandTotalDividerPenColor: function PerAxisBorderStylesProducerInputKeys$GrandTotalDividerPenColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('GrandTotalDividerPenColor'));
    },
    grandTotalDividerPenStyle: function PerAxisBorderStylesProducerInputKeys$GrandTotalDividerPenStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('GrandTotalDividerPenStyle'));
    },
    grandTotalDividerPenWidth: function PerAxisBorderStylesProducerInputKeys$GrandTotalDividerPenWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('GrandTotalDividerPenWidth'));
    },
    minimumCustomDividerDepth: function PerAxisBorderStylesProducerInputKeys$MinimumCustomDividerDepth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinimumCustomDividerDepth'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PerAxisGridLineProducerInputKeys
  var $tab_PerAxisGridLineProducerInputKeys = global.tab.PerAxisGridLineProducerInputKeys = ss.mkType($asm, 'tab.PerAxisGridLineProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    headerCount: function PerAxisGridLineProducerInputKeys$HeaderCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderCount'));
    },
    lineColor: function PerAxisGridLineProducerInputKeys$LineColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineColor'));
    },
    lineStyle: function PerAxisGridLineProducerInputKeys$LineStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineStyle'));
    },
    lineWidth: function PerAxisGridLineProducerInputKeys$LineWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineWidth'));
    },
    zeroLineColor: function PerAxisGridLineProducerInputKeys$ZeroLineColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZeroLineColor'));
    },
    zeroLineStyle: function PerAxisGridLineProducerInputKeys$ZeroLineStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZeroLineStyle'));
    },
    zeroLineWidth: function PerAxisGridLineProducerInputKeys$ZeroLineWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZeroLineWidth'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PerAxisGridLineProducerOutputKeys
  var $tab_PerAxisGridLineProducerOutputKeys = global.tab.PerAxisGridLineProducerOutputKeys = ss.mkType($asm, 'tab.PerAxisGridLineProducerOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    lineColor: function PerAxisGridLineProducerOutputKeys$LineColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineColor'));
    },
    lineStyle: function PerAxisGridLineProducerOutputKeys$LineStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineStyle'));
    },
    lineWidth: function PerAxisGridLineProducerOutputKeys$LineWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineWidth'));
    },
    zeroLineColor: function PerAxisGridLineProducerOutputKeys$ZeroLineColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZeroLineColor'));
    },
    zeroLineStyle: function PerAxisGridLineProducerOutputKeys$ZeroLineStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZeroLineStyle'));
    },
    zeroLineWidth: function PerAxisGridLineProducerOutputKeys$ZeroLineWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZeroLineWidth'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PerFieldAxisStyleTableKeys
  var $tab_PerFieldAxisStyleTableKeys = global.tab.PerFieldAxisStyleTableKeys = ss.mkType($asm, 'tab.PerFieldAxisStyleTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    fieldName: function PerFieldAxisStyleTableKeys$FieldName() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FieldName'));
    },
    isXAxis: function PerFieldAxisStyleTableKeys$IsXAxis() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsXAxis'));
    },
    bandColor: function PerFieldAxisStyleTableKeys$BandColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BandColor'));
    },
    bandLevel: function PerFieldAxisStyleTableKeys$BandLevel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BandLevel'));
    },
    bandSize: function PerFieldAxisStyleTableKeys$BandSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BandSize'));
    },
    fillColor: function PerFieldAxisStyleTableKeys$FillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FillColor'));
    },
    hoverColor: function PerFieldAxisStyleTableKeys$HoverColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HoverColor'));
    },
    brushedColor: function PerFieldAxisStyleTableKeys$BrushedColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BrushedColor'));
    },
    selectedFillColor: function PerFieldAxisStyleTableKeys$SelectedFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedFillColor'));
    },
    selectedTextColor: function PerFieldAxisStyleTableKeys$SelectedTextColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedTextColor'));
    },
    selectedTickColor: function PerFieldAxisStyleTableKeys$SelectedTickColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SelectedTickColor'));
    },
    subtotalFillColor: function PerFieldAxisStyleTableKeys$SubtotalFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubtotalFillColor'));
    },
    totalFillColor: function PerFieldAxisStyleTableKeys$TotalFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TotalFillColor'));
    },
    tickColor: function PerFieldAxisStyleTableKeys$TickColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TickColor'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PerHeaderFieldDataTableKeys
  var $tab_PerHeaderFieldDataTableKeys = global.tab.PerHeaderFieldDataTableKeys = ss.mkType($asm, 'tab.PerHeaderFieldDataTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    headerId: function PerHeaderFieldDataTableKeys$HeaderId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderId'));
    },
    fieldName: function PerHeaderFieldDataTableKeys$FieldName() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FieldName'));
    },
    dataType: function PerHeaderFieldDataTableKeys$DataType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DataType'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.PredictionMarkKeys
  var $tab_PredictionMarkKeys = global.tab.PredictionMarkKeys = ss.mkType($asm, 'tab.PredictionMarkKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    color: function PredictionMarkKeys$Color() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Color'));
    },
    colors: function PredictionMarkKeys$Colors() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Colors'));
    },
    defaultParamID: function PredictionMarkKeys$DefaultParamID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultParamID'));
    },
    haloColor: function PredictionMarkKeys$HaloColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HaloColor'));
    },
    lineTupleIds: function PredictionMarkKeys$LineTupleIds() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineTupleIds'));
    },
    lowerEnds: function PredictionMarkKeys$LowerEnds() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LowerEnds'));
    },
    maxAlpha: function PredictionMarkKeys$MaxAlpha() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MaxAlpha'));
    },
    oppositeAxes: function PredictionMarkKeys$OppositeAxes() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OppositeAxes'));
    },
    renderOnTop: function PredictionMarkKeys$RenderOnTop() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RenderOnTop'));
    },
    tupleIds: function PredictionMarkKeys$TupleIds() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TupleIds'));
    },
    type: function PredictionMarkKeys$Type() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Type'));
    },
    upperEnds: function PredictionMarkKeys$UpperEnds() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UpperEnds'));
    },
    useYAxis: function PredictionMarkKeys$UseYAxis() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UseYAxis'));
    },
    widths: function PredictionMarkKeys$Widths() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Widths'));
    },
    lineInterpolation: function PredictionMarkKeys$LineInterpolation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineInterpolation'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.QuantitativeColorEncodingInputKeys
  var $tab_QuantitativeColorEncodingInputKeys = global.tab.QuantitativeColorEncodingInputKeys = ss.mkType($asm, 'tab.QuantitativeColorEncodingInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    palette: function QuantitativeColorEncodingInputKeys$Palette() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Palette'));
    },
    isDiverging: function QuantitativeColorEncodingInputKeys$IsDiverging() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsDiverging'));
    },
    isReversed: function QuantitativeColorEncodingInputKeys$IsReversed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsReversed'));
    },
    fixedMin: function QuantitativeColorEncodingInputKeys$FixedMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FixedMin'));
    },
    fixedMax: function QuantitativeColorEncodingInputKeys$FixedMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FixedMax'));
    },
    fixedCenter: function QuantitativeColorEncodingInputKeys$FixedCenter() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FixedCenter'));
    },
    steps: function QuantitativeColorEncodingInputKeys$Steps() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Steps'));
    },
    divergingPalette: function QuantitativeColorEncodingInputKeys$DivergingPalette() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DivergingPalette'));
    },
    reversedPalette: function QuantitativeColorEncodingInputKeys$ReversedPalette() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ReversedPalette'));
    },
    defaultPalette: function QuantitativeColorEncodingInputKeys$DefaultPalette() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultPalette'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.QuantitativeSizeEncodingInputKeys
  var $tab_QuantitativeSizeEncodingInputKeys = global.tab.QuantitativeSizeEncodingInputKeys = ss.mkType($asm, 'tab.QuantitativeSizeEncodingInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    fixedMin: function QuantitativeSizeEncodingInputKeys$FixedMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FixedMin'));
    },
    fixedMax: function QuantitativeSizeEncodingInputKeys$FixedMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FixedMax'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.QuantitativeTickPerHeaderInputTableKeys
  var $tab_QuantitativeTickPerHeaderInputTableKeys = global.tab.QuantitativeTickPerHeaderInputTableKeys = ss.mkType($asm, 'tab.QuantitativeTickPerHeaderInputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    headerIndex: function QuantitativeTickPerHeaderInputTableKeys$HeaderIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderIndex'));
    },
    vtlBlockIndex: function QuantitativeTickPerHeaderInputTableKeys$VtlBlockIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VtlBlockIndex'));
    },
    columnFormatIndex: function QuantitativeTickPerHeaderInputTableKeys$ColumnFormatIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColumnFormatIndex'));
    },
    showMajorTicks: function QuantitativeTickPerHeaderInputTableKeys$ShowMajorTicks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowMajorTicks'));
    },
    showMinorTicks: function QuantitativeTickPerHeaderInputTableKeys$ShowMinorTicks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowMinorTicks'));
    },
    minSpacing: function QuantitativeTickPerHeaderInputTableKeys$MinSpacing() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinSpacing'));
    },
    originReference: function QuantitativeTickPerHeaderInputTableKeys$OriginReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('OriginReference'));
    },
    perpendicularLabels: function QuantitativeTickPerHeaderInputTableKeys$PerpendicularLabels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerpendicularLabels'));
    },
    spacingReference: function QuantitativeTickPerHeaderInputTableKeys$SpacingReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SpacingReference'));
    },
    targetTickSpacing: function QuantitativeTickPerHeaderInputTableKeys$TargetTickSpacing() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TargetTickSpacing'));
    },
    cellCount: function QuantitativeTickPerHeaderInputTableKeys$CellCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellCount'));
    },
    labelStyleIndex: function QuantitativeTickPerHeaderInputTableKeys$LabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyleIndex'));
    },
    labelHeight: function QuantitativeTickPerHeaderInputTableKeys$LabelHeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelHeight'));
    },
    minorOriginReference: function QuantitativeTickPerHeaderInputTableKeys$MinorOriginReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinorOriginReference'));
    },
    minorSpacingReference: function QuantitativeTickPerHeaderInputTableKeys$MinorSpacingReference() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinorSpacingReference'));
    },
    subTotalsLabelStyleIndex: function QuantitativeTickPerHeaderInputTableKeys$SubTotalsLabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubTotalsLabelStyleIndex'));
    },
    grandTotalsLabelStyleIndex: function QuantitativeTickPerHeaderInputTableKeys$GrandTotalsLabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('GrandTotalsLabelStyleIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineApplicablePanesTableKeys
  var $tab_ReferenceLineApplicablePanesTableKeys = global.tab.ReferenceLineApplicablePanesTableKeys = ss.mkType($asm, 'tab.ReferenceLineApplicablePanesTableKeys', function() {
    $tab_KeyPath.call(this);
  }, null, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineAxisStyleTableKeys
  var $tab_ReferenceLineAxisStyleTableKeys = global.tab.ReferenceLineAxisStyleTableKeys = ss.mkType($asm, 'tab.ReferenceLineAxisStyleTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    referenceLineSpecId: function ReferenceLineAxisStyleTableKeys$ReferenceLineSpecId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ReferenceLineSpecId'));
    },
    lineWidth: function ReferenceLineAxisStyleTableKeys$LineWidth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineWidth'));
    },
    lineColor: function ReferenceLineAxisStyleTableKeys$LineColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LineColor'));
    },
    linePattern: function ReferenceLineAxisStyleTableKeys$LinePattern() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LinePattern'));
    },
    labelBackgroundColor: function ReferenceLineAxisStyleTableKeys$LabelBackgroundColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelBackgroundColor'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineDetailsTableKeys
  var $tab_ReferenceLineDetailsTableKeys = global.tab.ReferenceLineDetailsTableKeys = ss.mkType($asm, 'tab.ReferenceLineDetailsTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    specId: function ReferenceLineDetailsTableKeys$SpecId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SpecId'));
    },
    axisKeyPath: function ReferenceLineDetailsTableKeys$AxisKeyPath() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisKeyPath'));
    },
    type: function ReferenceLineDetailsTableKeys$Type() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Type'));
    },
    formulaType: function ReferenceLineDetailsTableKeys$FormulaType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FormulaType'));
    },
    labelType: function ReferenceLineDetailsTableKeys$LabelType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelType'));
    },
    enableInstantRefline: function ReferenceLineDetailsTableKeys$EnableInstantRefline() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EnableInstantRefline'));
    },
    calculationScope: function ReferenceLineDetailsTableKeys$CalculationScope() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CalculationScope'));
    },
    confidencePercentage: function ReferenceLineDetailsTableKeys$ConfidencePercentage() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ConfidencePercentage'));
    },
    constantValue: function ReferenceLineDetailsTableKeys$ConstantValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ConstantValue'));
    },
    formattedConstantValue: function ReferenceLineDetailsTableKeys$FormattedConstantValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FormattedConstantValue'));
    },
    tileCount: function ReferenceLineDetailsTableKeys$TileCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TileCount'));
    },
    standardDevType: function ReferenceLineDetailsTableKeys$StandardDevType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('StandardDevType'));
    },
    fillBelow: function ReferenceLineDetailsTableKeys$FillBelow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FillBelow'));
    },
    fillAbove: function ReferenceLineDetailsTableKeys$FillAbove() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FillAbove'));
    },
    defaultLabelX: function ReferenceLineDetailsTableKeys$DefaultLabelX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultLabelX'));
    },
    defaultLabelY: function ReferenceLineDetailsTableKeys$DefaultLabelY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DefaultLabelY'));
    },
    zOrder: function ReferenceLineDetailsTableKeys$ZOrder() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZOrder'));
    },
    styleId: function ReferenceLineDetailsTableKeys$StyleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('StyleId'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineLabelTableKeys
  var $tab_ReferenceLineLabelTableKeys = global.tab.ReferenceLineLabelTableKeys = ss.mkType($asm, 'tab.ReferenceLineLabelTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    width: function ReferenceLineLabelTableKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    },
    height: function ReferenceLineLabelTableKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    },
    textRunCount: function ReferenceLineLabelTableKeys$TextRunCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunCount'));
    },
    textRunOffset: function ReferenceLineLabelTableKeys$TextRunOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunOffset'));
    },
    hAligns: function ReferenceLineLabelTableKeys$HAligns() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HAligns'));
    },
    vAligns: function ReferenceLineLabelTableKeys$VAligns() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VAligns'));
    },
    pxAbove: function ReferenceLineLabelTableKeys$PxAbove() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxAbove'));
    },
    pxBelow: function ReferenceLineLabelTableKeys$PxBelow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxBelow'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineLayoutElementsTableKeys
  var $tab_ReferenceLineLayoutElementsTableKeys = global.tab.ReferenceLineLayoutElementsTableKeys = ss.mkType($asm, 'tab.ReferenceLineLayoutElementsTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    specId: function ReferenceLineLayoutElementsTableKeys$SpecId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SpecId'));
    },
    styleId: function ReferenceLineLayoutElementsTableKeys$StyleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('StyleId'));
    },
    xDomainLookup: function ReferenceLineLayoutElementsTableKeys$XDomainLookup() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XDomainLookup'));
    },
    yDomainLookup: function ReferenceLineLayoutElementsTableKeys$YDomainLookup() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YDomainLookup'));
    },
    pageNumber: function ReferenceLineLayoutElementsTableKeys$PageNumber() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PageNumber'));
    },
    paneIndex: function ReferenceLineLayoutElementsTableKeys$PaneIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PaneIndex'));
    },
    cellIndex: function ReferenceLineLayoutElementsTableKeys$CellIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellIndex'));
    },
    cellCount: function ReferenceLineLayoutElementsTableKeys$CellCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellCount'));
    },
    axisOrientation: function ReferenceLineLayoutElementsTableKeys$AxisOrientation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisOrientation'));
    },
    calculationScope: function ReferenceLineLayoutElementsTableKeys$CalculationScope() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CalculationScope'));
    },
    value: function ReferenceLineLayoutElementsTableKeys$Value() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Value'));
    },
    zOrder: function ReferenceLineLayoutElementsTableKeys$ZOrder() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZOrder'));
    },
    isAxisReversed: function ReferenceLineLayoutElementsTableKeys$IsAxisReversed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsAxisReversed'));
    },
    labelText: function ReferenceLineLayoutElementsTableKeys$LabelText() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelText'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineProducerInputKeys
  var $tab_ReferenceLineProducerInputKeys = global.tab.ReferenceLineProducerInputKeys = ss.mkType($asm, 'tab.ReferenceLineProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    referenceLineDetails: function ReferenceLineProducerInputKeys$ReferenceLineDetails() {
      return new $tab_ReferenceLineDetailsTableKeys.$ctor1(this.get_base().add('ReferenceLineDetails'));
    },
    xValueFormat: function ReferenceLineProducerInputKeys$XValueFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XValueFormat'));
    },
    yValueFormat: function ReferenceLineProducerInputKeys$YValueFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YValueFormat'));
    },
    xHeaderFolded: function ReferenceLineProducerInputKeys$XHeaderFolded() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XHeaderFolded'));
    },
    yHeaderFolded: function ReferenceLineProducerInputKeys$YHeaderFolded() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YHeaderFolded'));
    },
    xStyles: function ReferenceLineProducerInputKeys$XStyles() {
      return new $tab_ReferenceLineStylesKeys.$ctor1(this.get_base().add('XStyles'));
    },
    yStyles: function ReferenceLineProducerInputKeys$YStyles() {
      return new $tab_ReferenceLineStylesKeys.$ctor1(this.get_base().add('YStyles'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineProducerOutputKeys
  var $tab_ReferenceLineProducerOutputKeys = global.tab.ReferenceLineProducerOutputKeys = ss.mkType($asm, 'tab.ReferenceLineProducerOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    layoutElements: function ReferenceLineProducerOutputKeys$LayoutElements() {
      return new $tab_ReferenceLineLayoutElementsTableKeys.$ctor1(this.get_base().add('LayoutElements'));
    },
    xValues: function ReferenceLineProducerOutputKeys$XValues() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XValues'));
    },
    yValues: function ReferenceLineProducerOutputKeys$YValues() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YValues'));
    },
    labels: function ReferenceLineProducerOutputKeys$Labels() {
      return new $tab_ReferenceLineLabelTableKeys.$ctor1(this.get_base().add('Labels'));
    },
    details: function ReferenceLineProducerOutputKeys$Details() {
      return new $tab_ReferenceLineDetailsTableKeys.$ctor1(this.get_base().add('Details'));
    },
    textRun: function ReferenceLineProducerOutputKeys$TextRun() {
      return new $tab_TextRunTableKeys.$ctor1(this.get_base().add('TextRun'));
    },
    xStyles: function ReferenceLineProducerOutputKeys$XStyles() {
      return new $tab_ReferenceLineStylesKeys.$ctor1(this.get_base().add('XStyles'));
    },
    yStyles: function ReferenceLineProducerOutputKeys$YStyles() {
      return new $tab_ReferenceLineStylesKeys.$ctor1(this.get_base().add('YStyles'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineStylesKeys
  var $tab_ReferenceLineStylesKeys = global.tab.ReferenceLineStylesKeys = ss.mkType($asm, 'tab.ReferenceLineStylesKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    axisStyles: function ReferenceLineStylesKeys$AxisStyles() {
      return new $tab_ReferenceLineAxisStyleTableKeys.$ctor1(this.get_base().add('AxisStyles'));
    },
    textStyles: function ReferenceLineStylesKeys$TextStyles() {
      return new $tab_TextStyleTableKeys.$ctor1(this.get_base().add('TextStyles'));
    },
    fontMetrics: function ReferenceLineStylesKeys$FontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontMetrics'));
    },
    fillColors: function ReferenceLineStylesKeys$FillColors() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FillColors'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineTotalTableMapDataKeys
  var $tab_ReferenceLineTotalTableMapDataKeys = global.tab.ReferenceLineTotalTableMapDataKeys = ss.mkType($asm, 'tab.ReferenceLineTotalTableMapDataKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    hasTotalTable: function ReferenceLineTotalTableMapDataKeys$HasTotalTable() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasTotalTable'));
    },
    referenceLineTotalTableMap: function ReferenceLineTotalTableMapDataKeys$ReferenceLineTotalTableMap() {
      return new $tab_ReferenceLineTotalTableMapKeys.$ctor1(this.get_base().add('ReferenceLineTotalTableMap'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ReferenceLineTotalTableMapKeys
  var $tab_ReferenceLineTotalTableMapKeys = global.tab.ReferenceLineTotalTableMapKeys = ss.mkType($asm, 'tab.ReferenceLineTotalTableMapKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    perTable: function ReferenceLineTotalTableMapKeys$PerTable() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerTable'));
    },
    perPane: function ReferenceLineTotalTableMapKeys$PerPane() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerPane'));
    },
    perCell: function ReferenceLineTotalTableMapKeys$PerCell() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PerCell'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.RefLineExtentsKeys
  var $tab_RefLineExtentsKeys = global.tab.RefLineExtentsKeys = ss.mkType($asm, 'tab.RefLineExtentsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    index: function RefLineExtentsKeys$Index() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Index'));
    },
    min: function RefLineExtentsKeys$Min() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Min'));
    },
    max: function RefLineExtentsKeys$Max() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Max'));
    },
    labelIndex: function RefLineExtentsKeys$LabelIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelIndex'));
    },
    value: function RefLineExtentsKeys$Value() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Value'));
    },
    pxAbove: function RefLineExtentsKeys$PxAbove() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxAbove'));
    },
    pxBelow: function RefLineExtentsKeys$PxBelow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PxBelow'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.RenderingInputStoreKeys
  var $tab_RenderingInputStoreKeys = global.tab.RenderingInputStoreKeys = ss.mkType($asm, 'tab.RenderingInputStoreKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    annexedData: function RenderingInputStoreKeys$AnnexedData() {
      return new $tab_AnnexedDataKeys.$ctor1(this.get_base().add('AnnexedData'));
    },
    axisOutput: function RenderingInputStoreKeys$AxisOutput() {
      return new $tab_AxisProducerOutputKeys.$ctor1(this.get_base().add('AxisOutput'));
    },
    gridLines: function RenderingInputStoreKeys$GridLines() {
      return new $tab_GridLineProducerOutputKeys.$ctor1(this.get_base().add('GridLines'));
    },
    heatmap: function RenderingInputStoreKeys$Heatmap() {
      return new $tab_HeatmapProducerOutputKeys.$ctor1(this.get_base().add('Heatmap'));
    },
    pdMarks: function RenderingInputStoreKeys$PDMarks(pDMarksKey) {
      if (ss.startsWithString(pDMarksKey, String.fromCharCode(39)) || ss.startsWithString(pDMarksKey, String.fromCharCode(34))) {
        return new $tab_MarkLayoutOutputKeys.$ctor1(this.get_base().add('PDMarks').add(pDMarksKey));
      }
      return new $tab_MarkLayoutOutputKeys.$ctor1(this.get_base().add('PDMarks').add(ss.formatString("'{0}'", pDMarksKey)));
    },
    pageIntervalTable: function RenderingInputStoreKeys$PageIntervalTable() {
      return new $tab_PageIntervalTableKeys.$ctor1(this.get_base().add('PageIntervalTable'));
    },
    paneCount: function RenderingInputStoreKeys$PaneCount() {
      return new $tab_PaneCountersKeys.$ctor1(this.get_base().add('PaneCount'));
    },
    paneStyles: function RenderingInputStoreKeys$PaneStyles() {
      return new $tab_PaneStylesTableKeys.$ctor1(this.get_base().add('PaneStyles'));
    },
    firstPassRefLines: function RenderingInputStoreKeys$FirstPassRefLines(firstPassRefLinesKey) {
      if (ss.startsWithString(firstPassRefLinesKey, String.fromCharCode(39)) || ss.startsWithString(firstPassRefLinesKey, String.fromCharCode(34))) {
        return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('FirstPassRefLines').add(firstPassRefLinesKey));
      }
      return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('FirstPassRefLines').add(ss.formatString("'{0}'", firstPassRefLinesKey)));
    },
    refLines: function RenderingInputStoreKeys$RefLines(refLinesKey) {
      if (ss.startsWithString(refLinesKey, String.fromCharCode(39)) || ss.startsWithString(refLinesKey, String.fromCharCode(34))) {
        return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('RefLines').add(refLinesKey));
      }
      return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('RefLines').add(ss.formatString("'{0}'", refLinesKey)));
    },
    sceneMargin: function RenderingInputStoreKeys$SceneMargin() {
      return new $tab_SceneMarginKeys.$ctor1(this.get_base().add('SceneMargin'));
    },
    instantRefLines: function RenderingInputStoreKeys$InstantRefLines(instantRefLinesKey) {
      if (ss.startsWithString(instantRefLinesKey, String.fromCharCode(39)) || ss.startsWithString(instantRefLinesKey, String.fromCharCode(34))) {
        return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('InstantRefLines').add(instantRefLinesKey));
      }
      return new $tab_ReferenceLineProducerOutputKeys.$ctor1(this.get_base().add('InstantRefLines').add(ss.formatString("'{0}'", instantRefLinesKey)));
    },
    supportedIncrementalUpdates: function RenderingInputStoreKeys$SupportedIncrementalUpdates() {
      return new $tab_IncrementalUpdateInputKeys.$ctor1(this.get_base().add('SupportedIncrementalUpdates'));
    },
    tickPlacement: function RenderingInputStoreKeys$TickPlacement() {
      return new $tab_TickProducerOutputKeys.$ctor1(this.get_base().add('TickPlacement'));
    },
    viewpoint: function RenderingInputStoreKeys$Viewpoint() {
      return new $tab_ViewpointKeys.$ctor1(this.get_base().add('Viewpoint'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.RowOrColumnLevelStyleDataKeys
  var $tab_RowOrColumnLevelStyleDataKeys = global.tab.RowOrColumnLevelStyleDataKeys = ss.mkType($asm, 'tab.RowOrColumnLevelStyleDataKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    subtotalsFillColor: function RowOrColumnLevelStyleDataKeys$SubtotalsFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubtotalsFillColor'));
    },
    grandTotalsFillColor: function RowOrColumnLevelStyleDataKeys$GrandTotalsFillColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('GrandTotalsFillColor'));
    },
    bandingColor: function RowOrColumnLevelStyleDataKeys$BandingColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BandingColor'));
    },
    bandSize: function RowOrColumnLevelStyleDataKeys$BandSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BandSize'));
    },
    bandStartingLevel: function RowOrColumnLevelStyleDataKeys$BandStartingLevel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('BandStartingLevel'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RuePacker
  var $tab_RuePacker = global.tab.RuePacker = ss.mkType($asm, 'tab.RuePacker', function() {
    this.$packed = null;
    this.$view = null;
    this.$currentOffset = 4;
    this.$recordCount = 0;
    this.$packed = new Uint8Array(1024);
    this.$view = new DataView(this.$packed.buffer);
  }, {
    pack: function RuePacker$Pack() {
      this.$view.setInt32(0, this.$recordCount, true);
      return this.$packed.subarray(0, this.$currentOffset);
    },
    addColorArray: function RuePacker$AddColorArray(key, colors) {
      this.$startArray(key, 37, colors.length);
      for (var $t1 = 0; $t1 < colors.length; $t1++) {
        var c = colors[$t1];
        this.$insertInt32(c);
      }
    },
    addReal64Array: function RuePacker$AddReal64Array(key, values) {
      this.$startArray(key, 36, values.length);
      for (var $t1 = 0; $t1 < values.length; $t1++) {
        var v = values[$t1];
        this.$insertDouble(v);
      }
    },
    addInt32Array: function RuePacker$AddInt32Array(key, values) {
      this.$startArray(key, 33, values.length);
      for (var $t1 = 0; $t1 < values.length; $t1++) {
        var v = values[$t1];
        this.$insertInt32(v);
      }
    },
    addInt64Array: function RuePacker$AddInt64Array(key, values) {
      this.$startArray(key, 34, ss.idiv(values.length, 2));
      for (var $t1 = 0; $t1 < values.length; $t1++) {
        var v = values[$t1];
        this.$insertInt32(v);
      }
    },
    addInt32: function RuePacker$AddInt32(key, val) {
      this.$recordCount++;
      this.$insertString(key);
      this.$insertTypeID(33);
      this.$insertInt32(val);
    },
    startTable: function RuePacker$StartTable(key, count) {
      this.$recordCount++;
      this.$recordCount -= count;
      this.$insertString(key);
      this.$insertTypeID(20);
      this.$insertInt32(count);
    },
    $startArray: function RuePacker$StartArray(key, type, length) {
      this.$recordCount++;
      this.$insertString(key);
      this.$insertTypeID(16);
      this.$insertTypeID(type);
      this.$insertInt32(length);
    },
    $insertString: function RuePacker$InsertString(value) {
      var encoded = $tab_Utf8TextEncoder.encode(value);
      var stringSpace = encoded.byteLength + 1;
      this.$insertInt32(stringSpace);
      this.$ensureSpace(stringSpace);
      this.$packed.set(encoded, this.$currentOffset);
      this.$currentOffset += stringSpace;
    },
    $insertInt32: function RuePacker$InsertInt32(value) {
      this.$align(4);
      this.$ensureSpace(4);
      this.$view.setInt32(this.$currentOffset, value, true);
      this.$currentOffset += 4;
    },
    $insertTypeID: function RuePacker$InsertTypeID(id) {
      this.$insertInt32(id);
    },
    $insertDouble: function RuePacker$InsertDouble(value) {
      this.$align(8);
      this.$ensureSpace(8);
      this.$view.setFloat64(this.$currentOffset, value, true);
      this.$currentOffset += 8;
    },
    $align: function RuePacker$Align(size) {
      var adjust = ss.imod(size - ss.imod(this.$currentOffset, size), size);
      this.$ensureSpace(adjust);
      this.$currentOffset += adjust;
    },
    $ensureSpace: function RuePacker$EnsureSpace(length) {
      var totalLength = this.$currentOffset + length;
      if (totalLength >= this.$packed.byteLength) {
        var newLength = Math.max(this.$packed.byteLength * 2, totalLength + 1);
        var newBuffer = new Uint8Array(newLength);
        newBuffer.set(this.$packed);
        this.$packed = newBuffer;
        this.$view = new DataView(this.$packed.buffer);
      }
    }
  }, {
    uInt32ArrayToInt64Array: function RuePacker$UInt32ArrayToInt64Array(values) {
      var int64Array = new Array(values.length * 2);
      for (var i = 0; i < values.length; i++) {
        int64Array[2 * i] = 0;
        int64Array[2 * i + 1] = values[i];
      }
      return int64Array;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RuntimeData
  var $tab_RuntimeData = global.tab.RuntimeData = ss.mkType($asm, 'tab.RuntimeData', function(finalStoreIn, isMarkAnimationEnabled) {
    this.$finalStore = '';
    this.$finalDataStore = null;
    this.$paneStoreTable = null;
    this.$labelsPaneStoreTable = null;
    this.$annexedData = null;
    this.$drawFirsts = [];
    this.$drawLasts = [];
    this.$panes = [];
    this.$geometries = {};
    this.$finalStore = finalStoreIn;
    this.$parseFinalDataStore();
    this.$trackFinalDataStoreIfCovered();
    this.$cacheAnnexedData(isMarkAnimationEnabled);
    this.$cacheGeometries();
  }, {
    get_finalDataStore: function RuntimeData$get_FinalDataStore() {
      return this.$finalDataStore;
    },
    get_annexedData: function RuntimeData$get_AnnexedData() {
      return this.$annexedData;
    },
    get_geometries: function RuntimeData$get_Geometries() {
      return this.$geometries;
    },
    get_paneStoreTable: function RuntimeData$get_PaneStoreTable() {
      if (tab.MiscUtil.isNullOrEmpty(this.$paneStoreTable)) {
        this.$paneStoreTable = new $tab_PaneDataStoreTable(this.get_finalDataStore().PageIntervalTable, this.get_finalDataStore().PaneCount);
      }
      return this.$paneStoreTable;
    },
    get_labelsPaneStoreTable: function RuntimeData$get_LabelsPaneStoreTable() {
      if (tab.MiscUtil.isNullOrEmpty(this.$labelsPaneStoreTable)) {
        this.$labelsPaneStoreTable = new $tab_PaneDataStoreTable(this.get_annexedData().LabelStore.PageIntervalTable, this.get_finalDataStore().PaneCount);
      }
      return this.$labelsPaneStoreTable;
    },
    get_drawFirsts: function RuntimeData$get_DrawFirsts() {
      if (tab.MiscUtil.isNullOrEmpty(this.$drawFirsts) && !tab.MiscUtil.isNullOrEmpty(this.get_annexedData())) {
        this.$drawFirsts = $tab_RuntimeData.$convertDrawPanesToVisualLists(this.get_annexedData().DrawFirsts);
      }
      return this.$drawFirsts;
    },
    get_drawLasts: function RuntimeData$get_DrawLasts() {
      if (tab.MiscUtil.isNullOrEmpty(this.$drawLasts) && !tab.MiscUtil.isNullOrEmpty(this.get_annexedData())) {
        this.$drawLasts = $tab_RuntimeData.$convertDrawPanesToVisualLists(this.get_annexedData().DrawLasts);
      }
      return this.$drawLasts;
    },
    get_panes: function RuntimeData$get_Panes() {
      if (tab.MiscUtil.isNullOrEmpty$2(this.$panes)) {
        if (tab.MiscUtil.isNullOrEmpty(this.get_annexedData()) || tab.MiscUtil.isNullOrEmpty$2(this.get_annexedData().Panes)) {
          return [];
        }
        var panes = this.get_annexedData().Panes;
        var paneList = [];
        for (var $t1 = 0; $t1 < panes.length; $t1++) {
          var pane = panes[$t1];
          var ppm = {};
          var drawList = [];
          for (var $t2 = 0; $t2 < pane.DrawPanes.length; $t2++) {
            var array = pane.DrawPanes[$t2];
            if (array[1].length > 0) {
              drawList.push(JSON.parse($tab_Utf8TextDecoder.decode(array[1])));
            }
          }
          ppm.drawPane = Array.prototype.slice.call(drawList);
          ppm.rowAndColumnAndLayer = { columnIndex: pane.Column, rowIndex: pane.Row };
          ppm.paneRect = { h: pane.Rect[3], w: pane.Rect[2], x: pane.Rect[0], y: pane.Rect[1] };
          paneList.push(ppm);
        }
        this.$panes = paneList;
      }
      return this.$panes;
    },
    safeFetchMarkPanes: function RuntimeData$SafeFetchMarkPanes() {
      var panes = [];
      if (!ss.isNullOrUndefined(this.get_annexedData()) && !ss.isNullOrUndefined(this.get_annexedData().Panes)) {
        panes = this.get_annexedData().Panes;
      }
      return panes;
    },
    invalidatePanesCache: function RuntimeData$InvalidatePanesCache() {
      this.$panes = [];
    },
    $copyViewpointPanePixelRectsToAnnexedDataPanes: function RuntimeData$CopyViewpointPanePixelRectsToAnnexedDataPanes() {
      if (tab.MiscUtil.isNullOrEmpty(this.get_annexedData()) || tab.MiscUtil.isNullOrEmpty$2(this.get_annexedData().Panes)) {
        return;
      }
      var panes = this.get_annexedData().Panes;
      if (tab.MiscUtil.isNullOrEmpty(this.$finalDataStore) || tab.MiscUtil.isNullOrEmpty(this.$finalDataStore.Viewpoint) || tab.MiscUtil.isNullOrEmpty(this.$finalDataStore.Viewpoint.PerPaneExtents)) {
        return;
      }
      var perPaneExtents = this.$finalDataStore.Viewpoint.PerPaneExtents;
      if (tab.MiscUtil.isNullOrEmpty$2(perPaneExtents.pane_px_left) || tab.MiscUtil.isNullOrEmpty$2(perPaneExtents.pane_px_right) || tab.MiscUtil.isNullOrEmpty$2(perPaneExtents.pane_px_bottom) || tab.MiscUtil.isNullOrEmpty$2(perPaneExtents.pane_px_top)) {
        return;
      }
      var numPanes = panes.length;
      if (perPaneExtents.pane_px_left.length !== numPanes || perPaneExtents.pane_px_right.length !== numPanes || perPaneExtents.pane_px_bottom.length !== numPanes || perPaneExtents.pane_px_top.length !== numPanes) {
        return;
      }
      var numPaneRows = this.$finalDataStore.PaneCount.RowCount;
      var numPaneCols = this.$finalDataStore.PaneCount.ColumnCount;
      var rowMajorColMinorToPerPaneIndexArray = this.$getRowMajorColMinorToPerPaneIndexArray(numPaneRows, numPaneCols, perPaneExtents);
      for (var $t1 = 0; $t1 < panes.length; $t1++) {
        var pane = panes[$t1];
        var perPaneExtentsIndex = rowMajorColMinorToPerPaneIndexArray[pane.Row * numPaneCols + pane.Column];
        var left = perPaneExtents.pane_px_left[perPaneExtentsIndex];
        var top = perPaneExtents.pane_px_top[perPaneExtentsIndex];
        pane.Rect[0] = left;
        pane.Rect[1] = top;
        pane.Rect[2] = perPaneExtents.pane_px_right[perPaneExtentsIndex] - left;
        pane.Rect[3] = perPaneExtents.pane_px_bottom[perPaneExtentsIndex] - top;
      }
    },
    $getRowMajorColMinorToPerPaneIndexArray: function RuntimeData$GetRowMajorColMinorToPerPaneIndexArray(numRows, numCols, perPaneExtents) {
      var result = new Array(numRows * numCols);
      var numPanes = perPaneExtents.pane_row.length;
      for (var i = 0; i < numPanes; i++) {
        result[perPaneExtents.pane_row[i] * numCols + perPaneExtents.pane_col[i]] = i;
      }
      return result;
    },
    update: function RuntimeData$Update(localStore, isMarkAnimationEnabled) {
      this.$finalDataStore = this.$fixLocalStore(localStore);
      this.$paneStoreTable = null;
      this.$labelsPaneStoreTable = null;
      this.$cacheAnnexedData(isMarkAnimationEnabled);
    },
    $parseFinalDataStore: function RuntimeData$ParseFinalDataStore() {
      if (ss.isNullOrUndefined(this.$finalStore) || this.$finalStore.length === 0) {
        this.$finalDataStore = {};
        return;
      }
      if (this.$finalStore.charCodeAt(0) === 123) {
        {
          var mc = tabBootstrap.MetricsController.createContext('RTCONV'.toString(), 16, null);
          try {
            this.$finalDataStore = JSON.parse(this.$finalStore);
          }
          finally {
            if (ss.isValue(mc)) {
              mc.dispose();
            }
          }
        }
      }
      else {
        this.$finalDataStore = $tab_JsHeapMarshaller.unmarshallHex(this.$finalStore);
      }
    },
    $trackFinalDataStoreIfCovered: function RuntimeData$TrackFinalDataStoreIfCovered() {
      if (tab.ObjectCoverage.shouldTrack('runtime-datastore')) {
        this.$finalDataStore = (new tab.ObjectCoverage('runtime-datastore')).instrument(this.get_finalDataStore(), '');
      }
    },
    $cacheAnnexedData: function RuntimeData$CacheAnnexedData(isMarkAnimationEnabled) {
      if (!tab.MiscUtil.isNullOrEmpty(this.$finalDataStore.AnnexedData)) {
        this.$annexedData = this.$finalDataStore.AnnexedData;
        if (isMarkAnimationEnabled) {
          this.$copyViewpointPanePixelRectsToAnnexedDataPanes();
        }
      }
    },
    $cacheGeometries: function RuntimeData$CacheGeometries() {
      var pdMarks = this.$finalDataStore.PDMarks;
      var $t1 = _.keys(pdMarks);
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var pdMarksKey = $t1[$t2];
        var markLayoutOutput = pdMarks[pdMarksKey];
        var geometries = markLayoutOutput.MarkLayoutData.geoTable;
        if (!ss.isValue(geometries)) {
          continue;
        }
        this.$geometries[pdMarksKey] = geometries;
      }
    },
    $fixLocalStore: function RuntimeData$FixLocalStore(localStore) {
      localStore.TickPlacement = this.$finalDataStore.TickPlacement;
      localStore.RefLines = this.$finalDataStore.RefLines;
      if (!tab.FeatureFlags.isEnabled('RuntimeWebInstantRefLineLabels')) {
        this.$removeLabels(localStore.InstantRefLines);
      }
      return localStore;
    },
    $removeLabels: function RuntimeData$RemoveLabels(refLines) {
      if (ss.isValue(refLines)) {
        var $t1 = new ss.ObjectEnumerator(refLines);
        try {
          while ($t1.moveNext()) {
            var kv = $t1.current();
            kv.value.TextRun = null;
          }
        }
        finally {
          $t1.dispose();
        }
      }
    }
  }, {
    $ctor1: function(finalDataStore, isMarkAnimationEnabled) {
      this.$finalStore = '';
      this.$finalDataStore = null;
      this.$paneStoreTable = null;
      this.$labelsPaneStoreTable = null;
      this.$annexedData = null;
      this.$drawFirsts = [];
      this.$drawLasts = [];
      this.$panes = [];
      this.$geometries = {};
      this.$finalDataStore = finalDataStore;
      this.$finalStore = null;
      this.$trackFinalDataStoreIfCovered();
      this.$cacheAnnexedData(isMarkAnimationEnabled);
      this.$cacheGeometries();
    },
    $ctor2: function() {
      this.$finalStore = '';
      this.$finalDataStore = null;
      this.$paneStoreTable = null;
      this.$labelsPaneStoreTable = null;
      this.$annexedData = null;
      this.$drawFirsts = [];
      this.$drawLasts = [];
      this.$panes = [];
      this.$geometries = {};
    },
    createLimitedRuntimeDataForTest: function RuntimeData$CreateLimitedRuntimeDataForTest(finalDataStore) {
      var $t1 = new $tab_RuntimeData.$ctor2();
      $t1.$finalDataStore = finalDataStore;
      var runtimeData = $t1;
      return runtimeData;
    },
    $convertDrawPanesToVisualLists: function RuntimeData$ConvertDrawPanesToVisualLists(drawPanes) {
      if (tab.MiscUtil.isNullOrEmpty(drawPanes)) {
        return [];
      }
      var convertedVisualLists = [];
      for (var $t1 = 0; $t1 < drawPanes.length; $t1++) {
        var drawPane = drawPanes[$t1];
        convertedVisualLists.push($tab_RuntimeUtil.visualListFromDrawPane(drawPane));
      }
      return Array.prototype.slice.call(convertedVisualLists);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.RuntimeFormattingHooks
  var $tab_RuntimeFormattingHooks = global.tab.RuntimeFormattingHooks = ss.mkType($asm, 'tab.RuntimeFormattingHooks', function() {
  }, null, {
    registerRealFormattingTuple: function RuntimeFormattingHooks$RegisterRealFormattingTuple(formatString) {
      if (ss.keyExists($tab_RuntimeFormattingHooks.$formatterCache, formatString)) {
        return $tab_RuntimeFormattingHooks.$formatterCache[formatString];
      }
      var id = $tab_RuntimeFormattingHooks.$formatterId++;
      $tab_RuntimeFormattingHooks.$registeredFormatters[id] = JSON.parse(formatString);
      $tab_RuntimeFormattingHooks.$formatterCache[formatString] = id;
      return id;
    },
    registerDateTimeFormattingTuple: function RuntimeFormattingHooks$RegisterDateTimeFormattingTuple(formatString) {
      if (ss.keyExists($tab_RuntimeFormattingHooks.$formatterCache, formatString)) {
        return $tab_RuntimeFormattingHooks.$formatterCache[formatString];
      }
      var id = $tab_RuntimeFormattingHooks.$formatterId++;
      var formattingInfo = {};
      if (ss.referenceEquals(formatString, $tab_RuntimeFormattingHooks.$quarterFormat)) {
        formattingInfo.format = $tab_RuntimeFormattingHooks.$simpleQuarterFormat;
      }
      else if (ss.startsWithString(formatString, $tab_RuntimeFormattingHooks.$icuDayFormat)) {
        formattingInfo.format = formatString.replace($tab_RuntimeFormattingHooks.$icuDayFormat, $tab_RuntimeFormattingHooks.$oleDayFormat);
      }
      else {
        formattingInfo.format = formatString;
      }
      formattingInfo.locale_formatting_strings = tableau.format.defaultLocaleStrings;
      $tab_RuntimeFormattingHooks.$registeredFormatters[id] = formattingInfo;
      $tab_RuntimeFormattingHooks.$formatterCache[formatString] = id;
      return id;
    },
    formatRealValue: function RuntimeFormattingHooks$FormatRealValue(value, formatter) {
      var toFormat = { t: 'r', v: value, s: tableau.types.DataSpecial.DS_NORMAL };
      return tableau.format.formatDataValue(toFormat, 'm', $tab_RuntimeFormattingHooks.$registeredFormatters[formatter], -2, 2);
    },
    formatDateTimeValue: function RuntimeFormattingHooks$FormatDateTimeValue(value, formatter) {
      var toFormat = { t: 't', v: value, s: tableau.types.DataSpecial.DS_NORMAL };
      return tableau.format.formatDataValue(toFormat, 'm', $tab_RuntimeFormattingHooks.$registeredFormatters[formatter], null, 2);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RuntimeHandles
  var $tab_RuntimeHandles = global.tab.RuntimeHandles = ss.mkType($asm, 'tab.RuntimeHandles', function(vm, initialStore, finalStore) {
    this.$1$VMField = null;
    this.$1$InitialStoreField = null;
    this.$1$FinalStoreField = null;
    this.set_VM(vm);
    this.set_initialStore(initialStore);
    this.set_finalStore(finalStore);
  }, {
    get_VM: function RuntimeHandles$get_VM() {
      return this.$1$VMField;
    },
    set_VM: function RuntimeHandles$set_VM(value) {
      this.$1$VMField = value;
    },
    get_initialStore: function RuntimeHandles$get_InitialStore() {
      return this.$1$InitialStoreField;
    },
    set_initialStore: function RuntimeHandles$set_InitialStore(value) {
      this.$1$InitialStoreField = value;
    },
    get_finalStore: function RuntimeHandles$get_FinalStore() {
      return this.$1$FinalStoreField;
    },
    set_finalStore: function RuntimeHandles$set_FinalStore(value) {
      this.$1$FinalStoreField = value;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.RuntimeTextMeasurementHooks
  var $tab_RuntimeTextMeasurementHooks = global.tab.RuntimeTextMeasurementHooks = ss.mkType($asm, 'tab.RuntimeTextMeasurementHooks', function() {
  }, null, {
    registerTextStyle: function RuntimeTextMeasurementHooks$RegisterTextStyle(style) {
      var id = $tab_RuntimeTextMeasurementHooks.$textStyleId++;
      var textStyle = $tab_RuntimeTextMeasurementHooks.$buildFont($tab_TupleDatastoreConversions.textStyleFromTuple(style[$tab_RuntimeTextMeasurementHooks.$marshalledTextStyleKey]));
      $tab_RuntimeTextMeasurementHooks.$registeredTextStyles[id] = textStyle;
      return id;
    },
    measureTextWidth: function RuntimeTextMeasurementHooks$MeasureTextWidth(textStyleId, text) {
      var ctx = $tab_RuntimeTextMeasurementHooks.$createCanvasContext();
      ctx.font = $tab_RuntimeTextMeasurementHooks.$registeredTextStyles[textStyleId];
      return ctx.measureText(text).width;
    },
    measureTextWidth$1: function RuntimeTextMeasurementHooks$MeasureTextWidth(textStyle, text) {
      var ctx = $tab_RuntimeTextMeasurementHooks.$createCanvasContext();
      ctx.font = $tab_RuntimeTextMeasurementHooks.$buildFont(textStyle);
      return ctx.measureText(text).width;
    },
    measureFontMetrics: function RuntimeTextMeasurementHooks$MeasureFontMetrics(textStyleId) {
      var fontMetricsView = new Float32Array(new ArrayBuffer(12));
      fontMetricsView[0] = 16.53125;
      fontMetricsView[1] = 13.140625;
      fontMetricsView[2] = 0;
      return fontMetricsView.buffer;
    },
    $createCanvasContext: function RuntimeTextMeasurementHooks$CreateCanvasContext() {
      var $t1 = document.createElement('canvas');
      var canvas = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
      return ss.cast(canvas.getContext('2d'), CanvasRenderingContext2D);
    },
    $buildFont: function RuntimeTextMeasurementHooks$BuildFont(textStyle) {
      var fontDescription = new ss.StringBuilder();
      if ($tab_EnumConversions.tableauFontStyleFromInt(textStyle.font_style) === 'font-style-italic') {
        fontDescription.append('italic ');
      }
      if ($tab_EnumConversions.fontWeightFromInt(textStyle.font_weight) === 'font-weight-bold') {
        fontDescription.append('bold ');
      }
      var fontName = tab.FontUtil.createFallbackCanvasFontName(textStyle.font);
      fontDescription.append(textStyle.font_size + 'pt ' + fontName);
      return fontDescription.toString();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RuntimeUtil
  var $tab_RuntimeUtil = global.tab.RuntimeUtil = ss.mkType($asm, 'tab.RuntimeUtil', null, null, {
    isRuntimeDataPresModelNullOrEmpty: function RuntimeUtil$IsRuntimeDataPresModelNullOrEmpty(runtimeData) {
      return !ss.isValue(runtimeData) || !ss.isValue(runtimeData.runtimeDatastoreUpdater) && !ss.isValue(runtimeData.runtimeLayoutInputDatastore) && !ss.isValue(runtimeData.runtimeVtl);
    },
    canUseRuntime: function RuntimeUtil$CanUseRuntime(renderMode) {
      return renderMode !== 'render-mode-desktop' && $tab_RuntimeUtil.isRuntimeSupported() && !$tab_RuntimeUtil.$emscriptenAborted;
    },
    isRuntimeSupported: function RuntimeUtil$IsRuntimeSupported() {
      if ((window.navigator.userAgent.indexOf('Safari') !== -1 || window.navigator.userAgent.indexOf('TableauMobile') !== -1) && window.navigator.userAgent.indexOf('OS 11_2_') !== -1) {
        return false;
      }
      return !!!ss.isNullOrUndefined(window.self['WebAssembly']);
    },
    abortEmscripten: function RuntimeUtil$AbortEmscripten() {
      $tab_RuntimeUtil.$emscriptenAborted = true;
    },
    createRuntimeData: function RuntimeUtil$CreateRuntimeData(runtimeRenderInputDataStore) {
      var IsMarkAnimationEnabled = true;
      var runtimeData = new $tab_RuntimeData(runtimeRenderInputDataStore, IsMarkAnimationEnabled);
      return runtimeData;
    },
    visualListFromDrawPane: function RuntimeUtil$VisualListFromDrawPane(drawPane) {
      var visualList = drawPane;
      ss.Debug.assert($tab_EnumConversions.visualPartFromInt(visualList[0]) !== 'marks', 'We only support VLPM conversion for display list related draw panes!');
      return JSON.parse($tab_Utf8TextDecoder.decode(visualList[1]));
    },
    renderNodeFromPredictionMark: function RuntimeUtil$RenderNodeFromPredictionMark(predictionMark) {
      var renderNode = {};
      var PredictionBandType = -695169174;
      var PredictionWhisker = -696033834;
      switch (predictionMark.Type) {
        case -695169174: {
          {
            var pm = {};
            pm.qrgbColor = predictionMark.color;
            pm.lineTupleIds = predictionMark.LineTupleIds;
            $tab_RuntimeUtil.$predictionIntervalFromPredictionMark(predictionMark, pm);
            renderNode = pm;
            renderNode.type = 'prediction-band';
          }
          break;
        }
        case -696033834: {
          {
            var pm1 = {};
            pm1.qrgbColors = predictionMark.Colors;
            pm1.qrgbColor = predictionMark.halo_color;
            pm1.renderOnTop = predictionMark.RenderOnTop;
            pm1.maxAlpha = predictionMark.MaxAlpha;
            $tab_RuntimeUtil.$predictionIntervalFromPredictionMark(predictionMark, pm1);
            renderNode = pm1;
            renderNode.type = 'prediction-whisker';
          }
          break;
        }
        default: {
          {
            ss.Debug.assert(false, 'Do not support conversion for this type of render node!');
          }
          break;
        }
      }
      return renderNode;
    },
    $predictionIntervalFromPredictionMark: function RuntimeUtil$PredictionIntervalFromPredictionMark(predictionMark, pm) {
      pm.useYAxis = predictionMark.UseYAxis;
      pm.upperEnd = predictionMark.UpperEnds;
      pm.lowerEnd = predictionMark.LowerEnds;
      pm.oppositeAxis = predictionMark.OppositeAxes;
      pm.widths = predictionMark.Widths;
      pm.tupleIds = predictionMark.TupleIds;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RWAL.RuntimeWebHost
  var $tab_RuntimeWebHost = global.tab.RuntimeWebHost = ss.mkType($asm, 'tab.RuntimeWebHost', function(hostUrl) {
    this.$hostUrl = null;
    this.$hostUrl = 'http://' + hostUrl;
    this.$restartServer();
  }, {
    executeVM: function RuntimeWebHost$ExecuteVM(vmHandle) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('ExecuteVM', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', vmHandle.handleValue)]);
      callPromise.done(ss.mkdel(this, function(callResult) {
        var result = new $tab_DatastoreHandle(callResult.value, ss.mkdel(this, function(handleValue) {
          this.$callMethod('HandleManagerReleaseDatastoreHandle', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', handleValue)]);
        }));
        deferred.resolve(result);
      }));
      return deferred.promise();
    },
    buildVMHex: function RuntimeWebHost$BuildVMHex(vtlAsHex, dsHandle) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('BuildVM', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('hex', vtlAsHex), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', dsHandle.handleValue)]);
      callPromise.done(ss.mkdel(this, function(callResult) {
        var result = new $tab_VMHandle(callResult.value, ss.mkdel(this, function(handleValue) {
          this.$callMethod('HandleManagerReleaseVMHandle', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', handleValue)]);
        }));
        deferred.resolve(result);
      }));
      return deferred.promise();
    },
    loadBinaryDatastoreHex: function RuntimeWebHost$LoadBinaryDatastoreHex(bufferAsHex) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('LoadBinaryDatastore', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('hex', bufferAsHex)]);
      callPromise.done(ss.mkdel(this, function(callResult) {
        var result = new $tab_DatastoreHandle(callResult.value, ss.mkdel(this, function(handleValue) {
          this.$callMethod('HandleManagerReleaseDatastoreHandle', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', handleValue)]);
        }));
        deferred.resolve(result);
      }));
      return deferred.promise();
    },
    initializeRuntime: function RuntimeWebHost$InitializeRuntime() {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('InitializeRuntime', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', '')]);
      callPromise.done(function(callResult) {
        deferred.resolve();
      });
      return deferred.promise();
    },
    marshallDatastore: function RuntimeWebHost$MarshallDatastore(dsHandle) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('MarshallDatastore', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('hex', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', dsHandle.handleValue)]);
      callPromise.done(function(callResult) {
        var result = $tab_JsHeapMarshaller.unmarshallHex(callResult.value);
        deferred.resolve(result);
      });
      return deferred.promise();
    },
    marshallDatastoreSubKeyHex: function RuntimeWebHost$MarshallDatastoreSubKeyHex(dsHandle, subKeyAsHex) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('MarshallDatastoreSubKey', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('hex', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', dsHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('hex', subKeyAsHex)]);
      callPromise.done(function(callResult) {
        var result = $tab_JsHeapMarshaller.unmarshallHex(callResult.value);
        deferred.resolve(result);
      });
      return deferred.promise();
    },
    loadAndApplyDataStoreUpdaterHex: function RuntimeWebHost$LoadAndApplyDataStoreUpdaterHex(bufferAsHex, vmHandle) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('LoadAndApplyDataStoreUpdater', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('hex', bufferAsHex), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', vmHandle.handleValue)]);
      callPromise.done(ss.mkdel(this, function(callResult) {
        var result = new $tab_DatastoreHandle(callResult.value, ss.mkdel(this, function(handleValue) {
          this.$callMethod('HandleManagerReleaseDatastoreHandle', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', handleValue)]);
        }));
        deferred.resolve(result);
      }));
      return deferred.promise();
    },
    localPanCommand: function RuntimeWebHost$LocalPanCommand(vmHandle, initialDataStoreHandle, dataStoreHandle, deltaX, deltaY) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('LocalPanCommand', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', vmHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', initialDataStoreHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', dataStoreHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('double', deltaX), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('double', deltaY)]);
      callPromise.done(ss.mkdel(this, function(callResult) {
        var result = new $tab_DatastoreHandle(callResult.value, ss.mkdel(this, function(handleValue) {
          this.$callMethod('HandleManagerReleaseDatastoreHandle', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', handleValue)]);
        }));
        deferred.resolve(result);
      }));
      return deferred.promise();
    },
    localZoomCommand: function RuntimeWebHost$LocalZoomCommand(vmHandle, initialDataStoreHandle, dataStoreHandle, x, y, w, h, isZoomIn) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('LocalZoomCommand', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', vmHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', initialDataStoreHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', dataStoreHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', x), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', y), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', w), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', h), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('bool', isZoomIn)]);
      callPromise.done(ss.mkdel(this, function(callResult) {
        var result = new $tab_DatastoreHandle(callResult.value, ss.mkdel(this, function(handleValue) {
          this.$callMethod('HandleManagerReleaseDatastoreHandle', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', handleValue)]);
        }));
        deferred.resolve(result);
      }));
      return deferred.promise();
    },
    localZoomFactorCommand: function RuntimeWebHost$LocalZoomFactorCommand(vmHandle, initialDataStoreHandle, dataStoreHandle, x, y, zoomFactor) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('LocalZoomFactorCommand', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', vmHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', initialDataStoreHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', dataStoreHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', x), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', y), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('double', zoomFactor)]);
      callPromise.done(ss.mkdel(this, function(callResult) {
        var result = new $tab_DatastoreHandle(callResult.value, ss.mkdel(this, function(handleValue) {
          this.$callMethod('HandleManagerReleaseDatastoreHandle', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', handleValue)]);
        }));
        deferred.resolve(result);
      }));
      return deferred.promise();
    },
    rueUpdateCommandHex: function RuntimeWebHost$RueUpdateCommandHex(vmHandle, rueUpdateAsHex) {
      var deferred = $.Deferred();
      var callPromise = this.$callMethod('RueUpdateCommand', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', vmHandle.handleValue), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('hex', rueUpdateAsHex)]);
      callPromise.done(ss.mkdel(this, function(callResult) {
        var result = new $tab_DatastoreHandle(callResult.value, ss.mkdel(this, function(handleValue) {
          this.$callMethod('HandleManagerReleaseDatastoreHandle', [$tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('void', ''), $tab_$RuntimeWebHost$RuntimeWebHostArg.$ctor('int', handleValue)]);
        }));
        deferred.resolve(result);
      }));
      return deferred.promise();
    },
    $callMethod: function RuntimeWebHost$CallMethod(methodName, args) {
      var deferred = $.Deferred();
      var argsSerialized = [];
      for (var $t1 = 0; $t1 < args.length; $t1++) {
        var a = args[$t1];
        argsSerialized.push(a);
      }
      var xhr = new XMLHttpRequest();
      xhr.open('POST', this.$hostUrl + '/callMethod/' + methodName);
      xhr.setRequestHeader('Accept', 'text/javascript');
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      xhr.onloadend = function(e) {
        deferred.resolve(JSON.parse(e.target.responseText));
      };
      xhr.onerror = function(e1) {
        deferred.reject(e1);
      };
      xhr.send(JSON.stringify(argsSerialized));
      return deferred;
    },
    $restartServer: function RuntimeWebHost$RestartServer() {
      var xhr = new XMLHttpRequest();
      xhr.open('POST', this.$hostUrl + '/restart', false);
      xhr.setRequestHeader('Accept', 'text/javascript');
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      xhr.send(JSON.stringify('restart'));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RuntimeWebHostSupport
  var $tab_RuntimeWebHostSupport = global.tab.RuntimeWebHostSupport = ss.mkType($asm, 'tab.RuntimeWebHostSupport', function() {
  }, {
    byteBufferToHeap: function RuntimeWebHostSupport$ByteBufferToHeap(buffer) {
      var response = {};
      response.type = 'bytebuffer';
      response.value = $tab_HexEncoder.encodeBufferToHex(new Uint8Array(buffer));
      return response;
    },
    paramToByteBuffer: function RuntimeWebHostSupport$ParamToByteBuffer(param) {
      var hex = param['value'];
      var unpacked = new Uint8Array($tab_HexHeapDecoder.decodedLength(hex));
      $tab_HexHeapDecoder.run(0, unpacked, hex);
      return unpacked.buffer;
    },
    paramToString: function RuntimeWebHostSupport$ParamToString(param) {
      return param['value'];
    },
    stringToHeap: function RuntimeWebHostSupport$StringToHeap(str) {
      var response = {};
      response.type = 'string';
      response.value = str;
      return response;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.RuntimeWebModule
  var $tab_RuntimeWebModule = global.tab.RuntimeWebModule = ss.mkType($asm, 'tab.RuntimeWebModule');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SceneMarginAlongDirectionElementLayoutTableKeys
  var $tab_SceneMarginAlongDirectionElementLayoutTableKeys = global.tab.SceneMarginAlongDirectionElementLayoutTableKeys = ss.mkType($asm, 'tab.SceneMarginAlongDirectionElementLayoutTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    level: function SceneMarginAlongDirectionElementLayoutTableKeys$Level() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Level'));
    },
    alongDirectionPixelOffset: function SceneMarginAlongDirectionElementLayoutTableKeys$AlongDirectionPixelOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AlongDirectionPixelOffset'));
    },
    alongDirectionPixelSize: function SceneMarginAlongDirectionElementLayoutTableKeys$AlongDirectionPixelSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AlongDirectionPixelSize'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SceneMarginFieldLabelsKeys
  var $tab_SceneMarginFieldLabelsKeys = global.tab.SceneMarginFieldLabelsKeys = ss.mkType($asm, 'tab.SceneMarginFieldLabelsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    sceneMarginData: function SceneMarginFieldLabelsKeys$SceneMarginData() {
      return new $tab_FieldLabelsTextAndShadingTableKeys.$ctor1(this.get_base().add('SceneMarginData'));
    },
    labelStyles: function SceneMarginFieldLabelsKeys$LabelStyles() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyles'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SceneMarginKeys
  var $tab_SceneMarginKeys = global.tab.SceneMarginKeys = ss.mkType($asm, 'tab.SceneMarginKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    layout: function SceneMarginKeys$Layout() {
      return new $tab_VisualLayoutResultsKeys.$ctor1(this.get_base().add('Layout'));
    },
    labelSkip: function SceneMarginKeys$LabelSkip() {
      return new $tab_LabelSkipOutputTableKeys.$ctor1(this.get_base().add('LabelSkip'));
    },
    styles: function SceneMarginKeys$Styles() {
      return new $tab_SceneMarginStylesProducerInputKeys.$ctor1(this.get_base().add('Styles'));
    },
    xNodes: function SceneMarginKeys$XNodes() {
      return new $tab_AxisDescriptorNodesTableKeys.$ctor1(this.get_base().add('XNodes'));
    },
    yNodes: function SceneMarginKeys$YNodes() {
      return new $tab_AxisDescriptorNodesTableKeys.$ctor1(this.get_base().add('YNodes'));
    },
    nodeSorts: function SceneMarginKeys$NodeSorts() {
      return new $tab_NestedSortIndicatorDataTableKeys.$ctor1(this.get_base().add('NodeSorts'));
    },
    fieldLabels: function SceneMarginKeys$FieldLabels() {
      return new $tab_SceneMarginFieldLabelsKeys.$ctor1(this.get_base().add('FieldLabels'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SceneMarginLayoutTableKeys
  var $tab_SceneMarginLayoutTableKeys = global.tab.SceneMarginLayoutTableKeys = ss.mkType($asm, 'tab.SceneMarginLayoutTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    headerDepth: function SceneMarginLayoutTableKeys$HeaderDepth() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HeaderDepth'));
    },
    elementType: function SceneMarginLayoutTableKeys$ElementType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ElementType'));
    },
    sceneMarginLocation: function SceneMarginLayoutTableKeys$SceneMarginLocation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SceneMarginLocation'));
    },
    pixelOffset: function SceneMarginLayoutTableKeys$PixelOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PixelOffset'));
    },
    pixelSize: function SceneMarginLayoutTableKeys$PixelSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('PixelSize'));
    },
    stretchedPixelSize: function SceneMarginLayoutTableKeys$StretchedPixelSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('StretchedPixelSize'));
    },
    fieldName: function SceneMarginLayoutTableKeys$FieldName() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FieldName'));
    },
    isDraggingAllowed: function SceneMarginLayoutTableKeys$IsDraggingAllowed() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsDraggingAllowed'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SceneMarginStylesProducerInputKeys
  var $tab_SceneMarginStylesProducerInputKeys = global.tab.SceneMarginStylesProducerInputKeys = ss.mkType($asm, 'tab.SceneMarginStylesProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    borderStyles: function SceneMarginStylesProducerInputKeys$BorderStyles() {
      return new $tab_BorderStylesProducerInputKeys.$ctor1(this.get_base().add('BorderStyles'));
    },
    headerStyleAndShading: function SceneMarginStylesProducerInputKeys$HeaderStyleAndShading() {
      return new $tab_TextStyleAndShadingDataKeys.$ctor1(this.get_base().add('HeaderStyleAndShading'));
    },
    dropSpot: function SceneMarginStylesProducerInputKeys$DropSpot() {
      return new $tab_DropSpotDataKeys.$ctor1(this.get_base().add('DropSpot'));
    },
    elidedXNodeLabels: function SceneMarginStylesProducerInputKeys$ElidedXNodeLabels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ElidedXNodeLabels'));
    },
    elidedYNodeLabels: function SceneMarginStylesProducerInputKeys$ElidedYNodeLabels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ElidedYNodeLabels'));
    },
    canUsePaneTextHAlign: function SceneMarginStylesProducerInputKeys$CanUsePaneTextHAlign() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CanUsePaneTextHAlign'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SelectionProducerInputKeys
  var $tab_SelectionProducerInputKeys = global.tab.SelectionProducerInputKeys = ss.mkType($asm, 'tab.SelectionProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    tupleSelection: function SelectionProducerInputKeys$TupleSelection() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TupleSelection'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SetLabelFormatsOutputKeys
  var $tab_SetLabelFormatsOutputKeys = global.tab.SetLabelFormatsOutputKeys = ss.mkType($asm, 'tab.SetLabelFormatsOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    formatters: function SetLabelFormatsOutputKeys$Formatters() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Formatters'));
    },
    formatterIndex: function SetLabelFormatsOutputKeys$FormatterIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FormatterIndex'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SizeEncodingOutputKeys
  var $tab_SizeEncodingOutputKeys = global.tab.SizeEncodingOutputKeys = ss.mkType($asm, 'tab.SizeEncodingOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    size: function SizeEncodingOutputKeys$Size() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Size'));
    },
    unscaledSize: function SizeEncodingOutputKeys$UnscaledSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UnscaledSize'));
    },
    width: function SizeEncodingOutputKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    },
    height: function SizeEncodingOutputKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    },
    hasPerMarkEncoding: function SizeEncodingOutputKeys$HasPerMarkEncoding() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasPerMarkEncoding'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SolutionResultsTableKeys
  var $tab_SolutionResultsTableKeys = global.tab.SolutionResultsTableKeys = ss.mkType($asm, 'tab.SolutionResultsTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    variableID: function SolutionResultsTableKeys$VariableID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VariableID'));
    },
    value: function SolutionResultsTableKeys$Value() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Value'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.SpatialProjectorKeys
  var $tab_SpatialProjectorKeys = global.tab.SpatialProjectorKeys = ss.mkType($asm, 'tab.SpatialProjectorKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    isMap: function SpatialProjectorKeys$IsMap() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsMap'));
    },
    uName: function SpatialProjectorKeys$UName() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UName'));
    },
    vName: function SpatialProjectorKeys$VName() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VName'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.StackedMarkAttributesKeys
  var $tab_StackedMarkAttributesKeys = global.tab.StackedMarkAttributesKeys = ss.mkType($asm, 'tab.StackedMarkAttributesKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    hasCurrStackValue: function StackedMarkAttributesKeys$HasCurrStackValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasCurrStackValue'));
    },
    hasPrevStackValue: function StackedMarkAttributesKeys$HasPrevStackValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasPrevStackValue'));
    },
    hasPrevLowerValue: function StackedMarkAttributesKeys$HasPrevLowerValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasPrevLowerValue'));
    },
    hasNextLowerValue: function StackedMarkAttributesKeys$HasNextLowerValue() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasNextLowerValue'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TextComposerStyleTableKeys
  var $tab_TextComposerStyleTableKeys = global.tab.TextComposerStyleTableKeys = ss.mkType($asm, 'tab.TextComposerStyleTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    font: function TextComposerStyleTableKeys$Font() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Font'));
    },
    fontSize: function TextComposerStyleTableKeys$FontSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontSize'));
    },
    fontStyle: function TextComposerStyleTableKeys$FontStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontStyle'));
    },
    fontWeight: function TextComposerStyleTableKeys$FontWeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontWeight'));
    },
    hAlign: function TextComposerStyleTableKeys$HAlign() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HAlign'));
    },
    strikethrough: function TextComposerStyleTableKeys$Strikethrough() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Strikethrough'));
    },
    textAlignment: function TextComposerStyleTableKeys$TextAlignment() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextAlignment'));
    },
    textDecoration: function TextComposerStyleTableKeys$TextDecoration() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextDecoration'));
    },
    textOrientation: function TextComposerStyleTableKeys$TextOrientation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextOrientation'));
    },
    textStyleColor: function TextComposerStyleTableKeys$TextStyleColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextStyleColor'));
    },
    textWrapMode: function TextComposerStyleTableKeys$TextWrapMode() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextWrapMode'));
    },
    underline: function TextComposerStyleTableKeys$Underline() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Underline'));
    },
    vAlign: function TextComposerStyleTableKeys$VAlign() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VAlign'));
    },
    leftMargin: function TextComposerStyleTableKeys$LeftMargin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LeftMargin'));
    },
    rightMargin: function TextComposerStyleTableKeys$RightMargin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('RightMargin'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TextCompositionInputKeys
  var $tab_TextCompositionInputKeys = global.tab.TextCompositionInputKeys = ss.mkType($asm, 'tab.TextCompositionInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    isTextTable: function TextCompositionInputKeys$IsTextTable() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsTextTable'));
    },
    hPad: function TextCompositionInputKeys$HPad() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HPad'));
    },
    vPad: function TextCompositionInputKeys$VPad() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VPad'));
    },
    textScaleFactor: function TextCompositionInputKeys$TextScaleFactor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextScaleFactor'));
    },
    textRangeFactor: function TextCompositionInputKeys$TextRangeFactor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRangeFactor'));
    },
    textFontMin: function TextCompositionInputKeys$TextFontMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextFontMin'));
    },
    textFitStyle: function TextCompositionInputKeys$TextFitStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextFitStyle'));
    },
    textRunPosition: function TextCompositionInputKeys$TextRunPosition() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunPosition'));
    },
    formattedText: function TextCompositionInputKeys$FormattedText() {
      return new $tab_FormattedTextInputKeys.$ctor1(this.get_base().add('FormattedText'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TextEncodingTableKeys
  var $tab_TextEncodingTableKeys = global.tab.TextEncodingTableKeys = ss.mkType($asm, 'tab.TextEncodingTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    cellX: function TextEncodingTableKeys$CellX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellX'));
    },
    cellY: function TextEncodingTableKeys$CellY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('CellY'));
    },
    height: function TextEncodingTableKeys$Height() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Height'));
    },
    markFlags: function TextEncodingTableKeys$MarkFlags() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MarkFlags'));
    },
    textRunCount: function TextEncodingTableKeys$TextRunCount() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunCount'));
    },
    textRunOffset: function TextEncodingTableKeys$TextRunOffset() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunOffset'));
    },
    tupleId: function TextEncodingTableKeys$TupleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TupleId'));
    },
    userPaneCol: function TextEncodingTableKeys$UserPaneCol() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UserPaneCol'));
    },
    userPaneRow: function TextEncodingTableKeys$UserPaneRow() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UserPaneRow'));
    },
    webClientShouldRenderLabel: function TextEncodingTableKeys$WebClientShouldRenderLabel() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WebClientShouldRenderLabel'));
    },
    width: function TextEncodingTableKeys$Width() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Width'));
    },
    x: function TextEncodingTableKeys$X() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('X'));
    },
    y: function TextEncodingTableKeys$Y() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Y'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TextRunTableKeys
  var $tab_TextRunTableKeys = global.tab.TextRunTableKeys = ss.mkType($asm, 'tab.TextRunTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    hasFontSizeOverride: function TextRunTableKeys$HasFontSizeOverride() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HasFontSizeOverride'));
    },
    textRunString: function TextRunTableKeys$TextRunString() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunString'));
    },
    textRunX: function TextRunTableKeys$TextRunX() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunX'));
    },
    textRunXRemote: function TextRunTableKeys$TextRunXRemote() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunXRemote'));
    },
    textRunY: function TextRunTableKeys$TextRunY() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunY'));
    },
    textRunYRemote: function TextRunTableKeys$TextRunYRemote() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextRunYRemote'));
    },
    textStyleId: function TextRunTableKeys$TextStyleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextStyleId'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TextStyleAndShadingDataKeys
  var $tab_TextStyleAndShadingDataKeys = global.tab.TextStyleAndShadingDataKeys = ss.mkType($asm, 'tab.TextStyleAndShadingDataKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    xNodeLevelStyles: function TextStyleAndShadingDataKeys$XNodeLevelStyles() {
      return new $tab_NodeLevelStyleDataTableKeys.$ctor1(this.get_base().add('XNodeLevelStyles'));
    },
    yNodeLevelStyles: function TextStyleAndShadingDataKeys$YNodeLevelStyles() {
      return new $tab_NodeLevelStyleDataTableKeys.$ctor1(this.get_base().add('YNodeLevelStyles'));
    },
    labelStyles: function TextStyleAndShadingDataKeys$LabelStyles() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyles'));
    },
    fontMetrics: function TextStyleAndShadingDataKeys$FontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontMetrics'));
    },
    xPerLevelHeaderStyles: function TextStyleAndShadingDataKeys$XPerLevelHeaderStyles() {
      return new $tab_HeaderLevelStyleDataTableKeys.$ctor1(this.get_base().add('XPerLevelHeaderStyles'));
    },
    yPerLevelHeaderStyles: function TextStyleAndShadingDataKeys$YPerLevelHeaderStyles() {
      return new $tab_HeaderLevelStyleDataTableKeys.$ctor1(this.get_base().add('YPerLevelHeaderStyles'));
    },
    yLevelShading: function TextStyleAndShadingDataKeys$YLevelShading() {
      return new $tab_RowOrColumnLevelStyleDataKeys.$ctor1(this.get_base().add('YLevelShading'));
    },
    xLevelShading: function TextStyleAndShadingDataKeys$XLevelShading() {
      return new $tab_RowOrColumnLevelStyleDataKeys.$ctor1(this.get_base().add('XLevelShading'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TextStyleKeys
  var $tab_TextStyleKeys = global.tab.TextStyleKeys = ss.mkType($asm, 'tab.TextStyleKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    font: function TextStyleKeys$Font() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Font'));
    },
    fontSize: function TextStyleKeys$FontSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontSize'));
    },
    fontStyle: function TextStyleKeys$FontStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontStyle'));
    },
    fontWeight: function TextStyleKeys$FontWeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontWeight'));
    },
    hAlign: function TextStyleKeys$HAlign() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HAlign'));
    },
    strikethrough: function TextStyleKeys$Strikethrough() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Strikethrough'));
    },
    textAlignment: function TextStyleKeys$TextAlignment() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextAlignment'));
    },
    textDecoration: function TextStyleKeys$TextDecoration() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextDecoration'));
    },
    textOrientation: function TextStyleKeys$TextOrientation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextOrientation'));
    },
    textStyleColor: function TextStyleKeys$TextStyleColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextStyleColor'));
    },
    textWrapMode: function TextStyleKeys$TextWrapMode() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextWrapMode'));
    },
    underline: function TextStyleKeys$Underline() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Underline'));
    },
    vAlign: function TextStyleKeys$VAlign() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VAlign'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TextStyleTableKeys
  var $tab_TextStyleTableKeys = global.tab.TextStyleTableKeys = ss.mkType($asm, 'tab.TextStyleTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    font: function TextStyleTableKeys$Font() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Font'));
    },
    fontSize: function TextStyleTableKeys$FontSize() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontSize'));
    },
    fontStyle: function TextStyleTableKeys$FontStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontStyle'));
    },
    fontWeight: function TextStyleTableKeys$FontWeight() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontWeight'));
    },
    hAlign: function TextStyleTableKeys$HAlign() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HAlign'));
    },
    strikethrough: function TextStyleTableKeys$Strikethrough() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Strikethrough'));
    },
    textAlignment: function TextStyleTableKeys$TextAlignment() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextAlignment'));
    },
    textDecoration: function TextStyleTableKeys$TextDecoration() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextDecoration'));
    },
    textOrientation: function TextStyleTableKeys$TextOrientation() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextOrientation'));
    },
    textStyleColor: function TextStyleTableKeys$TextStyleColor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextStyleColor'));
    },
    textWrapMode: function TextStyleTableKeys$TextWrapMode() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextWrapMode'));
    },
    underline: function TextStyleTableKeys$Underline() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Underline'));
    },
    vAlign: function TextStyleTableKeys$VAlign() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VAlign'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TickProducerArrayConstantsKeys
  var $tab_TickProducerArrayConstantsKeys = global.tab.TickProducerArrayConstantsKeys = ss.mkType($asm, 'tab.TickProducerArrayConstantsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    daysPossibleFreqs: function TickProducerArrayConstantsKeys$DaysPossibleFreqs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DaysPossibleFreqs'));
    },
    hoursPossibleFreqs: function TickProducerArrayConstantsKeys$HoursPossibleFreqs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('HoursPossibleFreqs'));
    },
    monthsPossibleFreqs: function TickProducerArrayConstantsKeys$MonthsPossibleFreqs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MonthsPossibleFreqs'));
    },
    minutesPossibleFreqs: function TickProducerArrayConstantsKeys$MinutesPossibleFreqs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('MinutesPossibleFreqs'));
    },
    quartersPossibleFreqs: function TickProducerArrayConstantsKeys$QuartersPossibleFreqs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('QuartersPossibleFreqs'));
    },
    secondsPossibleFreqs: function TickProducerArrayConstantsKeys$SecondsPossibleFreqs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SecondsPossibleFreqs'));
    },
    weeksPossibleFreqs: function TickProducerArrayConstantsKeys$WeeksPossibleFreqs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('WeeksPossibleFreqs'));
    },
    yearsPossibleFreqs: function TickProducerArrayConstantsKeys$YearsPossibleFreqs() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YearsPossibleFreqs'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TickProducerInputKeys
  var $tab_TickProducerInputKeys = global.tab.TickProducerInputKeys = ss.mkType($asm, 'tab.TickProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    qPerHeaderData: function TickProducerInputKeys$QPerHeaderData() {
      return new $tab_QuantitativeTickPerHeaderInputTableKeys.$ctor1(this.get_base().add('QPerHeaderData'));
    },
    dateTimePerHeaderData: function TickProducerInputKeys$DateTimePerHeaderData() {
      return new $tab_DateTimeTickPerHeaderInputTableKeys.$ctor1(this.get_base().add('DateTimePerHeaderData'));
    },
    logPerHeaderData: function TickProducerInputKeys$LogPerHeaderData() {
      return new $tab_LogTickPerHeaderInputTableKeys.$ctor1(this.get_base().add('LogPerHeaderData'));
    },
    noneTickPerHeaderData: function TickProducerInputKeys$NoneTickPerHeaderData() {
      return new $tab_NoneTickPerHeaderInputTableKeys.$ctor1(this.get_base().add('NoneTickPerHeaderData'));
    },
    arrayConstants: function TickProducerInputKeys$ArrayConstants() {
      return new $tab_TickProducerArrayConstantsKeys.$ctor1(this.get_base().add('ArrayConstants'));
    },
    columnFormat: function TickProducerInputKeys$ColumnFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColumnFormat'));
    },
    labelStyle: function TickProducerInputKeys$LabelStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyle'));
    },
    fontMetrics: function TickProducerInputKeys$FontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontMetrics'));
    },
    numericFormatDivisor: function TickProducerInputKeys$NumericFormatDivisor() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('NumericFormatDivisor'));
    },
    numericFormatSuffix: function TickProducerInputKeys$NumericFormatSuffix() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('NumericFormatSuffix'));
    },
    tickLengthMajorPixels: function TickProducerInputKeys$TickLengthMajorPixels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TickLengthMajorPixels'));
    },
    tickLengthMinorPixels: function TickProducerInputKeys$TickLengthMinorPixels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TickLengthMinorPixels'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TickProducerOutputKeys
  var $tab_TickProducerOutputKeys = global.tab.TickProducerOutputKeys = ss.mkType($asm, 'tab.TickProducerOutputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    perHeaderMajorTickPlacement: function TickProducerOutputKeys$PerHeaderMajorTickPlacement() {
      return new $tab_TickProducerPerHeaderOutputTableKeys.$ctor1(this.get_base().add('PerHeaderMajorTickPlacement'));
    },
    perHeaderMinorTickPlacement: function TickProducerOutputKeys$PerHeaderMinorTickPlacement() {
      return new $tab_TickProducerPerHeaderOutputTableKeys.$ctor1(this.get_base().add('PerHeaderMinorTickPlacement'));
    },
    encodedTickPositions: function TickProducerOutputKeys$EncodedTickPositions() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EncodedTickPositions'));
    },
    encodedMinorTickPositions: function TickProducerOutputKeys$EncodedMinorTickPositions() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EncodedMinorTickPositions'));
    },
    tickLabelValues: function TickProducerOutputKeys$TickLabelValues() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TickLabelValues'));
    },
    labelStyle: function TickProducerOutputKeys$LabelStyle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyle'));
    },
    fontMetrics: function TickProducerOutputKeys$FontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontMetrics'));
    },
    columnFormat: function TickProducerOutputKeys$ColumnFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColumnFormat'));
    },
    updatedColumnFormat: function TickProducerOutputKeys$UpdatedColumnFormat() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UpdatedColumnFormat'));
    },
    tickLengthMajorPixels: function TickProducerOutputKeys$TickLengthMajorPixels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TickLengthMajorPixels'));
    },
    tickLengthMinorPixels: function TickProducerOutputKeys$TickLengthMinorPixels() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TickLengthMinorPixels'));
    },
    isLabelNudgeable: function TickProducerOutputKeys$IsLabelNudgeable() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IsLabelNudgeable'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.TickProducerPerHeaderOutputTableKeys
  var $tab_TickProducerPerHeaderOutputTableKeys = global.tab.TickProducerPerHeaderOutputTableKeys = ss.mkType($asm, 'tab.TickProducerPerHeaderOutputTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    encodedTickPositionsIndex: function TickProducerPerHeaderOutputTableKeys$EncodedTickPositionsIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EncodedTickPositionsIndex'));
    },
    spacing: function TickProducerPerHeaderOutputTableKeys$Spacing() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Spacing'));
    },
    origin: function TickProducerPerHeaderOutputTableKeys$Origin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Origin'));
    },
    includeViewEdges: function TickProducerPerHeaderOutputTableKeys$IncludeViewEdges() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('IncludeViewEdges'));
    },
    showMajorTicks: function TickProducerPerHeaderOutputTableKeys$ShowMajorTicks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowMajorTicks'));
    },
    showMinorTicks: function TickProducerPerHeaderOutputTableKeys$ShowMinorTicks() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ShowMinorTicks'));
    },
    dateTimeSpacing: function TickProducerPerHeaderOutputTableKeys$DateTimeSpacing() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DateTimeSpacing'));
    },
    dateTimeSpacingUnit: function TickProducerPerHeaderOutputTableKeys$DateTimeSpacingUnit() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DateTimeSpacingUnit'));
    },
    dateTimeOrigin: function TickProducerPerHeaderOutputTableKeys$DateTimeOrigin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DateTimeOrigin'));
    },
    dateTimeFormatString: function TickProducerPerHeaderOutputTableKeys$DateTimeFormatString() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DateTimeFormatString'));
    },
    dateTimeSubtitle: function TickProducerPerHeaderOutputTableKeys$DateTimeSubtitle() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('DateTimeSubtitle'));
    },
    encodingMin: function TickProducerPerHeaderOutputTableKeys$EncodingMin() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EncodingMin'));
    },
    encodingMax: function TickProducerPerHeaderOutputTableKeys$EncodingMax() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('EncodingMax'));
    },
    labelStyleIndex: function TickProducerPerHeaderOutputTableKeys$LabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('LabelStyleIndex'));
    },
    columnFormatIndex: function TickProducerPerHeaderOutputTableKeys$ColumnFormatIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ColumnFormatIndex'));
    },
    updatedColumnFormatIndex: function TickProducerPerHeaderOutputTableKeys$UpdatedColumnFormatIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('UpdatedColumnFormatIndex'));
    },
    targetTickSpacing: function TickProducerPerHeaderOutputTableKeys$TargetTickSpacing() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TargetTickSpacing'));
    },
    subTotalsLabelStyleIndex: function TickProducerPerHeaderOutputTableKeys$SubTotalsLabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('SubTotalsLabelStyleIndex'));
    },
    grandTotalsLabelStyleIndex: function TickProducerPerHeaderOutputTableKeys$GrandTotalsLabelStyleIndex() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('GrandTotalsLabelStyleIndex'));
    },
    axisScaleType: function TickProducerPerHeaderOutputTableKeys$AxisScaleType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('AxisScaleType'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.TupleDatastoreConversions
  var $tab_TupleDatastoreConversions = global.tab.TupleDatastoreConversions = ss.mkType($asm, 'tab.TupleDatastoreConversions', null, null, {
    textStyleFromTuple: function TupleDatastoreConversions$TextStyleFromTuple(styleTuple) {
      return { font: ss.cast(styleTuple[0], String), font_size: ss.unbox(ss.cast(styleTuple[1], ss.Int32)), font_style: ss.unbox(ss.cast(styleTuple[2], ss.Int32)), font_weight: ss.unbox(ss.cast(styleTuple[3], ss.Int32)), hAlign: ss.unbox(ss.cast(styleTuple[4], ss.Int32)), strikethrough: ss.unbox(ss.cast(styleTuple[5], Boolean)), text_alignment: ss.unbox(ss.cast(styleTuple[6], ss.Int32)), text_decoration: ss.unbox(ss.cast(styleTuple[7], ss.Int32)), text_orientation: ss.unbox(ss.cast(styleTuple[8], ss.Int32)), text_style_color: ss.unbox(ss.cast(styleTuple[9], ss.Int32)), text_wrap_mode: ss.unbox(ss.cast(styleTuple[10], ss.Int32)), underline: ss.unbox(ss.cast(styleTuple[11], Boolean)), vAlign: ss.unbox(ss.cast(styleTuple[12], ss.Int32)) };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.UpdatedTextStyleTableResultKeys
  var $tab_UpdatedTextStyleTableResultKeys = global.tab.UpdatedTextStyleTableResultKeys = ss.mkType($asm, 'tab.UpdatedTextStyleTableResultKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    fontMetrics: function UpdatedTextStyleTableResultKeys$FontMetrics() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('FontMetrics'));
    },
    textStyleTable: function UpdatedTextStyleTableResultKeys$TextStyleTable() {
      return new $tab_TextStyleTableKeys.$ctor1(this.get_base().add('TextStyleTable'));
    },
    textStyleId: function UpdatedTextStyleTableResultKeys$TextStyleId() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('TextStyleId'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.UserPaneInfoKeys
  var $tab_UserPaneInfoKeys = global.tab.UserPaneInfoKeys = ss.mkType($asm, 'tab.UserPaneInfoKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    xCellOffsets: function UserPaneInfoKeys$XCellOffsets() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XCellOffsets'));
    },
    xPixelOffsets: function UserPaneInfoKeys$XPixelOffsets() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XPixelOffsets'));
    },
    yCellOffsets: function UserPaneInfoKeys$YCellOffsets() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YCellOffsets'));
    },
    yPixelOffsets: function UserPaneInfoKeys$YPixelOffsets() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YPixelOffsets'));
    },
    xCellWidths: function UserPaneInfoKeys$XCellWidths() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XCellWidths'));
    },
    xPixelWidths: function UserPaneInfoKeys$XPixelWidths() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('XPixelWidths'));
    },
    yCellHeights: function UserPaneInfoKeys$YCellHeights() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YCellHeights'));
    },
    yPixelHeights: function UserPaneInfoKeys$YPixelHeights() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('YPixelHeights'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.Utf8TextDecoder
  var $tab_Utf8TextDecoder = global.tab.Utf8TextDecoder = ss.mkType($asm, 'tab.Utf8TextDecoder', function() {
  }, null, {
    decode: function Utf8TextDecoder$Decode(buffer) {
      if ($tab_Utf8TextDecoder.$useFallBack || !ss.isInstanceOfType(buffer, Uint8Array)) {
        return $tab_FallbackTextDecoder.decode(buffer);
      }
      else {
        return $tab_Utf8TextDecoder.$decoder.decode(buffer);
      }
    },
    decodeNullTerminated: function Utf8TextDecoder$DecodeNullTerminated(buffer) {
      var strEnd;
      for (strEnd = 0; strEnd < buffer.byteLength; strEnd++) {
        if (buffer[strEnd] === 0) {
          break;
        }
      }
      return $tab_Utf8TextDecoder.decode(buffer.subarray(0, strEnd));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.Utf8TextEncoder
  var $tab_Utf8TextEncoder = global.tab.Utf8TextEncoder = ss.mkType($asm, 'tab.Utf8TextEncoder', function() {
  }, null, {
    encode: function Utf8TextEncoder$Encode(toEncode) {
      if ($tab_Utf8TextEncoder.$useFallBack) {
        return $tab_FallbackTextEncoder.encode(toEncode);
      }
      else {
        return $tab_Utf8TextEncoder.$encoder.encode(toEncode);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.VariableNameTableKeys
  var $tab_VariableNameTableKeys = global.tab.VariableNameTableKeys = ss.mkType($asm, 'tab.VariableNameTableKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    variableID: function VariableNameTableKeys$VariableID() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('VariableID'));
    },
    name: function VariableNameTableKeys$Name() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('Name'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.ViewpointKeys
  var $tab_ViewpointKeys = global.tab.ViewpointKeys = ss.mkType($asm, 'tab.ViewpointKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    mapLayersModelUpdate: function ViewpointKeys$MapLayersModelUpdate() {
      return new $tab_MapLayersModelUpdateKeys.$ctor1(this.get_base().add('MapLayersModelUpdate'));
    },
    perPaneExtents: function ViewpointKeys$PerPaneExtents() {
      return new $tab_PaneExtentsTableKeys.$ctor1(this.get_base().add('PerPaneExtents'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.VisualLayoutProducerInputKeys
  var $tab_VisualLayoutProducerInputKeys = global.tab.VisualLayoutProducerInputKeys = ss.mkType($asm, 'tab.VisualLayoutProducerInputKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    sceneMarginLayout: function VisualLayoutProducerInputKeys$SceneMarginLayout() {
      return new $tab_SceneMarginLayoutTableKeys.$ctor1(this.get_base().add('SceneMarginLayout'));
    },
    xElementsLayout: function VisualLayoutProducerInputKeys$XElementsLayout() {
      return new $tab_SceneMarginAlongDirectionElementLayoutTableKeys.$ctor1(this.get_base().add('XElementsLayout'));
    },
    yElementsLayout: function VisualLayoutProducerInputKeys$YElementsLayout() {
      return new $tab_SceneMarginAlongDirectionElementLayoutTableKeys.$ctor1(this.get_base().add('YElementsLayout'));
    },
    zoomType: function VisualLayoutProducerInputKeys$ZoomType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZoomType'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Runtime.VisualLayoutResultsKeys
  var $tab_VisualLayoutResultsKeys = global.tab.VisualLayoutResultsKeys = ss.mkType($asm, 'tab.VisualLayoutResultsKeys', function() {
    $tab_KeyPath.call(this);
  }, {
    sceneMarginLayout: function VisualLayoutResultsKeys$SceneMarginLayout() {
      return new $tab_SceneMarginLayoutTableKeys.$ctor1(this.get_base().add('SceneMarginLayout'));
    },
    xElementsLayout: function VisualLayoutResultsKeys$XElementsLayout() {
      return new $tab_SceneMarginAlongDirectionElementLayoutTableKeys.$ctor1(this.get_base().add('XElementsLayout'));
    },
    yElementsLayout: function VisualLayoutResultsKeys$YElementsLayout() {
      return new $tab_SceneMarginAlongDirectionElementLayoutTableKeys.$ctor1(this.get_base().add('YElementsLayout'));
    },
    zoomType: function VisualLayoutResultsKeys$ZoomType() {
      return new $tab_KeyPath.$ctor2(this.get_base().add('ZoomType'));
    }
  }, {
    $ctor1: function(base_key) {
      $tab_KeyPath.$ctor2.call(this, base_key);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Runtime.VMHandle
  var $tab_VMHandle = global.tab.VMHandle = ss.mkType($asm, 'tab.VMHandle', function(handleValue, disposeMethod) {
    $tab_OpaqueHandle.call(this, handleValue, disposeMethod);
  }, {
    get_typeCode: function VMHandle$get_TypeCode() {
      return 17;
    }
  });
  ss.initClass($tab_$ObjectBuilder);
  ss.initClass($tab_$RuntimeWebHost$RuntimeWebHostArg, Object);
  ss.initClass($tab_KeyPath);
  $tab_KeyPath.$ctor1.prototype = $tab_KeyPath.$ctor2.prototype = $tab_KeyPath.$ctor3.prototype = $tab_KeyPath.prototype;
  ss.initClass($tab_AdjustAxisRangeOutputTableKeys, $tab_KeyPath);
  $tab_AdjustAxisRangeOutputTableKeys.$ctor1.prototype = $tab_AdjustAxisRangeOutputTableKeys.prototype;
  ss.initClass($tab_AnnexedDataKeys, $tab_KeyPath);
  $tab_AnnexedDataKeys.$ctor1.prototype = $tab_AnnexedDataKeys.prototype;
  ss.initClass($tab_AxisDescriptorHeadersTableKeys, $tab_KeyPath);
  $tab_AxisDescriptorHeadersTableKeys.$ctor1.prototype = $tab_AxisDescriptorHeadersTableKeys.prototype;
  ss.initClass($tab_AxisDescriptorNodesTableKeys, $tab_KeyPath);
  $tab_AxisDescriptorNodesTableKeys.$ctor1.prototype = $tab_AxisDescriptorNodesTableKeys.prototype;
  ss.initClass($tab_AxisModelDataTableKeys, $tab_KeyPath);
  $tab_AxisModelDataTableKeys.$ctor1.prototype = $tab_AxisModelDataTableKeys.prototype;
  ss.initClass($tab_AxisProducerInputKeys, $tab_KeyPath);
  $tab_AxisProducerInputKeys.$ctor1.prototype = $tab_AxisProducerInputKeys.prototype;
  ss.initClass($tab_AxisProducerOutputKeys, $tab_KeyPath);
  $tab_AxisProducerOutputKeys.$ctor1.prototype = $tab_AxisProducerOutputKeys.prototype;
  ss.initClass($tab_AxisRangeDataTableKeys, $tab_KeyPath);
  $tab_AxisRangeDataTableKeys.$ctor1.prototype = $tab_AxisRangeDataTableKeys.prototype;
  ss.initClass($tab_AxisRangeKeys, $tab_KeyPath);
  $tab_AxisRangeKeys.$ctor1.prototype = $tab_AxisRangeKeys.prototype;
  ss.initClass($tab_AxisRangeTableColumnsKeys, $tab_KeyPath);
  $tab_AxisRangeTableColumnsKeys.$ctor1.prototype = $tab_AxisRangeTableColumnsKeys.prototype;
  ss.initClass($tab_AxisRangeTableKeys, $tab_KeyPath);
  $tab_AxisRangeTableKeys.$ctor1.prototype = $tab_AxisRangeTableKeys.prototype;
  ss.initClass($tab_AxisSizeTableKeys, $tab_KeyPath);
  $tab_AxisSizeTableKeys.$ctor1.prototype = $tab_AxisSizeTableKeys.prototype;
  ss.initClass($tab_AxisTableColumnsKeys, $tab_KeyPath);
  $tab_AxisTableColumnsKeys.$ctor1.prototype = $tab_AxisTableColumnsKeys.prototype;
  ss.initClass($tab_AxisTableKeys, $tab_KeyPath);
  $tab_AxisTableKeys.$ctor1.prototype = $tab_AxisTableKeys.prototype;
  ss.initClass($tab_Base64HeapDecoder);
  ss.initClass($tab_BorderStylesProducerInputKeys, $tab_KeyPath);
  $tab_BorderStylesProducerInputKeys.$ctor1.prototype = $tab_BorderStylesProducerInputKeys.prototype;
  ss.initClass($tab_CommonEncodingsKeys, $tab_KeyPath);
  $tab_CommonEncodingsKeys.$ctor1.prototype = $tab_CommonEncodingsKeys.prototype;
  ss.initClass($tab_ComposedTextResultKeys, $tab_KeyPath);
  $tab_ComposedTextResultKeys.$ctor1.prototype = $tab_ComposedTextResultKeys.prototype;
  ss.initClass($tab_ComputeAxisExtentsOutputsKeys, $tab_KeyPath);
  $tab_ComputeAxisExtentsOutputsKeys.$ctor1.prototype = $tab_ComputeAxisExtentsOutputsKeys.prototype;
  ss.initClass($tab_ComputeTreemapLayoutOutputTableKeys, $tab_KeyPath);
  $tab_ComputeTreemapLayoutOutputTableKeys.$ctor1.prototype = $tab_ComputeTreemapLayoutOutputTableKeys.prototype;
  ss.initClass($tab_ConstraintSystemKeys, $tab_KeyPath);
  $tab_ConstraintSystemKeys.$ctor1.prototype = $tab_ConstraintSystemKeys.prototype;
  ss.initClass($tab_ConstraintTableKeys, $tab_KeyPath);
  $tab_ConstraintTableKeys.$ctor1.prototype = $tab_ConstraintTableKeys.prototype;
  ss.initClass($tab_OpaqueHandle, null, [ss.IDisposable]);
  ss.initClass($tab_DatastoreHandle, $tab_OpaqueHandle, [ss.IDisposable]);
  ss.initClass($tab_DateTimeTickPerHeaderInputTableKeys, $tab_KeyPath);
  $tab_DateTimeTickPerHeaderInputTableKeys.$ctor1.prototype = $tab_DateTimeTickPerHeaderInputTableKeys.prototype;
  ss.initClass($tab_DomainLookupKeys, $tab_KeyPath);
  $tab_DomainLookupKeys.$ctor1.prototype = $tab_DomainLookupKeys.prototype;
  ss.initClass($tab_DropSpotDataKeys, $tab_KeyPath);
  $tab_DropSpotDataKeys.$ctor1.prototype = $tab_DropSpotDataKeys.prototype;
  ss.initClass($tab_DropSpotTextTableKeys, $tab_KeyPath);
  $tab_DropSpotTextTableKeys.$ctor1.prototype = $tab_DropSpotTextTableKeys.prototype;
  ss.initClass($tab_EllipsisTableKeys, $tab_KeyPath);
  $tab_EllipsisTableKeys.$ctor1.prototype = $tab_EllipsisTableKeys.prototype;
  ss.initClass($tab_EmscriptenSupport);
  ss.initClass($tab_EncodingsTableKeys, $tab_KeyPath);
  $tab_EncodingsTableKeys.$ctor1.prototype = $tab_EncodingsTableKeys.prototype;
  ss.initClass($tab_EnumConversions);
  ss.initClass($tab_ExpressionCoefficientTableKeys, $tab_KeyPath);
  $tab_ExpressionCoefficientTableKeys.$ctor1.prototype = $tab_ExpressionCoefficientTableKeys.prototype;
  ss.initClass($tab_ExpressionConstantTableKeys, $tab_KeyPath);
  $tab_ExpressionConstantTableKeys.$ctor1.prototype = $tab_ExpressionConstantTableKeys.prototype;
  ss.initClass($tab_ExtendedDomainKeys, $tab_KeyPath);
  $tab_ExtendedDomainKeys.$ctor1.prototype = $tab_ExtendedDomainKeys.prototype;
  ss.initClass($tab_ExtendedDomainPerAxisKeys, $tab_KeyPath);
  $tab_ExtendedDomainPerAxisKeys.$ctor1.prototype = $tab_ExtendedDomainPerAxisKeys.prototype;
  ss.initClass($tab_FallbackTextDecoder);
  ss.initClass($tab_FallbackTextEncoder);
  ss.initClass($tab_FieldLabelsTextAndShadingTableKeys, $tab_KeyPath);
  $tab_FieldLabelsTextAndShadingTableKeys.$ctor1.prototype = $tab_FieldLabelsTextAndShadingTableKeys.prototype;
  ss.initClass($tab_FlattenedAxisDescriptorKeys, $tab_KeyPath);
  $tab_FlattenedAxisDescriptorKeys.$ctor1.prototype = $tab_FlattenedAxisDescriptorKeys.prototype;
  ss.initClass($tab_FormattedTextInputKeys, $tab_KeyPath);
  $tab_FormattedTextInputKeys.$ctor1.prototype = $tab_FormattedTextInputKeys.prototype;
  ss.initClass($tab_GridLineProducerInputKeys, $tab_KeyPath);
  $tab_GridLineProducerInputKeys.$ctor1.prototype = $tab_GridLineProducerInputKeys.prototype;
  ss.initClass($tab_GridLineProducerOutputKeys, $tab_KeyPath);
  $tab_GridLineProducerOutputKeys.$ctor1.prototype = $tab_GridLineProducerOutputKeys.prototype;
  ss.initClass($tab_HeaderLevelStyleDataTableKeys, $tab_KeyPath);
  $tab_HeaderLevelStyleDataTableKeys.$ctor1.prototype = $tab_HeaderLevelStyleDataTableKeys.prototype;
  ss.initClass($tab_HeatmapInputEncodingKeys, $tab_KeyPath);
  $tab_HeatmapInputEncodingKeys.$ctor1.prototype = $tab_HeatmapInputEncodingKeys.prototype;
  ss.initClass($tab_HeatmapOutputEncodingKeys, $tab_KeyPath);
  $tab_HeatmapOutputEncodingKeys.$ctor1.prototype = $tab_HeatmapOutputEncodingKeys.prototype;
  ss.initClass($tab_HeatmapProducerInputKeys, $tab_KeyPath);
  $tab_HeatmapProducerInputKeys.$ctor1.prototype = $tab_HeatmapProducerInputKeys.prototype;
  ss.initClass($tab_HeatmapProducerOutputKeys, $tab_KeyPath);
  $tab_HeatmapProducerOutputKeys.$ctor1.prototype = $tab_HeatmapProducerOutputKeys.prototype;
  ss.initClass($tab_HexEncoder);
  ss.initClass($tab_HexHeapDecoder);
  ss.initClass($tab_HiddenMarksKeys, $tab_KeyPath);
  $tab_HiddenMarksKeys.$ctor1.prototype = $tab_HiddenMarksKeys.prototype;
  ss.initClass($tab_HuttUtils);
  ss.initClass($tab_ImportKeys, $tab_KeyPath);
  $tab_ImportKeys.$ctor1.prototype = $tab_ImportKeys.prototype;
  ss.initClass($tab_IncrementalUpdateInputKeys, $tab_KeyPath);
  $tab_IncrementalUpdateInputKeys.$ctor1.prototype = $tab_IncrementalUpdateInputKeys.prototype;
  ss.initClass($tab_IndexedFieldNameKeys, $tab_KeyPath);
  $tab_IndexedFieldNameKeys.$ctor1.prototype = $tab_IndexedFieldNameKeys.prototype;
  ss.initInterface($tab_IRuntimeWebModule, { executeVM: null, buildVMHex: null, loadBinaryDatastoreHex: null, initializeRuntime: null, marshallDatastore: null, marshallDatastoreSubKeyHex: null, loadAndApplyDataStoreUpdaterHex: null, localPanCommand: null, localZoomCommand: null, localZoomFactorCommand: null, rueUpdateCommandHex: null });
  ss.initInterface($tab_IRWALSupport, { paramToString: null, stringToHeap: null, paramToByteBuffer: null, byteBufferToHeap: null });
  ss.initClass($tab_JabbaManifest);
  ss.initClass($tab_JabbaUnpacker);
  ss.initClass($tab_JsHeapMarshaller);
  $tab_JsHeapMarshaller.$ctor1.prototype = $tab_JsHeapMarshaller.prototype;
  ss.initClass($tab_LabelPlacementKeys, $tab_KeyPath);
  $tab_LabelPlacementKeys.$ctor1.prototype = $tab_LabelPlacementKeys.prototype;
  ss.initClass($tab_LabelSkipInputKeys, $tab_KeyPath);
  $tab_LabelSkipInputKeys.$ctor1.prototype = $tab_LabelSkipInputKeys.prototype;
  ss.initClass($tab_LabelSkipOutputTableKeys, $tab_KeyPath);
  $tab_LabelSkipOutputTableKeys.$ctor1.prototype = $tab_LabelSkipOutputTableKeys.prototype;
  ss.initClass($tab_LabelStoreKeys, $tab_KeyPath);
  $tab_LabelStoreKeys.$ctor1.prototype = $tab_LabelStoreKeys.prototype;
  ss.initClass($tab_LayoutInputStoreKeys, $tab_KeyPath);
  $tab_LayoutInputStoreKeys.$ctor1.prototype = $tab_LayoutInputStoreKeys.prototype;
  ss.initClass($tab_LayoutResultStoreKeys, $tab_KeyPath);
  $tab_LayoutResultStoreKeys.$ctor1.prototype = $tab_LayoutResultStoreKeys.prototype;
  ss.initClass($tab_LinearFloatGeometryDecoder);
  ss.initClass($tab_LocalEmscripten, null, [$tab_IRuntimeWebModule]);
  ss.initClass($tab_LocalEmscriptenSupport, null, [$tab_IRWALSupport]);
  ss.initClass($tab_LockedRatioKeys, $tab_KeyPath);
  $tab_LockedRatioKeys.$ctor1.prototype = $tab_LockedRatioKeys.prototype;
  ss.initClass($tab_LogTickPerHeaderInputTableKeys, $tab_KeyPath);
  $tab_LogTickPerHeaderInputTableKeys.$ctor1.prototype = $tab_LogTickPerHeaderInputTableKeys.prototype;
  ss.initClass($tab_MapBoundsKeys, $tab_KeyPath);
  $tab_MapBoundsKeys.$ctor1.prototype = $tab_MapBoundsKeys.prototype;
  ss.initClass($tab_MapLayersModelUpdateKeys, $tab_KeyPath);
  $tab_MapLayersModelUpdateKeys.$ctor1.prototype = $tab_MapLayersModelUpdateKeys.prototype;
  ss.initClass($tab_MapPackageKeys, $tab_KeyPath);
  $tab_MapPackageKeys.$ctor1.prototype = $tab_MapPackageKeys.prototype;
  ss.initClass($tab_MapProviderKeys, $tab_KeyPath);
  $tab_MapProviderKeys.$ctor1.prototype = $tab_MapProviderKeys.prototype;
  ss.initClass($tab_MarkLayoutDataKeys, $tab_KeyPath);
  $tab_MarkLayoutDataKeys.$ctor1.prototype = $tab_MarkLayoutDataKeys.prototype;
  ss.initClass($tab_MarkLayoutOutputKeys, $tab_KeyPath);
  $tab_MarkLayoutOutputKeys.$ctor1.prototype = $tab_MarkLayoutOutputKeys.prototype;
  ss.initClass($tab_MarkLayoutParametersKeys, $tab_KeyPath);
  $tab_MarkLayoutParametersKeys.$ctor1.prototype = $tab_MarkLayoutParametersKeys.prototype;
  ss.initClass($tab_MarkLayoutTempKeys, $tab_KeyPath);
  $tab_MarkLayoutTempKeys.$ctor1.prototype = $tab_MarkLayoutTempKeys.prototype;
  ss.initClass($tab_MarshalledVectors);
  $tab_MarshalledVectors.$ctor1.prototype = $tab_MarshalledVectors.prototype;
  ss.initClass($tab_MarshallerHandle, $tab_OpaqueHandle, [ss.IDisposable]);
  ss.initClass($tab_NestedSortIndicatorDataTableKeys, $tab_KeyPath);
  $tab_NestedSortIndicatorDataTableKeys.$ctor1.prototype = $tab_NestedSortIndicatorDataTableKeys.prototype;
  ss.initClass($tab_NodeLevelStyleDataTableKeys, $tab_KeyPath);
  $tab_NodeLevelStyleDataTableKeys.$ctor1.prototype = $tab_NodeLevelStyleDataTableKeys.prototype;
  ss.initClass($tab_NoneTickPerHeaderInputTableKeys, $tab_KeyPath);
  $tab_NoneTickPerHeaderInputTableKeys.$ctor1.prototype = $tab_NoneTickPerHeaderInputTableKeys.prototype;
  ss.initClass($tab_NumberMapKeys, $tab_KeyPath);
  $tab_NumberMapKeys.$ctor1.prototype = $tab_NumberMapKeys.prototype;
  ss.initClass($tab_PackedLayoutKeys, $tab_KeyPath);
  $tab_PackedLayoutKeys.$ctor1.prototype = $tab_PackedLayoutKeys.prototype;
  ss.initClass($tab_PageIntervalKeys, $tab_KeyPath);
  $tab_PageIntervalKeys.$ctor1.prototype = $tab_PageIntervalKeys.prototype;
  ss.initClass($tab_PageIntervalTableColumnsKeys, $tab_KeyPath);
  $tab_PageIntervalTableColumnsKeys.$ctor1.prototype = $tab_PageIntervalTableColumnsKeys.prototype;
  ss.initClass($tab_PageIntervalTableKeys, $tab_KeyPath);
  $tab_PageIntervalTableKeys.$ctor1.prototype = $tab_PageIntervalTableKeys.prototype;
  ss.initClass($tab_PaneCountersKeys, $tab_KeyPath);
  $tab_PaneCountersKeys.$ctor1.prototype = $tab_PaneCountersKeys.prototype;
  ss.initClass($tab_PaneDataStoreTable);
  ss.initClass($tab_PaneDescriptorDataKeys, $tab_KeyPath);
  $tab_PaneDescriptorDataKeys.$ctor1.prototype = $tab_PaneDescriptorDataKeys.prototype;
  ss.initClass($tab_PaneExtentsPixelPositionsTableKeys, $tab_KeyPath);
  $tab_PaneExtentsPixelPositionsTableKeys.$ctor1.prototype = $tab_PaneExtentsPixelPositionsTableKeys.prototype;
  ss.initClass($tab_PaneExtentsStaticInputTableKeys, $tab_KeyPath);
  $tab_PaneExtentsStaticInputTableKeys.$ctor1.prototype = $tab_PaneExtentsStaticInputTableKeys.prototype;
  ss.initClass($tab_PaneExtentsTableColumnsKeys, $tab_KeyPath);
  $tab_PaneExtentsTableColumnsKeys.$ctor1.prototype = $tab_PaneExtentsTableColumnsKeys.prototype;
  ss.initClass($tab_PaneExtentsTableKeys, $tab_KeyPath);
  $tab_PaneExtentsTableKeys.$ctor1.prototype = $tab_PaneExtentsTableKeys.prototype;
  ss.initClass($tab_PaneMarksInfo);
  $tab_PaneMarksInfo.$ctor1.prototype = $tab_PaneMarksInfo.prototype;
  ss.initClass($tab_PaneMarksKeys, $tab_KeyPath);
  $tab_PaneMarksKeys.$ctor1.prototype = $tab_PaneMarksKeys.prototype;
  ss.initClass($tab_PaneStylesTableKeys, $tab_KeyPath);
  $tab_PaneStylesTableKeys.$ctor1.prototype = $tab_PaneStylesTableKeys.prototype;
  ss.initClass($tab_PaneStylesTableUtils);
  ss.initClass($tab_PartitionedDataTableKeys, $tab_KeyPath);
  $tab_PartitionedDataTableKeys.$ctor1.prototype = $tab_PartitionedDataTableKeys.prototype;
  ss.initClass($tab_PartitionResultStoreKeys, $tab_KeyPath);
  $tab_PartitionResultStoreKeys.$ctor1.prototype = $tab_PartitionResultStoreKeys.prototype;
  ss.initClass($tab_PerAxisBorderStylesProducerInputKeys, $tab_KeyPath);
  $tab_PerAxisBorderStylesProducerInputKeys.$ctor1.prototype = $tab_PerAxisBorderStylesProducerInputKeys.prototype;
  ss.initClass($tab_PerAxisGridLineProducerInputKeys, $tab_KeyPath);
  $tab_PerAxisGridLineProducerInputKeys.$ctor1.prototype = $tab_PerAxisGridLineProducerInputKeys.prototype;
  ss.initClass($tab_PerAxisGridLineProducerOutputKeys, $tab_KeyPath);
  $tab_PerAxisGridLineProducerOutputKeys.$ctor1.prototype = $tab_PerAxisGridLineProducerOutputKeys.prototype;
  ss.initClass($tab_PerFieldAxisStyleTableKeys, $tab_KeyPath);
  $tab_PerFieldAxisStyleTableKeys.$ctor1.prototype = $tab_PerFieldAxisStyleTableKeys.prototype;
  ss.initClass($tab_PerHeaderFieldDataTableKeys, $tab_KeyPath);
  $tab_PerHeaderFieldDataTableKeys.$ctor1.prototype = $tab_PerHeaderFieldDataTableKeys.prototype;
  ss.initClass($tab_PredictionMarkKeys, $tab_KeyPath);
  $tab_PredictionMarkKeys.$ctor1.prototype = $tab_PredictionMarkKeys.prototype;
  ss.initClass($tab_QuantitativeColorEncodingInputKeys, $tab_KeyPath);
  $tab_QuantitativeColorEncodingInputKeys.$ctor1.prototype = $tab_QuantitativeColorEncodingInputKeys.prototype;
  ss.initClass($tab_QuantitativeSizeEncodingInputKeys, $tab_KeyPath);
  $tab_QuantitativeSizeEncodingInputKeys.$ctor1.prototype = $tab_QuantitativeSizeEncodingInputKeys.prototype;
  ss.initClass($tab_QuantitativeTickPerHeaderInputTableKeys, $tab_KeyPath);
  $tab_QuantitativeTickPerHeaderInputTableKeys.$ctor1.prototype = $tab_QuantitativeTickPerHeaderInputTableKeys.prototype;
  ss.initClass($tab_ReferenceLineApplicablePanesTableKeys, $tab_KeyPath);
  $tab_ReferenceLineApplicablePanesTableKeys.$ctor1.prototype = $tab_ReferenceLineApplicablePanesTableKeys.prototype;
  ss.initClass($tab_ReferenceLineAxisStyleTableKeys, $tab_KeyPath);
  $tab_ReferenceLineAxisStyleTableKeys.$ctor1.prototype = $tab_ReferenceLineAxisStyleTableKeys.prototype;
  ss.initClass($tab_ReferenceLineDetailsTableKeys, $tab_KeyPath);
  $tab_ReferenceLineDetailsTableKeys.$ctor1.prototype = $tab_ReferenceLineDetailsTableKeys.prototype;
  ss.initClass($tab_ReferenceLineLabelTableKeys, $tab_KeyPath);
  $tab_ReferenceLineLabelTableKeys.$ctor1.prototype = $tab_ReferenceLineLabelTableKeys.prototype;
  ss.initClass($tab_ReferenceLineLayoutElementsTableKeys, $tab_KeyPath);
  $tab_ReferenceLineLayoutElementsTableKeys.$ctor1.prototype = $tab_ReferenceLineLayoutElementsTableKeys.prototype;
  ss.initClass($tab_ReferenceLineProducerInputKeys, $tab_KeyPath);
  $tab_ReferenceLineProducerInputKeys.$ctor1.prototype = $tab_ReferenceLineProducerInputKeys.prototype;
  ss.initClass($tab_ReferenceLineProducerOutputKeys, $tab_KeyPath);
  $tab_ReferenceLineProducerOutputKeys.$ctor1.prototype = $tab_ReferenceLineProducerOutputKeys.prototype;
  ss.initClass($tab_ReferenceLineStylesKeys, $tab_KeyPath);
  $tab_ReferenceLineStylesKeys.$ctor1.prototype = $tab_ReferenceLineStylesKeys.prototype;
  ss.initClass($tab_ReferenceLineTotalTableMapDataKeys, $tab_KeyPath);
  $tab_ReferenceLineTotalTableMapDataKeys.$ctor1.prototype = $tab_ReferenceLineTotalTableMapDataKeys.prototype;
  ss.initClass($tab_ReferenceLineTotalTableMapKeys, $tab_KeyPath);
  $tab_ReferenceLineTotalTableMapKeys.$ctor1.prototype = $tab_ReferenceLineTotalTableMapKeys.prototype;
  ss.initClass($tab_RefLineExtentsKeys, $tab_KeyPath);
  $tab_RefLineExtentsKeys.$ctor1.prototype = $tab_RefLineExtentsKeys.prototype;
  ss.initClass($tab_RenderingInputStoreKeys, $tab_KeyPath);
  $tab_RenderingInputStoreKeys.$ctor1.prototype = $tab_RenderingInputStoreKeys.prototype;
  ss.initClass($tab_RowOrColumnLevelStyleDataKeys, $tab_KeyPath);
  $tab_RowOrColumnLevelStyleDataKeys.$ctor1.prototype = $tab_RowOrColumnLevelStyleDataKeys.prototype;
  ss.initClass($tab_RuePacker);
  ss.initClass($tab_RuntimeData);
  $tab_RuntimeData.$ctor1.prototype = $tab_RuntimeData.$ctor2.prototype = $tab_RuntimeData.prototype;
  ss.initClass($tab_RuntimeFormattingHooks);
  ss.initClass($tab_RuntimeHandles);
  ss.initClass($tab_RuntimeTextMeasurementHooks);
  ss.initClass($tab_RuntimeUtil);
  ss.initClass($tab_RuntimeWebHost, null, [$tab_IRuntimeWebModule]);
  ss.initClass($tab_RuntimeWebHostSupport, null, [$tab_IRWALSupport]);
  ss.initClass($tab_RuntimeWebModule);
  ss.initClass($tab_SceneMarginAlongDirectionElementLayoutTableKeys, $tab_KeyPath);
  $tab_SceneMarginAlongDirectionElementLayoutTableKeys.$ctor1.prototype = $tab_SceneMarginAlongDirectionElementLayoutTableKeys.prototype;
  ss.initClass($tab_SceneMarginFieldLabelsKeys, $tab_KeyPath);
  $tab_SceneMarginFieldLabelsKeys.$ctor1.prototype = $tab_SceneMarginFieldLabelsKeys.prototype;
  ss.initClass($tab_SceneMarginKeys, $tab_KeyPath);
  $tab_SceneMarginKeys.$ctor1.prototype = $tab_SceneMarginKeys.prototype;
  ss.initClass($tab_SceneMarginLayoutTableKeys, $tab_KeyPath);
  $tab_SceneMarginLayoutTableKeys.$ctor1.prototype = $tab_SceneMarginLayoutTableKeys.prototype;
  ss.initClass($tab_SceneMarginStylesProducerInputKeys, $tab_KeyPath);
  $tab_SceneMarginStylesProducerInputKeys.$ctor1.prototype = $tab_SceneMarginStylesProducerInputKeys.prototype;
  ss.initClass($tab_SelectionProducerInputKeys, $tab_KeyPath);
  $tab_SelectionProducerInputKeys.$ctor1.prototype = $tab_SelectionProducerInputKeys.prototype;
  ss.initClass($tab_SetLabelFormatsOutputKeys, $tab_KeyPath);
  $tab_SetLabelFormatsOutputKeys.$ctor1.prototype = $tab_SetLabelFormatsOutputKeys.prototype;
  ss.initClass($tab_SizeEncodingOutputKeys, $tab_KeyPath);
  $tab_SizeEncodingOutputKeys.$ctor1.prototype = $tab_SizeEncodingOutputKeys.prototype;
  ss.initClass($tab_SolutionResultsTableKeys, $tab_KeyPath);
  $tab_SolutionResultsTableKeys.$ctor1.prototype = $tab_SolutionResultsTableKeys.prototype;
  ss.initClass($tab_SpatialProjectorKeys, $tab_KeyPath);
  $tab_SpatialProjectorKeys.$ctor1.prototype = $tab_SpatialProjectorKeys.prototype;
  ss.initClass($tab_StackedMarkAttributesKeys, $tab_KeyPath);
  $tab_StackedMarkAttributesKeys.$ctor1.prototype = $tab_StackedMarkAttributesKeys.prototype;
  ss.initClass($tab_TextComposerStyleTableKeys, $tab_KeyPath);
  $tab_TextComposerStyleTableKeys.$ctor1.prototype = $tab_TextComposerStyleTableKeys.prototype;
  ss.initClass($tab_TextCompositionInputKeys, $tab_KeyPath);
  $tab_TextCompositionInputKeys.$ctor1.prototype = $tab_TextCompositionInputKeys.prototype;
  ss.initClass($tab_TextEncodingTableKeys, $tab_KeyPath);
  $tab_TextEncodingTableKeys.$ctor1.prototype = $tab_TextEncodingTableKeys.prototype;
  ss.initClass($tab_TextRunTableKeys, $tab_KeyPath);
  $tab_TextRunTableKeys.$ctor1.prototype = $tab_TextRunTableKeys.prototype;
  ss.initClass($tab_TextStyleAndShadingDataKeys, $tab_KeyPath);
  $tab_TextStyleAndShadingDataKeys.$ctor1.prototype = $tab_TextStyleAndShadingDataKeys.prototype;
  ss.initClass($tab_TextStyleKeys, $tab_KeyPath);
  $tab_TextStyleKeys.$ctor1.prototype = $tab_TextStyleKeys.prototype;
  ss.initClass($tab_TextStyleTableKeys, $tab_KeyPath);
  $tab_TextStyleTableKeys.$ctor1.prototype = $tab_TextStyleTableKeys.prototype;
  ss.initClass($tab_TickProducerArrayConstantsKeys, $tab_KeyPath);
  $tab_TickProducerArrayConstantsKeys.$ctor1.prototype = $tab_TickProducerArrayConstantsKeys.prototype;
  ss.initClass($tab_TickProducerInputKeys, $tab_KeyPath);
  $tab_TickProducerInputKeys.$ctor1.prototype = $tab_TickProducerInputKeys.prototype;
  ss.initClass($tab_TickProducerOutputKeys, $tab_KeyPath);
  $tab_TickProducerOutputKeys.$ctor1.prototype = $tab_TickProducerOutputKeys.prototype;
  ss.initClass($tab_TickProducerPerHeaderOutputTableKeys, $tab_KeyPath);
  $tab_TickProducerPerHeaderOutputTableKeys.$ctor1.prototype = $tab_TickProducerPerHeaderOutputTableKeys.prototype;
  ss.initClass($tab_TupleDatastoreConversions);
  ss.initClass($tab_UpdatedTextStyleTableResultKeys, $tab_KeyPath);
  $tab_UpdatedTextStyleTableResultKeys.$ctor1.prototype = $tab_UpdatedTextStyleTableResultKeys.prototype;
  ss.initClass($tab_UserPaneInfoKeys, $tab_KeyPath);
  $tab_UserPaneInfoKeys.$ctor1.prototype = $tab_UserPaneInfoKeys.prototype;
  ss.initClass($tab_Utf8TextDecoder);
  ss.initClass($tab_Utf8TextEncoder);
  ss.initClass($tab_VariableNameTableKeys, $tab_KeyPath);
  $tab_VariableNameTableKeys.$ctor1.prototype = $tab_VariableNameTableKeys.prototype;
  ss.initClass($tab_ViewpointKeys, $tab_KeyPath);
  $tab_ViewpointKeys.$ctor1.prototype = $tab_ViewpointKeys.prototype;
  ss.initClass($tab_VisualLayoutProducerInputKeys, $tab_KeyPath);
  $tab_VisualLayoutProducerInputKeys.$ctor1.prototype = $tab_VisualLayoutProducerInputKeys.prototype;
  ss.initClass($tab_VisualLayoutResultsKeys, $tab_KeyPath);
  $tab_VisualLayoutResultsKeys.$ctor1.prototype = $tab_VisualLayoutResultsKeys.prototype;
  ss.initClass($tab_VMHandle, $tab_OpaqueHandle, [ss.IDisposable]);
  (function() {
    $tab_$ObjectBuilder.$useWriteDetector = BrowserSupport.BrowserSupport.ProxyObjectSupport() && !(tab.FeatureParamsLookup.getInt(54) !== -1);
  })();
  (function() {
    $tab_KeyPath.$separtor = '/';
  })();
  (function() {
    $tab_Base64HeapDecoder.$supportedChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    $tab_Base64HeapDecoder.$charLookup = null;
  })();
  (function() {
    $tab_Utf8TextDecoder.$decoder = null;
    $tab_Utf8TextDecoder.$useFallBack = !(typeof(TextDecoder) !== 'undefined');
    if (!$tab_Utf8TextDecoder.$useFallBack) {
      $tab_Utf8TextDecoder.$decoder = new TextDecoder();
    }
  })();
  (function() {
    $tab_EnumConversions.$tableauFontStyleArray = null;
    $tab_EnumConversions.$textDecorationArray = null;
    $tab_EnumConversions.$fontWeightArray = null;
    $tab_EnumConversions.$textOrientArray = null;
    $tab_EnumConversions.$textWrapModeArray = null;
    $tab_EnumConversions.$datePeriodTypeArray = null;
    $tab_EnumConversions.$labelHAlignmentArray = null;
    $tab_EnumConversions.$labelVAlignmentArray = null;
    $tab_EnumConversions.$linePatternArray = null;
    $tab_EnumConversions.$lineCapArray = null;
    $tab_EnumConversions.$lineJoinArray = null;
    $tab_EnumConversions.$zoomTypeArray = null;
    $tab_EnumConversions.$primitiveArray = null;
    $tab_EnumConversions.$vizTypeArray = null;
    $tab_EnumConversions.$visualPartArray = null;
  })();
  (function() {
    $tab_HexEncoder.$byteLookup = null;
    $tab_HexEncoder.$initialized = false;
  })();
  (function() {
    $tab_HexHeapDecoder.$decoderLookup = new Uint8Array(256);
    for (var i = 0; i < 10; i++) {
      $tab_HexHeapDecoder.$decoderLookup[48 + i] = i;
    }
    for (var i1 = 10; i1 < 16; i1++) {
      $tab_HexHeapDecoder.$decoderLookup[97 + (i1 - 10)] = i1;
    }
    for (var i2 = 10; i2 < 16; i2++) {
      $tab_HexHeapDecoder.$decoderLookup[65 + (i2 - 10)] = i2;
    }
  })();
  (function() {
    $tab_JsHeapMarshaller.$decoderCache = {};
  })();
  (function() {
    $tab_Utf8TextEncoder.$encoder = null;
    $tab_Utf8TextEncoder.$useFallBack = !(typeof(TextEncoder) !== 'undefined');
    if (!$tab_Utf8TextEncoder.$useFallBack) {
      $tab_Utf8TextEncoder.$encoder = new TextEncoder();
    }
  })();
  (function() {
    $tab_RuntimeUtil.$emscriptenAborted = false;
  })();
  (function() {
    $tab_RuntimeFormattingHooks.$registeredFormatters = {};
    $tab_RuntimeFormattingHooks.$formatterCache = {};
    $tab_RuntimeFormattingHooks.$formatterId = 0;
    $tab_RuntimeFormattingHooks.$quarterFormat = '*QQQ';
    $tab_RuntimeFormattingHooks.$simpleQuarterFormat = '*Q';
    $tab_RuntimeFormattingHooks.$icuDayFormat = 'EEEE';
    $tab_RuntimeFormattingHooks.$oleDayFormat = 'dddd';
  })();
  (function() {
    $tab_RuntimeTextMeasurementHooks.$marshalledTextStyleKey = 'TextStyle';
    $tab_RuntimeTextMeasurementHooks.$registeredTextStyles = {};
    $tab_RuntimeTextMeasurementHooks.$textStyleId = 0;
  })();
  (function() {
    $tab_RuntimeWebModule.proxy = null;
    $tab_RuntimeWebModule.support = null;
    var runtimeWebHost = tab.FeatureParamsLookup.getString(51);
    if (!ss.isNullOrUndefined(runtimeWebHost)) {
      $tab_RuntimeWebModule.proxy = new $tab_RuntimeWebHost(runtimeWebHost);
      $tab_RuntimeWebModule.support = new $tab_RuntimeWebHostSupport();
    }
    else {
      $tab_RuntimeWebModule.proxy = new $tab_LocalEmscripten();
      $tab_RuntimeWebModule.support = new $tab_LocalEmscriptenSupport();
    }
  })();
})();
// END UI
