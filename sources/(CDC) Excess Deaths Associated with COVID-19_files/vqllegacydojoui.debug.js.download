/*! BEGIN LegacyDojoUI */

(function() {
  'dont use strict';
  var $asm = {};
  global.tab = global.tab || {};
  ss.initAssembly($asm, 'vqllegacydojoui');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ContinuousSliderTemplate
  var $tab_$ContinuousSliderTemplate = ss.mkType($asm, 'tab.$ContinuousSliderTemplate', function() {
    spiff.Template.call(this, $($tab_$ContinuousSliderTemplate.$template));
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TileInfo
  var $tab_$TileInfo = ss.mkType($asm, 'tab.$TileInfo', function(tileIndex, hasLoaded, pos, range, rangeType) {
    this.$hasLoaded = false;
    this.$tileIndex = 0;
    this.$pos = null;
    this.$range = null;
    this.$rangeType = null;
    this.$tileIndex = tileIndex;
    this.$hasLoaded = hasLoaded;
    this.$pos = pos;
    this.$range = range;
    this.$rangeType = rangeType;
  }, {
    get_$tileIndex: function TileInfo$get_TileIndex() {
      return this.$tileIndex;
    },
    get_$hasLoaded: function TileInfo$get_HasLoaded() {
      return this.$hasLoaded;
    },
    set_$hasLoaded: function TileInfo$set_HasLoaded(value) {
      this.$hasLoaded = value;
    },
    get_$pos: function TileInfo$get_Pos() {
      return this.$pos;
    },
    get_$range: function TileInfo$get_Range() {
      return this.$range;
    },
    get_$rangeType: function TileInfo$get_RangeType() {
      return this.$rangeType;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.BaseDropdown
  var $tab_BaseDropdown = global.tab.BaseDropdown = ss.mkType($asm, 'tab.BaseDropdown', function(parent, div, attrs) {
    this.dropdown = null;
    this.menuNode = null;
    this.glass = null;
    this.dropdownLabelContainer = null;
    this.fillListElement = null;
    this.searchBox = null;
    this.currentlySelected = 0;
    this.multimode = false;
    this.$categoricalSelection = null;
    this.$showMenuAbove = false;
    $tab_BaseMode.call(this, parent, div, attrs);
    if (parent.get_searchWidget().get_dijitClassName().indexOf('FilteringSearchWidget') < 0) {
      tab.Log.get(this).error('Dropdown catmode Categorical search widget must be a FilteringSearchWidget', []);
    }
    this.searchBox = parent.get_searchWidget();
    this.searchBox.setStyle(1);
    this.$categoricalSelection = parent.categoricalSelectionBehavior;
    var dismissMenu = ss.mkdel(this, function() {
      this.hideMenu();
    });
    this.searchBox.add_escapeKeyPressed(dismissMenu);
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.searchBox.remove_escapeKeyPressed(dismissMenu);
    })));
  }, {
    get_scrollNode: function BaseDropdown$get_ScrollNode() {
      var retVal = null;
      if (ss.isValue(this.menuNode)) {
        retVal = this.menuNode.children('.CFInnerContainer').get(0);
      }
      return retVal;
    },
    instantiate: function BaseDropdown$Instantiate(newTuples, itemName, facet) {
      this.fillListElement = ss.mkdel(this, function(listElement) {
        this.createListElement(listElement, newTuples, itemName, facet);
      });
      this.dropdown = $('<span></span>').addClass('tabComboBox').addClass('tab-ctrl-formatted-widget').addClass('tab-ctrl-formatted-darker-border-hover').addClass('tabComboStdTheme').addClass('tabComboBoxNoIcon').addClass('tiledContent');
      this.disposables.add$2([spiff.TableauClickHandler.targetAndClick(this.dropdown[0], ss.mkdel(this, this.onDropdownClicked)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.dropdown[0], ss.mkdel(this, this.onDropdownClicked))]);
      var comboboxValueId = tab.DomUtil.generateUniqueId();
      this.dropdown.attr('tabindex', '0').attr('role', 'combobox').attr('aria-haspopup', 'true').attr('aria-expanded', 'false').attr('aria-live', 'polite').attr('aria-describedby', comboboxValueId);
      if (tab.MiscUtil.isNullOrEmpty$1(this.parent.get_titleDomId())) {
        this.dropdown.removeAttr('aria-labelledby');
      }
      else {
        this.dropdown.attr('aria-labelledby', this.parent.get_titleDomId());
      }
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.dropdown.remove();
      })));
      this.dropdownLabelContainer = $('<div></div>').addClass('tabComboBoxNameContainer').addClass('tab-ctrl-formatted-fixedsize').appendTo(this.dropdown);
      $('<span></span>').addClass('tabComboBoxName').text(this.getLabelText(newTuples)).attr('id', comboboxValueId).attr('aria-hidden', 'true').appendTo(this.dropdownLabelContainer);
      $("<div class='tabComboBoxButtonHolder'><span class='tabComboBoxButton'>" + $tab_LegacyFilterDropDownArrowTemplate.getDropDownForColor(this.parent.get_textStyle().color.toString()) + '</span></div>').appendTo(this.dropdown);
      this.div.appendChild(this.dropdown.get(0));
      if (ss.isValue(this.menuNode)) {
        this.menuNode.children('.tiledContent').remove();
        this.fillMenu(this.menuNode);
      }
      this.$resetSearchBox(newTuples.length);
      EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(this, this.$onDismissTemporaryElements));
    },
    updateContent: function BaseDropdown$UpdateContent(data) {
      if (ss.isValue(this.menuNode)) {
        if (BrowserSupport.BrowserSupport.IsIE()) {
          this.menuNode.css({ 'box-shadow': 'none' });
        }
        var results = ((data.length > 0) ? data.join('') : this.searchBox.get_noMatchHtml());
        var jqueryDiv = this.menuNode.children('.tiledContent');
        if (ss.isValue(this.tiledWidget)) {
          this.tiledWidget.destroy();
          this.tiledWidget = null;
        }
        jqueryDiv.html(results);
        this.$updateKeyboardNav();
        if (this.$showMenuAbove) {
          var offset = this.dropdown.offset();
          this.menuNode.css({ top: offset.top - this.menuNode.outerHeight() + 'px' });
        }
        if (BrowserSupport.BrowserSupport.IsIE()) {
          this.menuNode.css({ 'box-shadow': '2px 2px 2px #adadad' });
        }
      }
    },
    resetContent: function BaseDropdown$ResetContent(tuples, itemName, facet) {
      var height = 0;
      if (ss.isValue(this.menuNode)) {
        var tiledContent = this.menuNode.children('.tiledContent');
        if (ss.isValue(tiledContent)) {
          height = tiledContent.height();
          if (this.shouldUseAllItem()) {
            height -= this.$getAllItemHeight();
          }
        }
      }
      var tileScroll = 0;
      if (ss.isValue(this.tiledWidget)) {
        tileScroll = Math.max(0, this.tiledWidget.get_lastScrollTop());
      }
      this.fillListElement = ss.mkdel(this, function(listElement) {
        this.createListElement(listElement, tuples, itemName, facet);
        this.tiledWidget.fetchWithinScrollRange(tileScroll, tileScroll + height, ss.mkdel(this, this.$updateKeyboardNav));
      });
      if (ss.isValue(this.searchBox) && this.searchBox.isShowingResults()) {
        return;
      }
      if (ss.isValue(this.menuNode)) {
        this.$updateFilterStateClasses(this.menuNode);
        var menuTopLeft = this.$getMenuTopLeft();
        this.menuNode.css({ top: (this.$showMenuAbove ? (menuTopLeft.y - this.dropdown.height() - this.menuNode.outerHeight() - 1 + 'px') : (menuTopLeft.y + 'px')), left: menuTopLeft.x + 'px' });
      }
      this.dropdownLabelContainer.children().text(this.getLabelText(tuples));
      if (ss.isValue(this.menuNode)) {
        tab.BrowserViewport.getViewport(ss.mkdel(this, function(viewport) {
          if (ss.isValue(this.tiledWidget)) {
            this.tiledWidget.destroy();
            this.tiledWidget = null;
          }
          if (ss.isValue(this.menuNode)) {
            this.menuNode[0].removeEventListener('focus', this.listItemFocusHandler, true);
            this.$detachApplyCancelButtons();
            this.menuNode.children().remove();
            this.$fillAndStyleMenu(viewport, this.menuNode);
            this.$updateKeyboardNav();
          }
        }));
      }
      this.$resetSearchBox(tuples.length);
      this.$updateKeyboardNav();
    },
    $resetSearchBox: function BaseDropdown$ResetSearchBox(tupleLength) {
      var allItemLength = (this.shouldUseAllItem() ? 1 : 0);
      if (tupleLength + allItemLength <= $tab_FilteringSearchWidget.minimumDomainSize) {
        this.searchBox.hideUI();
      }
      else {
        this.searchBox.showUI$1();
      }
    },
    shouldNotReinstantiate: function BaseDropdown$ShouldNotReinstantiate() {
      return false;
    },
    layout: function BaseDropdown$Layout(contentSize, horizontalLayout) {
      this.inherited(arguments);
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.updateViewport(contentSize.w, contentSize.h);
      }
    },
    destroy: function BaseDropdown$Destroy() {
      this.dispose();
      this.disposeMenu();
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.destroy();
      }
      this.tiledWidget = null;
      EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(this, this.$onDismissTemporaryElements));
    },
    fetchAllItem: function BaseDropdown$FetchAllItem() {
      if (!this.shouldUseAllItem()) {
        return null;
      }
      else {
        return this.menuNode.children('.CFInnerContainer').children('.FIItem').get(0);
      }
    },
    fetchChildNodeByIndex: function BaseDropdown$FetchChildNodeByIndex(index) {
      if (ss.isValue(this.tiledWidget)) {
        return this.tiledWidget.getElement(index);
      }
      else {
        return this.getNonTiledElement(index, (ss.isValue(this.menuNode) ? this.menuNode.children('.CFInnerContainer').get(0) : null));
      }
    },
    createListElement: null,
    getLabelText: function BaseDropdown$GetLabelText(tuples) {
      var isAll = $tab_FilterItemUtil.isAllOrAllChecked(this.parent);
      this.currentlySelected = -1;
      this.multimode = false;
      var len = tuples.length;
      if (len === 0) {
        if (!isAll) {
          tab.Log.get(this).warn("Tuple array length is 0, but we're not in ALL mode.", []);
        }
        return tab.Strings.QuickFilterAll;
      }
      for (var i = 0; i < len; i++) {
        if (tuples[i].s && !isAll) {
          if (this.currentlySelected > -1) {
            this.multimode = true;
            break;
          }
          this.currentlySelected = i;
        }
      }
      if (isAll && len > 1) {
        return tab.Strings.QuickFilterAll;
      }
      else if (this.multimode) {
        return tab.Strings.QuickFilterMultipleValues;
      }
      else if (this.hasSummaryText()) {
        return this.getSummaryText();
      }
      else {
        var itemIndex = ((this.currentlySelected > -1) ? this.currentlySelected : 0);
        return (ss.isNullOrUndefined(tuples[itemIndex]) ? '' : $tab_FilterFormat.formatTupleDisplayName(tuples[itemIndex], true, this.parent.get_oFilter().role));
      }
    },
    onDropdownClicked: function BaseDropdown$OnDropdownClicked() {
      tab.BrowserViewport.getViewport(ss.mkdel(this, this.$showMenu));
    },
    $showMenu: function BaseDropdown$ShowMenu(viewport) {
      if (this.$menuIsShowing()) {
        return;
      }
      var body = document.body;
      this.removeGlass();
      this.glass = new spiff.Glass(null, false);
      this.glass.add_click(ss.mkdel(this, this.hideMenu));
      this.glass.set_zIndex(899);
      this.glass.show();
      var menuTopLeft = this.$getMenuTopLeft();
      this.menuNode = $('<div></div>').attr('id', this.parent.id + '_menu').addClass('CFOuterContainer').addClass('tabMenuComboDropdownTheme').addClass('tab-ctrl-formatted-widget').attr('role', 'application').css({ position: 'absolute', top: menuTopLeft.y + 'px', left: menuTopLeft.x + 'px', 'max-height': $tab_BaseDropdown.$maxRows * this.get_lineHeight() + 'px', 'z-index': '900', visibility: 'hidden' }).appendTo(body);
      if (!tab.ColorModel.fromColorCode(this.parent.get_blendedZoneContentColor()).isLuminanceAboveThreshold(0.314999997615814)) {
        this.menuNode.addClass(spiff.UnificationClassNames.darkBackground);
      }
      $tab_WidgetStyle.applyFormatting(this.menuNode.get(0), this.parent.get_textStyle(), this.parent.get_blendedZoneContentColor(), this.get_lineHeight(), true);
      this.searchBox.startupNoAppend();
      this.$updateFilterStateClasses(this.menuNode);
      this.$fillAndStyleMenu(viewport, this.menuNode);
      this.$updateKeyboardNav();
      $(this.menuNode.get(0)).toggleClass('QFDropdownMenuAbove', this.$showMenuAbove);
      var tiles = this.menuNode.find('.tile');
      var listboxIds = tab.DomUtil.getIds(tiles).join(' ');
      var textboxId = this.$generateTextboxId();
      $(this.searchBox.get_queryBox()).attr('id', textboxId).attr('aria-autocomplete', 'list').attr('aria-controls', listboxIds);
      var ariaOwns = textboxId + ' ' + listboxIds;
      this.dropdown.attr('aria-owns', ariaOwns);
      this.$setAriaExpanded(true);
    },
    $generateTextboxId: function BaseDropdown$GenerateTextboxId() {
      return this.parent.id + '_textbox';
    },
    $setAriaExpanded: function BaseDropdown$SetAriaExpanded(state) {
      if (ss.isValue(this.dropdown)) {
        this.dropdown.attr('aria-expanded', state.toString());
      }
    },
    $updateKeyboardNav: function BaseDropdown$UpdateKeyboardNav() {
      if (ss.isValue(this.menuNode)) {
        this.updateTabIndexes(this.menuNode[0], true);
        $(this.get_scrollNode()).off($tab_BaseDropdown.$keyDownEventName).on($tab_BaseDropdown.$keyDownEventName, ss.mkdel(this, this.$onListKeyDown));
        this.menuNode.off($tab_BaseDropdown.$keyDownEventName).on($tab_BaseDropdown.$keyDownEventName, ss.mkdel(this, this.$onMenuKeyDown));
        spiff.FocusManager.trapFocus(this.menuNode);
        this.menuNode[0].addEventListener('focus', this.listItemFocusHandler, true);
      }
    },
    $onMenuKeyDown: function BaseDropdown$OnMenuKeyDown(e) {
      switch (e.which) {
        case 27: {
          this.hideMenu();
          break;
        }
        default: {
          return;
        }
      }
      e.stopPropagation();
      e.preventDefault();
    },
    removeGlass: function BaseDropdown$RemoveGlass() {
      if (ss.isValue(this.glass)) {
        this.glass.remove_click(ss.mkdel(this, this.hideMenu));
        this.glass.dispose();
        this.glass = null;
      }
    },
    $detachApplyCancelButtons: function BaseDropdown$DetachApplyCancelButtons() {
      if (ss.isValue(this.apply) && ss.isValue(this.apply.element)) {
        this.apply.element.detach();
      }
      if (ss.isValue(this.cancel) && ss.isValue(this.apply.element)) {
        this.cancel.element.detach();
      }
    },
    hideMenu: function BaseDropdown$HideMenu() {
      this.searchBox.clearSearch(false, false);
      this.disposeMenu();
    },
    disposeMenu: function BaseDropdown$DisposeMenu() {
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        this.$categoricalSelection.clearRangeAnchorAndSelection();
      }
      this.removeGlass();
      if (ss.isValue(this.menuNode)) {
        this.menuNode[0].removeEventListener('focus', this.listItemFocusHandler, true);
        this.$detachApplyCancelButtons();
        this.menuNode.remove();
        this.menuNode = null;
        this.focusedId = null;
        this.dropdown.focus();
      }
      this.$setAriaExpanded(false);
      this.dropdown.removeAttr('aria-owns');
    },
    $menuIsShowing: function BaseDropdown$MenuIsShowing() {
      return ss.isValue(this.menuNode) || ss.isValue(this.glass);
    },
    $getMenuTopLeft: function BaseDropdown$GetMenuTopLeft() {
      var offset = this.dropdown.offset();
      var height = tab.DoubleUtil.roundToInt(this.dropdown.outerHeight());
      return { x: tab.DoubleUtil.roundToInt(offset.left), y: tab.DoubleUtil.roundToInt(offset.top) + height - 1 };
    },
    $fillAndStyleMenu: function BaseDropdown$FillAndStyleMenu(viewport, menu) {
      if (ss.isNullOrUndefined(menu)) {
        return;
      }
      this.fillMenu(menu);
      this.$showMenuAbove = this.$shouldShowMenuAbove(viewport, menu);
      if (this.$showMenuAbove) {
        $(this.searchBox.domNode).appendTo(menu);
      }
      else {
        $(this.searchBox.domNode).insertBefore(menu.children().first());
      }
      this.$styleMenu(viewport, menu);
      if (this.searchBox.get_isVisible()) {
        this.searchBox.showUI$1();
      }
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        this.$categoricalSelection.refreshRangeAnchorAndSelection();
      }
    },
    $onListKeyDown: function BaseDropdown$OnListKeyDown(e) {
      if (e.which !== 27) {
        this.parent.onKeyDown(e);
      }
    },
    $styleMenu: function BaseDropdown$StyleMenu(viewport, menu) {
      var offset = this.dropdown.offset();
      var width = tab.DoubleUtil.roundToInt(this.dropdown.outerWidth()) - 2;
      var body = document.body;
      var tile0 = menu.find('.tile').eq(0);
      var oldRight = tile0.css('right');
      var oldWidth = (ss.isValue(tile0[0]) ? tile0[0].style.width : '');
      tile0.css({ right: 'auto', width: '' });
      var w = tab.DoubleUtil.roundToInt(tile0.width()) + 20;
      tile0.css({ right: oldRight });
      tile0.css({ width: oldWidth });
      w = Math.max(w, width);
      var bodywidth = tab.DoubleUtil.roundToInt($(body).width());
      w = Math.min(w, bodywidth);
      menu.width(w);
      var menuoffset = menu.offset();
      var menuLeft = tab.DoubleUtil.roundToInt(menuoffset.left);
      var menuright = menuLeft + tab.DoubleUtil.roundToInt(menu.outerWidth());
      var vizContainer = $(body).find('.dashboardSpacer');
      var vizoffset = vizContainer.offset();
      var vizright = tab.DoubleUtil.roundToInt(vizoffset.left) + tab.DoubleUtil.roundToInt(vizContainer.width());
      var excessright = menuright - vizright;
      if (excessright > 0) {
        var l = menuLeft - excessright;
        l = Math.max(l, 0);
        menu.css({ left: l + 'px' });
      }
      var maxMenuHeight = $tab_BaseDropdown.$maxRows * this.get_lineHeight();
      var minMenuHeight = $tab_BaseDropdown.$minRows * this.get_lineHeight();
      var visibleRoom = viewport.getVisibleRoom(tab.PointUtil.fromPosition(offset), 0);
      var maxheight = (this.$showMenuAbove ? visibleRoom.roomAbove : (visibleRoom.roomBelow - 2)) - 20;
      maxheight = maxheight - parseInt(menu.css('border-bottom-width'));
      maxheight = Math.min(maxheight, maxMenuHeight);
      maxheight = Math.max(maxheight, minMenuHeight);
      menu.css({ 'max-height': maxheight + 'px' });
      var dropdownOffset = spiff.FullscreenUtil.centeringContainerOffset();
      if (this.$showMenuAbove) {
        if (visibleRoom.roomAbove > maxheight - 1) {
          menu.css({ top: offset.top - dropdownOffset - menu.outerHeight() + 'px' });
        }
        else {
          menu.css({ top: offset.top - dropdownOffset - visibleRoom.roomAbove + 'px' });
        }
      }
      else {
        menu.css({ top: offset.top - dropdownOffset + this.dropdown.outerHeight() + 'px' });
      }
      var searchHeight = (ss.isValue(this.searchBox) ? this.searchBox.getHeight() : 0);
      var applyHeight = 0;
      var innerContainer = menu.children('.CFInnerContainer');
      if (this.parent.shouldDeferChanges() && ss.isValue(this.apply) && !this.menuNode.hasClass('CFDropdownNoItems')) {
        applyHeight = dojo.marginBox(this.apply.element.get(0)).h;
        this.layoutApplyButton(innerContainer);
      }
      if (ss.isValue(innerContainer)) {
        innerContainer.css({ 'max-height': menu.get(0).clientHeight - searchHeight - applyHeight + 'px' });
        this.tiledWidget.updateViewport(tab.DoubleUtil.roundToInt(innerContainer.height()), 0);
      }
      menu.css({ visibility: 'visible' });
    },
    $shouldShowMenuAbove: function BaseDropdown$ShouldShowMenuAbove(viewport, menu) {
      var offset = this.dropdown.offset();
      var maxMenuHeight = $tab_BaseDropdown.$maxRows * this.get_lineHeight();
      var visibleRoom = viewport.getVisibleRoom(tab.PointUtil.fromPosition(offset), 0);
      var showAbove = Math.min(menu.outerHeight(), maxMenuHeight) > visibleRoom.roomBelow && visibleRoom.roomAbove > visibleRoom.roomBelow;
      return showAbove;
    },
    fillMenu: function BaseDropdown$FillMenu(menu) {
      if (ss.isNullOrUndefined(menu)) {
        return;
      }
      var checklistElement = $('<div></div>').addClass('CFInnerContainer').addClass('tab-ctrl-formatted-text');
      if (BrowserSupport.BrowserSupport.IsFF()) {
        checklistElement.attr('tabindex', '-1');
      }
      menu.append(checklistElement);
      this.fillListElement(checklistElement.get(0));
    },
    $updateFilterStateClasses: function BaseDropdown$UpdateFilterStateClasses(menu) {
      if (this.parent.get_oFilter().all || this.parent.get_oFilter().allNotChecked) {
        menu.addClass('CFAll');
      }
      else {
        menu.removeClass('CFAll');
      }
      if (this.parent.get_oFilter().exclude) {
        menu.addClass('CFExclusive');
      }
      else {
        menu.removeClass('CFExclusive');
      }
    },
    $onDismissTemporaryElements: function BaseDropdown$OnDismissTemporaryElements() {
      this.hideMenu();
    },
    $getAllItem: function BaseDropdown$GetAllItem() {
      return this.menuNode[0].querySelector('.all-item');
    },
    $getAllItemHeight: function BaseDropdown$GetAllItemHeight() {
      var item = this.$getAllItem();
      return (ss.isValue(item) ? $(item).outerHeight(true) : 0);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.BaseLegacyDojoUIModule
  var $tab_BaseLegacyDojoUIModule = global.tab.BaseLegacyDojoUIModule = ss.mkType($asm, 'tab.BaseLegacyDojoUIModule', function() {
  }, {
    createTabbedNavigation: function BaseLegacyDojoUIModule$CreateTabbedNavigation(paramaters, srcNodeRef) {
      return new tableau.base.widget.TabbedNavigation(paramaters, srcNodeRef);
    },
    createPageViewModel: function BaseLegacyDojoUIModule$CreatePageViewModel(zoneContentModel) {
      return new $tab_PageViewModel(zoneContentModel);
    },
    createCategoricalLegendViewModel: function BaseLegacyDojoUIModule$CreateCategoricalLegendViewModel(zoneContentModel, zoneType, worksheetName, zoneViewModel) {
      return new $tab_CategoricalLegendViewModel(zoneContentModel, zoneType, worksheetName, zoneViewModel);
    },
    createQuantitativeColorLegendViewModel: function BaseLegacyDojoUIModule$CreateQuantitativeColorLegendViewModel(zoneContentModel, worksheetName, zoneViewModel) {
      return new $tab_QuantitativeColorLegendViewModel(zoneContentModel, worksheetName, zoneViewModel);
    },
    createLegacyLegendViewModel: function BaseLegacyDojoUIModule$CreateLegacyLegendViewModel(zoneContentModel, worksheetName, zoneViewModel) {
      return new $tab_LegacyLegendViewModel(zoneContentModel, worksheetName, zoneViewModel);
    },
    createLegacyQuickFilterDisplayViewModel: function BaseLegacyDojoUIModule$CreateLegacyQuickFilterDisplayViewModel(quickFilterDisplayModel, filterModel) {
      return new $tab_LegacyQuickFilterDisplayViewModel(quickFilterDisplayModel, filterModel);
    },
    createParameterControlViewModel: function BaseLegacyDojoUIModule$CreateParameterControlViewModel(zoneContentModel) {
      return new $tab_ParameterControlViewModel(zoneContentModel);
    },
    createPageView: null,
    createLegacyQuickFilterDisplayView: null,
    createParameterControlView: null,
    createQuantitativeColorLegendView: function BaseLegacyDojoUIModule$CreateQuantitativeColorLegendView(zoneContentViewModel) {
      return new $tab_QuantitativeColorLegendView(zoneContentViewModel);
    },
    createContinuousSliderViewModel: function BaseLegacyDojoUIModule$CreateContinuousSliderViewModel(rangeModel) {
      return new $tab_ContinuousSliderViewModel(rangeModel);
    },
    createLegacyLegendView: null,
    createContinuousSlider: null
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.BaseLegendView<TViewModel>
  var $tab_BaseLegendView$1 = global.tab.BaseLegendView$1 = ss.mkType($asm, 'tab.BaseLegendView$1', function(TViewModel) {
    var $type = ss.registerGenericClassInstance($tab_BaseLegendView$1, [TViewModel], function(viewModel, template) {
      this.$legendTooltip = null;
      ss.makeGenericType(spiff.BaseView$1, [TViewModel]).call(this, viewModel, template);
    }, {
      get_legendViewModel: function BaseLegendView$get_LegendViewModel() {
        return this.get_viewModel();
      },
      get_baseLegendTemplate: function BaseLegendView$get_BaseLegendTemplate() {
        return ss.cast(this.get_template(), $tab_LegendTemplate);
      },
      get_legendTooltip: function BaseLegendView$get_LegendTooltip() {
        this.$ensureTooltip();
        return this.$legendTooltip;
      },
      onAddedToDom: function BaseLegendView$OnAddedToDom() {
        spiff.Widget.prototype.onAddedToDom.call(this);
      },
      dispose: function BaseLegendView$Dispose() {
        if (ss.isValue(this.$legendTooltip)) {
          this.$legendTooltip.remove_ubertipCommandExecuted(ss.mkdel(this, this.$onUbertipCommandExecuted));
          this.$legendTooltip.dispose();
        }
        ss.makeGenericType(spiff.BaseView$1, [TViewModel]).prototype.dispose.call(this);
      },
      drawTitle: function BaseLegendView$DrawTitle() {
        this.get_baseLegendTemplate().titleArea.html(this.get_legendViewModel().get_titleHtml());
        tab.FormattingConverters.cleanUpFontFamilyStyles(this.get_baseLegendTemplate().titleArea);
        this.$updateTitleAreaStyle(this.get_legendViewModel().get_titleInline());
        tableau.util.setupTitleEllipsis(this.get_baseLegendTemplate().titleArea);
      },
      $updateTitleAreaStyle: function BaseLegendView$UpdateTitleAreaStyle(isTitleInline) {
        var displayValue = '';
        var vertAlignValue = '';
        if (isTitleInline) {
          this.get_baseLegendTemplate().titleArea.width(this.get_legendViewModel().get_titleWidth());
          displayValue = 'inline-block';
          vertAlignValue = 'top';
        }
        else {
          this.get_baseLegendTemplate().titleArea.width('');
          this.get_baseLegendTemplate().titleArea.height(this.get_legendViewModel().get_titleHeight());
        }
        this.get_baseLegendTemplate().titleArea.css('display', displayValue);
        this.get_baseLegendTemplate().titleArea.css('vertical-align', vertAlignValue);
        if (ss.isValue(this.get_baseLegendTemplate().get_contentArea())) {
          this.get_baseLegendTemplate().get_contentArea().css('display', displayValue);
        }
        if (ss.isValue(this.get_baseLegendTemplate().titleControls)) {
          if (this.get_legendViewModel().get_backgroundColor().get_a() < 1) {
            this.get_baseLegendTemplate().titleControls.css('background-color', 'white');
          }
          else {
            this.get_baseLegendTemplate().titleControls.css('background-color', this.get_legendViewModel().get_backgroundColor().toRgba());
          }
        }
      },
      highlighterFitsUpperRight: function BaseLegendView$HighlighterFitsUpperRight() {
        var titleNotInline = !this.get_legendViewModel().get_titleInline();
        if (this.get_legendViewModel().get_hasTitle() && titleNotInline) {
          return true;
        }
        return false;
      },
      $onUbertipCommandExecuted: function BaseLegendView$OnUbertipCommandExecuted(senderUbertip, args) {
        ss.Debug.assert(args.command.get_commandType() !== 7, 'Ubertips on legends should not try to view data. The view data command is on ViewSession');
        if (tab.NaturalLanguageUbertipCommands.shouldBeUsed(args.command)) {
          tab.NaturalLanguageUbertipCommands.executeCommand(args.command);
        }
        else {
          tab.UberTipClientCommands.executeUbertipCommand(args.command);
        }
      },
      makeTooltip: function BaseLegendView$MakeTooltip() {
        var visualId = this.get_legendViewModel().get_$visualId();
        if (ss.isNullOrUndefined(visualId)) {
          ss.Debug.assert(false, 'null visualID in MakeTooltip()');
          return null;
        }
        return tab.ObjectRegistry.newLegacyTooltip(tab.TooltipBaseLegacyMode).call(null, tab.TooltipBaseLegacyMode, null, visualId);
      },
      $ensureTooltip: function BaseLegendView$EnsureTooltip() {
        if (ss.isNullOrUndefined(this.$legendTooltip)) {
          this.$legendTooltip = this.makeTooltip();
          if (ss.isNullOrUndefined(this.$legendTooltip)) {
            return;
          }
          this.$legendTooltip.add_ubertipCommandExecuted(ss.mkdel(this, this.$onUbertipCommandExecuted));
        }
      },
      showContextMenu: null
    }, null, function() {
      return ss.makeGenericType(spiff.BaseView$1, [TViewModel]);
    }, function() {
      return [tab.IWidget, ss.makeGenericType(tab.IView$1, [TViewModel]), ss.IDisposable, tab.IAppendableView];
    });
    $type.controlsMargin = 2;
    return $type;
  });
  ss.initGenericClass($tab_BaseLegendView$1, 1);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.BaseMode
  var $tab_BaseMode = global.tab.BaseMode = ss.mkType($asm, 'tab.BaseMode', function(parent, div, attrs) {
    this.div = null;
    this.focusedId = null;
    this.listItemFocusHandler = null;
    this.parent = null;
    this.attributes = null;
    this.pendingManager = null;
    this.apply = null;
    this.cancel = null;
    this.disposables = new tab.DisposableHolder();
    this.tiledWidget = null;
    this.$2$ApplyOrCancelClickedField = null;
    this.$2$WidthField = 0;
    this.$2$ItemFormatterField = null;
    Object.call(this);
    this.parent = parent;
    this.div = div;
    this.listItemFocusHandler = ss.mkdel(this, this.$handleListItemFocus);
    this.attributes = {};
    if (ss.isValue(attrs)) {
      this.attributes = attrs;
    }
  }, {
    add_applyOrCancelClicked: function BaseMode$add_ApplyOrCancelClicked(value) {
      this.$2$ApplyOrCancelClickedField = ss.delegateCombine(this.$2$ApplyOrCancelClickedField, value);
    },
    remove_applyOrCancelClicked: function BaseMode$remove_ApplyOrCancelClicked(value) {
      this.$2$ApplyOrCancelClickedField = ss.delegateRemove(this.$2$ApplyOrCancelClickedField, value);
    },
    get_lineHeight: function BaseMode$get_LineHeight() {
      return this.parent.get_presModel().lineHeight;
    },
    get_isActiveSearch: function BaseMode$get_IsActiveSearch() {
      return ss.isValue(this.tiledWidget);
    },
    get_isTiled: function BaseMode$get_IsTiled() {
      return ss.isValue(this.tiledWidget) && this.tiledWidget.get_tileCount() > 1;
    },
    get_width: function BaseMode$get_Width() {
      return this.$2$WidthField;
    },
    set_width: function BaseMode$set_Width(value) {
      this.$2$WidthField = value;
    },
    get_itemFormatter: function BaseMode$get_ItemFormatter() {
      return this.$2$ItemFormatterField;
    },
    set_itemFormatter: function BaseMode$set_ItemFormatter(value) {
      this.$2$ItemFormatterField = value;
    },
    get_scrollNode: function BaseMode$get_ScrollNode() {
      return null;
    },
    instantiate: function BaseMode$Instantiate(newTuples, itemName, facet) {
      ss.Debug.fail(tab.Strings.noLoc('Error: Unimplemented functionality'));
    },
    shouldNotReinstantiate: function BaseMode$ShouldNotReinstantiate() {
      return false;
    },
    updateContent: function BaseMode$UpdateContent(data) {
      ss.Debug.fail(tab.Strings.noLoc('Error: Unimplemented functionality'));
    },
    resetContent: function BaseMode$ResetContent(tuples, itemName, facet) {
      ss.Debug.fail(tab.Strings.noLoc('Error: Unimplemented functionality'));
    },
    updateTabIndexes: function BaseMode$UpdateTabIndexes(searchNode, andFocus) {
      var tabbableFilterItems = $(searchNode).find('.FIItem' + '[tabindex=0]');
      tabbableFilterItems.attr('tabindex', '-1');
      var targetElement = document.getElementById(this.focusedId) || $tab_LegacyCategoricalQuickFilter.findFirstDesirableFocusable(searchNode);
      if (ss.isValue(targetElement)) {
        if (targetElement.classList.contains('FIItem')) {
          targetElement.setAttribute('tabindex', '0');
        }
        else {
          $(searchNode).find('.FIItem').first().attr('tabindex', '0');
        }
        if (andFocus) {
          targetElement.focus();
        }
      }
    },
    $handleListItemFocus: function BaseMode$HandleListItemFocus(e) {
      var target = $(e.target);
      var item = target.closest('.FIItem');
      if (item.length > 0) {
        this.focusedId = item[0].id;
        this.updateTabIndexes(e.currentTarget, !ss.referenceEquals(target[0], item[0]));
      }
      else if (target.hasClass('QueryBox')) {
        this.focusedId = null;
      }
    },
    setUpForPendingChanges: function BaseMode$SetUpForPendingChanges() {
      if (this.parent.shouldDeferChanges()) {
        this.pendingManager = this.parent.makePendingChangesManager();
        this.pendingManager.add_onPendingChanges(ss.mkdel(this, this.handlePendingChanges));
        this.pendingManager.add_onNoPendingChanges(ss.mkdel(this, this.handleNoPendingChanges));
        this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
          this.pendingManager.remove_onPendingChanges(ss.mkdel(this, this.handlePendingChanges));
          this.pendingManager.remove_onNoPendingChanges(ss.mkdel(this, this.handleNoPendingChanges));
        })));
        this.$initApplyAndCancelButtons();
      }
    },
    $initApplyAndCancelButtons: function BaseMode$InitApplyAndCancelButtons() {
      this.apply = spiff.LabelButton.newNativeButton();
      this.apply.addClass('apply');
      this.apply.set_label(tab.Strings.QuickFilterApply);
      this.apply.set_hoverTooltipText(tab.Strings.QuickFilterApply);
      this.apply.onClick(ss.mkdel(this, function(button) {
        this.resetPendingVisuals(false);
        this.parent.applyPendingChangesByChangelist();
        this.$raiseApplyOrCancelClicked();
      }));
      this.disposables.add$1(this.apply);
      this.cancel = spiff.LabelButton.newNativeButton();
      this.cancel.addClass('cancel');
      this.cancel.set_label(tab.Strings.QuickFilterCancel);
      this.cancel.set_hoverTooltipText(tab.Strings.QuickFilterCancel);
      this.cancel.onClick(ss.mkdel(this, function(button1) {
        this.resetPendingVisuals(true);
        this.parent.cancelPendingChangesByChangelist();
        this.$raiseApplyOrCancelClicked();
      }));
      this.disposables.add$1(this.cancel);
      var refocus = ss.mkdel(this, function() {
        this.updateTabIndexes(this.div, true);
      });
      this.add_applyOrCancelClicked(refocus);
      this.disposables.add(ss.mkdel(this, function() {
        this.remove_applyOrCancelClicked(refocus);
      }));
      this.initApplyAndCancelButtonStates();
    },
    initApplyAndCancelButtonStates: function BaseMode$InitApplyAndCancelButtonStates() {
      this.apply.set_disabled(true);
      this.cancel.set_disabled(true);
    },
    appendApplyCancelButtons: function BaseMode$AppendApplyCancelButtons(container) {
      var wrapper = container.children('.CFApplyButtonContainer').first();
      if (this.parent.get_filterTable().actual_size > 0 && this.parent.shouldDeferChanges()) {
        if (wrapper.length < 1) {
          wrapper = $('<div></div>').addClass('CFApplyButtonContainer');
          container.append(wrapper);
        }
        if (ss.isNullOrUndefined(this.cancel) || ss.isNullOrUndefined(this.apply)) {
          this.setUpForPendingChanges();
        }
        wrapper.append(this.cancel.element).append(this.apply.element).height(this.apply.element.outerHeight(true) + 'px');
      }
      else {
        wrapper.detach();
      }
    },
    layoutApplyButton: function BaseMode$LayoutApplyButton(container) {
      if (ss.isValue(container)) {
        var totalWidth = tab.DoubleUtil.roundToInt(container.width());
        var sideMargin = parseInt(this.apply.element.css('margin-right'));
        var maxWidth = Math.floor(totalWidth / 2 - sideMargin);
        var attributeName = 'max-width';
        this.apply.element.css(attributeName, maxWidth + 'px');
        this.cancel.element.css(attributeName, maxWidth + 'px');
      }
    },
    handlePendingChanges: function BaseMode$HandlePendingChanges() {
      this.apply.set_disabled(false);
      this.cancel.set_disabled(false);
    },
    handleNoPendingChanges: function BaseMode$HandleNoPendingChanges() {
      this.apply.set_disabled(true);
      this.cancel.set_disabled(true);
    },
    resetPendingVisuals: function BaseMode$ResetPendingVisuals(resetCheckState) {
    },
    $raiseApplyOrCancelClicked: function BaseMode$RaiseApplyOrCancelClicked() {
      if (!ss.staticEquals(this.$2$ApplyOrCancelClickedField, null)) {
        this.$2$ApplyOrCancelClickedField();
      }
    },
    applyChanges: function BaseMode$ApplyChanges() {
      ss.Debug.fail(tab.Strings.noLoc('Error: Unimplemented functionality'));
    },
    layout: function BaseMode$Layout(contentSize, horizontalLayout) {
      if (tsConfig.is_mobile) {
        $tab_DojoUtils.setMarginBoxWidth(this.div, contentSize.w);
        this.div.style.maxHeight = contentSize.h + 'px';
      }
      else {
        dojo.marginBox(this.div, contentSize);
      }
    },
    fetchChildNodeByIndex: function BaseMode$FetchChildNodeByIndex(index) {
      if (ss.isNullOrUndefined(index) || index < 0) {
        return null;
      }
      if ($tab_FilterItemUtil.filterItem.isAllItem(ss.cast(this.div.firstChild, HTMLElement))) {
        index += 1;
      }
      return ss.cast(this.div.childNodes[index], HTMLElement);
    },
    fetchAllItem: function BaseMode$FetchAllItem() {
      return ss.cast(this.div.childNodes[0], HTMLElement);
    },
    getNonTiledElement: function BaseMode$GetNonTiledElement(index, container) {
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionSearchResults')) {
        if (index >= 0 && ss.isValue(container)) {
          var items = container.children;
          for (var i = 0, len = items.length; i < len; i++) {
            if ($tab_FilterItemUtil.filterItem.getIndex(items[i]) === index) {
              return items[i];
            }
          }
        }
      }
      return null;
    },
    shouldUseAllItem: function BaseMode$ShouldUseAllItem() {
      return ss.cast(this.attributes['show-all'], String) !== 'false';
    },
    countIfAll: function BaseMode$CountIfAll(tuples) {
      var numChecked = ((this.parent.get_mode() === 'checklist') ? 1 : 0);
      for (var i = 0; i < tuples.length; i++) {
        if (tuples[i].s) {
          numChecked += 1;
        }
      }
      return numChecked === tuples.length;
    },
    getSummaryText: function BaseMode$GetSummaryText() {
      return (this.hasSummaryText() ? this.parent.get_oFilter().summary : '');
    },
    formatTuple: function BaseMode$FormatTuple(tuple) {
      return $tab_FilterFormat.formatTupleDisplayName(tuple, true, this.parent.get_oFilter().role);
    },
    formatFacet: function BaseMode$FormatFacet(tuple) {
      return $tab_FilterFormat.formatTupleDisplayFacet(tuple, true, this.parent.get_oFilter().role);
    },
    onSmallSearchUI: function BaseMode$OnSmallSearchUI(searchIsOn, searchDiv) {
    },
    hasSummaryText: function BaseMode$HasSummaryText() {
      var isSlider = this.parent.get_mode() === 'slider';
      var isDrop = this.parent.get_mode() === 'dropdown' || this.parent.get_mode() === 'checkdropdown';
      var summary = this.parent.get_oFilter().summary;
      var isNotAll = !ss.referenceEquals(summary, tab.Strings.QuickFilterAll);
      return ss.isValue(summary) && (isSlider || isDrop && isNotAll);
    },
    applyChangesByChangelist: function BaseMode$ApplyChangesByChangelist(changelist, filterType) {
      var domain = ss.coalesce(ss.cast(this.attributes['values'], String), '');
      var toAdd = [];
      var toRemove = [];
      var indexes = [];
      if (filterType === 'checklist' || filterType === 'checkdropdown' || filterType === 'typeinlist') {
        var parameters = changelist.compileForChecklist(domain);
        var index;
        for (var i = 0; i < parameters.select.length; i++) {
          index = parameters.select[i];
          toAdd.push(index);
        }
        for (var i1 = 0; i1 < parameters.deselect.length; i1++) {
          index = parameters.deselect[i1];
          toRemove.push(index);
        }
        tab.FilterClientCommands.modifyCategoricalFilterValuesByDelta(new tab.CancelDialog(null, null, null, true), this.parent.get_session().get_visualId(), this.parent.get_identifier(), toAdd, toRemove);
      }
      else if (filterType === 'radiolist') {
        var parameters1 = changelist.compileForRadiolist(domain);
        indexes.push(parameters1.index);
        tab.FilterClientCommands.setCategoricalFilterValuesByIndex(new tab.CancelDialog(null, null, null, true), this.parent.get_session().get_visualId(), this.parent.get_identifier(), indexes);
      }
    },
    destroy: null,
    dispose: function BaseMode$Dispose() {
      this.disposables.dispose();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CategoricalLegendColumnHtmlTemplate
  var $tab_CategoricalLegendColumnHtmlTemplate = global.tab.CategoricalLegendColumnHtmlTemplate = ss.mkType($asm, 'tab.CategoricalLegendColumnHtmlTemplate', function(numRows, itemWidth, itemHeight, swatchArea, swatchRect, accountForColorBorder) {
    this.column = null;
    this.$legendItems = null;
    spiff.Template.call(this, $($tab_CategoricalLegendColumnHtmlTemplate.$htmlTemplate));
    this.column = this.domRoot;
    this.$legendItems = [];
    for (var ii = 0; ii < numRows; ++ii) {
      this.$legendItems[ii] = new $tab_CategoricalLegendItemHtmlTemplate(swatchArea, swatchRect, accountForColorBorder);
      $tab_CategoricalLegendView.setDomNodeStyleSize(this.$legendItems[ii].domRoot, itemWidth, itemHeight);
      this.column.append(this.$legendItems[ii].domRoot);
    }
  }, {
    get_legendItems: function CategoricalLegendColumnHtmlTemplate$get_LegendItems() {
      return this.$legendItems;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CategoricalLegendItemHtmlTemplate
  var $tab_CategoricalLegendItemHtmlTemplate = global.tab.CategoricalLegendItemHtmlTemplate = ss.mkType($asm, 'tab.CategoricalLegendItemHtmlTemplate', function(swatchArea, swatchRect, accountForColorBorder) {
    this.item = null;
    this.itemSwatch = null;
    this.itemLabelHolder = null;
    this.itemLabel = null;
    this.renderContext = null;
    this.canvasElt = null;
    spiff.Template.call(this, $($tab_CategoricalLegendItemHtmlTemplate.$htmlTemplate));
    this.item = this.domRoot;
    var swatchAreaHolder = this.getElementBySelector('.tabLegendItemSwatchHolder');
    this.itemLabel = this.getElementBySelector('.tabLegendItemLabel');
    this.itemLabelHolder = this.getElementBySelector('.tabLegendItemLabelHolder');
    $tab_CategoricalLegendView.setDomNodeStyleSize(swatchAreaHolder, swatchArea.w, swatchArea.h);
    var swatchHtml = (ss.isValue(swatchRect) ? $tab_CategoricalLegendItemHtmlTemplate.$divSwatchTemplate : $tab_CategoricalLegendItemHtmlTemplate.$canvasSwatchTemplate);
    swatchAreaHolder.append($(swatchHtml));
    this.itemSwatch = this.getElementBySelector('.tabLegendItemSwatch');
    if (ss.isNullOrUndefined(swatchRect)) {
      var $t1 = this.itemSwatch.get(0);
      var canvasElt = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
      this.renderContext = tab.CanvasRenderer.getRenderContext(canvasElt, 'transparent');
      this.canvasElt = canvasElt;
      tab.CanvasUtil.sizeCanvasWithHighDPISupport(this.canvasElt, this.renderContext, swatchArea);
    }
    else {
      var rect = { l: swatchRect.l, t: swatchRect.t, w: swatchRect.w, h: swatchRect.h };
      if (accountForColorBorder) {
        var BorderWidth = $tab_CategoricalLegendView.$colorSwatchBorderWidth;
        rect.w -= 2 * BorderWidth;
        rect.h -= 2 * BorderWidth;
        this.itemSwatch.css('border-width', BorderWidth + 'px');
        this.itemSwatch.css('border-style', 'none');
      }
      $tab_CategoricalLegendView.setDomNodeStyleSize(this.itemSwatch, rect.w, rect.h);
      this.itemSwatch.css('top', rect.t + 'px');
      this.itemSwatch.css('left', rect.l + 'px');
      this.renderContext = null;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CategoricalLegendTemplate
  var $tab_CategoricalLegendTemplate = global.tab.CategoricalLegendTemplate = ss.mkType($asm, 'tab.CategoricalLegendTemplate', function(template) {
    this.panel = null;
    this.columnsHolder = null;
    this.columnHolder = null;
    this.highlighterButton = null;
    this.contextMenuButton = null;
    $tab_LegendTemplate.call(this, template);
    this.panel = this.domRoot;
    this.panel.append($($tab_CategoricalLegendTemplate.$legendTitleControlsHTMLTemplate));
    this.columnsHolder = this.getElementBySelector('.tabLegendContentHolder');
    this.columnHolder = this.getElementBySelector('.tabLegendColumnHolder');
    this.titleControls = this.getElementBySelector($tab_LegendTemplate.legendTitleControlsSelector);
    this.highlighterButton = this.getElementBySelector($tab_LegendTemplate.legendHighlighterButtonSelector);
    this.contextMenuButton = this.getElementBySelector($tab_LegendTemplate.legendContextMenuButtonSelector);
    this.highlighterButton.attr('title', tab.Strings.LegendPanelHighlightSelectedItems);
    if (!tab.FeatureFlags.isEnabled('MttwLegendTitles')) {
      this.contextMenuButton.attr('title', tab.Strings.TabAuthColorEditLegendButtonTooltip);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CategoricalLegendView
  var $tab_CategoricalLegendView = global.tab.CategoricalLegendView = ss.mkType($asm, 'tab.CategoricalLegendView', function(viewModel, template) {
    this.viewportWidth = 0;
    this.viewportHeight = 0;
    this.viewportOffset = null;
    this.$columns = [];
    this.$redrawItemsAnimationFrame = null;
    this.$hackyShapeSwatchRenderer = null;
    this.$previousHoveredItem = null;
    ss.makeGenericType($tab_BaseLegendView$1, [$tab_CategoricalLegendViewModel]).call(this, viewModel, template);
    this.showOrHideTitleControls(false);
    viewModel.selectionChanged = ss.delegateCombine(viewModel.selectionChanged, ss.mkdel(this, this.onSelectionChanged));
    var focusHandler = ss.mkdel(this, this.onFocus);
    var blurHandler = ss.mkdel(this, function(e) {
      this.showOrHideTitleControls(false);
    });
    this.element[0].addEventListener('focus', focusHandler, true);
    this.element[0].addEventListener('blur', blurHandler, true);
    this.disposables.add(ss.mkdel(this, function() {
      viewModel.selectionChanged = ss.delegateRemove(viewModel.selectionChanged, ss.mkdel(this, this.onSelectionChanged));
      this.element[0].removeEventListener('focus', focusHandler, true);
      this.element[0].removeEventListener('blur', blurHandler, true);
    }));
    this.element.on('keydown', ss.mkdel(this, this.onKeyDown));
    if (this.get_catLegendViewModel().get_shouldShowContextMenu()) {
      var contextMenuButton = new spiff.Button(this.get_catLegendTemplate().contextMenuButton);
      contextMenuButton.add_click(ss.mkdel(this, this.showContextMenu));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        contextMenuButton.remove_click(ss.mkdel(this, this.showContextMenu));
        tab.MiscUtil.dispose$1(contextMenuButton);
      })));
    }
    if (viewModel.get_shouldShowHighlighter()) {
      var highlighterButton = new spiff.Button(this.get_catLegendTemplate().highlighterButton);
      highlighterButton.add_click(ss.mkdel(this, this.onLegendHighlighterButtonTapped));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        highlighterButton.remove_click(ss.mkdel(this, this.onLegendHighlighterButtonTapped));
        tab.MiscUtil.dispose$1(highlighterButton);
      })));
    }
  }, {
    get_docSize: function CategoricalLegendView$get_DocSize() {
      var pointPM = this.get_catLegendViewModel().get_categoricalLegendPM().catLegendLayout.legendSize;
      return { w: pointPM.w, h: pointPM.h };
    },
    get_focusableLegendItems: function CategoricalLegendView$get_FocusableLegendItems() {
      return this.element.find('.tabLegendItem[tabindex]');
    },
    get_catLegendViewModel: function CategoricalLegendView$get_CatLegendViewModel() {
      return this.get_viewModel();
    },
    get_catLegendTemplate: function CategoricalLegendView$get_CatLegendTemplate() {
      return ss.cast(this.get_template(), $tab_CategoricalLegendTemplate);
    },
    get_scrollOffset: function CategoricalLegendView$get_ScrollOffset() {
      var left = this.get_catLegendTemplate().columnsHolder.scrollLeft();
      var top = tab.DoubleUtil.roundToInt(this.get_catLegendTemplate().columnsHolder.scrollTop());
      return { x: left, y: top };
    },
    set_scrollOffset: function CategoricalLegendView$set_ScrollOffset(value) {
      this.get_catLegendTemplate().columnsHolder.scrollLeft(value.x);
      this.get_catLegendTemplate().columnsHolder.scrollTop(value.y);
    },
    onAddedToDom: function CategoricalLegendView$OnAddedToDom() {
      ss.makeGenericType($tab_BaseLegendView$1, [$tab_CategoricalLegendViewModel]).prototype.onAddedToDom.call(this);
      this.drawLegend(true);
      this.element.attr('tabindex', '-1').attr('role', 'listbox').attr('aria-multiselectable', 'true');
    },
    onKeyDown: function CategoricalLegendView$OnKeyDown(e) {
      var rowsPerColumn = this.get_catLegendViewModel().get_categoricalLegendPM().catLegendLayout.rowCount;
      switch (e.which) {
        case 39: {
          if (this.$columns.length === 1) {
            var $t1 = this.get_viewModel();
            $t1.set_focusIndex($t1.get_focusIndex() + 1);
          }
          else if (this.get_viewModel().get_focusIndex() + rowsPerColumn < this.get_viewModel().get_numLegendItems()) {
            var $t2 = this.get_viewModel();
            $t2.set_focusIndex($t2.get_focusIndex() + rowsPerColumn);
          }
          break;
        }
        case 37: {
          if (this.$columns.length === 1) {
            var $t3 = this.get_viewModel();
            $t3.set_focusIndex($t3.get_focusIndex() - 1);
          }
          else if (this.get_viewModel().get_focusIndex() >= rowsPerColumn) {
            var $t4 = this.get_viewModel();
            $t4.set_focusIndex($t4.get_focusIndex() - rowsPerColumn);
          }
          break;
        }
        case 40: {
          var $t5 = this.get_viewModel();
          $t5.set_focusIndex($t5.get_focusIndex() + 1);
          break;
        }
        case 38: {
          var $t6 = this.get_viewModel();
          $t6.set_focusIndex($t6.get_focusIndex() - 1);
          break;
        }
        case 36: {
          this.get_viewModel().set_focusIndex(0);
          break;
        }
        case 35: {
          this.get_viewModel().set_focusIndex(this.get_viewModel().get_numLegendItems() - 1);
          break;
        }
        case 27: {
          this.get_viewModel().selectNone('simple', 'replace');
          break;
        }
        case 32: {
          var itemPresModel = this.get_catLegendViewModel().getLegendItem(this.get_viewModel().get_focusIndex());
          if (ss.isValue(itemPresModel)) {
            this.get_viewModel().selectItem(itemPresModel, 'toggle', 'replace');
          }
          break;
        }
        case 13: {
          if (this.get_catLegendViewModel().get_shouldShowHighlighter()) {
            this.get_catLegendViewModel().toggleHighlighting();
          }
          break;
        }
        default: {
          return;
        }
      }
      e.preventDefault();
      e.stopPropagation();
    },
    onFocus: function CategoricalLegendView$OnFocus(e) {
      var target = e.target;
      if (target.classList.contains('tabLegendItem')) {
        this.get_viewModel().set_focusIndex(this.get_focusableLegendItems().index(target));
      }
      else if (ss.referenceEquals(target, this.element[0])) {
        tab.DomUtil.focusWithoutScrolling(ss.mkdel(this, this.updateFocus), this.get_catLegendTemplate().columnsHolder);
      }
      this.showOrHideTitleControls(true);
    },
    onSelectionChanged: function CategoricalLegendView$OnSelectionChanged(changed) {
      if (this.get_catLegendViewModel().get_categoricalLegendPM().catLegendLayout.colCount === this.$columns.length) {
        this.$drawItems(changed);
        this.$updateHighlightingEnabled();
      }
    },
    onViewModelPropertyChanged: function CategoricalLegendView$OnViewModelPropertyChanged(sender, e) {
      switch (e.get_propertyName()) {
        case 'isActiveZone':
        case 'isReadyZone': {
          break;
        }
        case 'Items': {
          this.onSelectionChanged(null);
          break;
        }
        case 'ParentZoneSizeChanged': {
          var parentZoneSize = this.get_catLegendViewModel().get_$parentZoneSize();
          if (parentZoneSize.w === tab.DoubleUtil.roundToInt(this.get_catLegendTemplate().panel.width()) && parentZoneSize.h === tab.DoubleUtil.roundToInt(this.get_catLegendTemplate().panel.height())) {
          }
          else {
            this.resetLegend(false);
          }
          this.$refreshTooltipIfNeeded();
          break;
        }
        case 'CustomShapesLoaded': {
          if (this.get_catLegendViewModel().get_legendTypeEnum() === 'shape') {
            if (ss.isValue(this.$redrawItemsAnimationFrame)) {
              tab.WindowHelper.cancelAnimationFrame(ss.unbox(this.$redrawItemsAnimationFrame));
            }
            this.$redrawItemsAnimationFrame = tab.WindowHelper.requestAnimationFrame(ss.mkdel(this, function() {
              this.$redrawItemsAnimationFrame = null;
              this.$drawItems(null);
            }));
          }
          break;
        }
        case 'FocusIndex': {
          this.updateFocus();
          break;
        }
        case 'titleVisible':
        case null: {
          this.resetLegend(false);
          break;
        }
        default: {
          ss.Debug.assert(false, 'CategoricalLegendView.OnViewModelPropertyChanged will force legend redraw as such property name is unknown: ' + e.get_propertyName());
          this.resetLegend(true);
          break;
        }
      }
    },
    $refreshTooltipIfNeeded: function CategoricalLegendView$RefreshTooltipIfNeeded() {
      if (!this.get_legendTooltip().get_isTooltipShown()) {
        return;
      }
      var selectionBounds = this.$computeBoundsForSelectedLegendItems();
      var selectedItem = this.$findFirstSelectedLegendItem();
      if (ss.isValue(selectedItem) && !tab.RectXYUtil.isEmpty(selectionBounds)) {
        this.scrollToShowBounds(selectionBounds);
        var selectedItemBounds = tab.DomUtil.getRectXY(selectedItem.item);
        var tooltipPosition = { x: selectedItemBounds.x + ss.idiv(selectedItemBounds.w, 2), y: selectedItemBounds.y + ss.idiv(selectedItemBounds.h, 2) };
        this.get_legendTooltip().selectionMoved(tooltipPosition);
      }
      else {
        this.get_legendTooltip().repositionWithinRegion(tab.DomUtil.getRectXY(this.get_catLegendTemplate().panel));
      }
    },
    scrollToShowBounds: function CategoricalLegendView$ScrollToShowBounds(bounds) {
    },
    $computeBoundsForSelectedLegendItems: function CategoricalLegendView$ComputeBoundsForSelectedLegendItems() {
      var selectionBounds = { x: 0, y: 0, w: 0, h: 0 };
      var catLegendPM = this.get_catLegendViewModel().get_categoricalLegendPM();
      var catlayoutPM = catLegendPM.catLegendLayout;
      for (var col = 0; col < catlayoutPM.colCount; ++col) {
        var currentCol = this.$columns[col];
        for (var row = 0; row < catlayoutPM.rowCount && row < currentCol.get_legendItems().length; ++row) {
          var itemTemplate = currentCol.get_legendItems()[row];
          var item = itemTemplate.domRoot.data($tab_CategoricalLegendView.$keyLegendItem);
          if (ss.isValue(item) && this.get_catLegendViewModel().isSelected(item)) {
            var itemBounds = tab.DomUtil.getMarginBoxJQ(itemTemplate.item);
            var itemBoundsXY = { x: itemBounds.l, y: itemBounds.t, w: itemBounds.w, h: itemBounds.h };
            selectionBounds = tab.RectXYUtil.union(selectionBounds, itemBoundsXY);
          }
        }
      }
      return selectionBounds;
    },
    $findFirstSelectedLegendItem: function CategoricalLegendView$FindFirstSelectedLegendItem() {
      var catLegendPM = this.get_catLegendViewModel().get_categoricalLegendPM();
      var catlayoutPM = catLegendPM.catLegendLayout;
      for (var col = 0; col < catlayoutPM.colCount; ++col) {
        var currentCol = this.$columns[col];
        for (var row = 0; row < catlayoutPM.rowCount && row < currentCol.get_legendItems().length; ++row) {
          var itemTemplate = currentCol.get_legendItems()[row];
          var item = itemTemplate.domRoot.data($tab_CategoricalLegendView.$keyLegendItem);
          if (ss.isValue(item) && this.get_catLegendViewModel().isSelected(item)) {
            return itemTemplate;
          }
        }
      }
      return null;
    },
    getLegendItemFromEvent: function CategoricalLegendView$GetLegendItemFromEvent(pseudoEvent) {
      var target = $(pseudoEvent.target);
      if (target.hasClass('tabLegendItemLabelHolder') || target.hasClass('tabLegendItem')) {
        return null;
      }
      return target.parents('.tabLegendItem').addBack().first().data($tab_CategoricalLegendView.$keyLegendItem);
    },
    resetLegend: function CategoricalLegendView$ResetLegend(resetScrollOffset) {
      this.drawLegend(resetScrollOffset);
    },
    getViewportPosition: function CategoricalLegendView$GetViewportPosition(pseudoEvent) {
      var info = pseudoEvent.get_GestureInfo();
      var coords = { x: info.pageX, y: info.pageY };
      return coords;
    },
    getDocumentPosition: function CategoricalLegendView$GetDocumentPosition(viewportPosition) {
      var coords = { x: viewportPosition.x, y: viewportPosition.y };
      var posOrigin = tab.DomUtil.getRectXY(this.get_catLegendTemplate().columnsHolder);
      coords.x += this.get_catLegendTemplate().columnsHolder.scrollLeft() + this.viewportOffset.x - posOrigin.x;
      coords.y += tab.DoubleUtil.roundToInt(this.get_catLegendTemplate().columnsHolder.scrollTop()) + this.viewportOffset.y - posOrigin.y;
      return coords;
    },
    performSelectOnItem: function CategoricalLegendView$PerformSelectOnItem(item, action, viewportCoords, contentSelRect, zoneSelectionType) {
      var commandFired = false;
      if (this.get_catLegendViewModel().get_legendTypeEnum() !== 'map') {
        commandFired = this.get_catLegendViewModel().selectItem(item, action, zoneSelectionType);
        this.get_legendTooltip().singleSelectCoordinates(viewportCoords, { x: contentSelRect.x, y: contentSelRect.y }, this.get_legendViewModel().get_regionType(), 'legenditem', this.$getFieldNameVec());
      }
      return commandFired;
    },
    performHoverOnItem: function CategoricalLegendView$PerformHoverOnItem(viewportCoords, contentSelRect) {
      if (this.get_catLegendViewModel().get_legendTypeEnum() !== 'map') {
        var updateUbertip = true;
        if (updateUbertip) {
          this.get_legendTooltip().hoverOverCoordinates(viewportCoords, { x: contentSelRect.x, y: contentSelRect.y }, 'legenditem', this.get_legendViewModel().get_regionType(), this.$getFieldNameVec(), null, false);
        }
      }
    },
    $getFieldNameVec: function CategoricalLegendView$GetFieldNameVec() {
      var length = 0;
      if (ss.isValue(this.get_catLegendViewModel()) && ss.isValue(this.get_catLegendViewModel().get_categoricalLegendPM()) && ss.isValue(this.get_catLegendViewModel().get_categoricalLegendPM().legendNames)) {
        length = this.get_catLegendViewModel().get_categoricalLegendPM().legendNames.length;
      }
      var fieldNames = new Array(length);
      for (var i = 0; i < length; i++) {
        fieldNames[i] = this.get_catLegendViewModel().get_categoricalLegendPM().legendNames[i];
      }
      return fieldNames;
    },
    isValidPreviousHoveredItem: function CategoricalLegendView$IsValidPreviousHoveredItem() {
      return ss.isValue(this.$previousHoveredItem) && this.get_catLegendViewModel().isSelected(this.$previousHoveredItem);
    },
    clearPreviousHoveredItem: function CategoricalLegendView$ClearPreviousHoveredItem() {
      if (this.isValidPreviousHoveredItem()) {
        this.get_catLegendViewModel().selectItem(this.$previousHoveredItem, 'toggle', 'replace');
      }
    },
    hoverOnCurrentItem: function CategoricalLegendView$HoverOnCurrentItem(item) {
      var $t1 = [];
      $t1.push(item);
      var items = $t1;
      if (this.isValidPreviousHoveredItem()) {
        items.push(this.$previousHoveredItem);
      }
      this.get_catLegendViewModel().selectItems(items, 'toggle', 'replace');
    },
    clearHoverOnItem: function CategoricalLegendView$ClearHoverOnItem() {
      this.clearPreviousHoveredItem();
      this.$previousHoveredItem = null;
    },
    setContentSize: function CategoricalLegendView$SetContentSize(viewportHeightParam, viewportWidthParam) {
      $tab_CategoricalLegendView.setDomNodeStyleSize(this.get_catLegendTemplate().columnsHolder, viewportWidthParam, viewportHeightParam);
    },
    onLegendHighlighterButtonTapped: function CategoricalLegendView$OnLegendHighlighterButtonTapped() {
      this.get_catLegendViewModel().toggleHighlighting();
    },
    showContextMenu: function CategoricalLegendView$ShowContextMenu() {
      if (tab.FeatureFlags.isEnabled('MttwLegendTitles')) {
        this.get_catLegendViewModel().$showContextMenu(new spiff.ShowMenuOptions(this.get_catLegendTemplate().titleControls, false));
      }
      else {
        this.get_catLegendViewModel().showWebCategoricalColorDialog();
      }
    },
    showOrHideTitleControls: function CategoricalLegendView$ShowOrHideTitleControls(isVisible) {
      this.get_catLegendTemplate().contextMenuButton.toggle(isVisible && this.get_catLegendViewModel().get_shouldShowContextMenu());
      this.get_catLegendTemplate().highlighterButton.toggle(isVisible && this.get_catLegendViewModel().get_shouldShowHighlighter());
    },
    drawLegend: function CategoricalLegendView$DrawLegend(resetScrollOffset) {
      var restoreFocus = $.contains(this.element[0], document.activeElement);
      this.$removeColumns();
      this.drawTitle();
      this.element.attr('aria-label', tab.Strings.Legend + ': ' + this.get_catLegendTemplate().titleArea.text());
      this.setupPanelAndViewport();
      if (resetScrollOffset) {
        this.$resetScrollOffset();
      }
      this.$makeAndAppendColumns();
      this.$updateHighlightingEnabled();
      this.$drawItems(null);
      if (restoreFocus) {
        this.updateFocus();
      }
    },
    updateFocus: function CategoricalLegendView$UpdateFocus() {
      if (ss.isValue(document.activeElement) && document.activeElement.classList.contains('tabMenu')) {
        return;
      }
      var focusableItems = this.get_focusableLegendItems();
      focusableItems.attr('tabindex', '-1');
      focusableItems.eq(this.get_viewModel().get_focusIndex()).attr('tabindex', '0').focus();
    },
    $removeColumns: function CategoricalLegendView$RemoveColumns() {
      for (var $t1 = 0; $t1 < this.$columns.length; $t1++) {
        var colTemplate = this.$columns[$t1];
        colTemplate.domRoot.remove();
      }
      ss.clear(this.$columns);
    },
    drawTitle: function CategoricalLegendView$DrawTitle() {
      ss.makeGenericType($tab_BaseLegendView$1, [$tab_CategoricalLegendViewModel]).prototype.drawTitle.call(this);
      this.$updateTitleAreaStyle$1();
    },
    $updateTitleAreaStyle$1: function CategoricalLegendView$UpdateTitleAreaStyle() {
      if (this.get_catLegendViewModel().get_titleInline()) {
        var itemHeight = this.get_catLegendViewModel().get_categoricalLegendPM().catLegendLayout.rowHeight;
        this.get_baseLegendTemplate().titleArea.css('height', itemHeight + 'px');
        this.get_baseLegendTemplate().titleArea.css('line-height', itemHeight + 'px');
      }
      else {
        this.get_baseLegendTemplate().titleArea.css('line-height', '');
      }
    },
    setupPanelAndViewport: function CategoricalLegendView$SetupPanelAndViewport() {
      var panelWidth = this.get_catLegendViewModel().get_$parentZoneSize().w;
      var panelHeight = this.get_catLegendViewModel().get_$parentZoneSize().h;
      $tab_CategoricalLegendView.setDomNodeStyleSize(this.get_catLegendTemplate().panel, panelWidth, panelHeight);
      this.get_catLegendTemplate().panel.get(0).id = this.$makeHtmlId();
      this.$calculateViewportWidthHeightAndOffset(panelWidth, panelHeight);
      this.setContentSize(this.viewportHeight, this.viewportWidth);
    },
    $makeHtmlId: function CategoricalLegendView$MakeHtmlId() {
      return $tab_CategoricalLegendView.$htmlIDBase + this.get_catLegendViewModel().get_regionType().toString() + (this.get_catLegendViewModel().get_shouldShowHighlighter() ? '_q_' : '_') + encodeURIComponent(this.get_catLegendViewModel().get_$vizName());
    },
    $calculateViewportWidthHeightAndOffset: function CategoricalLegendView$CalculateViewportWidthHeightAndOffset(panelWidth, panelHeight) {
      var titleSize = this.get_catLegendViewModel().get_$parentZoneTitleSize();
      this.viewportWidth = panelWidth;
      this.viewportHeight = panelHeight;
      this.viewportOffset = { x: 0, y: 0 };
      if (this.get_catLegendViewModel().get_titleInline()) {
        this.viewportWidth -= titleSize.w;
        this.viewportOffset.x += titleSize.w;
      }
      else {
        this.viewportHeight -= titleSize.h;
        this.viewportOffset.y += titleSize.h;
      }
    },
    $resetScrollOffset: function CategoricalLegendView$ResetScrollOffset() {
      var catLegendPM = this.get_catLegendViewModel().get_categoricalLegendPM();
      var scrollOffset = catLegendPM.scrollOffset;
      if (ss.isNullOrUndefined(scrollOffset)) {
        scrollOffset = { x: 0, y: 0 };
      }
      this.set_scrollOffset(tab.PointUtil.fromPresModel(scrollOffset));
    },
    $makeAndAppendColumns: function CategoricalLegendView$MakeAndAppendColumns() {
      var catlayoutPM = this.get_catLegendViewModel().get_categoricalLegendPM().catLegendLayout;
      var areaWidth = catlayoutPM.areaSize.w;
      var areaHeight = catlayoutPM.areaSize.h;
      var swatchWidth = catlayoutPM.imageSize.w;
      var swatchHeight = catlayoutPM.imageSize.h;
      var swatchLeftPadding = Math.ceil((areaWidth - swatchWidth) / 2);
      var swatchTopPadding = Math.ceil((areaHeight - swatchHeight) / 2);
      var swatchArea = { w: areaWidth, h: areaHeight };
      var swatchRect = null;
      var accountForColorSwatchBorder = false;
      if (this.get_catLegendViewModel().legendType === 'color' || this.get_catLegendViewModel().legendType === 'map') {
        swatchRect = { l: swatchLeftPadding, t: swatchTopPadding, w: swatchWidth, h: swatchHeight };
        accountForColorSwatchBorder = ss.isValue(this.get_catLegendViewModel().get_$colorLegendPM().swatchBorderColor);
      }
      var colWidth = this.$getColWidth(catlayoutPM);
      for (var col = 0; col < catlayoutPM.colCount; ++col) {
        var newCol = new $tab_CategoricalLegendColumnHtmlTemplate(catlayoutPM.rowCount, colWidth, catlayoutPM.rowHeight, swatchArea, swatchRect, accountForColorSwatchBorder);
        this.$columns.push(newCol);
        newCol.column.width(colWidth);
        this.get_catLegendTemplate().columnHolder.append(newCol.domRoot);
      }
    },
    $updateHighlightingEnabled: function CategoricalLegendView$UpdateHighlightingEnabled() {
      this.get_catLegendTemplate().highlighterButton.toggleClass('tabHighlightEnabled', this.get_catLegendViewModel().get_$isHighlightingEnabled());
      this.get_catLegendTemplate().highlighterButton.toggleClass('tabHighlightDisabled', !this.get_catLegendViewModel().get_$isHighlightingEnabled());
    },
    $drawItems: function CategoricalLegendView$DrawItems(toDraw) {
      var drawAll = ss.isNullOrUndefined(toDraw);
      var catLegendPM = this.get_catLegendViewModel().get_categoricalLegendPM();
      var catlayoutPM = catLegendPM.catLegendLayout;
      var numItems = this.get_catLegendViewModel().get_numLegendItems();
      var itemIdx = 0;
      for (var col = 0; col < catlayoutPM.colCount && itemIdx < numItems; ++col) {
        var currentCol = this.$columns[col];
        for (var row = 0; row < catlayoutPM.rowCount && itemIdx < numItems && row < currentCol.get_legendItems().length; ++row, ++itemIdx) {
          if (!drawAll && !ss.contains(toDraw, itemIdx)) {
            continue;
          }
          var itemTemplate = currentCol.get_legendItems()[row];
          var catLegendItem = this.$drawItem(itemIdx, itemTemplate);
          if (ss.isValue(catLegendItem)) {
            this.$drawItemText(catLegendItem, catLegendPM, itemTemplate);
            itemTemplate.domRoot.data($tab_CategoricalLegendView.$keyLegendItem, catLegendItem);
          }
        }
      }
      this.get_focusableLegendItems().eq(this.get_viewModel().get_focusIndex()).attr('tabindex', '0');
    },
    $drawItem: function CategoricalLegendView$DrawItem(itemIdx, itemTemplate) {
      var toRet = null;
      switch (this.get_catLegendViewModel().legendType) {
        case 'color':
        case 'map': {
          toRet = this.$drawColorItem(itemIdx, itemTemplate);
          break;
        }
        case 'size': {
          toRet = this.$drawSizeItem(itemIdx, itemTemplate);
          break;
        }
        case 'shape': {
          toRet = this.$drawShapeItem(itemIdx, itemTemplate);
          break;
        }
        default: {
          ss.Debug.fail('unsupported legend type: ' + this.get_catLegendViewModel().legendType);
          break;
        }
      }
      return toRet;
    },
    $drawColorItem: function CategoricalLegendView$DrawColorItem(itemIdx, itemTemplate) {
      var colorLegendPM = this.get_catLegendViewModel().get_$colorLegendPM();
      var catLegendItem = colorLegendPM.colorLegendItems[itemIdx];
      var swatchBGColor = this.get_catLegendViewModel().get_$swatchBackgroundColor();
      var swatchColor = tab.ColorModel.fromColorCode(catLegendItem.color);
      swatchColor = tab.ColorModel.alphaComposite(swatchColor, swatchBGColor);
      var itemIsFogged = this.get_catLegendViewModel().isLegendItemGrayed(catLegendItem);
      if (itemIsFogged) {
        swatchColor = tab.SceneDataUtil.applyFoggingToColor(swatchColor, swatchBGColor);
      }
      var swatchColorString = swatchColor.toString();
      itemTemplate.itemSwatch.get(0).id = swatchColorString;
      var cssDict = { 'background-color': swatchColorString };
      if (ss.isValue(colorLegendPM.swatchBorderColor)) {
        cssDict['border-style'] = 'solid';
        var swatchBorderColor = tab.ColorModel.fromColorCode(colorLegendPM.swatchBorderColor);
        if (itemIsFogged) {
          swatchBorderColor = tab.SceneDataUtil.applyFoggingToColor(swatchBorderColor, swatchBGColor);
        }
        cssDict['border-color'] = swatchBorderColor.toString();
      }
      itemTemplate.itemSwatch.css(cssDict);
      return catLegendItem;
    },
    $drawShapeItem: function CategoricalLegendView$DrawShapeItem(itemIdx, itemTemplate) {
      ss.Debug.assert(ss.isValue(itemTemplate.renderContext), 'Shape legends should have canvases');
      var shapeLegendPM = this.get_catLegendViewModel().get_$shapeLegendPM();
      var catLegendItem = shapeLegendPM.shapeLegendItems[itemIdx];
      var areaWidth = shapeLegendPM.catLegendLayout.areaSize.w;
      var areaHeight = shapeLegendPM.catLegendLayout.areaSize.h;
      var context = itemTemplate.renderContext;
      context.clearRect(0, 0, areaWidth, areaHeight);
      if (ss.isNullOrUndefined(this.$hackyShapeSwatchRenderer) || !this.$hackyShapeSwatchRenderer.containsShape(catLegendItem.shapeId)) {
        this.$hackyShapeSwatchRenderer = new tab.HackyShapeSwatchRenderer(itemTemplate.canvasElt, itemTemplate.renderContext, areaWidth / 2, areaHeight / 2, shapeLegendPM.catLegendLayout.imageSize.w, shapeLegendPM.catLegendLayout.imageSize.h, this.get_catLegendViewModel().get_$swatchBackgroundColor());
      }
      this.$hackyShapeSwatchRenderer.renderSwatch(context, catLegendItem.shapeId, this.get_catLegendViewModel().isLegendItemGrayed(catLegendItem));
      itemTemplate.itemSwatch.get(0).id = catLegendItem.shapeId.toString();
      return catLegendItem;
    },
    $drawSizeItem: function CategoricalLegendView$DrawSizeItem(itemIdx, itemTemplate) {
      ss.Debug.assert(ss.isValue(itemTemplate.renderContext), 'Size legends should have canvases');
      var sizeLegendPM = this.get_catLegendViewModel().get_$sizeLegendPM();
      var catLegendItem = sizeLegendPM.sizeLegendItems[itemIdx];
      var areaWidth = sizeLegendPM.catLegendLayout.areaSize.w;
      var areaHeight = sizeLegendPM.catLegendLayout.areaSize.h;
      var swatchHeight = sizeLegendPM.catLegendLayout.imageSize.h;
      var swatchTopPadding = Math.ceil((areaHeight - swatchHeight) / 2);
      var context = itemTemplate.renderContext;
      context.save();
      var swatchFillColor = $tab_CategoricalLegendView.$sizeSwatchFillColor;
      var swatchBorderColor = $tab_CategoricalLegendView.$sizeSwatchBorderColor;
      if (this.get_catLegendViewModel().isLegendItemGrayed(catLegendItem)) {
        var swatchBGColor = this.get_catLegendViewModel().get_$swatchBackgroundColor();
        swatchFillColor = tab.SceneDataUtil.applyFoggingToColor(swatchFillColor, swatchBGColor);
        swatchBorderColor = tab.SceneDataUtil.applyFoggingToColor(swatchBorderColor, swatchBGColor);
      }
      context.set_shapeFillStyle(swatchFillColor.toString());
      context.set_strokeStyle(swatchBorderColor.toString());
      context.set_lineWidth($tab_CategoricalLegendView.$sizeSwatchBorderLineWidth);
      var centerX = areaWidth / 2;
      var centerY = areaHeight / 2;
      var radius = catLegendItem.size / 2;
      context.clearRect(0, 0, areaWidth, areaHeight);
      context.setClip({ x: 0, y: 1, w: areaWidth, h: areaHeight - 2 });
      switch (sizeLegendPM.primitiveType) {
        case 'shape':
        case 'circle':
        case 'pie': {
          context.beginPath();
          context.arc(centerX, centerY, radius, 0, Math.PI * 2, false);
          context.closePath();
          context.fill();
          context.beginPath();
          context.arc(centerX, centerY, radius, 0, Math.PI * 2, false);
          context.closePath();
          context.stroke();
          break;
        }
        case 'line':
        case 'gantt':
        case 'bar': {
          context.fillRect(centerX - radius, swatchTopPadding, catLegendItem.size, swatchHeight);
          break;
        }
        case 'square': {
          var left = centerX - radius;
          var top = centerY - radius;
          context.fillRect(left, top, catLegendItem.size, catLegendItem.size);
          context.strokeRect(left, top, catLegendItem.size, catLegendItem.size);
          break;
        }
        case 'text': {
          var textStyle = sizeLegendPM.swatchTextStyle;
          if (typeof(textStyle) === 'undefined') {
            textStyle = sizeLegendPM.textStyle;
          }
          tab.DisplayList2DRenderer.setTextProperties(context, textStyle, catLegendItem.size);
          context.set_textAlign('center');
          context.fillText1(tab.Strings.SizeLegendTextMarkSwatch, centerX, centerY);
          break;
        }
        default: {
          ss.Debug.fail('Unsupported primitive type: ' + sizeLegendPM.primitiveType);
          break;
        }
      }
      context.restore();
      itemTemplate.itemSwatch.get(0).id = sizeLegendPM.primitiveType.toString() + '_' + catLegendItem.size.toString();
      return catLegendItem;
    },
    $getColWidth: function CategoricalLegendView$GetColWidth(catlayoutPM) {
      if (catlayoutPM.legendLayout === 'grid' && catlayoutPM.legendSize.w < catlayoutPM.colWidth) {
        return catlayoutPM.legendSize.w;
      }
      return catlayoutPM.colWidth;
    },
    $drawItemText: function CategoricalLegendView$DrawItemText(itemPM, legendPM, itemTemplate) {
      var textStyle = legendPM.textStyle;
      var altTextColor = null;
      var itemBackgroundColor = '';
      if (this.get_catLegendViewModel().isSelected(itemPM)) {
        textStyle = legendPM.selectedTextStyleModel;
        itemBackgroundColor = legendPM.selectBgColor;
      }
      else if (this.get_catLegendViewModel().isLegendItemGrayed(itemPM)) {
        var swatchBGColor = this.get_catLegendViewModel().get_$swatchBackgroundColor();
        altTextColor = tab.SceneDataUtil.applyFoggingToColor(tab.ColorModel.fromColorCode(textStyle.color), swatchBGColor).toString();
      }
      var textYPos = legendPM.catLegendLayout.textOrigin.y;
      var textXPos = legendPM.catLegendLayout.textOrigin.x;
      var textAlignDir = 'left';
      var colWidth = this.$getColWidth(legendPM.catLegendLayout);
      var itemWidth = colWidth - textXPos;
      var labelHolderCssDict = {};
      if (textStyle.halign === 'h-align-right' || legendPM.catLegendLayout.rightJustify) {
        textAlignDir = 'right';
        labelHolderCssDict.overflow = 'inherit';
        var rightPos = Math.max(colWidth - textXPos - legendPM.catLegendLayout.maxItemSpan, 0);
        labelHolderCssDict.right = rightPos + 'px';
        itemWidth = colWidth - rightPos;
      }
      else {
        labelHolderCssDict.left = textXPos + 'px';
      }
      labelHolderCssDict.top = textYPos + 'px';
      labelHolderCssDict.width = itemWidth - 1 + 'px';
      labelHolderCssDict.bottom = '0px';
      labelHolderCssDict['text-align'] = textAlignDir;
      itemTemplate.itemLabelHolder.css(labelHolderCssDict);
      itemTemplate.itemLabel.css('background-color', itemBackgroundColor);
      itemTemplate.itemLabel.css(tab.FormattingConverters.makeFormatStyleDict(textStyle, altTextColor));
      itemTemplate.itemLabel.text(itemPM.text);
      itemTemplate.domRoot.attr('tabindex', '-1').attr('role', 'option').attr('aria-selected', this.get_catLegendViewModel().isSelected(itemPM).toString());
    }
  }, {
    setDomNodeStyleSize: function CategoricalLegendView$SetDomNodeStyleSize(domNode, width, height) {
      domNode.css('width', width + 'px');
      domNode.css('height', height + 'px');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CategoricalLegendViewModel
  var $tab_CategoricalLegendViewModel = global.tab.CategoricalLegendViewModel = ss.mkType($asm, 'tab.CategoricalLegendViewModel', function(catLegendModel, type, worksheetId, zoneVM) {
    this.legendType = null;
    this.$catLegendModel = null;
    this.$swatchBackgroundColor = null;
    this.$customShapesPending = null;
    this.$legendState = null;
    this.$focusIndex = 0;
    this.$cachedNumLegendItems = 0;
    this.selectionChanged = null;
    $tab_LegendBaseViewModel.call(this, worksheetId, zoneVM);
    this.legendType = type;
    this.$catLegendModel = catLegendModel;
    this.$catLegendModel.add_legendChanged(ss.mkdel(this, this.$handleModelChanged));
    this.$swatchBackgroundColor = ((this.legendType === 'color') ? tab.ColorModel.fromColorCode(this.get_$colorLegendPM().swatchBgColor) : this.get_$legendBackgroundColor());
    if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
      var $t1 = new $tab_LegendStateManagerWithSelectionPresModel(this.get_parentZoneVM(), this.get_visualModel(), this.$catLegendModel, this.get_legendTypeEnum());
      $t1.propertyChanged = ss.mkdel(this, this.$notifyPropertyChanged);
      $t1.selectionChanged = ss.mkdel(this, this.notifySelectionChanged);
      this.$legendState = $t1;
    }
    else {
      this.$legendState = new $tab_LegendStateManagerWithItemPresModel(this.get_parentZoneVM(), this.get_visualModel(), this.$catLegendModel, this.get_legendTypeEnum());
    }
    this.$handleModelChanged();
  }, {
    get_catLegendModel: function CategoricalLegendViewModel$get_CatLegendModel() {
      return this.$catLegendModel;
    },
    get_legendTypeEnum: function CategoricalLegendViewModel$get_LegendTypeEnum() {
      switch (this.legendType) {
        case 'color': {
          return 'color';
        }
        case 'shape': {
          return 'shape';
        }
        case 'size': {
          return 'size';
        }
        case 'map': {
          return 'map';
        }
      }
      tab.Log.get(this).warn('Unsupported legend type: %s', [this.legendType]);
      return 'color';
    },
    get_categoricalLegendPM: function CategoricalLegendViewModel$get_CategoricalLegendPM() {
      return this.$catLegendModel.get_catLegendPresModel();
    },
    get_fieldNames: function CategoricalLegendViewModel$get_FieldNames() {
      return this.get_categoricalLegendPM().legendNames;
    },
    get_numLegendItems: function CategoricalLegendViewModel$get_NumLegendItems() {
      var items = this.get_catLegendModel().get_items();
      return (ss.isNullOrUndefined(items) ? 0 : items.length);
    },
    get_presModelTitleInline: function CategoricalLegendViewModel$get_PresModelTitleInline() {
      return this.get_categoricalLegendPM().catLegendLayout.titleInline;
    },
    get_presModelTitleHtml: function CategoricalLegendViewModel$get_PresModelTitleHtml() {
      return this.get_categoricalLegendPM().titleHtml;
    },
    get_legendColumns: function CategoricalLegendViewModel$get_LegendColumns() {
      return this.get_catLegendModel().get_legendNames();
    },
    get_$swatchBackgroundColor: function CategoricalLegendViewModel$get_SwatchBackgroundColor() {
      return this.$swatchBackgroundColor || new tab.ColorModel(255, 255, 255, 1);
    },
    get_$legendBackgroundColor: function CategoricalLegendViewModel$get_LegendBackgroundColor() {
      var styledBox = this.get_categoricalLegendPM().styledBox;
      return (ss.isValue(styledBox.fillColor) ? tab.ColorModel.fromColorCode(styledBox.fillColor) : $tab_CategoricalLegendViewModel.$defaultBackgroundColor);
    },
    get_$colorLegendPM: function CategoricalLegendViewModel$get_ColorLegendPM() {
      ss.Debug.assert(this.legendType === 'color' || this.legendType === 'map', 'Should only ask for a legend of the right type');
      return this.$catLegendModel.get_catLegendPresModel();
    },
    get_$shapeLegendPM: function CategoricalLegendViewModel$get_ShapeLegendPM() {
      ss.Debug.assert(this.legendType === 'shape', 'Should only ask for a legend of the right type');
      return this.$catLegendModel.get_catLegendPresModel();
    },
    get_$sizeLegendPM: function CategoricalLegendViewModel$get_SizeLegendPM() {
      ss.Debug.assert(this.legendType === 'size', 'Should only ask for a legend of the right type');
      return this.$catLegendModel.get_catLegendPresModel();
    },
    get_regionType: function CategoricalLegendViewModel$get_RegionType() {
      var toRet = 'color';
      switch (this.legendType) {
        case 'color': {
          toRet = 'color';
          break;
        }
        case 'size': {
          toRet = 'size';
          break;
        }
        case 'shape': {
          toRet = 'shape';
          break;
        }
        case 'map': {
          toRet = 'map';
          break;
        }
        default: {
          ss.Debug.fail('unsupported legend type: ' + this.legendType);
          break;
        }
      }
      return toRet;
    },
    get_borderWidth: function CategoricalLegendViewModel$get_BorderWidth() {
      var toRet = this.get_categoricalLegendPM().styledBox.uw;
      if (this.get_categoricalLegendPM().styledBox.borderStyle === 'bs-none') {
        toRet = 0;
      }
      return toRet;
    },
    get_presModelTitleHeight: function CategoricalLegendViewModel$get_PresModelTitleHeight() {
      return this.get_categoricalLegendPM().catLegendLayout.titleHeight;
    },
    get_presModelTitleWidth: function CategoricalLegendViewModel$get_PresModelTitleWidth() {
      return this.get_categoricalLegendPM().catLegendLayout.titleWidth;
    },
    get_$isHighlightingEnabled: function CategoricalLegendViewModel$get_IsHighlightingEnabled() {
      return this.get_catLegendModel().get_isHighlightEnabled();
    },
    get_shouldShowContextMenu: function CategoricalLegendViewModel$get_ShouldShowContextMenu() {
      return this.get_catLegendModel().get_isContextMenuAllowed();
    },
    get_shouldShowHighlighter: function CategoricalLegendViewModel$get_ShouldShowHighlighter() {
      return this.get_catLegendModel().get_isHighlightAllowed();
    },
    get_focusIndex: function CategoricalLegendViewModel$get_FocusIndex() {
      if (this.get_numLegendItems() !== this.$cachedNumLegendItems) {
        this.$focusIndex = 0;
        this.$cachedNumLegendItems = this.get_numLegendItems();
      }
      return this.$focusIndex;
    },
    set_focusIndex: function CategoricalLegendViewModel$set_FocusIndex(value) {
      this.$cachedNumLegendItems = this.get_numLegendItems();
      if (this.$focusIndex === value) {
        return;
      }
      this.$focusIndex = ss.imod(value, this.get_numLegendItems());
      if (this.$focusIndex < 0) {
        this.$focusIndex += this.get_numLegendItems();
      }
      this.notifyPropertyChanged($tab_CategoricalLegendViewModel.$focusIndexProperty);
    },
    dispose: function CategoricalLegendViewModel$Dispose() {
      $tab_LegendBaseViewModel.prototype.dispose.call(this);
      this.$catLegendModel.remove_legendChanged(ss.mkdel(this, this.$handleModelChanged));
      this.$legendState.dispose();
      if (ss.isValue(this.$customShapesPending)) {
        this.$customShapesPending.dispose();
      }
    },
    isLegendItemGrayed: function CategoricalLegendViewModel$IsLegendItemGrayed(item) {
      return this.$legendState.isLegendItemGrayed(item);
    },
    isSelected: function CategoricalLegendViewModel$IsSelected(item) {
      return this.$legendState.isSelected(item);
    },
    toggleHighlighting: function CategoricalLegendViewModel$ToggleHighlighting() {
      tab.SelectionClientCommands.toggleLegendHighlight(this.get_parentZoneVM().get_zoneId(), this.get_$visualId(), this.get_regionType(), this.get_legendColumns(), null);
    },
    selectItem: function CategoricalLegendViewModel$SelectItem(item, action, zoneSelectionType) {
      var $t1 = [];
      $t1.push(item);
      var items = $t1;
      return this.selectItems(items, action, zoneSelectionType);
    },
    selectItems: function CategoricalLegendViewModel$SelectItems(items, action, zoneSelectionType) {
      return this.$legendState.selectItems(items, action, zoneSelectionType);
    },
    selectNone: function CategoricalLegendViewModel$SelectNone(action, zoneSelectionType) {
      var items = [];
      return this.selectItems(items, action, zoneSelectionType);
    },
    getLegendItem: function CategoricalLegendViewModel$GetLegendItem(itemIdx) {
      var items = this.get_catLegendModel().get_items();
      if (ss.isNullOrUndefined(items) || itemIdx < 0 || itemIdx >= items.length) {
        return null;
      }
      return items[itemIdx];
    },
    $handleModelChanged: function CategoricalLegendViewModel$HandleModelChanged() {
      if (this.legendType === 'shape') {
        var shapeIds = new Set();
        var shapeLegendPM = this.get_$shapeLegendPM();
        for (var $t1 = 0; $t1 < shapeLegendPM.shapeLegendItems.length; $t1++) {
          var catLegendItem = shapeLegendPM.shapeLegendItems[$t1];
          if (tab.SceneDataUtil.isCustomShape(catLegendItem.shapeId)) {
            shapeIds.add(catLegendItem.shapeId);
          }
        }
        if (ss.isNullOrUndefined(this.$customShapesPending)) {
          this.$customShapesPending = new tab.ShapeDependencyManager(ss.mkdel(this, function() {
            this.notifyPropertyChanged($tab_CategoricalLegendViewModel.$customShapesLoaded);
          }));
        }
        this.$customShapesPending.initialize(tab.SetUtilities.getValues(ss.UInt32).call(null, shapeIds));
      }
      this.notifyPropertyChanged(null);
    },
    notifySelectionChanged: function CategoricalLegendViewModel$NotifySelectionChanged(changedItems) {
      if (!ss.staticEquals(this.selectionChanged, null)) {
        this.selectionChanged(changedItems);
      }
    },
    $notifyPropertyChanged: function CategoricalLegendViewModel$NotifyPropertyChanged() {
      this.notifyPropertyChanged($tab_CategoricalLegendViewModel.$propertyItems);
    },
    showWebCategoricalColorDialog: function CategoricalLegendViewModel$ShowWebCategoricalColorDialog() {
      var $t1 = new tab.GetWebCategoricalColorDialogCmd();
      $t1.cmdParams['fieldVector'] = this.get_fieldNames();
      $t1.invoke();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CategoricalSelection
  var $tab_CategoricalSelection = global.tab.CategoricalSelection = ss.mkType($asm, 'tab.CategoricalSelection', function(widget) {
    this.$categoricalSelectionWidget = null;
    this._anchorIndex = -1;
    this._selectedIndexes = [];
    this._lastRangeSelectionIndex = -1;
    this.changelist = null;
    this._applyTimer = null;
    this.$categoricalSelectionWidget = widget;
  }, {
    get_selectedIndexes: function CategoricalSelection$get_SelectedIndexes() {
      return this._selectedIndexes;
    },
    clearRangeAnchor: function CategoricalSelection$ClearRangeAnchor() {
      if (this._anchorIndex >= 0) {
        var node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(this._anchorIndex);
        if (!!node) {
          var cssNode = $tab_FilterItemUtil.filterItem.getCssNode(node);
          if (!!cssNode) {
            if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
              this._deselectItem(this._anchorIndex);
            }
            else {
              $(node).removeClass($tab_CategoricalSelection.$anchorClass);
            }
          }
        }
      }
      this._anchorIndex = this._lastRangeSelectionIndex = -1;
    },
    clearRangeAnchorAndSelection: function CategoricalSelection$ClearRangeAnchorAndSelection() {
      this.clearRangeAnchor();
      this._clearSelection();
    },
    refreshRangeAnchorAndSelection: function CategoricalSelection$RefreshRangeAnchorAndSelection() {
      if (this._anchorIndex >= 0) {
        var node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(this._anchorIndex);
        if (!!node) {
          var cssNode = $tab_FilterItemUtil.filterItem.getCssNode(node);
          if (!!cssNode) {
            if (!tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
              $(node).addClass($tab_CategoricalSelection.$anchorClass);
            }
          }
        }
        else {
          this._anchorIndex = -1;
        }
      }
      for (var i = this._selectedIndexes.length - 1; i >= 0; --i) {
        var selectedIndex = this._selectedIndexes[i];
        var selectedNode = this.$categoricalSelectionWidget.fetchChildNodeByIndex(selectedIndex);
        if (!!selectedNode) {
          this._selectItem(selectedIndex);
        }
        else {
          this._selectedIndexes.splice(i, 1);
        }
      }
    },
    onListItemClick: function CategoricalSelection$OnListItemClick(evt) {
      var node = $tab_FilterItemUtil.filterItem.getNodeFromEvent(evt);
      if (!!!node) {
        return;
      }
      var checkboxClick = $(evt.target).is('input[type=checkbox]');
      var radioClick = $(evt.target).is('input[type=radio]');
      if (radioClick) {
        evt.target.checked = true;
      }
      if (checkboxClick || radioClick) {
        $tab_FilterItemUtil.filterItem.syncCssToCheckState(node);
        this.$categoricalSelectionWidget.handleItemClick(node);
      }
      var targetIndex = $tab_FilterItemUtil.filterItem.getIndex(node);
      if (ss.isNullOrUndefined(targetIndex) || targetIndex < 0) {
        return;
      }
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        if (!$tab_FilterItemUtil.filterItem.isTypeInListItem(node)) {
          this.$handleClick(evt, targetIndex, checkboxClick || radioClick);
        }
      }
      else if ($tab_FilterItemUtil.filterItem.isTypeInListItem(node)) {
        this.$handleMultiSelection(evt, targetIndex);
      }
      else {
        this.$handleClick(evt, targetIndex, checkboxClick || radioClick);
      }
    },
    $handleClick: function CategoricalSelection$HandleClick(evt, targetIndex, checkboxOrRadioClick) {
      if (!!!this.changelist) {
        this.changelist = new $tab_Changelist();
      }
      if (checkboxOrRadioClick) {
        this.$handleCheckboxOrRadioClick(evt, targetIndex);
      }
      else if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        this.handleSelection(evt, targetIndex, false);
      }
      if (!tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        this._updateRangeAnchor(targetIndex);
      }
    },
    $handleCheckboxOrRadioClick: function CategoricalSelection$HandleCheckboxOrRadioClick(evt, targetIndex) {
      var node = $tab_FilterItemUtil.filterItem.getNodeFromEvent(evt);
      if (tab.ApplicationModel.get_instance().get_isLocalRenderMode() && !this.$categoricalSelectionWidget.shouldDeferChanges() && this.$categoricalSelectionWidget.get_quickFilter().get_identifier().get_membershipTarget() === 'filter') {
        var checkedAliases = [];
        var table = this.$categoricalSelectionWidget.get_filterTable();
        if (!!table && table.actual_size === table.tuples.length) {
          var tuples = table.tuples;
          var checkedIndexes = this._getCheckedIndexes(tuples, node, this.changelist);
          for (var i = 0, len = checkedIndexes.length; i < len; i++) {
            var tupleId = checkedIndexes[i];
            var alias = $tab_FilterItemUtil.getAliasForTuple(tuples[tupleId]);
            checkedAliases.push(alias);
          }
          var catFilter = this.$categoricalSelectionWidget.get_quickFilter();
          var filterData = new tab.LegacyCategoricalQuickFilterData(catFilter.get_oFilter().targetSheets, catFilter.get_identifier(), catFilter.get_oFilter().exclude, ss.cast(checkedAliases, Array));
          tab.FilterClientCommands.updateCategoricalFilter(filterData);
        }
      }
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        this.handleSelection(evt, targetIndex, true);
      }
      this.$lazyLoadTiles(node, evt, targetIndex);
      if (this.$categoricalSelectionWidget.shouldDeferChanges()) {
        this.$categoricalSelectionWidget.applyChangesByChangelist(this.changelist);
        this.changelist.reset();
      }
      else {
        this.notifyChange(this.getDoChangeFunc());
      }
    },
    $lazyLoadTiles: function CategoricalSelection$LazyLoadTiles(node, evt, targetIndex) {
      var change = new $tab_RawChange();
      var newCheckState = $tab_FilterItemUtil.filterItem.isChecked(node);
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        if (this._selectedIndexes.indexOf(targetIndex) === -1) {
          change.setSingle(targetIndex, newCheckState);
          this.changelist.addChange(change);
          return;
        }
        for (var i = 0, length = this._selectedIndexes.length; i < length; i++) {
          node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(this._selectedIndexes[i]);
          if (!!node) {
            if (this._selectedIndexes[i] !== targetIndex) {
              this.$categoricalSelectionWidget.handleClickIfPending(node);
            }
            $tab_FilterItemUtil.filterItem.setChecked(node, newCheckState);
          }
          change = new $tab_RawChange();
          change.setSingle(this._selectedIndexes[i], newCheckState);
          this.changelist.addChange(change);
        }
      }
      else if ($tab_FilterItemUtil.filterItem.isTiled(node)) {
        if (evt.shiftKey === true) {
          this._updateCheckboxRangeFromAnchorByIndex(targetIndex);
          var fromIndex = ((this._anchorIndex > -1) ? this._anchorIndex : targetIndex);
          change.setRange(new tab.IntegerRange(fromIndex, targetIndex), newCheckState);
          this.changelist.addChange(change);
        }
        else {
          change.setSingle(targetIndex, newCheckState);
          this.changelist.addChange(change);
        }
      }
      else if (evt.shiftKey === true && this._anchorIndex > -1) {
        this._updateCheckboxRangeFromAnchor(targetIndex);
      }
      else {
        change.setSingle(targetIndex, newCheckState);
        this.changelist.addChange(change);
      }
    },
    handleSelection: function CategoricalSelection$HandleSelection(evt, targetIndex, checkboxOrRadioClick) {
      if (evt.shiftKey && this._anchorIndex >= 0) {
        this._selectRangeFromAnchor(targetIndex);
      }
      else if ((BrowserSupport.BrowserSupport.IsMac() ? evt.metaKey : evt.ctrlKey) && !this.$categoricalSelectionWidget.isSingleSelect()) {
        this._toggleItemSelection(targetIndex);
        this._updateRangeAnchor(targetIndex);
      }
      else if (!checkboxOrRadioClick && this._selectedIndexes.length === 1 && this._anchorIndex === targetIndex && this._anchorIndex >= 0) {
        this._toggleItemSelection(targetIndex);
      }
      else {
        if (!checkboxOrRadioClick || this._selectedIndexes.indexOf(targetIndex) === -1) {
          this._clearSelection();
        }
        this._updateRangeAnchor(targetIndex);
        this._selectItem(targetIndex);
      }
    },
    $handleMultiSelection: function CategoricalSelection$HandleMultiSelection(evt, targetIndex) {
      if (evt.shiftKey && this._anchorIndex >= 0) {
        this._selectRangeFromAnchor(targetIndex);
      }
      else if ((BrowserSupport.BrowserSupport.IsMac() ? evt.metaKey : evt.ctrlKey)) {
        this._toggleItemSelection(targetIndex);
        this._updateRangeAnchor(targetIndex);
      }
      else {
        this._clearSelection();
        this._updateRangeAnchor(targetIndex);
        this._selectItem(targetIndex);
      }
    },
    handleSimpleSelection: function CategoricalSelection$HandleSimpleSelection(evt, targetIndex) {
      if (evt.shiftKey && this._anchorIndex >= 0) {
        this._selectRangeFromAnchor(targetIndex);
      }
      else {
        this._clearSelection();
        this._updateRangeAnchor(targetIndex);
        this._selectItem(targetIndex);
      }
    },
    getDoChangeFunc: function CategoricalSelection$GetDoChangeFunc() {
      var callback = ss.mkdel(this, function() {
        this.$categoricalSelectionWidget.applyChangesByChangelist(this.changelist);
        this.changelist.reset();
      });
      return callback;
    },
    notifyChange: function CategoricalSelection$NotifyChange(callback) {
      this._applyTimer = tab.MiscUtil.clearTimeout(this._applyTimer);
      this.$categoricalSelectionWidget.updateStateIfNeeded();
      this._applyTimer = tab.WindowHelper.setTimeout(callback, this.$categoricalSelectionWidget.get_applyDelay());
    },
    cancelPendingChange: function CategoricalSelection$CancelPendingChange() {
      tab.MiscUtil.clearTimeout(this._applyTimer);
      this._applyTimer = null;
    },
    _getCheckedIndexes: function CategoricalSelection$GetCheckedIndexes(tuples, clickedItem, currentChangelist) {
      var results = [];
      var catOrHierFilter = this.$categoricalSelectionWidget.get_quickFilter();
      var multiSelect = catOrHierFilter.get_mode() === 'checklist' || catOrHierFilter.get_mode() === 'checkdropdown';
      var usingFilteringSearchWidget = multiSelect || catOrHierFilter.get_mode() === 'radiolist' || catOrHierFilter.get_mode() === 'dropdown';
      var checklistChangelist = null;
      if (multiSelect) {
        checklistChangelist = currentChangelist.compileForChecklist(null);
      }
      for (var i = 0, len = tuples.length; i < len; i++) {
        var item = this.$categoricalSelectionWidget.fetchChildNodeByIndex(i);
        if (!!item) {
          if ($tab_FilterItemUtil.filterItem.isChecked(item)) {
            results.push(i);
          }
        }
        else if (usingFilteringSearchWidget) {
          var originalState = tuples[i].s;
          if ($tab_FilterItemUtil.filterItem.getIndex(clickedItem) === i) {
            if ($tab_FilterItemUtil.filterItem.isChecked(clickedItem)) {
              results.push(i);
            }
          }
          else if (multiSelect) {
            if (ss.contains(checklistChangelist.select, i)) {
              results.push(i);
            }
            else if (!ss.contains(checklistChangelist.deselect, i) && originalState) {
              results.push(i);
            }
          }
        }
      }
      return results;
    },
    forEachSelected: function CategoricalSelection$ForEachSelected(itemCallback) {
      if (ss.isNullOrUndefined(itemCallback) || typeof(itemCallback) !== 'function') {
        return;
      }
      for (var i = 0, length = this._selectedIndexes.length; i < length; i++) {
        var index = this._selectedIndexes[i];
        var node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(index);
        itemCallback(index, node);
      }
    },
    _selectRangeFromAnchor: function CategoricalSelection$SelectRangeFromAnchor(toIndex) {
      var addAboveIndex;
      var addBelowIndex;
      var anchor = this._anchorIndex;
      var removeAboveIndex;
      var removeBelowIndex;
      var last = ((this._lastRangeSelectionIndex >= 0) ? this._lastRangeSelectionIndex : anchor);
      var earlier = Math.min(anchor, toIndex);
      var later = Math.max(anchor, toIndex);
      for (addAboveIndex = toIndex; addAboveIndex <= Math.min(anchor, last); addAboveIndex++) {
        this._selectItem(addAboveIndex);
      }
      for (removeAboveIndex = last; removeAboveIndex < earlier; removeAboveIndex++) {
        this._deselectItem(removeAboveIndex);
      }
      for (addBelowIndex = Math.max(anchor, last); addBelowIndex <= toIndex; addBelowIndex++) {
        this._selectItem(addBelowIndex);
      }
      for (removeBelowIndex = later + 1; removeBelowIndex <= last; removeBelowIndex++) {
        this._deselectItem(removeBelowIndex);
      }
      this._lastRangeSelectionIndex = toIndex;
    },
    _toggleItemSelection: function CategoricalSelection$ToggleItemSelection(index) {
      var node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(index);
      if ($tab_FilterItemUtil.filterItem.isSelected(node)) {
        this._deselectItem(index);
      }
      else {
        this._selectItem(index);
      }
    },
    _selectItem: function CategoricalSelection$SelectItem(index) {
      var node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(index);
      if (ss.isNullOrUndefined(node) && tab.FeatureFlags.isEnabled('WebCategoricalSelectionSearchResults')) {
        return;
      }
      var searchResults;
      $tab_FilterItemUtil.filterItem.setSelected(node, true);
      searchResults = tableau.util.binarySearch(ss.Int32).call(null, index, this._selectedIndexes);
      if (!searchResults.found) {
        this._selectedIndexes.splice(searchResults.index, 0, index);
      }
    },
    _deselectItem: function CategoricalSelection$DeselectItem(index) {
      var node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(index);
      var searchResults;
      $tab_FilterItemUtil.filterItem.setSelected(node, false);
      searchResults = tableau.util.binarySearch(ss.Int32).call(null, index, this._selectedIndexes);
      if (searchResults.found) {
        this._selectedIndexes.splice(searchResults.index, 1);
      }
    },
    _clearSelection: function CategoricalSelection$ClearSelection() {
      for (var i = this._selectedIndexes.length - 1; i >= 0; --i) {
        this._deselectItem(this._selectedIndexes[i]);
      }
      this._selectedIndexes = [];
    },
    _updateCheckboxRangeFromAnchor: function CategoricalSelection$UpdateCheckboxRangeFromAnchor(toIndex) {
      var earlier = Math.min(this._anchorIndex, toIndex);
      var later = Math.max(this._anchorIndex, toIndex);
      var node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(earlier);
      var endNode = this.$categoricalSelectionWidget.fetchChildNodeByIndex(later);
      var newCheckState = $tab_FilterItemUtil.filterItem.isChecked(this.$categoricalSelectionWidget.fetchChildNodeByIndex(toIndex));
      var change;
      while (!!node && !ss.referenceEquals(node, endNode)) {
        $tab_FilterItemUtil.filterItem.setChecked(node, newCheckState);
        change = new $tab_RawChange();
        change.setSingle($tab_FilterItemUtil.filterItem.getIndex(node), newCheckState);
        this.changelist.addChange(change);
        node = ss.cast(node.nextSibling, HTMLElement);
      }
      $tab_FilterItemUtil.filterItem.setChecked(endNode, newCheckState);
      change = new $tab_RawChange();
      change.setSingle($tab_FilterItemUtil.filterItem.getIndex(endNode), newCheckState);
      this.changelist.addChange(change);
    },
    _updateCheckboxRangeFromAnchorByIndex: function CategoricalSelection$UpdateCheckboxRangeFromAnchorByIndex(toIndex) {
      var earlier = Math.min(this._anchorIndex, toIndex);
      var later = Math.max(this._anchorIndex, toIndex);
      var newCheckState = $tab_FilterItemUtil.filterItem.isChecked(this.$categoricalSelectionWidget.fetchChildNodeByIndex(toIndex));
      var i;
      var node;
      for (i = earlier; i <= later; ++i) {
        node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(i);
        if (!!node) {
          this.$categoricalSelectionWidget.handleClickIfPending(node);
          $tab_FilterItemUtil.filterItem.setChecked(node, newCheckState);
        }
      }
    },
    reselectValidFilterItems: function CategoricalSelection$ReselectValidFilterItems() {
      for (var i = this._selectedIndexes.length - 1; i >= 0; i--) {
        var node = this.$categoricalSelectionWidget.fetchChildNodeByIndex(this._selectedIndexes[i]);
        if (ss.isValue(node)) {
          this._selectItem(this._selectedIndexes[i]);
        }
        else {
          this._deselectItem(this._selectedIndexes[i]);
        }
      }
    },
    _updateRangeAnchor: function CategoricalSelection$UpdateRangeAnchor(anchorIndex) {
      if (this.$categoricalSelectionWidget.isSingleSelect()) {
        return;
      }
      this._lastRangeSelectionIndex = -1;
      if (this._anchorIndex === anchorIndex && anchorIndex >= 0) {
        return;
      }
      var anchorNode;
      if (!tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        if (this._anchorIndex >= 0) {
          anchorNode = this.$categoricalSelectionWidget.fetchChildNodeByIndex(this._anchorIndex);
          if (!!anchorNode) {
            $($tab_FilterItemUtil.filterItem.getCssNode(anchorNode)).removeClass($tab_CategoricalSelection.$anchorClass);
          }
        }
      }
      this._anchorIndex = anchorIndex;
      anchorNode = this.$categoricalSelectionWidget.fetchChildNodeByIndex(anchorIndex);
      if (!!anchorNode) {
        if (!tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
          $($tab_FilterItemUtil.filterItem.getCssNode(anchorNode)).addClass($tab_CategoricalSelection.$anchorClass);
        }
      }
      else {
        this._anchorIndex = -1;
      }
    },
    isSelected: function CategoricalSelection$IsSelected(node) {
      var hasSelectedClass = node.classList.contains('FISelected');
      var isIndexSelected = this.get_selectedIndexes().indexOf($tab_FilterItemUtil.filterItem.getIndex(node)) !== -1;
      return hasSelectedClass && isIndexSelected;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.Changelist
  var $tab_Changelist = global.tab.Changelist = ss.mkType($asm, 'tab.Changelist', function() {
    this.$changes = null;
    this.$changes = [];
  }, {
    addChange: function Changelist$AddChange(change) {
      this.$changes.push(change);
    },
    compileForChecklist: function Changelist$CompileForChecklist(domain) {
      var nonDuplicates = {};
      for (var i = 0; i < this.$changes.length; ++i) {
        var rc = this.$changes[i];
        switch (rc.type) {
          case 0: {
            nonDuplicates[rc.index] = rc.checkState;
            break;
          }
          case 1: {
            var range = rc.range;
            var newCheckState = rc.checkState;
            var from = Math.min(range.get_from(), range.get_to());
            var to = Math.max(range.get_from(), range.get_to());
            for (var j = from; j <= to; ++j) {
              nonDuplicates[j] = newCheckState;
            }
            break;
          }
        }
      }
      var selectList = [];
      var deselectList = [];
      var $t1 = new ss.ObjectEnumerator(nonDuplicates);
      try {
        while ($t1.moveNext()) {
          var pair = $t1.current();
          var index = parseInt(ss.cast(pair.key, String), 10);
          var state = pair.value;
          if (state) {
            selectList.push(index);
          }
          else {
            deselectList.push(index);
          }
        }
      }
      finally {
        $t1.dispose();
      }
      var $t2 = new $tab_CompiledChecklistChangelist();
      $t2.select = selectList;
      $t2.deselect = deselectList;
      $t2.domain = domain;
      var output = $t2;
      return output;
    },
    compileForRadiolist: function Changelist$CompileForRadiolist(domain) {
      var lastChangeIndex = this.$changes.length - 1;
      var lastChange = this.$changes[lastChangeIndex];
      var $t1 = new $tab_CompiledRadiolistChangelist();
      $t1.index = lastChange.index;
      $t1.domain = domain;
      var output = $t1;
      return output;
    },
    reset: function Changelist$Reset() {
      ss.clear(this.$changes);
    },
    appendChangelist: function Changelist$AppendChangelist(other) {
      for (var i = 0; i < other.$changes.length; i++) {
        this.$changes.push(other.$changes[i]);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ChangeType
  var $tab_ChangeType = global.tab.ChangeType = ss.mkEnum($asm, 'tab.ChangeType', { single: 0, range: 1 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CheckDropdown
  var $tab_CheckDropdown = global.tab.CheckDropdown = ss.mkType($asm, 'tab.CheckDropdown', function(parent, div, attrs) {
    $tab_BaseDropdown.call(this, parent, div, attrs);
    this.set_itemFormatter(ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.formatChecklistFilterItemHtml));
  }, {
    instantiate: function CheckDropdown$Instantiate(newTuples, itemName, facet) {
      this.setUpForPendingChanges();
      this.inherited(arguments);
    },
    fillMenu: function CheckDropdown$FillMenu(menu) {
      this.inherited(arguments);
      this.appendApplyCancelButtons(menu);
    },
    createListElement: function CheckDropdown$CreateListElement(parentDiv, tuples, itemName, facet) {
      var checklistDiv = $(parentDiv);
      if (this.shouldUseAllItem() && tuples.length > 0) {
        $tab_Checklist.addAllItem(checklistDiv, this.parent, itemName, facet, $tab_Checklist.shouldCheckAllItem(this.parent.get_oFilter(), this.pendingManager), ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.formatChecklistFilterItemHtml));
      }
      {
        if (ss.isValue(this.tiledWidget)) {
          this.tiledWidget.destroy();
        }
        this.tiledWidget = $tab_TiledWidgetFactory.createChecklist(this.parent, tuples, parentDiv, itemName, this.get_lineHeight());
      }
      {
        var mouseDisposable = spiff.EventUtil.bindWithDispose(checklistDiv, 'click', ss.mkdel(this.parent, this.parent.onListItemClick));
        this.disposables.add$1(mouseDisposable);
        var touchDisposable = spiff.EventUtil.bindWithDispose(checklistDiv, 'touchend', ss.mkdel(this.parent, this.parent.onListItemClick));
        this.disposables.add$1(touchDisposable);
      }
      {
        if (!tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
          checklistDiv.on('keyup', ss.mkdel(this, this.$onKeyUp));
        }
      }
      checklistDiv.parent().toggleClass('CFDropdownNoItems', tuples.length === 0);
      if (tuples.length === 0) {
        checklistDiv.text(tab.Strings.QuickFilterNoItems);
      }
    },
    $onKeyUp: function CheckDropdown$OnKeyUp(e) {
      switch (e.which) {
        case 13:
        case 32: {
          this.parent.onListItemClick(e);
          break;
        }
        default: {
          return;
        }
      }
      e.stopPropagation();
      e.preventDefault();
    },
    resetPendingVisuals: function CheckDropdown$ResetPendingVisuals(resetCheckState) {
      var jqueryDiv;
      if (ss.isValue(this.searchBox) && this.searchBox.isShowingResults()) {
        jqueryDiv = this.menuNode.children('.tiledContent');
      }
      else {
        jqueryDiv = this.menuNode.find('.tile');
      }
      if (ss.isNullOrUndefined(jqueryDiv)) {
        return;
      }
      var $t1 = jqueryDiv.children().get();
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var checkbox = $t1[$t2];
        if ($tab_FilterItemUtil.filterItem.isPending(checkbox)) {
          $tab_FilterItemUtil.filterItem.togglePendingState(checkbox);
          if (resetCheckState) {
            $tab_FilterItemUtil.filterItem.setChecked(checkbox, !$tab_FilterItemUtil.filterItem.isChecked(checkbox));
          }
        }
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.Checklist
  var $tab_Checklist = global.tab.Checklist = ss.mkType($asm, 'tab.Checklist', function(parent, div, attrs) {
    this.checkListContainer = null;
    this.$searchBox = null;
    $tab_BaseMode.call(this, parent, div, attrs);
    this.set_itemFormatter($tab_Checklist.getFilterItemHtml);
  }, {
    get_scrollNode: function Checklist$get_ScrollNode() {
      return this.checkListContainer;
    },
    instantiate: function Checklist$Instantiate(newTuples, itemName, facet) {
      this.setUpForPendingChanges();
      this.div.innerHTML = '';
      if (this.parent.get_searchWidget().get_dijitClassName().indexOf('FilteringSearchWidget') < 0) {
        tab.Log.get(this).error('Checklist catmode Categorical search widget must be a FilteringSearchWidget', []);
      }
      this.$searchBox = this.parent.get_searchWidget();
      this.$searchBox.setStyle(2);
      var jqueryDiv = $(this.div);
      this.$searchBox.startupAndAppendTo(jqueryDiv);
      this.$searchBox.hideUI();
      jqueryDiv.addClass('CFOuterContainer');
      var cl = $('<div></div>').addClass('CFInnerContainer').addClass('tab-ctrl-formatted-text');
      if (BrowserSupport.BrowserSupport.IsFF()) {
        cl.attr('tabindex', '-1');
      }
      jqueryDiv.append(cl);
      this.checkListContainer = cl.get(0);
      this.createChecklist(this.checkListContainer, newTuples, itemName, facet);
      this.div.addEventListener('focus', this.listItemFocusHandler, true);
      this.disposables.add(ss.mkdel(this, function() {
        this.div.removeEventListener('focus', this.listItemFocusHandler, true);
      }));
      this.disposables.add$1(spiff.EventUtil.bindWithDispose($(this.div), 'click', ss.mkdel(this.parent, this.parent.onListItemClick)));
      this.appendApplyCancelButtons($(this.div));
      var checkGroup = this.checkListContainer.querySelector('[role=listbox]');
      if (ss.isValue(checkGroup)) {
        checkGroup.setAttribute('aria-labelledby', this.parent.get_titleDomId());
      }
    },
    resetContent: function Checklist$ResetContent(tuples, itemName, facet) {
      var jqueryDiv = $(this.checkListContainer);
      jqueryDiv.empty();
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.destroy();
        this.tiledWidget = null;
      }
      this.createChecklist(this.checkListContainer, tuples, itemName, facet);
      this.appendApplyCancelButtons($(this.div));
    },
    updateContent: function Checklist$UpdateContent(data) {
      var hadFocus = $.contains(this.div, document.activeElement);
      var results = ((data.length > 0) ? data.join('') : this.$searchBox.get_noMatchHtml());
      var jqueryDiv = $(this.checkListContainer);
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.destroy();
        this.tiledWidget = null;
      }
      jqueryDiv.html(results);
      this.updateTabIndexes(this.div, hadFocus);
    },
    shouldNotReinstantiate: function Checklist$ShouldNotReinstantiate() {
      return ss.isValue(this.$searchBox) && this.$searchBox.isShowingResults();
    },
    layout: function Checklist$Layout(contentSize, horizontalLayout) {
      this.inherited(arguments);
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.updateViewport(contentSize.w, contentSize.h);
      }
      var searchHeight = ((ss.isValue(this.$searchBox) && this.$searchBox.get_isVisible()) ? dojo.marginBox(this.$searchBox.domNode).h : 0);
      var applyHeight = 0;
      if (this.parent.shouldDeferChanges()) {
        applyHeight = dojo.marginBox(this.apply.element.get(0)).h;
        this.layoutApplyButton($(this.checkListContainer));
      }
      if (ss.isValue(this.checkListContainer)) {
        this.checkListContainer.style.height = this.div.clientHeight - searchHeight - applyHeight + 'px';
      }
    },
    destroy: function Checklist$Destroy() {
      this.dispose();
      if (ss.isValue(this.$searchBox)) {
        this.$searchBox.destroy();
      }
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.destroy();
      }
      this.tiledWidget = null;
    },
    fetchChildNodeByIndex: function Checklist$FetchChildNodeByIndex(index) {
      if (ss.isValue(this.tiledWidget)) {
        return this.tiledWidget.getElement(index);
      }
      else {
        return this.getNonTiledElement(index, this.checkListContainer);
      }
    },
    createChecklist: function Checklist$CreateChecklist(parentDiv, tuples, itemName, facet) {
      if (this.shouldUseAllItem() && tuples.length > 0) {
        $tab_Checklist.addAllItem($(parentDiv), this.parent, itemName, facet, $tab_Checklist.shouldCheckAllItem(this.parent.get_oFilter(), this.pendingManager), ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.formatChecklistFilterItemHtml));
      }
      {
        if (ss.isValue(this.tiledWidget)) {
          this.tiledWidget.destroy();
        }
        this.tiledWidget = $tab_TiledWidgetFactory.createChecklist(this.parent, tuples, parentDiv, itemName, this.get_lineHeight());
      }
    },
    fetchAllItem: function Checklist$FetchAllItem() {
      if (ss.isValue(this.checkListContainer)) {
        return ss.cast(this.checkListContainer.firstChild, HTMLElement);
      }
      else {
        return null;
      }
    },
    resetPendingVisuals: function Checklist$ResetPendingVisuals(resetCheckState) {
      var jqueryDiv;
      if (ss.isValue(this.$searchBox) && this.$searchBox.isShowingResults()) {
        jqueryDiv = $(this.checkListContainer);
      }
      else {
        jqueryDiv = $(this.checkListContainer).find('.tile');
      }
      if (ss.isNullOrUndefined(jqueryDiv)) {
        return;
      }
      var $t1 = jqueryDiv.children().get();
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var checkbox = $t1[$t2];
        if ($tab_FilterItemUtil.filterItem.isPending(checkbox)) {
          $tab_FilterItemUtil.filterItem.togglePendingState(checkbox);
          if (resetCheckState) {
            $tab_FilterItemUtil.filterItem.setChecked(checkbox, !$tab_FilterItemUtil.filterItem.isChecked(checkbox));
          }
        }
      }
    }
  }, {
    addAllItem: function Checklist$AddAllItem(checklistDiv, filter, itemName, allFacet, isChecked, formatter) {
      var allDiv = $tab_FilterItemUtil.getAllItemHtml(filter, itemName, allFacet, isChecked, formatter);
      var div = checklistDiv.append($(allDiv).addClass('tab-ctrl-formatted-text').addClass('all-item'));
      $tab_FilterItemUtil.filterItem.setChecked(div.children().get(0), isChecked);
    },
    shouldCheckAllItem: function Checklist$ShouldCheckAllItem(ofilter, pendingManager) {
      if (ss.isValue(pendingManager) && ss.isValue(pendingManager.get_allItemCheckState())) {
        return ss.unbox(pendingManager.get_allItemCheckState());
      }
      return ofilter.all || ofilter.allChecked && !ofilter.exclude || ofilter.allNotChecked && ofilter.exclude;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ChecklistContentFormatter
  var $tab_ChecklistContentFormatter = global.tab.ChecklistContentFormatter = ss.mkType($asm, 'tab.ChecklistContentFormatter', function(filter, itemName, itemFormatter) {
    $tab_SimpleListContentFormatter.call(this, filter, itemName, itemFormatter);
    this.tileHtml = "<div id='{1}' role='listbox' aria-multiselectable='true' class=\"tile tab-ctrl-formatted-text\" style=\"top: {0}px; position: absolute; width: 100%;\">";
  }, {
    isValid: function ChecklistContentFormatter$IsValid(data) {
      var tuples = ss.safeCast(data, Array);
      return ss.isValue(tuples) && tuples.length !== 0;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CompiledChecklistChangelist
  var $tab_CompiledChecklistChangelist = global.tab.CompiledChecklistChangelist = ss.mkType($asm, 'tab.CompiledChecklistChangelist', function() {
    this.select = null;
    this.deselect = null;
    this.domain = null;
    this.select = [];
    this.deselect = [];
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CompiledRadiolistChangelist
  var $tab_CompiledRadiolistChangelist = global.tab.CompiledRadiolistChangelist = ss.mkType($asm, 'tab.CompiledRadiolistChangelist', function() {
    this.index = 0;
    this.domain = null;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ContentFetchedEventArgs
  var $tab_ContentFetchedEventArgs = global.tab.ContentFetchedEventArgs = ss.mkType($asm, 'tab.ContentFetchedEventArgs', function(tileIndex, itemRange, data) {
    this.$tileIndex = 0;
    this.$itemRange = null;
    this.$data = null;
    ss.EventArgs.call(this);
    this.$tileIndex = tileIndex;
    this.$itemRange = itemRange;
    this.$data = data;
  }, {
    get_data: function ContentFetchedEventArgs$get_Data() {
      return this.$data;
    },
    get_tileIndex: function ContentFetchedEventArgs$get_TileIndex() {
      return this.$tileIndex;
    },
    get_itemRange: function ContentFetchedEventArgs$get_ItemRange() {
      return this.$itemRange;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ContinuousSlider
  var $tab_ContinuousSlider = global.tab.ContinuousSlider = ss.mkType($asm, 'tab.ContinuousSlider', function(viewModel) {
    this.viewModel = null;
    ss.makeGenericType(spiff.BaseView$1, [$tab_ContinuousSliderViewModel]).call(this, viewModel, new $tab_$ContinuousSliderTemplate());
    this.viewModel = viewModel;
    this.get_template().domRoot.addClass(this.viewModel.get_sliderClassName());
  }, {
    get_widgetNode: function ContinuousSlider$get_WidgetNode() {
      return this.element;
    },
    applyChanges: function ContinuousSlider$ApplyChanges(index) {
      this.viewModel.set_sliderCurrentValue(index);
    },
    dispose: function ContinuousSlider$Dispose() {
      ss.makeGenericType(spiff.BaseView$1, [$tab_ContinuousSliderViewModel]).prototype.dispose.call(this);
      this.viewModel = null;
    },
    onAddedToDomShim: function ContinuousSlider$OnAddedToDomShim() {
      this.onAddedToDom();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ContinuousSliderViewModel
  var $tab_ContinuousSliderViewModel = global.tab.ContinuousSliderViewModel = ss.mkType($asm, 'tab.ContinuousSliderViewModel', function(rangeModel) {
    this.$rangeModel = null;
    this.$currentFraction = 0;
    this.$intermediateFraction = 0;
    this.$pixelWidth = 0;
    this.$ruleTickCount = 0;
    this.$sliderClassName = '';
    this.$enabled = false;
    this.$2$IntermediateChangeField = null;
    this.$2$SliderValueChangeField = null;
    this.$2$EnabledChangedField = null;
    spiff.BaseViewModel.call(this);
    this.$rangeModel = rangeModel;
    this.$currentFraction = rangeModel.get_currentFraction();
    this.$rangeModel.add_sliderFractionUpdated(ss.mkdel(this, this.currentFractionUpdated));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$rangeModel.remove_sliderFractionUpdated(ss.mkdel(this, this.currentFractionUpdated));
    })));
    this.$pixelWidth = $tab_ContinuousSliderViewModel.$defaultWidth;
    this.$enabled = true;
  }, {
    add_intermediateChange: function ContinuousSliderViewModel$add_IntermediateChange(value) {
      this.$2$IntermediateChangeField = ss.delegateCombine(this.$2$IntermediateChangeField, value);
    },
    remove_intermediateChange: function ContinuousSliderViewModel$remove_IntermediateChange(value) {
      this.$2$IntermediateChangeField = ss.delegateRemove(this.$2$IntermediateChangeField, value);
    },
    add_sliderValueChange: function ContinuousSliderViewModel$add_SliderValueChange(value) {
      this.$2$SliderValueChangeField = ss.delegateCombine(this.$2$SliderValueChangeField, value);
    },
    remove_sliderValueChange: function ContinuousSliderViewModel$remove_SliderValueChange(value) {
      this.$2$SliderValueChangeField = ss.delegateRemove(this.$2$SliderValueChangeField, value);
    },
    add_enabledChanged: function ContinuousSliderViewModel$add_EnabledChanged(value) {
      this.$2$EnabledChangedField = ss.delegateCombine(this.$2$EnabledChangedField, value);
    },
    remove_enabledChanged: function ContinuousSliderViewModel$remove_EnabledChanged(value) {
      this.$2$EnabledChangedField = ss.delegateRemove(this.$2$EnabledChangedField, value);
    },
    get_sliderClassName: function ContinuousSliderViewModel$get_SliderClassName() {
      return this.$sliderClassName;
    },
    set_sliderClassName: function ContinuousSliderViewModel$set_SliderClassName(value) {
      this.$sliderClassName = value;
    },
    get_pixelWidth: function ContinuousSliderViewModel$get_PixelWidth() {
      return this.$pixelWidth;
    },
    set_pixelWidth: function ContinuousSliderViewModel$set_PixelWidth(value) {
      this.$pixelWidth = value;
    },
    get_ruleTickCount: function ContinuousSliderViewModel$get_RuleTickCount() {
      return this.$ruleTickCount;
    },
    set_ruleTickCount: function ContinuousSliderViewModel$set_RuleTickCount(value) {
      this.$ruleTickCount = value;
    },
    get_currentFraction: function ContinuousSliderViewModel$get_CurrentFraction() {
      return this.$currentFraction;
    },
    set_currentFraction: function ContinuousSliderViewModel$set_CurrentFraction(value) {
      this.$currentFraction = value;
      this.$2$SliderValueChangeField(this.$currentFraction);
    },
    get_sliderIntermediateValue: function ContinuousSliderViewModel$get_SliderIntermediateValue() {
      return this.$intermediateFraction * $tab_ContinuousSliderViewModel.$rangeMultiplier;
    },
    get_sliderCurrentValue: function ContinuousSliderViewModel$get_SliderCurrentValue() {
      return this.get_currentFraction() * $tab_ContinuousSliderViewModel.$rangeMultiplier;
    },
    set_sliderCurrentValue: function ContinuousSliderViewModel$set_SliderCurrentValue(value) {
      this.currentFractionUpdated(value / $tab_ContinuousSliderViewModel.$rangeMultiplier);
    },
    get_sliderMinimumValue: function ContinuousSliderViewModel$get_SliderMinimumValue() {
      return 0;
    },
    get_sliderMaximumValue: function ContinuousSliderViewModel$get_SliderMaximumValue() {
      return $tab_ContinuousSliderViewModel.$rangeMultiplier;
    },
    get_rangeModel: function ContinuousSliderViewModel$get_RangeModel() {
      return this.$rangeModel;
    },
    get_enabled: function ContinuousSliderViewModel$get_Enabled() {
      return this.$enabled;
    },
    set_enabled: function ContinuousSliderViewModel$set_Enabled(value) {
      if (this.$enabled === value) {
        return;
      }
      this.$enabled = value;
      this.raiseActionEvent(this.$2$EnabledChangedField);
    },
    applyIntermediateChange: function ContinuousSliderViewModel$ApplyIntermediateChange(value) {
      this.$intermediateFraction = value / $tab_ContinuousSliderViewModel.$rangeMultiplier;
      if (ss.isValue(this.$2$IntermediateChangeField)) {
        this.$2$IntermediateChangeField(this.$intermediateFraction);
      }
    },
    currentFractionUpdated: function ContinuousSliderViewModel$CurrentFractionUpdated(newValue) {
      var roundedCurrentFraction = tab.DoubleUtil.truncateTwoDecimalPlaces(this.$currentFraction);
      var roundedNewFraction = tab.DoubleUtil.truncateTwoDecimalPlaces(newValue);
      if (roundedCurrentFraction !== roundedNewFraction) {
        this.set_currentFraction(roundedNewFraction);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CurrentPagePanel
  var $tab_CurrentPagePanel = global.tab.CurrentPagePanel = ss.mkType($asm, 'tab.CurrentPagePanel', function(oProps) {
    this.baseClass = 'currentPagePanel';
    this.templateString = "<div dojoAttachPoint='containerNode' baseClass='currentPagePanel'>" + '<div>' + "<div dojoAttachPoint='_titlePane' style='border:0; overflow:hidden;'></div>" + "<div dojoAttachEvent='onClick:showMenu' dojoType='dijit.form.Button' class='PageTitleButton' name='type' dojoAttachPoint='_menuButton' style='right: 0; visibility: hidden;'" + "iconClass='wcIconContextMenu' ></div>" + ' </div>' + "<div dojoType='dijit.layout.SplitContainer' persist='false' dojoAttachPoint='innerWrapper' orientation='${cpOrientation}' sizerWidth='0' dragRestriction='true' activeSizing='false' style='float:left; overflow: hidden;'>" + "<div dojoType='dijit.layout.LayoutContainer' sizeShare='24' sizeMin='24' style='display:${display_dropdown};' dojoAttachPoint='buttonsContainer' >" + "<button dojoAttachEvent='onClick:prevPage' dojoType='dijit.form.Button' layoutAlign='left' style='margin:0; margin-right:2px;' iconClass='dijitIcon cpLeftArrowBlack' showLabel='false' dojoAttachPoint='_leftBtn'></button>" + "<select dojoAttachEvent='onChange:onSelection' dojoType='tableau.base.widget.ui.iDropDownSelect' dojoAttachPoint='_dropdown' layoutAlign='client' autoWidth='true' minSize='100' hasDownArrow='true' popupExtraClass='${popupClass}'></select>" + "<button dojoAttachEvent='onClick:nextPage' dojoType='dijit.form.Button' layoutAlign='right' style='clear: left; margin:0; margin-left:2px;' iconClass='dijitIcon cpRightArrowBlack' showLabel='false' dojoAttachPoint='_rightBtn'></button>" + '</div>' + "<div dojoType='dijit.layout.ContentPane' sizeShare='24' sizeMin='24' style='display:${display_slider}; padding:6px 0 0 0; border:0; overflow: visible;' dojoAttachPoint='sliderPane'>" + "<div dojoAttachEvent='onChange:onSliderChange' dojoType='dijit.form.HorizontalSlider' slideDuration='0'" + "pageIncrement='1' minimum='0' maximum='${maximum}' discreteValues='${discrete_values}' intermediateChanges='false' showButtons='false'" + "dojoAttachPoint='_slider'></div>" + "<div dojoAttachPoint='_horizontalRuleNode'></div>" + '</div>' + '</div>' + "<div dojoType='dijit.layout.ContentPane' dojoAttachPoint='_playButtonPane' style='padding:0; height:24px; display:${display_toggle}; border:0; position:relative; float:left;overflow:hidden;'>" + "<button dojoAttachEvent='onClick:reversePlay' dojoType='dijit.form.Button' layoutAlign='left'  style='float: left; margin:0; margin-left:0px;' iconClass='dijitIcon tab-img-triangle-left-inactive'  showLabel='false' dojoAttachPoint='_reversePlayBtn'></button>" + "<button dojoAttachEvent='onClick:stopPlay'    dojoType='dijit.form.Button' layoutAlign='left'  style='float: left; margin:0; margin-left:2px;' iconClass='dijitIcon tab-img-square-active' showLabel='false' dojoAttachPoint='_stopPlayBtn'></button>" + "<button dojoAttachEvent='onClick:forwardPlay' dojoType='dijit.form.Button' layoutAlign='left'  style='float: left; margin:0; margin-left:2px;' iconClass='dijitIcon tab-img-triangle-right-inactive' showLabel='false' dojoAttachPoint='_forwardPlayBtn'></button>" + '</div>' + "<div dojoType='dijit.layout.ContentPane' dojoAttachPoint='_checkboxPane' style='padding:0; height:16px; top:2px; display:${display_toggle}; border:0; position:relative; float:left;'>" + "<input dojoAttachEvent='onChange:onCheckboxChange' dojoType='dijit.form.CheckBox' dojoAttachPoint='_showHistoryCb'/>" + '</div>' + '</div>';
    this.widgetsInTemplate = true;
    this.playState = 2;
    this.sliderPane = null;
    this.$startOfAutoPlay = false;
    this.$playOnIntervalTimer = -1;
    this.$currentPageOnClient = -1;
    this.$expectedClientPage = -1;
    this.show_toggle = false;
    this.show_dropdown = false;
    this.show_slider = false;
    this.sheetid = null;
    this.session = null;
    this.lTitle = null;
    this.titleHtml = null;
    this.isDashboard = false;
    this.pageViewModel = null;
    this.innerWrapper = null;
    this.cpHeight = 0;
    this.buttonsContainer = null;
    this._started = false;
    this._slider = null;
    this._showHistoryCb = null;
    this._rightBtn = null;
    this._leftBtn = null;
    this._horizontalRuleNode = null;
    this._dropdown = null;
    this._reversePlayBtn = null;
    this._stopPlayBtn = null;
    this._forwardPlayBtn = null;
    this._playButtonPane = null;
    this._checkboxPane = null;
    this.rid = 0;
    this.timestamp = 0;
    this._horizontalRule = null;
    this.containerNode = null;
    this.titleSize = null;
    this.zoneTitleHeight = 0;
    this.zoneTitleWidth = 0;
    this.updating = false;
    this._titlePane = null;
    this._menuButton = null;
    this.blockContextMenu = false;
    this.pages = null;
    this.current_page = 0;
    this.refreshed = false;
    this.enable = false;
    this.cpOrientation = null;
    this.display_dropdown = null;
    this.display_slider = null;
    this.display_toggle = null;
    this.maximum = 0;
    this.discrete_values = 0;
    this.show_ruler = null;
    this.ruler_count = 0;
    this.popupClass = null;
    this.requestTimeout = null;
    this.rebuildLayoutTimeout = null;
    this.BUTTONS_HEIGHT = 26;
    this.ONLY_BUTTONS = 24;
    this.SLIDER_HEIGHT = 22;
    this.PLAY_SHELF_HEIGHT = 30;
    this.ONLY_SLIDER = 16;
    this.TOGGLE_HEIGHT = 16;
    this.TOGGLE_WIDTH_OFFSET = 90;
    this.RULE_OFFSET = 5;
    this.DOM_OFFSET = 4;
    this.WIDGET_SPACE = 8;
    this.SCROLL_PAGES = 14;
    this.backgroundColor = null;
    this.$disposables = new tab.DisposableHolder();
    Object.call(this);
    tab.CommandController.add_stopPagesPlayShelf(ss.mkdel(this, this.stopPlay));
    tab.AnimationClock.add_animationEnded(ss.mkdel(this, this.$animationEnded));
  }, {
    enablePlayShelfIfNotMobile: function CurrentPagePanel$EnablePlayShelfIfNotMobile() {
      if (tsConfig.is_mobile) {
        return;
      }
      if (this.pageViewModel.get_pageModel().pm.showPagePlayback) {
        this._playButtonPane.domNode.style.display = 'block';
        this._forwardPlayBtn.attr('label', tab.Strings.CurrentPagePanelPlayForward);
        this._stopPlayBtn.attr('label', tab.Strings.CurrentPagePanelStop);
        this._reversePlayBtn.attr('label', tab.Strings.CurrentPagePanelPlayReverse);
      }
      else {
        this._playButtonPane.domNode.style.display = 'none';
      }
    },
    get_showTitle: function CurrentPagePanel$get_ShowTitle() {
      return ss.isValue(this.lTitle) && this.lTitle.length !== 0;
    },
    get_shouldLayoutTitleOnSeparateLine: function CurrentPagePanel$get_ShouldLayoutTitleOnSeparateLine() {
      return this.zoneTitleWidth === 0;
    },
    get_$maxPage: function CurrentPagePanel$get_MaxPage() {
      return Math.max(this.pages.length - 1, 0);
    },
    hasNextPage: function CurrentPagePanel$HasNextPage(page) {
      return this.pages.length !== 0 && page !== this.pages.length - 1;
    },
    getDomNode: function CurrentPagePanel$GetDomNode() {
      return this.domNode;
    },
    destroyRecursiveShim: function CurrentPagePanel$DestroyRecursiveShim(preserveDom) {
      this.destroyRecursive(preserveDom);
    },
    startupShim: function CurrentPagePanel$StartupShim() {
      this.startup();
    },
    startup: function CurrentPagePanel$Startup() {
      this.containerNode = this.domNode;
      if (tab.FeatureFlags.isEnabled('MttwPageTitles') && tsConfig.current_sheet_type === 'worksheet' && !(tsConfig.is_mobile || tsConfig.is_mobile_app) && tsConfig.is_authoring) {
        this.containerNode.addEventListener('mouseenter', ss.mkdel(this, this.$showMenuButton));
        this.containerNode.addEventListener('touchenter', ss.mkdel(this, this.$showMenuButton));
        this.containerNode.addEventListener('mouseleave', ss.mkdel(this, this.$hideMenuButton));
        this.containerNode.addEventListener('touchleave', ss.mkdel(this, this.$hideMenuButton));
        this.$disposables.add(ss.mkdel(this, function() {
          this.containerNode.removeEventListener('touchleave', ss.mkdel(this, this.$hideMenuButton));
          this.containerNode.removeEventListener('mouseenter', ss.mkdel(this, this.$showMenuButton));
          this.containerNode.removeEventListener('touchenter', ss.mkdel(this, this.$showMenuButton));
          this.containerNode.removeEventListener('mouseleave', ss.mkdel(this, this.$hideMenuButton));
        }));
      }
      this.titleSize = { w: 0, h: 0 };
      this.inherited(arguments);
      this.innerWrapper.startup();
      this.innerWrapper.domNode.style.overflow = 'visible';
      this.buttonsContainer.startup();
      this.refreshLayout();
      if (this.show_toggle) {
        var customCheckBoxDiv = document.createElement('div');
        customCheckBoxDiv.className = 'fakeCheckBox';
        if (ss.isValue(this._showHistoryCb.domNode)) {
          this._showHistoryCb.domNode.appendChild(customCheckBoxDiv);
        }
        var label = document.createElement('label');
        label.innerHTML = tab.EscapingUtil.escapeHtml(tab.Strings.CurrentPagePanelShowHistory);
        label.style.color = this.pageViewModel.get_pageModel().pm.contrastingTextColor;
        label.setAttribute('for', this._showHistoryCb.id);
        if (ss.isValue(this._checkboxPane.domNode)) {
          this._checkboxPane.attr('title', tab.Strings.CurrentPagePanelShowHistory);
          this._checkboxPane.domNode.appendChild(label);
        }
      }
      this._rightBtn.setAttribute('_scroll', false);
      this._leftBtn.setAttribute('_scroll', false);
      this._slider.setAttribute('_scroll', false);
      this._rightBtn.attr('label', tab.Strings.CurrentPagePanelNextPage);
      this._leftBtn.attr('label', tab.Strings.CurrentPagePanelPreviousPage);
      this.enablePlayShelfIfNotMobile();
    },
    layout: function CurrentPagePanel$Layout(pixelHeight) {
      var titleOffsetWidth = 0;
      var titleOffsetHeight = 0;
      var toggleOffsetHeight = 0;
      if (ss.isNullOrUndefined(this.titleSize) || ss.isValue(this.lTitle) && this.titleSize.w === 0) {
        return;
      }
      var oNode = dojo.marginBox(this.containerNode);
      var widgetWidth = oNode.w - this.DOM_OFFSET;
      var widgetHeight = 0;
      if (this.get_showTitle()) {
        if (!this.get_shouldLayoutTitleOnSeparateLine()) {
          if (oNode.h < this.getWidgetOffset()) {
            this.cpOrientation = 'horizontal';
          }
          else {
            this.cpOrientation = 'vertical';
          }
          widgetWidth -= this.titleSize.w;
          titleOffsetWidth = this.titleSize.w;
        }
        else {
          if (oNode.h - this.titleSize.h < this.getWidgetOffset()) {
            this.cpOrientation = 'horizontal';
          }
          else {
            this.cpOrientation = 'vertical';
          }
          titleOffsetHeight = ss.idiv(this.titleSize.h, 2);
        }
      }
      if (this.cpOrientation === 'horizontal') {
        if (this.show_toggle) {
          widgetWidth -= this.TOGGLE_WIDTH_OFFSET;
        }
        widgetHeight = (this.show_dropdown ? this.BUTTONS_HEIGHT : this.SLIDER_HEIGHT);
      }
      else {
        widgetHeight = (this.show_slider ? this.SLIDER_HEIGHT : 0);
        widgetHeight += (this.show_dropdown ? this.BUTTONS_HEIGHT : 0);
        toggleOffsetHeight = (this.show_toggle ? ss.idiv(this.TOGGLE_HEIGHT, 2) : 0);
      }
      this.innerWrapper.isHorizontal = this.cpOrientation === 'horizontal';
      dojo.marginBox(this.innerWrapper.domNode, ss.mkdict(['w', widgetWidth, 'h', widgetHeight]));
      this.innerWrapper.resize();
      var oSlider = dojo.marginBox(this.sliderPane.domNode);
      if (ss.isValue(this._horizontalRule) && oSlider.w > 0) {
        dojo.marginBox(this._horizontalRule.domNode, ss.mkdict(['w', oSlider.w]));
        if (this.pages.length * 2 > oSlider.w) {
          this._horizontalRule.domNode.style.display = 'none';
        }
        else {
          this._horizontalRule.domNode.style.display = '';
        }
      }
      var buttonOffset = Math.min(ss.idiv(oNode.h - widgetHeight, 2) - titleOffsetHeight - toggleOffsetHeight, 3);
      var buttonTop = buttonOffset + 2 * titleOffsetHeight;
      $(this.innerWrapper.domNode).css(ss.mkdict(['top', Math.max(buttonTop, 0) + 'px', 'position', 'absolute', 'left', titleOffsetWidth + ss.idiv(this.DOM_OFFSET, 2) + 'px']));
      if (this.cpOrientation === 'vertical') {
        $(this.buttonsContainer.domNode).css(ss.mkdict(['height', this.ONLY_BUTTONS + 'px', 'position', 'relative', 'top', '', 'left', '', 'padding', '0 0 2px 0']));
        this.buttonsContainer.resize();
        $(this.sliderPane.domNode).css(ss.mkdict(['height', this.SLIDER_HEIGHT + 'px', 'position', 'relative', 'top', '', 'left', '']));
        $(this._playButtonPane.domNode).css(ss.mkdict(['width', Math.max(oNode.w - 1, 0) + 'px', 'position', 'absolute', 'top', Math.max(buttonTop, 0) + widgetHeight + buttonOffset + 'px', 'left', titleOffsetWidth + 'px']));
        var playButtonOffset = this.BUTTONS_HEIGHT;
        $(this._checkboxPane.domNode).css(ss.mkdict(['width', Math.max(oNode.w - 1, 0) + 'px', 'top', Math.max(buttonTop, 0) + widgetHeight + buttonOffset + playButtonOffset + 2 + 'px', 'position', 'absolute', 'left', titleOffsetWidth + 'px']));
      }
      else {
        dojo.marginBox(this.sliderPane.domNode, ss.mkdict(['w', oSlider.w - this.WIDGET_SPACE]));
        if (ss.isValue(this._horizontalRule)) {
          dojo.marginBox(this._horizontalRule.domNode, ss.mkdict(['w', oSlider.w - this.WIDGET_SPACE - this.RULE_OFFSET]));
        }
        var oDropdown = dojo.marginBox(this._dropdown.domNode);
        dojo.marginBox(this._dropdown.domNode, ss.mkdict(['w', oDropdown.w - this.WIDGET_SPACE]));
        dojo.marginBox(this._rightBtn.domNode, ss.mkdict(['l', oDropdown.l + oDropdown.w - this.WIDGET_SPACE]));
        $(this.buttonsContainer.domNode).css(ss.mkdict(['height', this.ONLY_BUTTONS + 'px', 'position', '', 'top', '', 'left', '', 'padding', '0 0 2px 0']));
        this.buttonsContainer.resize();
        $(this.sliderPane.domNode).css(ss.mkdict(['height', this.SLIDER_HEIGHT + 'px', 'position', '', 'top', '', 'left', ss.idiv(widgetWidth + this.DOM_OFFSET, 2) + 'px']));
        $(this._playButtonPane.domNode).css(ss.mkdict(['position', 'absolute', 'top', Math.max(buttonTop, 0) + widgetHeight + buttonOffset + 'px', 'left', '']));
        $(this._checkboxPane.domNode).css(ss.mkdict(['top', Math.max(buttonTop, 0) + 2 + 'px', 'position', 'absolute', 'left', titleOffsetWidth + widgetWidth + ss.idiv(this.DOM_OFFSET, 2) + 'px']));
      }
      var width = parseInt($(this._dropdown.domNode).css('width')) - 24;
      dojo.marginBox(this._dropdown.containerNode, ss.mkdict(['w', width]));
    },
    getWidgetOffset: function CurrentPagePanel$GetWidgetOffset() {
      var retVal = (this.show_dropdown ? this.BUTTONS_HEIGHT : 0);
      retVal += (this.show_slider ? this.SLIDER_HEIGHT : 0);
      retVal += (this.show_toggle ? this.TOGGLE_HEIGHT : 0);
      return retVal;
    },
    postMixInProperties: function CurrentPagePanel$PostMixInProperties() {
      this.display_dropdown = (this.show_dropdown ? 'block' : 'none');
      this.display_slider = (this.show_slider ? 'block' : 'none');
      this.display_toggle = (this.show_toggle ? 'block' : 'none');
      var numPages = this.pages.length;
      this.maximum = this.get_$maxPage();
      this.discrete_values = numPages;
      this.show_ruler = (this.show_slider ? 'block' : 'none');
      this.ruler_count = numPages;
      this.popupClass = ((numPages > this.SCROLL_PAGES) ? 'cpPopupEx' : 'cpPopup');
      this.cpOrientation = ((this.cpHeight < this.getWidgetOffset()) ? 'horizontal' : 'vertical');
    },
    postCreate: function CurrentPagePanel$PostCreate() {
      this.inherited(arguments);
      this.timestamp = (new Date()).getTime();
      if (!this.show_dropdown) {
        this.innerWrapper.removeChild(this.buttonsContainer);
      }
      if (!this.show_slider) {
        this.innerWrapper.removeChild(this.sliderPane);
      }
      if (this.show_toggle && 'attr' in this._showHistoryCb) {
        this._showHistoryCb.attr('checked', this.enable);
      }
    },
    $setPageFunc: function CurrentPagePanel$SetPageFunc(newPage) {
      this.$clearRequestTimeout();
      this.requestTimeout = window.setTimeout(ss.mkdel(this, function() {
        this.$doSetPage(newPage);
      }), 500);
    },
    $clearRequestTimeout: function CurrentPagePanel$ClearRequestTimeout() {
      this.requestTimeout = tab.MiscUtil.clearTimeout(this.requestTimeout);
    },
    $clearRebuildLayoutTimeout: function CurrentPagePanel$ClearRebuildLayoutTimeout() {
      this.rebuildLayoutTimeout = tab.MiscUtil.clearTimeout(this.rebuildLayoutTimeout);
    },
    $doSetPage: function CurrentPagePanel$DoSetPage(newPage) {
      this.$clearRequestTimeout();
      this.$expectedClientPage = newPage;
      try {
        if (ss.isNullOrUndefined(this.pageViewModel.get_visualId())) {
          this.stopPlay();
        }
        else if (this.isDashboard) {
          tab.PageServerCommands.syncedChangePageNonblocking(this.pageViewModel.get_pageModel(), this.pageViewModel.get_visualId(), this.pageViewModel.get_pageModel().get_zoneModel().get_zoneId(), newPage);
        }
        else {
          tab.PageServerCommands.changePageNonblocking(newPage, this.pageViewModel.get_visualId());
        }
      }
      catch ($t1) {
        var ex = ss.Exception.wrap($t1);
        tab.ErrorTrace.report(ex, false);
      }
    },
    destroy: function CurrentPagePanel$Destroy(preserveDom) {
      this.$clearRequestTimeout();
      this.$clearRebuildLayoutTimeout();
      this.inherited(arguments);
      window.clearInterval(this.$playOnIntervalTimer);
      tab.AnimationClock.remove_animationEnded(ss.mkdel(this, this.$animationEnded));
      tab.CommandController.remove_stopPagesPlayShelf(ss.mkdel(this, this.stopPlay));
      this.$disposables.dispose();
    },
    $animationEnded: function CurrentPagePanel$AnimationEnded() {
      if (this.isStopped()) {
        this.playState = 2;
        return;
      }
      if (this.playState === 0) {
        this.forwardPlay();
      }
      else {
        this.reversePlay();
      }
    },
    updateProperties: function CurrentPagePanel$UpdateProperties(oProps) {
      this.sheetid = oProps.sheetid;
      this.enable = oProps.enable;
      this.show_slider = oProps.show_slider;
      this.show_toggle = oProps.show_toggle;
      this.show_dropdown = oProps.show_dropdown;
      this.current_page = oProps.current_page;
      this.pages = oProps.pages;
      this.session = oProps.session;
      this.lTitle = oProps.lTitle;
      this.titleHtml = oProps.titleHtml;
      this.zoneTitleHeight = oProps.zoneTitleHeight;
      this.zoneTitleWidth = oProps.zoneTitleWidth;
      this.isDashboard = oProps.isDashboard;
      this.pageViewModel = oProps.pageViewModel;
    },
    setTitle: function CurrentPagePanel$SetTitle() {
      this._titlePane.innerHTML = this.titleHtml;
      this.setTitleSize();
    },
    setTitleSize: function CurrentPagePanel$SetTitleSize() {
      var oTitleBar = dojo.marginBox(this._titlePane);
      if (this.get_shouldLayoutTitleOnSeparateLine()) {
        oTitleBar.w = dojo.marginBox(this.containerNode).w;
      }
      else {
        oTitleBar.w = this.zoneTitleWidth;
        dojo.marginBox(this._titlePane, oTitleBar);
      }
      if (this.zoneTitleHeight === 0 && this.get_showTitle()) {
        oTitleBar.h = dojo.marginBox(this.containerNode).h;
      }
      else {
        oTitleBar.h = this.zoneTitleHeight;
      }
      this.titleSize = oTitleBar;
      $(this._titlePane).parent().css(ss.mkdict(['height', this.titleSize.h + 'px']));
      this.layout(null);
      tableau.util.setupTitleEllipsis($(this._titlePane));
    },
    refreshLayout: function CurrentPagePanel$RefreshLayout() {
      this.refreshed = false;
      var delayRefresh = false;
      var refreshFunc = ss.mkdel(this, function() {
        this.refreshed = true;
        this.refreshWidget(this.current_page);
      });
      if (this.show_dropdown) {
        var pageLen = this.pages.length;
        var rebuildDropdown = false;
        if (pageLen !== this._dropdown.options.length) {
          rebuildDropdown = true;
        }
        else {
          for (var i = 0; i < pageLen; i++) {
            var label = this._dropdown.options[i]['label'];
            if (!ss.referenceEquals(this.pages[i], label)) {
              rebuildDropdown = true;
              break;
            }
          }
        }
        if (rebuildDropdown) {
          this.$clearRebuildLayoutTimeout();
          delayRefresh = true;
          this._dropdown.options = [];
          this.rebuildLayoutTimeout = window.setTimeout(ss.mkdel(this, function() {
            var options = [];
            for (var i1 = 0, pageLength = this.pages.length; i1 < pageLength; i1++) {
              options.push(ss.mkdict(['label', this.pages[i1], 'value', i1.toString(10), 'selected', i1 === this.current_page]));
            }
            this._dropdown.addOption(options);
            this._dropdown.startup();
            refreshFunc();
          }), 1);
          this._dropdown.popupExtraClass = ((this.pages.length > this.SCROLL_PAGES) ? 'cpPopupEx' : 'cpPopup');
        }
        else {
          this._dropdown.setValue(this.current_page);
        }
      }
      if (this.show_slider) {
        if (ss.isValue(this._horizontalRule)) {
          this._horizontalRule.destroy(false);
          this._horizontalRule = null;
        }
        this._slider.maximum = this.get_$maxPage();
        this._slider.discreteValues = this.pages.length;
        dijit.setWaiState(this._slider.focusNode, 'valuemax', this.pages.length);
        if (this.pages.length < 1200) {
          var rulesParams = ss.mkdict(['style', 'width:100%; height:3px; margin-left:4px; margin-right:4px;', 'count', this.pages.length]);
          this._horizontalRule = new dijit.form.HorizontalRule(rulesParams, this._horizontalRuleNode);
          this._horizontalRule.placeAt(this.sliderPane.domNode, 2);
          this._horizontalRule.startup();
        }
        this._slider.startup();
      }
      this._showHistoryCb.attr('value', this.enable);
      this.setTitle();
      if (!delayRefresh) {
        refreshFunc();
      }
    },
    refreshWidget: function CurrentPagePanel$RefreshWidget(page) {
      this.updating = true;
      if (this.show_dropdown && ss.isValue(this._dropdown)) {
        this._dropdown.setValue(page);
        var rightArrowDisabled = !this.hasNextPage(page);
        var leftArrowDisabled = page === 0;
        this._rightBtn.setAttribute('disabled', rightArrowDisabled);
        this._rightBtn.attr('iconClass', 'dijitIcon cpRightArrow' + (rightArrowDisabled ? 'Grey' : 'Black'));
        this._leftBtn.setAttribute('disabled', leftArrowDisabled);
        this._leftBtn.attr('iconClass', 'dijitIcon cpLeftArrow' + (leftArrowDisabled ? 'Grey' : 'Black'));
      }
      if (this.show_slider && ss.isValue(this._slider)) {
        this._slider.setValue(page);
      }
      if ('attr' in this._showHistoryCb) {
        var disableHistoryControl = this.pageViewModel.get_isHistoryToggleInteractionDisabled() || this.pages.length === 0;
        this._showHistoryCb.attr('disabled', disableHistoryControl);
      }
      this.updating = false;
    },
    $showMenuButton: function CurrentPagePanel$ShowMenuButton() {
      this._menuButton.domNode.style.visibility = 'visible';
    },
    $hideMenuButton: function CurrentPagePanel$HideMenuButton() {
      this._menuButton.domNode.style.visibility = 'hidden';
    },
    showMenu: function CurrentPagePanel$ShowMenu(e) {
      if (this.blockContextMenu) {
        return;
      }
      this.blockContextMenu = true;
      var $t1 = new tab.GetPageCardMenuCmd();
      $t1.cmdParams['visualIdPresModel'] = { worksheet: tsConfig.current_sheet_name };
      $t1.invoke().done(ss.mkdel(this, function(response) {
        var commands = response.$$cmdParams['commands'];
        if (tsConfig.is_mobile || tsConfig.is_mobile_app) {
          tab.RichTextClientCommands.removeRichTextCommands(commands);
        }
        var menuViewModel = tab.WidgetUtil.menuViewModelFromCommands(commands, function(menuItem) {
          tab.WidgetUtil.commandMenuItemClicked(menuItem);
        }, null, null, null);
        if (ss.isValue(menuViewModel)) {
          menuViewModel.show(new spiff.ShowMenuOptions($(this._menuButton.domNode), false));
        }
      })).always(ss.mkdel(this, function() {
        this.blockContextMenu = false;
      }));
    },
    prevPage: function CurrentPagePanel$PrevPage(e) {
      if (tsConfig.is_mobile) {
        this.$previousPageImpl();
      }
      else {
        this.$ifPlayingPauseExecuteThenResumePlay(ss.mkdel(this, this.$previousPageImpl));
      }
    },
    nextPage: function CurrentPagePanel$NextPage(e) {
      if (tsConfig.is_mobile) {
        this.$nextPageImpl();
      }
      else {
        this.$ifPlayingPauseExecuteThenResumePlay(ss.mkdel(this, this.$nextPageImpl));
      }
    },
    $ifPlayingPauseExecuteThenResumePlay: function CurrentPagePanel$ifPlayingPauseExecuteThenResumePlay(execute) {
      if (this.playState === 1) {
        window.clearTimeout(this.$playOnIntervalTimer);
        execute();
        this.$playOnIntervalTimer = window.setTimeout(ss.mkdel(this, this.$pagesPlayingReverseUpdate), 400);
      }
      else if (this.playState === 0) {
        window.clearTimeout(this.$playOnIntervalTimer);
        execute();
        this.$playOnIntervalTimer = window.setTimeout(ss.mkdel(this, this.$pagesPlayingForwardUpdate), 400);
      }
      else {
        execute();
      }
    },
    $nextPageImpl: function CurrentPagePanel$NextPageImpl() {
      if (!this.hasNextPage(this.current_page)) {
        if (!tsConfig.is_mobile) {
          this.stopPlay();
        }
      }
      else {
        this.$setPageFunc(this.current_page + 1);
        this.refreshWidget(this.current_page + 1);
      }
    },
    $previousPageImpl: function CurrentPagePanel$PreviousPageImpl() {
      if (this.current_page === 0) {
        if (!tsConfig.is_mobile) {
          this.stopPlay();
        }
      }
      else {
        this.$setPageFunc(this.current_page - 1);
        this.refreshWidget(this.current_page - 1);
      }
    },
    reversePlay: function CurrentPagePanel$ReversePlay() {
      this.playState = 1;
      this.$startOfAutoPlay = true;
      window.clearInterval(this.$playOnIntervalTimer);
      if (tab.AnimationUtil.animationIsEnabledFor(this.pageViewModel.get_visualId())) {
        this.$playOnIntervalTimer = window.setTimeout(ss.mkdel(this, this.$pagesPlayingReverseUpdate), 400);
      }
      else {
        this.$playOnIntervalTimer = window.setInterval(ss.mkdel(this, this.$pagesPlayingReverseUpdate), 400);
      }
      this.disablePlayControlButtons(true, false, false);
    },
    stopPlay: function CurrentPagePanel$StopPlay() {
      this.playState = 2;
      window.clearInterval(this.$playOnIntervalTimer);
      this.$currentPageOnClient = $tab_CurrentPagePanel.$startingPageOnClient;
      this.disablePlayControlButtons(false, true, false);
    },
    isStopped: function CurrentPagePanel$IsStopped() {
      return this.$currentPageOnClient === $tab_CurrentPagePanel.$startingPageOnClient;
    },
    forwardPlay: function CurrentPagePanel$ForwardPlay() {
      this.playState = 0;
      this.$startOfAutoPlay = true;
      window.clearInterval(this.$playOnIntervalTimer);
      if (tab.AnimationUtil.animationIsEnabledFor(this.pageViewModel.get_visualId())) {
        this.$playOnIntervalTimer = window.setTimeout(ss.mkdel(this, this.$pagesPlayingForwardUpdate), 400);
      }
      else {
        this.$playOnIntervalTimer = window.setInterval(ss.mkdel(this, this.$pagesPlayingForwardUpdate), 400);
      }
      this.disablePlayControlButtons(false, false, true);
    },
    disablePlayControlButtons: function CurrentPagePanel$DisablePlayControlButtons(disableReversePlayButton, disableStop, disableForwardPlay) {
      this._reversePlayBtn.setAttribute('disabled', disableReversePlayButton);
      this._reversePlayBtn.attr('iconClass', 'dijitIcon tab-img-triangle-left' + (disableReversePlayButton ? '-active' : '-inactive'));
      this._stopPlayBtn.setAttribute('disabled', disableStop);
      this._stopPlayBtn.attr('iconClass', 'dijitIcon tab-img-square' + (disableStop ? '-active' : '-inactive'));
      this._forwardPlayBtn.setAttribute('disabled', disableForwardPlay);
      this._forwardPlayBtn.attr('iconClass', 'dijitIcon tab-img-triangle-right' + (disableForwardPlay ? '-active' : '-inactive'));
    },
    $pagesPlayingForwardUpdate: function CurrentPagePanel$PagesPlayingForwardUpdate() {
      if (tab.AnimationUtil.animationIsEnabledFor(this.pageViewModel.get_visualId())) {
        window.clearInterval(this.$playOnIntervalTimer);
      }
      if (this.$shouldWrapToFirstPage()) {
        this.$goToFirstPage();
        this.$startOfAutoPlay = false;
      }
      else if (this.$startOfAutoPlay || this.$hasServerSentNewPage()) {
        this.$currentPageOnClient = this.current_page;
        this.$expectedClientPage = this.$currentPageOnClient + 1;
        this.$startOfAutoPlay = false;
        this.$nextPageImpl();
      }
    },
    $pagesPlayingReverseUpdate: function CurrentPagePanel$PagesPlayingReverseUpdate() {
      if (tab.AnimationUtil.animationIsEnabledFor(this.pageViewModel.get_visualId())) {
        window.clearInterval(this.$playOnIntervalTimer);
      }
      if (this.$shouldWrapToLastPage()) {
        this.$goToLastPage();
        this.$startOfAutoPlay = false;
      }
      else if (this.$startOfAutoPlay || this.$hasServerSentNewPage()) {
        this.$currentPageOnClient = this.current_page;
        this.$expectedClientPage = this.$currentPageOnClient - 1;
        this.$startOfAutoPlay = false;
        this.$previousPageImpl();
      }
    },
    $hasServerSentNewPage: function CurrentPagePanel$hasServerSentNewPage() {
      return this.$expectedClientPage === this.current_page;
    },
    $shouldWrapToLastPage: function CurrentPagePanel$shouldWrapToLastPage() {
      return this.$startOfAutoPlay && this.current_page === 0 && !this.$hasServerSentNewPage();
    },
    $shouldWrapToFirstPage: function CurrentPagePanel$shouldWrapToFirstPage() {
      return this.$startOfAutoPlay && this.current_page === this.get_$maxPage() && !this.$hasServerSentNewPage();
    },
    $goToLastPage: function CurrentPagePanel$GoToLastPage() {
      this.$setPageFunc(this.get_$maxPage());
      this.refreshWidget(this.get_$maxPage());
      this.$expectedClientPage = this.get_$maxPage();
    },
    $goToFirstPage: function CurrentPagePanel$GoToFirstPage() {
      this.$setPageFunc(0);
      this.refreshWidget(0);
      this.$expectedClientPage = 0;
    },
    onCheckboxChange: function CurrentPagePanel$OnCheckboxChange() {
      if (!this.refreshed) {
        return;
      }
      this.enable = !this.enable;
      tab.PageServerCommands.toggleTrails(this.pageViewModel.get_visualId());
    },
    onSelection: function CurrentPagePanel$OnSelection(selectedPage, propagate) {
      if (this.updating) {
        return;
      }
      var selectedPageAsInt = parseInt(selectedPage.toString());
      selectedPageAsInt = (isNaN(selectedPageAsInt) ? 0 : selectedPageAsInt);
      if (selectedPageAsInt === this.current_page || !this._started || !this.refreshed) {
        return;
      }
      var setPage = ss.mkdel(this, function() {
        this.$doSetPage(selectedPageAsInt);
        this.refreshWidget(selectedPageAsInt);
      });
      this.$ifPlayingPauseExecuteThenResumePlay(setPage);
    },
    onSliderChange: function CurrentPagePanel$OnSliderChange(selectedPage) {
      if (this.updating) {
        return;
      }
      var selectedPageAsInt = parseInt(selectedPage);
      if (selectedPageAsInt === this.current_page || !this.refreshed) {
        return;
      }
      this.$setPageFunc(selectedPageAsInt);
      this.refreshWidget(selectedPageAsInt);
    },
    destroyRecursiveShim$1: function CurrentPagePanel$DestroyRecursiveShim() {
      this.destroyRecursive();
    },
    updatePropertiesShim: function CurrentPagePanel$UpdatePropertiesShim(oProps) {
      this.updateProperties(oProps);
    },
    refreshLayoutShim: function CurrentPagePanel$RefreshLayoutShim() {
      this.refreshLayout();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.CurrentPagePanel.PlayState
  var $tab_CurrentPagePanel$PlayState = global.tab.CurrentPagePanel$PlayState = ss.mkEnum($asm, 'tab.CurrentPagePanel$PlayState', { forward: 0, reverse: 1, stopped: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.DateFilterWidget
  var $tab_DateFilterWidget = global.tab.DateFilterWidget = ss.mkType($asm, 'tab.DateFilterWidget', function() {
    this.firstPeriod = 0;
    this.lastPeriod = 0;
    this.isFutureIncluded = true;
    this.periodType = null;
    this.anchorDateTime = null;
    this.fy = 0;
    this.startOfWeek = 1;
    this._applyTimer = null;
    this.domPreview = null;
    this.textLast = null;
    this.textCurr = null;
    this.textNext = null;
    this.textLastn1 = null;
    this.textLastn2 = null;
    this.textNextn1 = null;
    this.textNextn2 = null;
    this.textTodate = null;
    this.rangeType = null;
    this.radioTodate = null;
    this.rangeN = 0;
    this.UPDATE_DELAY = 800;
    this.inputLastn = null;
    this.inputNextn = null;
    this.lowestAllowedDate = new Date(1753, 0, 1);
    this.highestAllowedDate = new Date(9999, 11, 31);
    $tab_LegacyQuickFilterWidget.call(this);
  }, {
    setRangeType: function DateFilterWidget$SetRangeType(rangeTypeArg, n) {
      var firstPrd, lastPrd;
      var isFuture;
      switch (rangeTypeArg) {
        case 'curr': {
          firstPrd = 0;
          lastPrd = 0;
          isFuture = true;
          break;
        }
        case 'todate': {
          firstPrd = 0;
          lastPrd = 0;
          isFuture = false;
          break;
        }
        case 'last': {
          firstPrd = -1;
          lastPrd = -1;
          isFuture = true;
          break;
        }
        case 'next': {
          firstPrd = 1;
          lastPrd = 1;
          isFuture = true;
          break;
        }
        case 'lastn': {
          firstPrd = 1 - n;
          lastPrd = 0;
          isFuture = true;
          break;
        }
        case 'nextn': {
          firstPrd = 0;
          lastPrd = n - 1;
          isFuture = true;
          break;
        }
        default: {
          return;
        }
      }
      this.firstPeriod = firstPrd;
      this.lastPeriod = lastPrd;
      this.isFutureIncluded = isFuture;
    },
    getRangeType: function DateFilterWidget$GetRangeType() {
      var isFuture = this.isFutureIncluded;
      var firstPrd = this.firstPeriod;
      var lastPrd = this.lastPeriod;
      var range;
      if (firstPrd === 0 && lastPrd === 0 && isFuture) {
        range = 'curr';
      }
      else if (firstPrd === 0 && lastPrd === 0 && !isFuture) {
        range = 'todate';
      }
      else if (firstPrd === -1 && lastPrd === -1 && isFuture) {
        range = 'last';
      }
      else if (firstPrd === 1 && lastPrd === 1 && isFuture) {
        range = 'next';
      }
      else if (firstPrd < 0 && lastPrd === 0 && isFuture) {
        range = 'lastn';
      }
      else if (firstPrd === 0 && lastPrd > 0 && isFuture) {
        range = 'nextn';
      }
      else if (firstPrd > 0 && lastPrd > 0 && !isFuture) {
        range = 'invalid';
      }
      else if (firstPrd > lastPrd) {
        range = 'invalid';
      }
      else if (firstPrd === lastPrd) {
        range = 'other';
      }
      else {
        range = 'othern';
      }
      return range;
    },
    adjustLastDate: function DateFilterWidget$AdjustLastDate(d) {
      var outDate = null;
      switch (this.periodType) {
        case 'year':
        case 'quarter':
        case 'month':
        case 'week':
        case 'day': {
          outDate = new Date(d.getFullYear(), d.getMonth(), d.getDate());
          outDate = new Date(outDate.getTime() - tab.DateUtil.oneSecond);
          break;
        }
        case 'hour':
        case 'minute':
        case 'second': {
          outDate = new Date(d.getTime() - tab.DateUtil.oneSecond);
          break;
        }
      }
      return outDate;
    },
    getPeriods: function DateFilterWidget$GetPeriods() {
      return this.lastPeriod - this.firstPeriod + 1;
    },
    roundToPeriod: function DateFilterWidget$RoundToPeriod(d, fiscalYearStart, calendarStartOfWeek) {
      var month = d.getMonth();
      var year = d.getFullYear();
      switch (this.periodType) {
        case 'year': {
          if (month < fiscalYearStart) {
            year -= 1;
          }
          return new Date(year, fiscalYearStart, 1);
        }
        case 'quarter': {
          var quarters;
          if (month >= fiscalYearStart) {
            quarters = Math.floor((month - fiscalYearStart) / 3);
            month = fiscalYearStart + quarters * 3;
          }
          else {
            quarters = Math.floor((month + 12 - fiscalYearStart) / 3);
            var newmonth = ss.imod(fiscalYearStart + quarters * 3, 12);
            if (newmonth === 0) {
              newmonth = 12;
            }
            if (newmonth > month) {
              --year;
            }
            month = newmonth;
          }
          return new Date(year, month, 1);
        }
        case 'month': {
          return new Date(year, month, 1);
        }
        case 'week': {
          var daysSinceStartOfWeek = ss.imod(7 + (1 + d.getDay()) - calendarStartOfWeek, 7);
          var ret = new Date(year, month, d.getDate(), 12);
          return new Date(ret.getTime() - daysSinceStartOfWeek * tab.DateUtil.oneDay);
        }
        case 'day': {
          return new Date(year, month, d.getDate());
        }
        case 'hour': {
          return new Date(year, month, d.getDate(), d.getHours());
        }
        case 'minute': {
          return new Date(year, month, d.getDate(), d.getHours(), d.getMinutes());
        }
        case 'second': {
          return new Date(year, month, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());
        }
      }
      return null;
    },
    getEffectiveAnchor: function DateFilterWidget$GetEffectiveAnchor() {
      return (ss.staticEquals(this.anchorDateTime, null) ? new Date() : this.anchorDateTime);
    },
    getAnchorPeriod: function DateFilterWidget$GetAnchorPeriod(anchor) {
      return this.roundToPeriod(anchor, this.fy, this.startOfWeek);
    },
    evaluateFirstDate: function DateFilterWidget$EvaluateFirstDate(anchorPeriod) {
      return tab.DateUtil.adjustDateByPeriod(anchorPeriod, this.periodType, this.firstPeriod);
    },
    evaluateLastDate: function DateFilterWidget$EvaluateLastDate(anchor, anchorPeriod) {
      var outOfRange = tab.DateUtil.adjustDateByPeriod(anchorPeriod, this.periodType, this.lastPeriod + 1);
      var endRange = this.adjustLastDate(outOfRange);
      if (!this.isFutureIncluded) {
        endRange = new Date(Math.min(anchor.getTime(), endRange.getTime()));
      }
      return endRange;
    },
    setPYear: function DateFilterWidget$SetPYear() {
      this.setPeriod('year');
    },
    setPQuarter: function DateFilterWidget$SetPQuarter() {
      this.setPeriod('quarter');
    },
    setPMonth: function DateFilterWidget$SetPMonth() {
      this.setPeriod('month');
    },
    setPWeek: function DateFilterWidget$SetPWeek() {
      this.setPeriod('week');
    },
    setPDay: function DateFilterWidget$SetPDay() {
      this.setPeriod('day');
    },
    setPHour: function DateFilterWidget$SetPHour() {
      this.setPeriod('hour');
    },
    setPMinute: function DateFilterWidget$SetPMinute() {
      this.setPeriod('minute');
    },
    setPSecond: function DateFilterWidget$SetPSecond() {
      this.setPeriod('second');
    },
    onTypingLast: function DateFilterWidget$OnTypingLast() {
      this.onTyping(this.inputLastn);
    },
    onTypingNext: function DateFilterWidget$OnTypingNext() {
      this.onTyping(this.inputNextn);
    },
    setRLast: function DateFilterWidget$SetRLast() {
      this.setRange('last');
    },
    setRCurr: function DateFilterWidget$SetRCurr() {
      this.setRange('curr');
    },
    setRNext: function DateFilterWidget$SetRNext() {
      this.setRange('next');
    },
    setRLastn: function DateFilterWidget$SetRLastn() {
      this.setRange('lastn', parseInt(this.inputLastn.value));
    },
    setRNextn: function DateFilterWidget$SetRNextn() {
      this.setRange('nextn', parseInt(this.inputNextn.value));
    },
    setRTodate: function DateFilterWidget$SetRTodate() {
      this.setRange('todate');
    },
    setRange: function DateFilterWidget$SetRange(range, n) {
      n = n || 0;
      if (range !== this.rangeType) {
        this._applyTimer = tab.MiscUtil.clearTimeout(this._applyTimer);
        this.rangeType = range;
        this.setRangeType(range, n);
        this._applyTimer = window.setTimeout(ss.mkdel(this, this.applyChanges), this.UPDATE_DELAY);
      }
      this.setRangeUI(range, n);
      this.setPreviewUI();
    },
    applyChanges: null,
    setRangeUI: null,
    setPeriod: function DateFilterWidget$SetPeriod(periodTypeArg) {
      this._applyTimer = tab.MiscUtil.clearTimeout(this._applyTimer);
      this.setPeriodUI(periodTypeArg);
      if (periodTypeArg !== this.periodType) {
        this.periodType = periodTypeArg;
        this.updateVisibilityOfDayToAnchor();
        this.setPreviewUI();
        this._applyTimer = window.setTimeout(ss.mkdel(this, this.applyChanges), this.UPDATE_DELAY * 2);
      }
    },
    updateVisibilityOfDayToAnchor: function DateFilterWidget$UpdateVisibilityOfDayToAnchor() {
      if (this.oFilter.noTime && this.periodType === 'day') {
        this.radioTodate.style.display = 'none';
        this.textTodate.style.display = 'none';
        $(this.textTodate).parent().find('.fakeRadio').css('display', 'none');
        if (this.rangeType === 'todate') {
          this.setRCurr();
        }
      }
      else {
        this.radioTodate.style.display = '';
        this.textTodate.style.display = '';
        $(this.textTodate).parent().find('.fakeRadio').css('display', '');
      }
    },
    onTyping: function DateFilterWidget$OnTyping(inputElem) {
      this._applyTimer = tab.MiscUtil.clearTimeout(this._applyTimer);
      inputElem.value = inputElem.value.replace(new RegExp('/[^0-9]/g'), '');
      if (inputElem.value.length > 0 && parseInt(inputElem.value) !== this.oFilter.rangeN) {
        this.rangeN = parseInt(inputElem.value);
        this.rangeType = (ss.referenceEquals(inputElem, this.inputLastn) ? 'lastn' : 'nextn');
        this.setRangeType(this.rangeType, this.rangeN);
        this._applyTimer = window.setTimeout(ss.mkdel(this, this.applyChanges), this.UPDATE_DELAY);
      }
      this.setPreviewUI();
    },
    updateRangeButtons: null,
    setPeriodUI: function DateFilterWidget$SetPeriodUI(periodTypeArg) {
      var width1;
      var width2;
      var descriptions;
      this.updateRangeButtons(periodTypeArg);
      if (ss.staticEquals(this.anchorDateTime, null)) {
        descriptions = $tab_LegacyRelativeDateQuickFilter.get_nonAnchoredDescriptions()[periodTypeArg];
      }
      else {
        descriptions = $tab_LegacyRelativeDateQuickFilter.get_anchoredDescriptions()[periodTypeArg];
      }
      this.textLast.innerHTML = descriptions['last'];
      this.textCurr.innerHTML = descriptions['curr'];
      this.textNext.innerHTML = descriptions['next'];
      var lastn = descriptions['lastn'].split('%');
      this.textLastn1.innerHTML = lastn[0];
      this.textLastn2.innerHTML = lastn[1];
      var nextn = descriptions['nextn'].split('%');
      this.textNextn1.innerHTML = nextn[0];
      this.textNextn2.innerHTML = nextn[1];
      this.textTodate.innerHTML = descriptions['todate'];
      width1 = parseFloat($(this.textLastn1).css('width'));
      width2 = parseFloat($(this.textNextn1).css('width'));
      if (width1 > width2) {
        this.textNextn1.style.width = width1 + 'px';
      }
      else if (width1 < width2) {
        this.textLastn1.style.width = width2 + 'px';
      }
    },
    $getDefaultDateFormat: function DateFilterWidget$GetDefaultDateFormat() {
      var f = null;
      if (ss.isValue(this.oFilter) && ss.isValue(this.oFilter.default_format)) {
        f = this.oFilter.default_format;
      }
      return ((ss.isValue(f) && f.length === 3) ? f[0] : '*M/d/yyyy');
    },
    $getDefaultTimeFormat: function DateFilterWidget$GetDefaultTimeFormat() {
      var f = null;
      if (ss.isValue(this.oFilter) && ss.isValue(this.oFilter.default_format)) {
        f = this.oFilter.default_format;
      }
      return ((ss.isValue(f) && f.length === 3) ? f[1].substr(1) : 'hh:nn:ss ampm');
    },
    setPreviewUI: function DateFilterWidget$SetPreviewUI() {
      this.domPreview.innerHTML = this.getPreviewMessage();
    },
    getPreviewMessage: function DateFilterWidget$GetPreviewMessage() {
      var anchor = this.getEffectiveAnchor();
      var formatDateOnly = this.$getDefaultDateFormat();
      var formatTimeOnly = this.$getDefaultTimeFormat();
      var str;
      var anchorPeriod = this.getAnchorPeriod(anchor);
      var firstDate = this.evaluateFirstDate(anchorPeriod);
      var formatDateTime = formatDateOnly + ' ' + formatTimeOnly;
      var lastDate = this.evaluateLastDate(anchor, anchorPeriod);
      if (this.isRangeValid(firstDate, lastDate)) {
        var firstDateNoTimeZone = new Date(Date.UTC(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate(), firstDate.getHours(), firstDate.getMinutes(), firstDate.getSeconds()));
        var lastDateNoTimeZone = new Date(Date.UTC(lastDate.getFullYear(), lastDate.getMonth(), lastDate.getDate(), lastDate.getHours(), lastDate.getMinutes(), lastDate.getSeconds()));
        var formattingInfoDateOnly = { format: formatDateOnly };
        var firstStr = tableau.format.formatCustomJsDateTime(firstDateNoTimeZone, formattingInfoDateOnly, 0, null);
        var lastStr = tableau.format.formatCustomJsDateTime(lastDateNoTimeZone, formattingInfoDateOnly, 0, null);
        if (this.periodType === 'hour' || this.periodType === 'minute' || this.periodType === 'second' || this.periodType === 'day' && !this.isFutureIncluded) {
          var formatFirst = formatDateTime;
          var formatLast = (ss.referenceEquals(firstStr, lastStr) ? formatTimeOnly : formatDateTime);
          var formattingInfoFirst = { format: formatFirst };
          var formattingInfoLast = { format: formatLast };
          firstStr = tableau.format.formatCustomJsDateTime(firstDateNoTimeZone, formattingInfoFirst, 0, null);
          lastStr = tableau.format.formatCustomJsDateTime(lastDateNoTimeZone, formattingInfoLast, 0, null);
        }
        str = tab.Strings.RelDateFilterPreview(firstStr, lastStr);
      }
      else {
        str = 'Invalid relative date';
        this._applyTimer = tab.MiscUtil.clearTimeout(this._applyTimer);
      }
      return str;
    },
    isRangeValid: function DateFilterWidget$IsRangeValid(firstDate, lastDate) {
      var isValid = true;
      if (isNaN(firstDate.getTime()) || isNaN(lastDate.getTime())) {
        isValid = false;
      }
      else if (this.firstPeriod > this.lastPeriod || this.firstPeriod > 0 && !this.isFutureIncluded) {
        isValid = false;
      }
      else if (!!!firstDate || !!!lastDate) {
        isValid = false;
      }
      else if (firstDate < this.lowestAllowedDate || lastDate > this.highestAllowedDate) {
        isValid = false;
      }
      return isValid;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.DojoUtils
  var $tab_DojoUtils = global.tab.DojoUtils = ss.mkType($asm, 'tab.DojoUtils', null, null, {
    localizeDojoLabeledControls: function DojoUtils$LocalizeDojoLabeledControls(controlStringKeyPairs) {
      var pairs = controlStringKeyPairs;
      var len = pairs.length;
      for (var i = 0; i < len; i++) {
        var control = pairs[i].item1;
        var stringKey = pairs[i].item2;
        if (ss.isValue(control)) {
          control.attr('label', tab.Strings.getString(stringKey));
        }
      }
    },
    disableTextSelection: function DojoUtils$DisableTextSelection(element) {
      if (typeof(element['onselectstart']) === 'function') {
        var onselStart = function(e) {
          spiff.EventUtil.stopEvent(e);
        };
        element['onselectstart'] = onselStart;
      }
      else if ('MozUserSelect' in element.style) {
        element.style['MozUserSelect'] = 'none';
      }
      element.style.cursor = 'default';
    },
    setMarginBoxWidth: function DojoUtils$SetMarginBoxWidth(element, width) {
      dojo.marginBox(element, ss.mkdict(['w', width]));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.DojoWidgets
  var $tab_DojoWidgets = global.tab.DojoWidgets = ss.mkType($asm, 'tab.DojoWidgets', null, null, {
    $registerWidgets: function DojoWidgets$RegisterWidgets() {
      dojo.require('tableau.base.BaseClient');
      var superClasses = null;
      superClasses = [dijit._Widget];
      dojo.declare('tableau.base.widget.LegacyQuickFilterWidget', superClasses, $tab_LegacyQuickFilterWidget.prototype);
      superClasses = [tableau.base.widget.LegacyQuickFilterWidget];
      dojo.declare('tableau.base.widget.DateFilterWidget', superClasses, $tab_DateFilterWidget.prototype);
      superClasses = [tableau.base.widget.LegacyQuickFilterWidget, dijit._Contained, dijit._Templated];
      $tab_LegacyCategoricalQuickFilter.prototype['templateString'] = $tab_DojoWidgets.$categoricalFilterTemplate;
      dojo.declare('tableau.base.widget.LegacyCategoricalQuickFilter', superClasses, $tab_LegacyCategoricalQuickFilter.prototype);
      superClasses = [dijit.layout._LayoutWidget, dijit._Templated];
      dojo.declare('tableau.base.widget.TabbedNavigation', superClasses, $tab_TabbedNavigation.prototype);
      superClasses = [dijit.layout._LayoutWidget, dijit._Templated];
      dojo.declare('tableau.base.widget.CurrentPagePanel', superClasses, $tab_CurrentPagePanel.prototype);
      dojo.declare('tableau.base.widget.catmode.BaseMode', [dijit._Contained], $tab_BaseMode.prototype);
      dojo.declare('tableau.base.widget.catmode.Checklist', [tableau.base.widget.catmode.BaseMode], $tab_Checklist.prototype);
      dojo.declare('tableau.base.widget.catmode.BaseDropdown', [tableau.base.widget.catmode.BaseMode], $tab_BaseDropdown.prototype);
      dojo.declare('tableau.base.widget.catmode.SimpleDropdown', [tableau.base.widget.catmode.BaseDropdown], $tab_SimpleDropdown.prototype);
      dojo.declare('tableau.base.widget.catmode.CheckDropdown', [tableau.base.widget.catmode.BaseDropdown], $tab_CheckDropdown.prototype);
      dojo.declare('tableau.base.widget.catmode.Pattern', [tableau.base.widget.catmode.BaseMode], $tab_Pattern.prototype);
      dojo.declare('tableau.base.widget.catmode.Slider', [tableau.base.widget.catmode.BaseMode], $tab_SliderCatmode.prototype);
      dojo.declare('tableau.base.widget.catmode.TypeIn', [tableau.base.widget.catmode.BaseMode], $tab_TypeInCatmode.prototype);
      dojo.declare('tableau.base.widget.catmode.Radiolist', [tableau.base.widget.catmode.BaseMode], $tab_Radiolist.prototype);
      dojo.declare('tableau.base.widget.ui.iDropDownSelect', [dojox.form.DropDownSelect], $tab_IDropDownSelect.prototype);
      dojo.declare('tableau.base.widget.ui.Slider', [], $tab_Slider.prototype);
      dojo.declare('tableau.base.widget.ui.TypeIn', [], $tab_TypeIn.prototype);
      dojo.declare('tableau.base.widget.ui.TypeInDateField', [$tab_TypeIn], $tab_TypeInDateField.prototype);
      dojo.declare('tableau.base.widget.ui.onClickOverride', null, $tab_OnClickOverride.prototype);
      dojo.declare('tableau.base.widget.ui.iMenuItem', [dijit.MenuItem, $tab_OnClickOverride], $tab_UIMenuItem.prototype);
      dojo.declare('tableau.base.widget.ui.iCheckedMenuItem', [dijit.CheckedMenuItem, $tab_OnClickOverride], $tab_UICheckedMenuItem.prototype);
      dojo.declare('tableau.base.widget.hsm.TreeModel', null, $tab_TreeSupport.prototype);
      dojo.declare('tableau.base.widget.hsm.Tree', [dijit.Tree], $tab_Tree.prototype);
      dojo.declare('tableau.base.widget.hsm._TreeNode', [dijit._TreeNode], $tab_TreeNode.prototype);
      superClasses = [tableau.base.widget.LegacyQuickFilterWidget, dijit._Contained, dijit._Templated];
      dojo.declare('tableau.base.widget.LegacyHierarchicalQuickFilter', superClasses, $tab_LegacyHierarchicalQuickFilter.prototype);
      superClasses = [tableau.base.widget.LegacyQuickFilterWidget, dijit._Contained, dijit._Templated];
      dojo.declare('tableau.base.widget.LegacyQuantitativeQuickFilter', superClasses, $tab_LegacyQuantitativeQuickFilter.prototype);
      superClasses = [tableau.base.widget.DateFilterWidget, dijit._Contained, dijit._Templated];
      dojo.declare('tableau.base.widget.LegacyRelativeDateQuickFilter', superClasses, $tab_LegacyRelativeDateQuickFilter.prototype);
      superClasses = [tableau.base.widget.LegacyQuickFilterWidget, dijit._Contained, dijit._Templated];
      dojo.declare('tableau.base.widget.RelativeDatePickFilter', superClasses, $tab_RelativeDatePickFilter.prototype);
      superClasses = [tableau.base.widget.LegacyQuantitativeQuickFilter];
      dojo.declare('tableau.base.widget.LegacyQuantitativeDateQuickFilter', superClasses, $tab_LegacyQuantitativeDateQuickFilter.prototype);
      superClasses = [dijit._Widget, dijit._Templated];
      $tab_ParameterControl.prototype['templateString'] = $tab_DojoWidgets.$parameterControlTemplate;
      dojo.declare('tableau.base.widget.ParameterControl', superClasses, $tab_ParameterControl.prototype);
      dojo.declare('tableau.base.widget.paramui.Base', [dijit._Contained], $tab_ParamUIBase.prototype);
      dojo.declare('tableau.base.widget.paramui.TypeIn', [tableau.base.widget.paramui.Base], $tab_ParamUITypeIn.prototype);
      dojo.declare('tableau.base.widget.paramui.TypeInDateField', [tableau.base.widget.paramui.Base], $tab_ParamUITypeInDateField.prototype);
      dojo.declare('tableau.base.widget.paramui.Compact', [tableau.base.widget.paramui.Base], $tab_ParamUICompact.prototype);
      dojo.declare('tableau.base.widget.paramui.List', [tableau.base.widget.paramui.Base], $tab_ParamUIList.prototype);
      dojo.declare('tableau.base.widget.paramui.Slider', [tableau.base.widget.paramui.Base], $tab_ParamUISlider.prototype);
      superClasses = [dijit._Widget, dijit._Templated, dijit._Contained];
      dojo.declare('tableau.base.widget.SearchWidgetBase', superClasses, $tab_SearchWidgetBase.prototype);
      superClasses = [tableau.base.widget.SearchWidgetBase];
      $tab_SearchWidget.prototype['templateString'] = $tab_DojoWidgets.$searchWidgetTemplate;
      dojo.declare('tableau.base.widget.SearchWidget', superClasses, $tab_SearchWidget.prototype);
      dojo.declare('tableau.base.widget.SmallSearchWidget', [tableau.base.widget.SearchWidgetBase], $tab_SmallSearchWidget.prototype);
      dojo.declare('tableau.base.widget.FilteringSearchWidget', [tableau.base.widget.SearchWidgetBase], $tab_FilteringSearchWidget.prototype);
      superClasses = [dijit._Widget, dijit._Templated, dijit._Contained];
      dojo.declare('tableau.base.widget.TypeInFilterContents', superClasses, $tab_TypeInFilterContents.prototype);
      superClasses = [dijit.layout._LayoutWidget, dijit._Templated];
      dojo.declare('tableau.base.widget.QuickFilterPanel', superClasses, $tab_QuickFilterPanel.prototype);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FetchInfo
  var $tab_FetchInfo = global.tab.FetchInfo = ss.mkType($asm, 'tab.FetchInfo', function(tileIndex, range, rangeType) {
    this.$tileIndex = 0;
    this.$range = null;
    this.$rangeType = null;
    this.$tileIndex = tileIndex;
    this.$range = range;
    this.$rangeType = rangeType;
  }, {
    get_tileIndex: function FetchInfo$get_TileIndex() {
      return this.$tileIndex;
    },
    get_range: function FetchInfo$get_Range() {
      return this.$range;
    },
    get_rangeType: function FetchInfo$get_RangeType() {
      return this.$rangeType;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilterContentFetcher
  var $tab_FilterContentFetcher = global.tab.FilterContentFetcher = ss.mkType($asm, 'tab.FilterContentFetcher', function(sheetSessionRef, identifier, domain) {
    this.$identifier = null;
    this.$sheetSessionRef = null;
    this.$domain = null;
    this.$pendingTiles = null;
    this.$priorityQueue = null;
    this.$maxQueueSize = 5;
    this.$isFetching = false;
    this.$1$ContentFetchedField = null;
    this.$identifier = identifier;
    this.$sheetSessionRef = sheetSessionRef;
    this.$domain = domain;
    this.$pendingTiles = [];
    this.$priorityQueue = [];
  }, {
    add_contentFetched: function FilterContentFetcher$add_ContentFetched(value) {
      this.$1$ContentFetchedField = ss.delegateCombine(this.$1$ContentFetchedField, value);
    },
    remove_contentFetched: function FilterContentFetcher$remove_ContentFetched(value) {
      this.$1$ContentFetchedField = ss.delegateRemove(this.$1$ContentFetchedField, value);
    },
    destroy: function FilterContentFetcher$Destroy() {
    },
    fetch: function FilterContentFetcher$Fetch(fetchList) {
      for (var i = 0; i < fetchList.length; ++i) {
        var fetchInfo = fetchList[i];
        if (ss.contains(this.$pendingTiles, fetchInfo.get_tileIndex())) {
          continue;
        }
        this.$pendingTiles.push(fetchInfo.get_tileIndex());
        this.$priorityQueue.push(fetchInfo);
      }
      while (this.$priorityQueue.length > this.$maxQueueSize) {
        var oldRequest = this.$priorityQueue[0];
        ss.remove(this.$pendingTiles, oldRequest.get_tileIndex());
        ss.remove(this.$priorityQueue, oldRequest);
      }
      this.$tryFetchMostRecent();
    },
    isTilePending: function FilterContentFetcher$IsTilePending(tileIndex) {
      return ss.contains(this.$pendingTiles, tileIndex);
    },
    getQueueLength: function FilterContentFetcher$GetQueueLength() {
      return this.$priorityQueue.length;
    },
    $getFetchFunc: function FilterContentFetcher$GetFetchFunc(fetchInfo) {
      var action = ss.mkdel(this, function() {
        this.$singleFetch(fetchInfo);
      });
      return action;
    },
    $singleFetch: function FilterContentFetcher$SingleFetch(fetchInfo) {
      var onComplete = ss.mkdel(this, function(response) {
        tab.Log.get(this).debug('fetch completed: tile #%d', [fetchInfo.get_tileIndex()]);
        this.$isFetching = false;
        ss.remove(this.$pendingTiles, fetchInfo.get_tileIndex());
        var content = new $tab_ContentFetchedEventArgs(fetchInfo.get_tileIndex(), fetchInfo.get_range(), response);
        if (!ss.staticEquals(this.$1$ContentFetchedField, null)) {
          this.$1$ContentFetchedField(this, content);
        }
        this.$tryFetchMostRecent();
      });
      var onError = ss.mkdel(this, function(response1) {
        this.$isFetching = false;
        ss.remove(this.$pendingTiles, fetchInfo.get_tileIndex());
        this.$tryFetchMostRecent();
      });
      this.$sheetSessionRef.getFilterItems(this.$identifier, this.$domain, fetchInfo.get_range(), onComplete, onError);
    },
    $tryFetchMostRecent: function FilterContentFetcher$TryFetchMostRecent() {
      if (this.$priorityQueue.length > 0 && !this.$isFetching) {
        this.$isFetching = true;
        var lastIndex = this.$priorityQueue.length - 1;
        var fetchNow = this.$priorityQueue[lastIndex];
        ss.removeAt(this.$priorityQueue, lastIndex);
        var fetchFunc = this.$getFetchFunc(fetchNow);
        window.setTimeout(fetchFunc, 0);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilterFormat
  var $tab_FilterFormat = global.tab.FilterFormat = ss.mkType($asm, 'tab.FilterFormat', null, null, {
    formatColumnDisplayName: function FilterFormat$FormatColumnDisplayName(column, suppressDSName, noEscape) {
      var caption = column.caption;
      var displayname;
      if (!(typeof(caption) === 'undefined')) {
        displayname = caption;
      }
      else {
        var name = column.name;
        displayname = (suppressDSName ? ss.arrayExtract(name, 1).join('.') : tableau.format.formatQualifiedName(name));
      }
      return (noEscape ? displayname : tab.EscapingUtil.escapeHtml(displayname));
    },
    formatTupleDisplayName: function FilterFormat$FormatTupleDisplayName(tuple, noEscape, role) {
      if (ss.isNullOrUndefined(tuple)) {
        return ' ';
      }
      var d = tuple.d;
      var s = (ss.isValue(d) ? d : $tab_FilterFormat.formatTupleUniqueName(tuple, role));
      var toReturn = (noEscape ? s : tab.EscapingUtil.escapeHtml(s));
      return ss.coalesce(toReturn, ' ');
    },
    formatTupleUniqueName: function FilterFormat$FormatTupleUniqueName(tuple, role) {
      var ret = '';
      if (ss.isValue(tuple)) {
        var rgdv = tuple.t;
        if (ss.isValue(rgdv)) {
          for (var $t1 = 0; $t1 < rgdv.length; $t1++) {
            var t = rgdv[$t1];
            if (ret.length !== 0) {
              ret += ',';
            }
            ret += tableau.format.formatDataValue(t, role);
          }
        }
      }
      return ret;
    },
    formatTupleDisplayFacet: function FilterFormat$FormatTupleDisplayFacet(tuple, noEscape, role) {
      var s = $tab_FilterFormat.formatTupleFacet(tuple, role);
      return (noEscape ? s : tab.EscapingUtil.escapeHtml(s));
    },
    formatTupleFacet: function FilterFormat$FormatTupleFacet(tuple, role) {
      var ret = '';
      if (ss.isValue(tuple)) {
        var rgdv = tuple.f;
        if (ss.isValue(rgdv)) {
          for (var $t1 = 0; $t1 < rgdv.length; $t1++) {
            var f = rgdv[$t1];
            if (ret.length !== 0) {
              ret += ',';
            }
            ret += tableau.format.formatDataValue(f, role);
          }
        }
      }
      return ret;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilteringSearchWidget
  var $tab_FilteringSearchWidget = global.tab.FilteringSearchWidget = ss.mkType($asm, 'tab.FilteringSearchWidget', function(r) {
    this.templateString = "<div class='Search FilteringSearch'>" + "<div class='SearchBox' dojoAttachPoint='domQuerySection'>" + "<textarea rows='1' class='QueryBox' aria-multiline='false' spellcheck='false'" + "dojoAttachPoint='domQueryBox'" + "dojoAttachEvent='onkeydown:onQueryBoxKeyDown,onclick:focusQueryBox,onfocus:focusQueryBox' title='${SEARCH_TOOLTIP}'></textarea>" + "<span class='wcSearchX' title='${XBUTTON_CLOSE_TOOLTIP}'" + "dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:onXButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<span dojoAttachPoint='domScreenReaderStatus' class='sr-only' role='status' aria-live='polite'></span>" + '</div>' + '</div>';
    this.domQueryBox = null;
    this.domSearchButton = null;
    this.domSearchBusyImg = null;
    this.domScreenReaderStatus = null;
    this.$searchResultsMaxRows = 100;
    this.$searchTimer = null;
    this.$style = 0;
    $tab_SearchWidgetBase.call(this);
  }, {
    get_noMatchHtml: function FilteringSearchWidget$get_NoMatchHtml() {
      return this.NO_MATCHES;
    },
    get_queryBox: function FilteringSearchWidget$get_QueryBox() {
      return this.domQueryBox;
    },
    get_quickFilter: function FilteringSearchWidget$get_QuickFilter() {
      return this.get_qf();
    },
    get_$qfAsFilteringQf: function FilteringSearchWidget$get_QfAsFilteringQf() {
      return this.get_qf();
    },
    setStyle: function FilteringSearchWidget$SetStyle(s) {
      this.$style = s;
      var el = $(this.domNode);
      if (this.$style === 1) {
        el.addClass('FilteringDropdown');
        el.addClass('SearchCleared');
      }
      else if (this.$style === 2) {
        el.addClass('FilteringInline');
      }
    },
    get_applyDelay: function FilteringSearchWidget$get_ApplyDelay() {
      tab.Log.get(this).error(tab.Strings.noLoc('Bad call of ApplyDelay on FilteringSearchWidget'), []);
      return 0;
    },
    startupAndAppendTo: function FilteringSearchWidget$StartupAndAppendTo(container) {
      container.append(this.domNode);
      this.startupNoAppend();
    },
    startupNoAppend: function FilteringSearchWidget$StartupNoAppend() {
      this.startup();
    },
    layout: function FilteringSearchWidget$Layout(pixelHeight) {
    },
    hideUI: function FilteringSearchWidget$HideUI() {
      this.domNode.style.display = 'none';
      $tab_SearchWidgetBase.prototype.hideUI.call(this);
    },
    showUI: function FilteringSearchWidget$ShowUI(noLayout) {
      $tab_SearchWidgetBase.prototype.showUI.call(this, noLayout);
    },
    getHeight: function FilteringSearchWidget$GetHeight() {
      var el = $(this.domNode);
      return (this.get_isVisible() ? el.outerHeight(true) : 0);
    },
    focusQueryBox: function FilteringSearchWidget$FocusQueryBox() {
      this.domQueryBox.focus();
    },
    getQuery: function FilteringSearchWidget$GetQuery() {
      return this.domQueryBox.value;
    },
    setQuery: function FilteringSearchWidget$SetQuery(value) {
      this.domQueryBox.value = value;
    },
    onXButtonClick: function FilteringSearchWidget$OnXButtonClick(evt) {
      if (this.$style === 1) {
        this.clearSearch(false, false);
        $(this.get_domXButton()).removeClass('Hover');
      }
      else {
        $tab_SearchWidgetBase.prototype.onXButtonClick.call(this, evt);
      }
    },
    updateSearch: function FilteringSearchWidget$UpdateSearch() {
      if (this.get_isVisible()) {
        this.searchWithQuery(this.getQuery());
      }
    },
    searchWithQuery: function FilteringSearchWidget$SearchWithQuery(query) {
      if (query.length <= 0) {
        this.clearSearch(false, false);
      }
      else if (this.get_qf().get_oFilter().isTiled) {
        this.doRemoteSearch(query, true);
      }
      else {
        this.handleSearchResults(this.doCategoricalSearch(query));
      }
    },
    doRemoteSearch: function FilteringSearchWidget$DoRemoteSearch(query, shouldGetIndex) {
      this.doAjaxRemoteSearch(query, this.$searchResultsMaxRows, shouldGetIndex, ss.mkdel(this, this.handleSearchResults), ss.mkdel(this, this.$handleSearchResultsError));
    },
    getOnQueryBoxKeyDownBehavior: function FilteringSearchWidget$GetOnQueryBoxKeyDownBehavior(keyEvent) {
      var result;
      result = this.inherited(arguments);
      switch (keyEvent.keyCode) {
        case 37:
        case 39:
        case 38: {
          result.functionToCall = null;
          result.stopEvent = false;
          break;
        }
        case 40: {
          var parent = $(this.domNode.parentElement);
          parent.find('.FIItem').eq(0).focus();
          if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight') && tab.FeatureFlags.isEnabled('WebCategoricalSelectionSearchResults')) {
            this.$handleSelectionDownFromQueryBox(parent.children('.CFInnerContainer').children('.FIItem').get(0));
          }
          result.functionToCall = null;
          result.stopEvent = true;
          break;
        }
        case 13: {
          result.stopEvent = true;
          result.functionToCall = ss.mkdel(this, this.$handleEnter);
          break;
        }
      }
      return result;
    },
    clearSearch: function FilteringSearchWidget$ClearSearch(preserveQueryBoxText, noFocus) {
      $(this.domNode).addClass('SearchCleared');
      $(this.domScreenReaderStatus).empty();
      if (this.resultCount === $tab_SearchWidgetBase.noSearchPerformed) {
        if (!noFocus) {
          this.focusQueryBox();
        }
      }
      else {
        $tab_SearchWidgetBase.prototype.clearSearch.call(this, preserveQueryBoxText, noFocus);
        this.get_$qfAsFilteringQf().filterBySearchResults(null);
        this.resultCount = $tab_SearchWidgetBase.noSearchPerformed;
      }
    },
    $handleSelectionDownFromQueryBox: function FilteringSearchWidget$HandleSelectionDownFromQueryBox(firstResult) {
      var targetIndex = 0;
      if (this.get_quickFilter().hasAllItem()) {
        targetIndex = -1;
      }
      if (this.resultCount !== 0) {
        if (this.resultCount > 0) {
          targetIndex = $tab_FilterItemUtil.filterItem.getIndex(firstResult);
        }
        this.get_quickFilter().categoricalSelectionBehavior.handleSimpleSelection(ss.mkdict(['ShiftKey', false]), targetIndex);
      }
    },
    handleQueryTextChanged: function FilteringSearchWidget$HandleQueryTextChanged(evt) {
      var delay = $tab_FilteringSearchWidget.$defaultSearchDelay;
      $(this.domNode).removeClass('SearchCleared');
      $tab_SearchWidgetBase.prototype.handleQueryTextChanged.call(this, evt);
      switch (this.domQueryBox.value.length) {
        case 1: {
          delay = Math.round(delay * 1.5);
          break;
        }
        case 2: {
          delay = Math.round(delay * 1.25);
          break;
        }
      }
      this.$searchTimer = tab.MiscUtil.clearTimeout(this.$searchTimer);
      this.$searchTimer = window.setTimeout(ss.mkdel(this, this.updateSearch), delay);
    },
    $handleEnter: function FilteringSearchWidget$HandleEnter(evt) {
      this.updateSearch();
    },
    handleSearchResults: function FilteringSearchWidget$HandleSearchResults(data) {
      if (ss.isValue(data.length)) {
        this.resultCount = data.length;
      }
      else if (ss.isValue(data.tuples)) {
        this.resultCount = data.tuples.length;
        data = this.$processRemoteResults(data);
      }
      this.get_$qfAsFilteringQf().filterBySearchResults(data);
      $(this.domScreenReaderStatus).text(((this.resultCount > 0) ? tab.Strings.QuickFilterSearchFoundMatches(this.resultCount) : tab.Strings.QuickFilterSearchNoMatches));
    },
    $processRemoteResults: function FilteringSearchWidget$ProcessRemoteResults(data) {
      var itemName = this.makeUniqueSearchItemIdPrefix();
      var tuples = data.tuples;
      var indices = data.indices;
      var results = [];
      for (var i = 0; i < tuples.length; i++) {
        results.push($tab_FilterItemUtil.filterItem.getSearchResultHtml(this.get_qf(), tuples[i], itemName, indices[i]));
      }
      return results;
    },
    $handleSearchResultsError: function FilteringSearchWidget$HandleSearchResultsError(response) {
      tab.Log.get(this).debug('Search results error: ' + response.toString(), []);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilteringSearchWidgetStyle
  var $tab_FilteringSearchWidgetStyle = global.tab.FilteringSearchWidgetStyle = ss.mkEnum($asm, 'tab.FilteringSearchWidgetStyle', { invalid: 0, dropdown: 1, inline: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilterItemBase
  var $tab_FilterItemBase = global.tab.FilterItemBase = ss.mkType($asm, 'tab.FilterItemBase', function() {
  }, {
    getSearchResultHtml: null,
    formatChecklistFilterItemHtml: null,
    getCheckHtml: null,
    formatRadiolistFilterItemHtml: null,
    getRadioHtml: null,
    formatDropdownListFilterItemHtml: null,
    getDropdownHtml: null,
    getDropdownNoneHtml: null,
    getTypeInHtml: null,
    getSelectHtml: function FilterItemBase$GetSelectHtml(id, dname, isChecked, isAll) {
      var arr = ['<option value="', '', '" ', '', '>', '', '</option>'];
      arr[1] = tab.EscapingUtil.escapeHtml(id);
      arr[3] = ((isChecked && !isAll) ? 'SELECTED' : '');
      arr[5] = tab.EscapingUtil.escapeHtml(dname);
      return arr.join('');
    },
    getCssNode: null,
    isPending: null,
    togglePendingState: null,
    setChecked: null,
    isChecked: null,
    syncCssToCheckState: null,
    setSelected: null,
    isSelected: null,
    isTiled: function FilterItemBase$IsTiled(node) {
      var tileNode = ss.cast(node.parentNode, HTMLElement);
      if (ss.isValue(tileNode)) {
        return $(tileNode).hasClass('tile');
      }
      return false;
    },
    getNodeFromEvent: null,
    getIndex: null,
    isTypeInListItem: null,
    isAllItem: null,
    getCheckboxOrRadio: function FilterItemBase$GetCheckboxOrRadio(node) {
      var checkboxNode = tableau.util.findElementByTagName(node, 'input', ss.mkdict(['type', 'checkbox']));
      if (ss.isValue(checkboxNode)) {
        return ss.cast(checkboxNode, ss.isValue(checkboxNode) && (ss.isInstanceOfType(checkboxNode, Element) && checkboxNode.tagName === 'INPUT'));
      }
      var $t1 = tableau.util.findElementByTagName(node, 'input', ss.mkdict(['type', 'radio']));
      return ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'INPUT'));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilterItemDesktop
  var $tab_FilterItemDesktop = global.tab.FilterItemDesktop = ss.mkType($asm, 'tab.FilterItemDesktop', function() {
    $tab_FilterItemBase.call(this);
  }, {
    $getDropdownWithNoneHtml: function FilterItemDesktop$GetDropdownWithNoneHtml(id, dname, facet, showFacets, isNone) {
      var classes = 'FIItem' + ' FISimpleDropdownItem' + (isNone ? ' FINone' : '');
      var facetValue = (showFacets ? facet : '');
      return ["<div tabindex='-1' role='option' class=\"", classes, '" id="', id, '"><div class="facet">', facetValue, '</div><div class="facetOverflow"><a title="', dname, '">', ((dname === '') ? '&nbsp;' : dname), '</a></div></div>'].join('');
    },
    getSearchResultHtml: function FilterItemDesktop$GetSearchResultHtml(filter, tuple, itemName, itemIndex) {
      switch (filter.get_mode()) {
        case 'checklist':
        case 'checkdropdown':
        case 'typeinlist': {
          return this.formatChecklistFilterItemHtml(filter, tuple, itemName, itemIndex);
        }
        case 'radiolist': {
          return this.formatRadiolistFilterItemHtml(filter, tuple, itemName, itemIndex);
        }
        case 'dropdown': {
          return this.formatDropdownListFilterItemHtml(filter, tuple, itemName, itemIndex);
        }
      }
      return '';
    },
    formatChecklistFilterItemHtml: function FilterItemDesktop$FormatChecklistFilterItemHtml(filter, tuple, itemName, itemIndex) {
      var id = $tab_FilterItemUtil.getItemId(itemName, itemIndex);
      var isChecked = $tab_FilterItemUtil.shouldCheckFilterItemMultiValue(tuple, filter);
      var dname = $tab_FilterFormat.formatTupleDisplayName(tuple, true, filter.get_oFilter().role);
      var facet = $tab_FilterFormat.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
      var showFacets = $tab_FilterItemUtil.showFacets(filter);
      var isHierarchical = filter.get_viewModel().get_filterType() === 'Hierarchical';
      var isPending = !isHierarchical && ss.isValue(filter.get_modeContents().pendingManager) && filter.get_modeContents().pendingManager.isPending(tuple, itemIndex);
      var height = null;
      if (!isHierarchical && ss.isValue(filter.get_modeContents())) {
        height = filter.get_modeContents().get_lineHeight();
      }
      return this.getCheckHtml(id, dname, isChecked, facet, showFacets, isPending, height);
    },
    getCheckHtml: function FilterItemDesktop$GetCheckHtml(id, dname, isChecked, facet, showFacets, isPending, height) {
      var style = (ss.isNullOrUndefined(height) ? '' : tab.EscapingUtil.escapeHtml('height: ' + height + 'px;'));
      var classes = (isPending ? ('FIItem' + ' FIPending') : 'FIItem');
      var idValue = tab.EscapingUtil.escapeHtml(id);
      var dnameValue = tab.EscapingUtil.escapeHtml(dname);
      var facetValue = (showFacets ? facet : '');
      var checkedValue = '';
      var ariaValue = '';
      if (isChecked && !isPending || !isChecked && isPending) {
        ariaValue = ' aria-checked="true" ';
        classes += ' FIChecked';
        checkedValue = ' checked="checked" ';
      }
      else {
        ariaValue = ' aria-checked="false" ';
      }
      return ['<div role="checkbox" tabindex="-1"' + ariaValue, ' style="' + style, '" class="' + classes, '" id="', idValue, '"><div class="facet">', facetValue, '</div><div class="facetOverflow"><input tabindex="-1" type="checkbox" class="FICheckRadio" name="', idValue, '" ', checkedValue, '><div class="fakeCheckBox"></div><a class="FIText" title="', dnameValue, '">', dnameValue, '</a></div></div>'].join('');
    },
    formatRadiolistFilterItemHtml: function FilterItemDesktop$FormatRadiolistFilterItemHtml(filter, tuple, itemName, itemIndex) {
      var id = $tab_FilterItemUtil.getItemId(itemName, itemIndex);
      var isChecked = $tab_FilterItemUtil.shouldCheckFilterItemSingleValue(tuple, filter);
      var dname = $tab_FilterFormat.formatTupleDisplayName(tuple, true, filter.get_oFilter().role);
      var facet = $tab_FilterFormat.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
      var showFacets = $tab_FilterItemUtil.showFacets(filter);
      var isHierarchical = filter.get_viewModel().get_filterType() === 'Hierarchical';
      var height = null;
      if (!isHierarchical && ss.isValue(filter.get_modeContents())) {
        height = filter.get_modeContents().get_lineHeight();
      }
      return this.getRadioHtml(id, itemName, dname, isChecked, facet, showFacets, height);
    },
    getRadioHtml: function FilterItemDesktop$GetRadioHtml(id, name, dname, isChecked, facet, showFacets, height) {
      var style = (ss.isNullOrUndefined(height) ? '' : tab.EscapingUtil.escapeHtml('height: ' + height + 'px;'));
      var classes = 'FIItem';
      var idValue = tab.EscapingUtil.escapeHtml(id);
      var nameValue = tab.EscapingUtil.escapeHtml(name);
      var facetValue = (showFacets ? facet : '');
      var checkedValue = '';
      var dnameValue = tab.EscapingUtil.escapeHtml(dname);
      var ariaValue = ' aria-checked="false" ';
      var tabIndex = ' tabindex ="-1" ';
      if (isChecked) {
        ariaValue = ' aria-checked="true" ';
        classes += ' FIChecked';
        checkedValue = ' checked="checked" ';
        tabIndex = ' tabindex ="0" ';
      }
      return ['<div role="radio"' + tabIndex + ariaValue, ' style="' + style, '" class="' + classes, '" id="', idValue, '"><div class="facet">', facetValue, '</div><div class="facetOverflow"><input tabindex="-1" type="radio" class="FICheckRadio" name="', nameValue, '" ', checkedValue, '><div class="fakeRadio"></div><a class="FIText" title="', dnameValue, '">', dnameValue, '</a></div></div>'].join('');
    },
    formatDropdownListFilterItemHtml: function FilterItemDesktop$FormatDropdownListFilterItemHtml(filter, tuple, itemName, itemIndex) {
      var id = $tab_FilterItemUtil.getItemId(itemName, itemIndex);
      var dname = $tab_FilterFormat.formatTupleDisplayName(tuple, false, filter.get_oFilter().role);
      var facet = $tab_FilterFormat.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
      var showFacets = $tab_FilterItemUtil.showFacets(filter);
      return this.getDropdownHtml(id, dname, facet, showFacets);
    },
    getDropdownNoneHtml: function FilterItemDesktop$GetDropdownNoneHtml(id, dname, facet, showFacets) {
      return this.$getDropdownWithNoneHtml(id, dname, facet, showFacets, true);
    },
    getDropdownHtml: function FilterItemDesktop$GetDropdownHtml(id, dname, facet, showFacets) {
      return this.$getDropdownWithNoneHtml(id, dname, facet, showFacets, false);
    },
    getTypeInHtml: function FilterItemDesktop$GetTypeInHtml(id, dname) {
      var arr = ['<div tabindex="0" class="FIItem FITypeInItem FIChecked" id="', '', '" title="', '', '">', '', '</div>'];
      arr[1] = tab.EscapingUtil.escapeHtml(id);
      arr[3] = arr[5] = tab.EscapingUtil.escapeHtml(dname);
      return arr.join('');
    },
    getCssNode: function FilterItemDesktop$GetCssNode(node) {
      return $tab_FilterItemUtil.getClassElement(node, 'FIItem');
    },
    isPending: function FilterItemDesktop$IsPending(node) {
      var cssNode = this.getCssNode(node);
      return ss.isValue(cssNode) && $(cssNode).hasClass('FIPending');
    },
    togglePendingState: function FilterItemDesktop$TogglePendingState(node) {
      var cssNode = this.getCssNode(node);
      $(cssNode).toggleClass('FIPending');
    },
    setChecked: function FilterItemDesktop$SetChecked(node, isChecked, tuple) {
      var cssNode = this.getCssNode(node);
      $(cssNode).toggleClass('FIChecked', isChecked).filter('[aria-checked]').attr('aria-checked', isChecked);
      var checkBoxOrRadio = this.getCheckboxOrRadio(node);
      if (ss.isValue(checkBoxOrRadio)) {
        checkBoxOrRadio.checked = isChecked;
      }
      if (ss.isValue(tuple)) {
        tuple.s = isChecked;
      }
      if ($(checkBoxOrRadio).is('input[type=radio]:checked')) {
        this.$clearRadioListState(cssNode);
      }
      return tuple;
    },
    $clearRadioListState: function FilterItemDesktop$ClearRadioListState(cssNode) {
      var checkedRadios = $(cssNode).siblings('.FIChecked').toArray();
      checkedRadios.map(ss.mkdel(this, function(n) {
        return this.setChecked(n, false);
      }));
    },
    isChecked: function FilterItemDesktop$IsChecked(node) {
      var cssNode = this.getCssNode(node);
      return ss.isValue(cssNode) && $(cssNode).hasClass('FIChecked');
    },
    syncCssToCheckState: function FilterItemDesktop$SyncCssToCheckState(node) {
      var checkBoxOrRadio = this.getCheckboxOrRadio(node);
      if (ss.isValue(checkBoxOrRadio)) {
        this.setChecked(node, checkBoxOrRadio.checked, null);
      }
    },
    setSelected: function FilterItemDesktop$SetSelected(node, selected) {
      var cssNode = this.getCssNode(node);
      $(cssNode).toggleClass('FISelected', selected);
    },
    isSelected: function FilterItemDesktop$IsSelected(node) {
      var cssNode = this.getCssNode(node);
      return ss.isValue(cssNode) && $(cssNode).hasClass('FISelected');
    },
    getNodeFromEvent: function FilterItemDesktop$GetNodeFromEvent(evt) {
      if (ss.isNullOrUndefined(evt) || ss.isNullOrUndefined(evt.target)) {
        return null;
      }
      var node = evt.target;
      while (ss.isValue(node) && node.tagName !== 'OPTION' && !$(node).hasClass('FIItem')) {
        node = node.parentNode;
      }
      return node;
    },
    getIndex: function FilterItemDesktop$GetIndex(node) {
      return $tab_FilterItemUtil.getIndexFromId(node.id);
    },
    isTypeInListItem: function FilterItemDesktop$IsTypeInListItem(node) {
      var cssNode = this.getCssNode(node);
      return ss.isValue(cssNode) && $(cssNode).hasClass('FITypeInItem');
    },
    isAllItem: function FilterItemDesktop$IsAllItem(node) {
      if (ss.isNullOrUndefined(node) || this.isTypeInListItem(node)) {
        return false;
      }
      return $tab_FilterItemUtil.isAllItemId(node.id);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilterItemMobile
  var $tab_FilterItemMobile = global.tab.FilterItemMobile = ss.mkType($asm, 'tab.FilterItemMobile', function() {
    $tab_FilterItemBase.call(this);
  }, {
    $getDropdownWithNoneHtml: function FilterItemMobile$GetDropdownWithNoneHtml(id, dname, facet, showFacets, isNone) {
      var facetDiv = '';
      if (showFacets) {
        facetDiv = facet;
      }
      return ['<div class="FIMContainer FIMDropdown' + (isNone ? ' FINone' : '') + '" id="', id, '"><div class="facet">', facetDiv, '</div><span class="FIMCheckLabel tab-ctrl-formatted-fixedsize">', dname, '</span></div>'].join('');
    },
    getSearchResultHtml: function FilterItemMobile$GetSearchResultHtml(filter, tuple, itemName, itemIndex) {
      switch (filter.get_mode()) {
        case 'checklist':
        case 'checkdropdown':
        case 'typeinlist': {
          return this.formatChecklistFilterItemHtml(filter, tuple, itemName, itemIndex);
        }
        case 'radiolist': {
          return this.formatRadiolistFilterItemHtml(filter, tuple, itemName, itemIndex);
        }
        case 'dropdown': {
          return this.formatDropdownListFilterItemHtml(filter, tuple, itemName, itemIndex);
        }
      }
      return '';
    },
    formatChecklistFilterItemHtml: function FilterItemMobile$FormatChecklistFilterItemHtml(filter, tuple, itemName, itemIndex) {
      var id = $tab_FilterItemUtil.getItemId(itemName, itemIndex);
      var isChecked = $tab_FilterItemUtil.shouldCheckFilterItemMultiValue(tuple, filter);
      var dname = $tab_FilterFormat.formatTupleDisplayName(tuple, false, filter.get_oFilter().role);
      var facet = $tab_FilterFormat.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
      var showFacets = $tab_FilterItemUtil.showFacets(filter);
      var isPending = ss.isValue(filter.get_modeContents().pendingManager) && filter.get_modeContents().pendingManager.isPending(tuple, itemIndex);
      var height = null;
      return this.getCheckHtml(id, dname, isChecked, facet, showFacets, isPending, height);
    },
    getCheckHtml: function FilterItemMobile$GetCheckHtml(id, dname, isChecked, facet, showFacets, isPending, height) {
      var checkedClass = '';
      var pendingClass = (isPending ? 'FIMPending' : '');
      var facetDiv = '';
      if (isChecked && !isPending || !isChecked && isPending) {
        checkedClass = ' FIMChecked';
      }
      if (showFacets) {
        facetDiv = facet;
      }
      return ['<div class="FIMContainer ' + pendingClass + ' facetOverflow" id="', id, '"><div class="facet">', facetDiv, '</div><span class="FIMCheckMark', checkedClass, '"></span><span class="FIMCheckLabel tab-ctrl-formatted-text', checkedClass, '">', dname, '</span></div>'].join('');
    },
    formatRadiolistFilterItemHtml: function FilterItemMobile$FormatRadiolistFilterItemHtml(filter, tuple, itemName, itemIndex) {
      var id = $tab_FilterItemUtil.getItemId(itemName, itemIndex);
      var isChecked = $tab_FilterItemUtil.shouldCheckFilterItemSingleValue(tuple, filter);
      var dname = $tab_FilterFormat.formatTupleDisplayName(tuple, false, filter.get_oFilter().role);
      var facet = $tab_FilterFormat.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
      var showFacets = $tab_FilterItemUtil.showFacets(filter);
      var height = null;
      return this.getRadioHtml(id, null, dname, isChecked, facet, showFacets, height);
    },
    getRadioHtml: function FilterItemMobile$GetRadioHtml(id, name, dname, isChecked, facet, showFacets, height) {
      var checkedClass = '', facetDiv = '';
      if (isChecked) {
        checkedClass = ' FIMRadiolist FIMChecked';
      }
      if (showFacets) {
        facetDiv = facet;
      }
      return ['<div class="FIMContainer facetOverflow" id="', id, '"><div class="facet">', facetDiv, '</div><span class="FIMCheckMark', checkedClass, '"></span><span class="FIMCheckLabel tab-ctrl-formatted-text', checkedClass, '">', dname, '</span></div>'].join('');
    },
    formatDropdownListFilterItemHtml: function FilterItemMobile$FormatDropdownListFilterItemHtml(filter, tuple, itemName, itemIndex) {
      var id = $tab_FilterItemUtil.getItemId(itemName, itemIndex);
      var dname = $tab_FilterFormat.formatTupleDisplayName(tuple, false, filter.get_oFilter().role);
      var facet = $tab_FilterFormat.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role);
      var showFacets = $tab_FilterItemUtil.showFacets(filter);
      return this.getDropdownHtml(id, dname, facet, showFacets);
    },
    getDropdownNoneHtml: function FilterItemMobile$GetDropdownNoneHtml(id, dname, facet, showFacets) {
      return this.$getDropdownWithNoneHtml(id, dname, facet, showFacets, true);
    },
    getDropdownHtml: function FilterItemMobile$GetDropdownHtml(id, dname, facet, showFacets) {
      return this.$getDropdownWithNoneHtml(id, dname, facet, showFacets, false);
    },
    getTypeInHtml: function FilterItemMobile$GetTypeInHtml(id, dname) {
      return ['<div class="FIMContainer FIMTypeIn" id="', id, '"><span class="FIMCheckLabel tab-ctrl-formatted-text">', dname, '</span></div>'].join('');
    },
    getCssNode: function FilterItemMobile$GetCssNode(node) {
      return $tab_FilterItemUtil.getClassElement(node, 'FIMContainer');
    },
    setChecked: function FilterItemMobile$SetChecked(node, isChecked, tuple) {
      var checkMarkNode = $(node).find('.FIMCheckMark');
      var itemNode = $(node).find('.FIMCheckLabel');
      if (ss.isValue(checkMarkNode) && ss.isValue(itemNode)) {
        if (isChecked) {
          checkMarkNode.addClass('FIMChecked');
          itemNode.addClass('FIMChecked');
        }
        else {
          checkMarkNode.removeClass('FIMChecked');
          itemNode.removeClass('FIMChecked');
        }
      }
      if (ss.isValue(tuple)) {
        tuple.s = isChecked === true;
      }
      return tuple;
    },
    isChecked: function FilterItemMobile$IsChecked(node) {
      if (ss.isValue(node) && $(node).hasClass('FIMContainer')) {
        var checkMarkNode = $(node).find('.FIMCheckMark');
        return (ss.isValue(checkMarkNode) ? checkMarkNode.hasClass('FIMChecked') : false);
      }
      return false;
    },
    isPending: function FilterItemMobile$IsPending(node) {
      if (ss.isValue(node)) {
        return $(node).hasClass('FIMPending');
      }
      return false;
    },
    togglePendingState: function FilterItemMobile$TogglePendingState(node) {
      $(node).toggleClass('FIMPending');
    },
    syncCssToCheckState: function FilterItemMobile$SyncCssToCheckState(node) {
      var checkBoxOrRadio = this.getCheckboxOrRadio(node);
      if (ss.isValue(checkBoxOrRadio)) {
        this.setChecked(node, checkBoxOrRadio.checked);
      }
    },
    setSelected: function FilterItemMobile$SetSelected(node, selected) {
      var cssNode = this.getCssNode(node);
      if (selected) {
        $(cssNode).addClass('FIMSelected');
      }
      else {
        $(cssNode).removeClass('FIMSelected');
      }
    },
    isSelected: function FilterItemMobile$IsSelected(node) {
      var cssNode = this.getCssNode(node);
      return $(cssNode).hasClass('FIMSelected');
    },
    getNodeFromEvent: function FilterItemMobile$GetNodeFromEvent(evt) {
      if (ss.isNullOrUndefined(evt) || ss.isNullOrUndefined(evt.target)) {
        return null;
      }
      var node = evt.target;
      while (ss.isValue(node) && node.tagName !== 'OPTION' && !$(node).hasClass('FIMContainer')) {
        node = ss.cast(node.parentNode, HTMLElement);
      }
      return node;
    },
    getIndex: function FilterItemMobile$GetIndex(node) {
      return $tab_FilterItemUtil.getIndexFromId(node.id);
    },
    isTypeInListItem: function FilterItemMobile$IsTypeInListItem(node) {
      var cssNode = this.getCssNode(node);
      return $(cssNode).hasClass('FIMTypeIn');
    },
    isAllItem: function FilterItemMobile$IsAllItem(node) {
      if (this.isTypeInListItem(node)) {
        return false;
      }
      return $tab_FilterItemUtil.isAllItemId(node.id);
    }
  }, {
    formatListRowFilterItemHtml: function FilterItemMobile$FormatListRowFilterItemHtml(filter, tuple, itemName, itemIndex) {
      var id = $tab_FilterItemUtil.getItemId(itemName, itemIndex);
      var isAllItem = itemIndex === $tab_FilterItemUtil.allItemIndex;
      var isChecked;
      if (isAllItem) {
        isChecked = tuple.s;
      }
      else if (filter.isSingleSelect()) {
        isChecked = $tab_FilterItemUtil.shouldCheckFilterItemSingleValue(tuple, filter);
      }
      else {
        isChecked = $tab_FilterItemUtil.shouldCheckFilterItemMultiValue(tuple, filter);
      }
      var dname = $tab_FilterFormat.formatTupleDisplayName(tuple, false, filter.get_oFilter().role);
      var showFacets = $tab_FilterItemUtil.showFacets(filter);
      var facet = (showFacets ? $tab_FilterFormat.formatTupleDisplayFacet(tuple, false, filter.get_oFilter().role) : '');
      var isPending = ss.isValue(filter.get_modeContents()) && ss.isValue(filter.get_modeContents().pendingManager) && filter.get_modeContents().pendingManager.isPending(tuple, itemIndex);
      var shouldDisplayChecked = false;
      if (isAllItem) {
        var pendingManager = (ss.isValue(filter.get_modeContents()) ? filter.get_modeContents().pendingManager : null);
        shouldDisplayChecked = $tab_Checklist.shouldCheckAllItem(filter.get_oFilter(), pendingManager);
      }
      else if (isChecked && !isPending || !isChecked && isPending) {
        shouldDisplayChecked = true;
      }
      return $tab_FilterItemMobile.getScrollingListRowHtml(id, dname, facet, isAllItem, shouldDisplayChecked, showFacets, isPending);
    },
    getScrollingListRowHtml: function FilterItemMobile$GetScrollingListRowHtml(id, dname, facet, isAllRow, isChecked, isWide, isPending) {
      return ['<div class="ListRow', (isAllRow ? ' rowAll' : ''), (isChecked ? ' checked' : ''), (isWide ? ' Wide' : ''), (isPending ? ' pending' : ''), '" id="_popup_', id, '">', '<div class="facet">', facet, '</div>', '<div class="checkArea">&nbsp;</div>', '<div class="labelArea" style="margin-left: 28px;">', dname, '</div></div>'].join('');
    },
    formatRemovableListRowFilterItemHtml: function FilterItemMobile$FormatRemovableListRowFilterItemHtml(filter, tuple, itemName, itemIndex) {
      var id = $tab_FilterItemUtil.getItemId(itemName, itemIndex);
      var dname = $tab_FilterFormat.formatTupleDisplayName(tuple, false, filter.get_oFilter().role);
      return $tab_FilterItemMobile.getScrollingListRemovableRowHtml(id, dname);
    },
    getScrollingListRemovableRowHtml: function FilterItemMobile$GetScrollingListRemovableRowHtml(id, dname) {
      return ['<div class="ListRow" id="_popup_', id, '" style="min-width: 270px; white-space: nowrap;">' + '<div class="wcIconSearchRemoveContainer" style="margin-right:10px">' + '<div class="wcIconSearchRemove" style="margin-right:10px">&nbsp;</div>' + '</div>' + '<div class="xRowlabelArea">', dname, '</div>' + '<div style="clear:both;"></div>' + '</div>'].join('');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilterItemUtil
  var $tab_FilterItemUtil = global.tab.FilterItemUtil = ss.mkType($asm, 'tab.FilterItemUtil', null, null, {
    getBaseItemName: function FilterItemUtil$GetBaseItemName(filter, prefix) {
      var itemName = prefix + '_' + filter.get_oFilter().name;
      if (ss.isValue(filter.get_session())) {
        itemName += filter.get_session().get_viewId();
      }
      return itemName;
    },
    getAliasForTuple: function FilterItemUtil$GetAliasForTuple(tuple) {
      return tuple.d || tuple.t[0].v;
    },
    getItemId: function FilterItemUtil$GetItemId(itemName, itemIndex) {
      return tab.EscapingUtil.escapeHtml(itemName + '_' + ((itemIndex === $tab_FilterItemUtil.allItemIndex) ? $tab_FilterItemUtil.$all : itemIndex.toString()));
    },
    getIndexFromId: function FilterItemUtil$GetIndexFromId(id) {
      var indexString = $tab_FilterItemUtil.$getIndexString(id);
      var index = parseInt(indexString, 10);
      if (isNaN(index)) {
        if (ss.referenceEquals(indexString, $tab_FilterItemUtil.$all)) {
          return $tab_FilterItemUtil.allItemIndex;
        }
        else {
          return $tab_FilterItemUtil.unknownItemIndex;
        }
      }
      return index;
    },
    isAllItemId: function FilterItemUtil$IsAllItemId(id) {
      return ss.referenceEquals($tab_FilterItemUtil.$getIndexString(id), $tab_FilterItemUtil.$all);
    },
    getAllItemTuple: function FilterItemUtil$GetAllItemTuple(allFacet, isChecked) {
      var tuple = { d: $tab_FilterItemUtil.$all, s: isChecked, t: null, f: [{ t: 'i', v: allFacet, s: null }] };
      return tuple;
    },
    getAllItemHtml: function FilterItemUtil$GetAllItemHtml(filter, itemName, allFacet, isChecked, formatter) {
      return formatter(filter, $tab_FilterItemUtil.getAllItemTuple(allFacet, isChecked), itemName, $tab_FilterItemUtil.allItemIndex);
    },
    isAllOrAllChecked: function FilterItemUtil$IsAllOrAllChecked(filter) {
      return filter.get_oFilter().all || filter.get_oFilter().allChecked;
    },
    isAllMode: function FilterItemUtil$IsAllMode(filter) {
      return filter.get_oFilter().all;
    },
    addAllItemToTuples: function FilterItemUtil$AddAllItemToTuples(tuples, isAllChecked, facet) {
      var allTuple = [];
      allTuple.push({ d: tab.Strings.QuickFilterAll, s: isAllChecked, t: [{ t: 'i', v: facet, s: null }] });
      return $.merge(allTuple, tuples);
    },
    shouldCheckFilterItemSingleValue: function FilterItemUtil$ShouldCheckFilterItemSingleValue(tuple, filter) {
      return tuple.s && !(filter.get_oFilter().exclude && $tab_FilterItemUtil.isAllOrAllChecked(filter));
    },
    shouldCheckFilterItemMultiValue: function FilterItemUtil$ShouldCheckFilterItemMultiValue(tuple, filter) {
      return tuple.s || !filter.get_oFilter().exclude && $tab_FilterItemUtil.isAllMode(filter);
    },
    showFacets: function FilterItemUtil$ShowFacets(filter) {
      return filter.get_oFilter().showFacets && filter.get_modeContents().get_width() > 100;
    },
    resetPendingFilterItems: function FilterItemUtil$ResetPendingFilterItems(items, updateCheckState) {
      for (var $t1 = 0; $t1 < items.length; $t1++) {
        var checkbox = items[$t1];
        if ($tab_FilterItemUtil.filterItem.isPending(checkbox)) {
          $tab_FilterItemUtil.filterItem.togglePendingState(checkbox);
          if (updateCheckState) {
            $tab_FilterItemUtil.filterItem.setChecked(checkbox, !$tab_FilterItemUtil.filterItem.isChecked(checkbox));
          }
        }
      }
    },
    toggleClassState: function FilterItemUtil$ToggleClassState(item, className) {
      var el = $(item);
      var newState = !el.hasClass(className);
      el.toggleClass(className, newState);
      return newState;
    },
    getClassElement: function FilterItemUtil$GetClassElement(node, className) {
      for (var i = 0; ss.isValue(node) && i < 5; i++, node = ss.cast(node.parentNode, HTMLElement)) {
        if ($(node).hasClass(className)) {
          return node;
        }
      }
      return null;
    },
    $getIndexString: function FilterItemUtil$GetIndexString(id) {
      var splitVal = id.split(String.fromCharCode(95));
      return splitVal[splitVal.length - 1];
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FilterListUI
  var $tab_FilterListUI = global.tab.FilterListUI = ss.mkType($asm, 'tab.FilterListUI', function(windowEl, totalHeight, tileCount) {
    this.$windowNode = null;
    this.$tileContainerNode = null;
    this.$tileNodes = null;
    this.$latestScroll = null;
    this.$lastScrollTime = 0;
    this.$lastScrollTop = 0;
    this.$1$ScrolledField = null;
    this.$windowNode = $(windowEl);
    this.$windowNode.addClass('tiledContent');
    var tileContainerEl = document.createElement('div');
    this.$tileContainerNode = $(tileContainerEl);
    this.$tileContainerNode.css('left', '0px');
    this.$tileContainerNode.css('position', 'relative');
    this.$tileContainerNode.css('height', totalHeight + 'px');
    this.$tileContainerNode.css('width', this.$windowNode.css('width') + 'px');
    this.$tileContainerNode.addClass('tileContainer');
    this.$windowNode.append(this.$tileContainerNode);
    this.$windowNode.scroll(ss.mkdel(this, this.$onScrolled));
    this.$tileNodes = new Array(tileCount);
  }, {
    add_scrolled: function FilterListUI$add_Scrolled(value) {
      this.$1$ScrolledField = ss.delegateCombine(this.$1$ScrolledField, value);
    },
    remove_scrolled: function FilterListUI$remove_Scrolled(value) {
      this.$1$ScrolledField = ss.delegateRemove(this.$1$ScrolledField, value);
    },
    get_windowNode: function FilterListUI$get_WindowNode() {
      return this.$windowNode;
    },
    get_tileContainerNode: function FilterListUI$get_TileContainerNode() {
      return this.$tileContainerNode;
    },
    get_lastScrollTop: function FilterListUI$get_LastScrollTop() {
      return this.$lastScrollTop;
    },
    destroy: function FilterListUI$Destroy() {
      this.$windowNode.off('scroll');
      this.$tileContainerNode.remove();
    },
    setContent: function FilterListUI$SetContent(tileIndex, htmlContent) {
      var tileNode = $(htmlContent);
      tileNode.addClass('hide-tail');
      this.$tileContainerNode.append(tileNode);
      this.$tileNodes[tileIndex] = tileNode;
      window.setTimeout(function() {
        tileNode.removeClass('hide-tail');
      }, 0);
    },
    getTileElement: function FilterListUI$GetTileElement(index) {
      if (index < 0 || index >= this.$tileNodes.length) {
        tab.Log.get(this).warn('internal error: index out of bounds', []);
        return null;
      }
      return this.$tileNodes[index].get(0);
    },
    getItemElement: function FilterListUI$GetItemElement(tileIndex, itemIndex) {
      var targetTileEl = this.getTileElement(tileIndex);
      if (ss.isNullOrUndefined(targetTileEl)) {
        return null;
      }
      var itemEls = targetTileEl.children;
      if (itemEls.length < itemIndex || itemIndex < 0) {
        tab.Log.get(this).warn('internal error: index out of bounds', []);
        return null;
      }
      return itemEls[itemIndex];
    },
    $onScrolled: function FilterListUI$OnScrolled(e) {
      var currentScrollTime = (new Date()).getTime();
      var currentScrollTop = tab.DoubleUtil.roundToInt(this.$windowNode.parent().offset().top) - tab.DoubleUtil.roundToInt(this.$tileContainerNode.offset().top);
      var scrollVelocity = 0;
      if (ss.isValue(this.$latestScroll)) {
        var deltaTop = Math.abs(this.$lastScrollTop - currentScrollTop);
        var deltaTime = currentScrollTime - this.$lastScrollTime;
        scrollVelocity = deltaTop / Math.min(deltaTime, 1000);
      }
      var scrolledArgs = new $tab_ScrolledEventArgs({ x: 0, y: currentScrollTop });
      this.$lastScrollTop = currentScrollTop;
      this.$lastScrollTime = currentScrollTime;
      this.$latestScroll = scrolledArgs;
      var action = ss.mkdel(this, function() {
        if (ss.referenceEquals(scrolledArgs, this.$latestScroll)) {
          this.$1$ScrolledField(this, scrolledArgs);
        }
      });
      if (scrollVelocity > $tab_FilterListUI.$scrollVelocityThreshold) {
        window.setTimeout(action, 100);
      }
      else {
        action();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.FormattingStyleInfo
  var $tab_FormattingStyleInfo = global.tab.FormattingStyleInfo = ss.mkType($asm, 'tab.FormattingStyleInfo', function(textStyleModel, backgroundColor, lineHeight) {
    this.$textStyleModel = null;
    this.$backgroundColor = null;
    this.$lineHeight = null;
    this.$textStyleModel = textStyleModel;
    this.$backgroundColor = backgroundColor;
    this.$lineHeight = lineHeight;
  }, {
    get_textStyleModel: function FormattingStyleInfo$get_TextStyleModel() {
      return this.$textStyleModel;
    },
    get_backgroundColor: function FormattingStyleInfo$get_BackgroundColor() {
      return this.$backgroundColor;
    },
    get_lineHeight: function FormattingStyleInfo$get_LineHeight() {
      return this.$lineHeight;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ICategoricalSelectionWidget
  var $tab_ICategoricalSelectionWidget = global.tab.ICategoricalSelectionWidget = ss.mkType($asm, 'tab.ICategoricalSelectionWidget');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.IContentFetcher
  var $tab_IContentFetcher = global.tab.IContentFetcher = ss.mkType($asm, 'tab.IContentFetcher');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.IContentFormatter
  var $tab_IContentFormatter = global.tab.IContentFormatter = ss.mkType($asm, 'tab.IContentFormatter');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.IDropDownSelect
  var $tab_IDropDownSelect = global.tab.IDropDownSelect = ss.mkType($asm, 'tab.IDropDownSelect', function() {
    Object.call(this);
    this['_stopClickEvents'] = false;
  }, {
    _getMenuItemForOption: function IDropDownSelect$GetMenuItemForOption(option) {
      if (ss.isNullOrEmptyString(option.value)) {
        return new dijit.MenuSeparator();
      }
      else {
        var click = ss.mkdel(this, function() {
          this._setValueAttr(option);
        });
        var menuItemParams = new Object();
        menuItemParams.option = option;
        menuItemParams.label = option.label;
        menuItemParams.onClick = click;
        menuItemParams.disabled = option.disabled || false;
        return new tableau.base.widget.ui.iMenuItem(menuItemParams);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.IMenuItem
  var $tab_IMenuItem = global.tab.IMenuItem = ss.mkType($asm, 'tab.IMenuItem', function(parameters) {
    $tab_UIMenuItem.call(this);
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ITiledGridModel
  var $tab_ITiledGridModel = global.tab.ITiledGridModel = ss.mkType($asm, 'tab.ITiledGridModel');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ITiledWidgetUI
  var $tab_ITiledWidgetUI = global.tab.ITiledWidgetUI = ss.mkType($asm, 'tab.ITiledWidgetUI');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyCategoricalQuickFilter
  var $tab_LegacyCategoricalQuickFilter = global.tab.LegacyCategoricalQuickFilter = ss.mkType($asm, 'tab.LegacyCategoricalQuickFilter', function(props) {
    this.widgetsInTemplate = true;
    this.categoricalSelectionBehavior = null;
    this.getContextMenuCommands = null;
    this.requestSetAttributes = null;
    this.session = null;
    this.field = '';
    this.membershipTarget = 'filter';
    this.filterViewModel = null;
    this.presModel = null;
    this.attributes = {};
    this.isTypeInList = false;
    this.$disposables = null;
    this.domContent = null;
    this.domBox = null;
    this.searchDiv = null;
    this.resetButton = null;
    this.domainButton = null;
    this.menuButton = null;
    this.stateId = 0;
    this.singleSelectMenuItem = null;
    this.multiSelectMenuItem = null;
    this.inclusiveMenuItem = null;
    this.exclusiveMenuItem = null;
    this.getStateID = null;
    this.mode = null;
    this.metricsOnly = false;
    this.searchButton = null;
    this.domControls = null;
    this.width = 0;
    this.modeContents = null;
    this.domHorizScroll = null;
    this.showContextMenu = null;
    this.showDomainMenu = null;
    this.$4$SearchWidgetField = null;
    this.$4$PrevOFilterField = null;
    this.$4$TitleDomIdField = null;
    $tab_LegacyQuickFilterWidget.call(this);
    this.$disposables = new tab.DisposableHolder();
    this.categoricalSelectionBehavior = new $tab_CategoricalSelection(this);
    this.set_titleDomId(tab.DomUtil.generateUniqueId());
  }, {
    get_domBox: function LegacyCategoricalQuickFilter$get_DomBox() {
      return this.domBox;
    },
    get_resetButton: function LegacyCategoricalQuickFilter$get_ResetButton() {
      return this.resetButton;
    },
    get_shouldDisableResetButton: function LegacyCategoricalQuickFilter$get_ShouldDisableResetButton() {
      return ss.isValue(this.get_oFilter().all) && this.get_oFilter().all;
    },
    get_applyDelay: function LegacyCategoricalQuickFilter$get_ApplyDelay() {
      return (tsConfig.is_desktop ? 0 : 1000);
    },
    get_isTypeInList: function LegacyCategoricalQuickFilter$get_IsTypeInList() {
      return this.isTypeInList;
    },
    get_oFilter: function LegacyCategoricalQuickFilter$get_OFilter() {
      return this.oFilter;
    },
    get_quickFilterViewModel: function LegacyCategoricalQuickFilter$get_QuickFilterViewModel() {
      return ss.cast(this.filterViewModel, $tab_LegacyCategoricalQuickFilterViewModel);
    },
    get_viewModel: function LegacyCategoricalQuickFilter$get_ViewModel() {
      return this.filterViewModel;
    },
    get_dijitDeclaredClass: function LegacyCategoricalQuickFilter$get_DijitDeclaredClass() {
      return this.declaredClass;
    },
    get_mode: function LegacyCategoricalQuickFilter$get_Mode() {
      return this.mode;
    },
    set_mode: function LegacyCategoricalQuickFilter$set_Mode(value) {
      this.mode = value;
    },
    get_session: function LegacyCategoricalQuickFilter$get_Session() {
      return this.session;
    },
    set_session: function LegacyCategoricalQuickFilter$set_Session(value) {
      this.session = value;
    },
    get_attributes: function LegacyCategoricalQuickFilter$get_Attributes() {
      return this.attributes;
    },
    set_attributes: function LegacyCategoricalQuickFilter$set_Attributes(value) {
      this.attributes = value;
    },
    get_field: function LegacyCategoricalQuickFilter$get_Field() {
      return this.field;
    },
    get_identifier: function LegacyCategoricalQuickFilter$get_Identifier() {
      return new tab.QuickFilterIdentifier.$ctor1(this.field, this.membershipTarget);
    },
    get_stateId: function LegacyCategoricalQuickFilter$get_StateId() {
      return this.stateId;
    },
    set_stateId: function LegacyCategoricalQuickFilter$set_StateId(value) {
      this.stateId = value;
    },
    get_modeContents: function LegacyCategoricalQuickFilter$get_ModeContents() {
      return this.modeContents;
    },
    get_domContent: function LegacyCategoricalQuickFilter$get_DomContent() {
      return this.domContent;
    },
    set_DomContent: function LegacyCategoricalQuickFilter$set_DomContent(value) {
      this.domContent = value;
    },
    get_dijitDomNode: function LegacyCategoricalQuickFilter$get_DijitDomNode() {
      return this.domNode;
    },
    set_DijitDomNode: function LegacyCategoricalQuickFilter$set_DijitDomNode(value) {
      this.domNode = value;
    },
    get_domain: function LegacyCategoricalQuickFilter$get_Domain() {
      var domain = null;
      if (!!this.get_attributes()['values']) {
        domain = ss.cast(this.get_attributes()['values'], String);
      }
      return domain;
    },
    get_searchWidget: function LegacyCategoricalQuickFilter$get_SearchWidget() {
      return this.$4$SearchWidgetField;
    },
    $set_SearchWidget: function LegacyCategoricalQuickFilter$set_SearchWidget(value) {
      this.$4$SearchWidgetField = value;
    },
    get_presModel: function LegacyCategoricalQuickFilter$get_PresModel() {
      return this.presModel;
    },
    get_backgroundColor: function LegacyCategoricalQuickFilter$get_BackgroundColor() {
      return this.backgroundColor;
    },
    get_blendedZoneContentColor: function LegacyCategoricalQuickFilter$get_BlendedZoneContentColor() {
      return this.blendedZoneContentColor;
    },
    get_textStyle: function LegacyCategoricalQuickFilter$get_TextStyle() {
      return this.textStyle;
    },
    get_$prevOFilter: function LegacyCategoricalQuickFilter$get_PrevOFilter() {
      return this.$4$PrevOFilterField;
    },
    set_$prevOFilter: function LegacyCategoricalQuickFilter$set_PrevOFilter(value) {
      this.$4$PrevOFilterField = value;
    },
    get_quickFilter: function LegacyCategoricalQuickFilter$get_QuickFilter() {
      return this;
    },
    get_filterTable: function LegacyCategoricalQuickFilter$get_FilterTable() {
      return this.get_quickFilterViewModel().get_catFilterTable();
    },
    get_canShowApplyAndCancelButtons: function LegacyCategoricalQuickFilter$get_CanShowApplyAndCancelButtons() {
      return ss.cast(this.get_attributes()['show-apply'], String) === 'true';
    },
    isSetControlUI: function LegacyCategoricalQuickFilter$IsSetControlUI() {
      return this.get_identifier().get_membershipTarget() === 'set';
    },
    hasAllItem: function LegacyCategoricalQuickFilter$HasAllItem() {
      return ss.cast(this.get_attributes()['show-all'], String) !== 'false';
    },
    get_titleDomId: function LegacyCategoricalQuickFilter$get_TitleDomId() {
      return this.$4$TitleDomIdField;
    },
    set_titleDomId: function LegacyCategoricalQuickFilter$set_TitleDomId(value) {
      this.$4$TitleDomIdField = value;
    },
    get_isInAllState: function LegacyCategoricalQuickFilter$get_IsInAllState() {
      var hasPendingManager = ss.isValue(this.modeContents) && ss.isValue(this.get_modeContents().pendingManager);
      var pendingAllState = (hasPendingManager ? this.get_modeContents().pendingManager.get_allItemCheckState() : null);
      var $t1 = pendingAllState;
      if (ss.isNullOrUndefined($t1)) {
        $t1 = this.get_oFilter().all || this.get_oFilter().allNotChecked;
      }
      return $t1;
    },
    getCheckDropdownCatmodeClass: function LegacyCategoricalQuickFilter$GetCheckDropdownCatmodeClass() {
      return tableau.base.widget.catmode.CheckDropdown;
    },
    getChecklistCatmodeClass: function LegacyCategoricalQuickFilter$GetChecklistCatmodeClass() {
      return tableau.base.widget.catmode.Checklist;
    },
    getRadiolistCatmodeClass: function LegacyCategoricalQuickFilter$GetRadiolistCatmodeClass() {
      return tableau.base.widget.catmode.Radiolist;
    },
    getSliderCatmodeClass: function LegacyCategoricalQuickFilter$GetSliderCatmodeClass() {
      return tableau.base.widget.catmode.Slider;
    },
    getDropdownCatmodeClass: function LegacyCategoricalQuickFilter$GetDropdownCatmodeClass() {
      return tableau.base.widget.catmode.SimpleDropdown;
    },
    getPatternCatmodeClass: function LegacyCategoricalQuickFilter$GetPatternCatmodeClass() {
      return tableau.base.widget.catmode.Pattern;
    },
    getTypeInListCatmodeClass: function LegacyCategoricalQuickFilter$GetTypeInListCatmodeClass() {
      return tableau.base.widget.catmode.TypeIn;
    },
    makeSmallSearchWidget: function LegacyCategoricalQuickFilter$MakeSmallSearchWidget(props, hostDiv) {
      return new tableau.base.widget.SmallSearchWidget(props, hostDiv);
    },
    makeSearchWidget: function LegacyCategoricalQuickFilter$MakeSearchWidget(props, hostDiv) {
      return new tableau.base.widget.SearchWidget(props, hostDiv);
    },
    makeFilteringSearchWidget: function LegacyCategoricalQuickFilter$MakeFilteringSearchWidget(props) {
      return new tableau.base.widget.FilteringSearchWidget(props);
    },
    makePendingChangesManager: function LegacyCategoricalQuickFilter$MakePendingChangesManager() {
      return new $tab_PendingChangesManager(this.get_modeContents(), this.oFilter.table.actual_size, this.oFilter.exclude, this.oFilter.all);
    },
    postCreate: function LegacyCategoricalQuickFilter$PostCreate() {
      this.getStateID = ss.mkdel(this, function() {
        return this.get_stateId();
      });
      this.$initMode();
      this.$localize();
      if (this.mode !== 'pattern') {
        $tab_DojoUtils.disableTextSelection(this.get_domContent());
      }
      if (this.filterViewModel.get_filterType() !== 'Categorical') {
        tab.Log.get(this).warn('Incompatible filter view model type for LegacyCategoricalQuickFilter: %s', [this.filterViewModel.get_filterType()]);
      }
      var thisQf = { qf: this };
      if (this.mode === 'slider') {
        this.$set_SearchWidget(this.makeSmallSearchWidget(thisQf, this.searchDiv));
      }
      else if (this.$usingFilteringSearchWidget()) {
        this.$set_SearchWidget(this.makeFilteringSearchWidget(thisQf));
        this.get_searchWidget().add_hidden(ss.mkdel(this, this.$focusSearchButton));
      }
      else {
        this.$set_SearchWidget(this.makeSearchWidget(thisQf, this.searchDiv));
      }
      this.get_searchWidget().startup();
      this.initFromState(true, false);
      this.$setupEventHandlers();
    },
    $setupEventHandlers: function LegacyCategoricalQuickFilter$SetupEventHandlers() {
      if (!tsConfig.is_mobile) {
        this.$disposables.add$2([spiff.TableauClickHandler.targetAndClick(this.menuButton.domNode, ss.mkdel(this, this.doMenu)), spiff.TableauClickHandler.targetAndClick(this.resetButton.domNode, ss.mkdel(this, this.toggleReset)), spiff.TableauClickHandler.targetAndClick(this.searchButton.domNode, ss.mkdel(this, this.toggleSearchUI)), spiff.TableauClickHandler.targetAndClick(this.domainButton.domNode, ss.mkdel(this, this.doDomainMenu)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.menuButton.domNode, ss.mkdel(this, this.doMenu)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.resetButton.domNode, ss.mkdel(this, this.toggleReset)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.searchButton.domNode, ss.mkdel(this, this.toggleSearchUI)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.domainButton.domNode, ss.mkdel(this, this.doDomainMenu))]);
      }
      this.get_quickFilterViewModel().add_propertyChanged(ss.mkdel(this, this.$onViewModelPropertyChanged));
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.get_quickFilterViewModel().remove_propertyChanged(ss.mkdel(this, this.$onViewModelPropertyChanged));
      })));
    },
    processControlButtons: function LegacyCategoricalQuickFilter$ProcessControlButtons() {
      if (this.metricsOnly) {
        return;
      }
      var hideSearchButton = this.mode === 'checkdropdown' || this.mode === 'dropdown' || this.mode === 'pattern' || this.mode === 'typeinlist' || this.shouldHideSearchButton();
      var hideDomainButton = this.mode === 'pattern' || this.mode === 'typeinlist' || this.shouldHideDomainButton();
      var hideMenuButton = this.shouldHideContextMenu();
      var hideResetButton = this.mode === 'pattern' || this.mode === 'typeinlist' || this.shouldHideResetButton();
      var buttonCount = 0;
      var processButton = ss.mkdel(this, function(button, hide) {
        if (ss.isNullOrUndefined(button) || ss.isNullOrUndefined(button.domNode)) {
          return;
        }
        if (hide) {
          $(button.domNode).removeClass('CFButtonR1 CFButtonR2 CFButtonR3 CFButtonR4');
          button.domNode.classList.add('CFButtonHide');
        }
        else {
          buttonCount += 1;
          button.domNode.classList.remove('CFButtonHide');
          button.domNode.classList.add('CFButtonR' + buttonCount);
        }
        $(button.domNode).css('background-color', this.backgroundColor);
      });
      processButton(this.menuButton, hideMenuButton);
      processButton(this.domainButton, hideDomainButton);
      processButton(this.searchButton, hideSearchButton);
      processButton(this.resetButton, hideResetButton);
      this.domControls.classList.add('CF' + buttonCount + 'Button');
    },
    updateStateIfNeeded: function LegacyCategoricalQuickFilter$UpdateStateIfNeeded() {
      this.set_stateId(this.get_stateId() + 1);
    },
    handleClickIfPending: function LegacyCategoricalQuickFilter$HandleClickIfPending(node) {
      if (this.shouldDeferChanges()) {
        this.get_modeContents().pendingManager.handleItemClicked($tab_FilterItemUtil.filterItem.getIndex(node), node);
      }
    },
    shouldDeferChanges: function LegacyCategoricalQuickFilter$ShouldDeferChanges() {
      var modeCanShowApplyAndCancelButtons = this.get_mode() === 'checklist' || this.get_mode() === 'checkdropdown';
      return this.get_canShowApplyAndCancelButtons() && modeCanShowApplyAndCancelButtons;
    },
    shouldHideResetButton: function LegacyCategoricalQuickFilter$ShouldHideResetButton() {
      return this.hideEmptyTitlebar() || ss.cast(this.get_attributes()['show-all'], String) === 'false' || ss.cast(this.get_attributes()['show-filter-state'], String) === 'false';
    },
    shouldHideSearchButton: function LegacyCategoricalQuickFilter$ShouldHideSearchButton() {
      return this.hideEmptyTitlebar() || ss.cast(this.get_attributes()['show-search'], String) === 'false';
    },
    shouldHideIncludeExclude: function LegacyCategoricalQuickFilter$ShouldHideIncludeExclude() {
      return tsConfig.current_sheet_type === 'dashboard' && tsConfig.is_authoring || this.hideEmptyTitlebar() || ss.cast(this.get_attributes()['show-exclude'], String) === 'false';
    },
    shouldHideDomainButton: function LegacyCategoricalQuickFilter$ShouldHideDomainButton() {
      return this.hideEmptyTitlebar() || ss.cast(this.get_attributes()['show-morefewerbutton'], String) !== 'true';
    },
    shouldHideContextMenu: function LegacyCategoricalQuickFilter$ShouldHideContextMenu() {
      if (tsConfig.current_sheet_type === 'dashboard' && tsConfig.is_authoring) {
        return true;
      }
      var commands = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
      return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commands) || commands.get_commandItems().length === 0;
    },
    $isInlineTitle: function LegacyCategoricalQuickFilter$IsInlineTitle() {
      return $(this.domNode).hasClass('CFInlineTitle');
    },
    resize$1: function LegacyCategoricalQuickFilter$Resize(marginBox) {
      dojo.marginBox(this.domNode, marginBox);
      this.layout(null);
    },
    destroy: function LegacyCategoricalQuickFilter$Destroy(preserveDom) {
      $(this.domNode).off($tab_LegacyCategoricalQuickFilter.$keyDownEventName);
      this.$disposeModeContents();
      if (ss.isValue(this.get_searchWidget())) {
        this.get_searchWidget().remove_hidden(ss.mkdel(this, this.$focusSearchButton));
        this.get_searchWidget().destroy();
        this.$set_SearchWidget(null);
      }
      if (ss.isValue(this.categoricalSelectionBehavior)) {
        this.categoricalSelectionBehavior.cancelPendingChange();
      }
      this.$disposables.dispose();
      this.requestSetAttributes = null;
      this.getContextMenuCommands = null;
      this.showContextMenu = null;
      this.showDomainMenu = null;
      this.get_domContent().innerHTML = '';
      this.domContent = null;
      this.inherited(arguments);
    },
    handleItemClick: function LegacyCategoricalQuickFilter$HandleItemClick(node) {
      if (ss.isValue(this.get_modeContents().pendingManager)) {
        this.get_modeContents().pendingManager.handleItemClicked($tab_FilterItemUtil.filterItem.getIndex(node), node);
      }
      if ($tab_FilterItemUtil.filterItem.isAllItem(node)) {
        this.doSelectAll(this.isSingleSelect() || $tab_FilterItemUtil.filterItem.isChecked(node));
        if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
          this.categoricalSelectionBehavior.clearRangeAnchorAndSelection();
        }
      }
    },
    $initMode: function LegacyCategoricalQuickFilter$InitMode() {
      this.mode = ss.coalesce(this.get_oFilter().mode, 'checklist');
      if (!ss.isNullOrEmptyString(this.get_oFilter().pattern)) {
        this.mode = 'pattern';
      }
      this.isTypeInList = this.mode === 'typeinlist';
    },
    initFromState: function LegacyCategoricalQuickFilter$InitFromState(suppressLayout, suppressSearchUpdate, fromClientSide) {
      var fieldname = $tab_FilterFormat.formatColumnDisplayName(this.get_oFilter(), false, true);
      var scrollTop = 0;
      var hadFocus = $.contains(this.domNode, document.activeElement);
      this.processControlButtons();
      var isReInit = ss.isValue(this.get_modeContents());
      if (ss.isValue(this.get_modeContents()) && ss.isValue(this.get_modeContents().get_scrollNode()) && this.get_modeContents().get_scrollNode().scrollTop > 0) {
        scrollTop = this.get_modeContents().get_scrollNode().scrollTop;
      }
      this.$updateAllStateStyle();
      this.$updateExcludeStateStyle();
      this.updateResetButtonState();
      this.updateDomainButton();
      if (this.$persistSearchResultsAsUserClicksAndVizUpdatesOrSomething()) {
        return;
      }
      this.set_$prevOFilter(this.get_oFilter());
      this.$initMode();
      if (this.get_oFilter().exclude) {
        fieldname = tab.Strings.QuickFilterTitleBarExclusive(fieldname);
      }
      this.domTitleBar.setAttribute('title', fieldname);
      this.domTitleBar.setAttribute('id', this.get_titleDomId());
      this.updateTitleBar();
      var itemName = $tab_FilterItemUtil.getBaseItemName(this, 'FI');
      var contentData = ((this.mode === 'pattern') ? this.get_oFilter().pattern : this.get_oFilter().table.tuples);
      var facet = this.$computeFacet();
      if (isReInit) {
        this.$resetTheContentsOrSomething(fromClientSide, contentData, itemName, facet);
      }
      else {
        this.$buildAWholeNewModeOrSomething(contentData, itemName, facet);
      }
      this.categoricalSelectionBehavior.refreshRangeAnchorAndSelection();
      if (!suppressLayout) {
        this.layout(null);
      }
      if (!!(!suppressSearchUpdate & !this.$usingFilteringSearchWidget())) {
        this.updateSearch();
      }
      if (ss.isValue(this.get_modeContents()) && ss.isValue(this.get_modeContents().get_scrollNode())) {
        this.get_modeContents().updateTabIndexes(this.domNode, hadFocus);
        var scrollMax = this.get_modeContents().get_scrollNode().scrollHeight - this.get_modeContents().get_scrollNode().clientHeight;
        if (this.get_modeContents().get_isTiled() && BrowserSupport.BrowserSupport.IsChrome()) {
          this.get_modeContents().get_scrollNode().scrollTop = Math.min(scrollTop + 1, scrollMax);
        }
        this.get_modeContents().get_scrollNode().scrollTop = Math.min(scrollTop, scrollMax);
      }
      $(this.domNode).off($tab_LegacyCategoricalQuickFilter.$keyDownEventName).on($tab_LegacyCategoricalQuickFilter.$keyDownEventName, ss.mkdel(this, this.onKeyDown));
    },
    $computeFacet: function LegacyCategoricalQuickFilter$ComputeFacet() {
      var facet = '';
      var showFacets = this.get_oFilter().showFacets && this.width > 100;
      if (showFacets && (this.mode === 'slider' || this.mode === 'checklist' || this.mode === 'checkdropdown' || this.mode === 'radiolist' || this.mode === 'dropdown')) {
        var tuples = this.get_oFilter().table.tuples;
        var i;
        var sum = 0;
        for (i = 0; i < tuples.length; i++) {
          sum += parseInt(tuples[i].f[0].v, 10);
        }
        facet = sum.toString();
      }
      return facet;
    },
    $buildAWholeNewModeOrSomething: function LegacyCategoricalQuickFilter$BuildAWholeNewModeOrSomething(contentData, itemName, facet) {
      this.$disposeModeContents();
      this.get_domContent().innerHTML = '';
      this.$instantiateContent();
      this.get_modeContents().set_width(this.width);
      this.get_modeContents().instantiate(contentData, itemName, facet);
    },
    $resetTheContentsOrSomething: function LegacyCategoricalQuickFilter$ResetTheContentsOrSomething(fromClientSide, contentData, itemName, facet) {
      if (!fromClientSide && ss.isValue(this.modeContents.pendingManager)) {
        this.get_modeContents().pendingManager.resetFilterInfo(this.get_oFilter().table.actual_size, this.get_oFilter().exclude, this.get_oFilter().all);
        this.get_modeContents().pendingManager.resetPendingChanges();
      }
      this.get_modeContents().resetContent(contentData, itemName, facet);
    },
    $persistSearchResultsAsUserClicksAndVizUpdatesOrSomething: function LegacyCategoricalQuickFilter$PersistSearchResultsAsUserClicksAndVizUpdatesOrSomething() {
      if (ss.isValue(this.get_modeContents()) && this.get_modeContents().shouldNotReinstantiate()) {
        var domainChanged = $tab_LegacyCategoricalQuickFilter.$domainChanged(this.get_$prevOFilter(), this.get_oFilter());
        var exludeChanged = this.get_$prevOFilter().exclude !== this.get_oFilter().exclude;
        var resetChanged = $tab_LegacyCategoricalQuickFilter.$resetQFChangedFromEnabledToDisabled(this.get_$prevOFilter(), this.get_oFilter());
        this.set_$prevOFilter(this.get_oFilter());
        if (ss.isValue(this.get_oFilter().domains) && ss.contains(this.get_oFilter().domains, 'relevant') && domainChanged || exludeChanged) {
          this.updateSearch();
        }
        else if (resetChanged) {
          if (this.get_searchWidget().get_isVisible()) {
            this.get_searchWidget().toggleUI();
          }
        }
        return true;
      }
      return false;
    },
    $disposeModeContents: function LegacyCategoricalQuickFilter$DisposeModeContents() {
      if (ss.isValue(this.get_modeContents()) && typeof(this.get_modeContents()['destroy']) === 'function') {
        this.get_modeContents().destroy();
        this.modeContents = null;
      }
    },
    onKeyDown: function LegacyCategoricalQuickFilter$OnKeyDown(e) {
      var activeElement = $tab_LegacyCategoricalQuickFilter.$getActiveElement();
      if (activeElement.is('input, textarea, button')) {
        return;
      }
      var focusedListItem = $tab_LegacyCategoricalQuickFilter.$getFocusedListItem(activeElement);
      var activeElementIsFilterItem = focusedListItem.length > 0;
      var items = $tab_LegacyCategoricalQuickFilter.$getFocusableItems(e.currentTarget, activeElementIsFilterItem);
      switch (e.which) {
        case 37:
        case 38: {
          this.$moveFocusAndSelectionByDelta(e, items, -1);
          break;
        }
        case 39:
        case 40: {
          this.$moveFocusAndSelectionByDelta(e, items, +1);
          break;
        }
        case 36: {
          items.first().focus();
          break;
        }
        case 35: {
          items.last().focus();
          break;
        }
        case 32: {
          focusedListItem.find('input:first').click();
          break;
        }
        case 27: {
          if (!this.get_shouldDisableResetButton()) {
            this.toggleReset();
            break;
          }
          else {
            return;
          }
        }
        case 13: {
          if (this.get_canShowApplyAndCancelButtons()) {
            this.applyPendingChangesByChangelist();
            break;
          }
          else {
            return;
          }
        }
        default: {
          return;
        }
      }
      e.preventDefault();
      e.stopPropagation();
    },
    $getFocusableItems: function LegacyCategoricalQuickFilter$GetFocusableItems() {
      var listContainer = this.modeContents.get_scrollNode();
      var activeElement = $tab_LegacyCategoricalQuickFilter.$getActiveElement();
      if (activeElement.is('input, textarea, button')) {
        return $([]);
      }
      var activeElementIsFilterItem = $tab_LegacyCategoricalQuickFilter.$getFocusedListItem(activeElement).length > 0;
      return $tab_LegacyCategoricalQuickFilter.$getFocusableItems(listContainer, activeElementIsFilterItem);
    },
    $moveFocusAndSelectionByDelta: function LegacyCategoricalQuickFilter$MoveFocusAndSelectionByDelta(e, items, positionDelta) {
      if (items.length === 0) {
        return;
      }
      this.$updateFocus(items, positionDelta);
      var focusIndex = this.get_quickFilterViewModel().get_currentFocusIndex();
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        if (focusIndex >= 0) {
          this.$updateSelection(e, focusIndex, items);
        }
      }
    },
    $updateFocus: function LegacyCategoricalQuickFilter$UpdateFocus(items, positionChange) {
      var activeElement = $tab_LegacyCategoricalQuickFilter.$getActiveElement();
      var focusedListItem = $tab_LegacyCategoricalQuickFilter.$getFocusedListItem(activeElement);
      var currentFocusIndex = items.index(focusedListItem[0]);
      this.get_quickFilterViewModel().set_isAllButtonVisible(this.get_modeContents().shouldUseAllItem());
      this.get_quickFilterViewModel().set_currentFocusIndex(currentFocusIndex);
      this.get_quickFilterViewModel().changeFocusIndexByDelta(positionChange);
    },
    $updateSelection: function LegacyCategoricalQuickFilter$UpdateSelection(e, focusIndex, items) {
      var node = $tab_FilterItemUtil.filterItem.getNodeFromEvent(e);
      var filterIndex = focusIndex;
      if (!$tab_FilterItemUtil.filterItem.isTypeInListItem(node)) {
        if (this.hasAllItem() && this.get_modeContents().get_isActiveSearch()) {
          filterIndex--;
        }
        this.handleKeyboardSelection(e, filterIndex, items);
      }
    },
    handleKeyboardSelection: function LegacyCategoricalQuickFilter$HandleKeyboardSelection(e, itemIndex, items) {
      var filterLength = items.length;
      var minIndex = -1;
      if (this.hasAllItem() && this.isActiveSearch()) {
        filterLength--;
        if (itemIndex >= filterLength || itemIndex === -1) {
          this.clearRangeAnchorAndSelection();
          return;
        }
      }
      else {
        minIndex = 0;
        if (itemIndex >= filterLength) {
          itemIndex = minIndex;
        }
      }
      if (itemIndex < minIndex) {
        itemIndex = filterLength - 1;
      }
      if (!this.isActiveSearch() && tab.FeatureFlags.isEnabled('WebCategoricalSelectionSearchResults')) {
        itemIndex = $tab_FilterItemUtil.filterItem.getIndex(items[itemIndex]);
      }
      this.categoricalSelectionBehavior.handleSimpleSelection(e, itemIndex);
    },
    isActiveSearch: function LegacyCategoricalQuickFilter$IsActiveSearch() {
      return this.get_modeContents().get_isActiveSearch();
    },
    $updateAllStateStyle: function LegacyCategoricalQuickFilter$UpdateAllStateStyle() {
      var allState = this.get_isInAllState();
      var domNode = $(this.domNode);
      domNode.toggleClass('CFAll', allState);
      domNode.toggleClass('CFValue', !allState);
    },
    $updateExcludeStateStyle: function LegacyCategoricalQuickFilter$UpdateExcludeStateStyle() {
      if (this.get_oFilter().exclude) {
        this.domNode.classList.add('CFExclusive');
      }
      else {
        this.domNode.classList.remove('CFExclusive');
      }
    },
    updateResetButtonState: function LegacyCategoricalQuickFilter$UpdateResetButtonState() {
      var isSetControl = this.isSetControlUI();
      if (this.get_shouldDisableResetButton()) {
        $tab_QfButtonUtil.disableResetButton(this.get_resetButton(), isSetControl);
      }
      else {
        $tab_QfButtonUtil.enableResetButton(this.get_resetButton(), isSetControl);
      }
    },
    $baseInstantiateContent: function LegacyCategoricalQuickFilter$BaseInstantiateContent() {
      var filterClass = null;
      if (this.mode === 'checkdropdown') {
        filterClass = this.getCheckDropdownCatmodeClass();
      }
      else if (this.mode === 'checklist') {
        filterClass = this.getChecklistCatmodeClass();
      }
      else if (this.mode === 'radiolist') {
        filterClass = this.getRadiolistCatmodeClass();
      }
      else if (this.mode === 'slider') {
        filterClass = this.getSliderCatmodeClass();
      }
      else if (this.mode === 'dropdown') {
        filterClass = this.getDropdownCatmodeClass();
      }
      else if (this.mode === 'pattern') {
        filterClass = this.getPatternCatmodeClass();
      }
      else if (this.mode === 'typeinlist') {
        filterClass = this.getTypeInListCatmodeClass();
      }
      if (ss.isNullOrUndefined(filterClass)) {
        return;
      }
      this.modeContents = new filterClass(this, this.get_domContent(), this.get_attributes());
    },
    $instantiateContent: function LegacyCategoricalQuickFilter$InstantiateContent() {
      this.$baseInstantiateContent();
    },
    updateSearch: function LegacyCategoricalQuickFilter$UpdateSearch() {
      this.get_searchWidget().updateSearch();
    },
    applyChanges: function LegacyCategoricalQuickFilter$ApplyChanges() {
      this.get_modeContents().applyChanges();
    },
    applyChangesByChangelist: function LegacyCategoricalQuickFilter$ApplyChangesByChangelist(changelist) {
      if (this.shouldDeferChanges()) {
        this.get_modeContents().pendingManager.processChanges(changelist);
        if (ss.isValue(this.get_modeContents().pendingManager.get_allItemCheckState())) {
          var pendingManagerAllItemCheckState = this.get_modeContents().pendingManager.get_allItemCheckState();
          if (ss.isValue(pendingManagerAllItemCheckState) && ss.unbox(pendingManagerAllItemCheckState)) {
            this.domNode.classList.add('CFAll');
          }
          else {
            this.domNode.classList.remove('CFAll');
          }
        }
      }
      else {
        this.get_modeContents().applyChangesByChangelist(changelist, this.mode);
      }
    },
    applyPendingChangesByChangelist: function LegacyCategoricalQuickFilter$ApplyPendingChangesByChangelist() {
      if (ss.isNullOrUndefined(this.get_modeContents().pendingManager)) {
        return;
      }
      if (this.get_modeContents().pendingManager.isSelectAll()) {
        this.$applyDoSelectAll(true);
      }
      else if (this.get_modeContents().pendingManager.isDeSelectAll()) {
        this.$applyDoSelectAll(false);
      }
      else {
        var pending = this.get_modeContents().pendingManager.get_pendingChangelist();
        this.get_modeContents().applyChangesByChangelist(pending, this.mode);
      }
      this.get_modeContents().pendingManager.resetPendingChanges();
    },
    cancelPendingChangesByChangelist: function LegacyCategoricalQuickFilter$CancelPendingChangesByChangelist() {
      this.get_modeContents().pendingManager.resetPendingChanges();
      this.initFromState(false, true, true);
    },
    $usingFilteringSearchWidget: function LegacyCategoricalQuickFilter$UsingFilteringSearchWidget() {
      return this.mode === 'checklist' || this.mode === 'radiolist' || this.mode === 'checkdropdown' || this.mode === 'dropdown';
    },
    filterBySearchResults: function LegacyCategoricalQuickFilter$FilterBySearchResults(data) {
      if (ss.isNullOrUndefined(data)) {
        this.initFromState(false, true, true);
      }
      else if (this.$usingFilteringSearchWidget()) {
        this.modeContents.updateContent(data);
        if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionSearchResults')) {
          this.categoricalSelectionBehavior.reselectValidFilterItems();
        }
        else {
          this.categoricalSelectionBehavior.clearRangeAnchor();
        }
      }
    },
    updateStateFromSearch: function LegacyCategoricalQuickFilter$UpdateStateFromSearch(changed) {
      var suppressSearchUpdate = this.get_isTypeInList();
      if (this.get_isTypeInList()) {
        this.$updateTypeInListStateFromSearch(changed);
      }
      this.initFromState(false, suppressSearchUpdate);
    },
    $updateTypeInListStateFromSearch: function LegacyCategoricalQuickFilter$UpdateTypeInListStateFromSearch(changed) {
      var contentItems = {};
      var i;
      var tuples = this.get_oFilter().table.tuples;
      for (i = 0; i < tuples.length; i++) {
        var item = { node: this.fetchChildNodeByIndex(i), tuple: tuples[i] };
        contentItems[$tab_FilterItemUtil.getAliasForTuple(tuples[i])] = item;
      }
      for (i = 0; i < changed.tuples.length; i++) {
        var tuple = changed.tuples[i];
        var contentItem = contentItems[$tab_FilterItemUtil.getAliasForTuple(tuple)];
        if (ss.isValue(contentItem) && ss.isValue(contentItem.node)) {
          $tab_FilterItemUtil.filterItem.setChecked(contentItem.node, tuple.s, contentItem.tuple);
        }
        else {
          var searchResults = tableau.util.binarySearch(Object).call(null, tuple, tuples, 0, null, ss.mkdel(this, this.$tupleDisplayNameComparer));
          if (!searchResults.found) {
            tuples.splice(searchResults.index, 0, tuple);
          }
        }
      }
    },
    $tupleDisplayNameComparer: function LegacyCategoricalQuickFilter$TupleDisplayNameComparer(tuple1, tuple2) {
      var dname1 = $tab_FilterFormat.formatTupleDisplayName(tuple1);
      var dname2 = $tab_FilterFormat.formatTupleDisplayName(tuple2);
      if (ss.referenceEquals(dname1, dname2)) {
        return 0;
      }
      if (ss.compareStrings(dname1, dname2) < 0) {
        return -1;
      }
      return 1;
    },
    fetchChildNodeByIndex: function LegacyCategoricalQuickFilter$FetchChildNodeByIndex(index) {
      return this.get_modeContents().fetchChildNodeByIndex(index);
    },
    isSingleSelect: function LegacyCategoricalQuickFilter$IsSingleSelect() {
      return this.mode !== 'checklist' && this.mode !== 'checkdropdown' && this.mode !== 'typeinlist';
    },
    updateDomainButton: function LegacyCategoricalQuickFilter$UpdateDomainButton() {
      if (ss.isNullOrUndefined(this.get_oFilter().domains) || this.get_oFilter().domains.length <= 1) {
        this.domainButton.domNode.style.display = 'none';
        return;
      }
      this.domainButton.attr('label', this.get_quickFilterViewModel().get_domainButtonTooltipText());
      this.$updateDomainButtonIcon();
    },
    $updateDomainButtonIcon: function LegacyCategoricalQuickFilter$UpdateDomainButtonIcon() {
      var iconNodeClassList = this.domainButton.iconNode.classList;
      iconNodeClassList.add('wcIconDomainAll');
    },
    doMenu: function LegacyCategoricalQuickFilter$DoMenu() {
      this.showContextMenu(this.menuButton);
    },
    doDomainMenu: function LegacyCategoricalQuickFilter$DoDomainMenu() {
      this.showDomainMenu(this.domainButton);
    },
    toggleReset: function LegacyCategoricalQuickFilter$ToggleReset() {
      $tab_QfButtonUtil.disableResetButton(this.resetButton, this.isSetControlUI());
      this.doSelectAll(true, true);
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        this.categoricalSelectionBehavior.clearRangeAnchorAndSelection();
      }
    },
    toggleDomain: function LegacyCategoricalQuickFilter$ToggleDomain() {
      var isContext = function(item) {
        return item === tableau.types.QFDomain.QFD_CONTEXT;
      };
      if (ss.cast(this.get_attributes()['values'], String) === tableau.types.QFDomain.QFD_RELEVANT) {
        this.$doRequestSetAttributes(ss.mkdict(['values', tableau.types.QFDomain.QFD_ALL]), false);
      }
      else if (ss.cast(this.get_attributes()['values'], String) === tableau.types.QFDomain.QFD_CONTEXT) {
        this.$doRequestSetAttributes(ss.mkdict(['values', tableau.types.QFDomain.QFD_RELEVANT]), false);
      }
      else if (_.any(this.get_oFilter().domains, isContext)) {
        this.$doRequestSetAttributes(ss.mkdict(['values', tableau.types.QFDomain.QFD_CONTEXT]), false);
      }
      else {
        this.$doRequestSetAttributes(ss.mkdict(['values', tableau.types.QFDomain.QFD_RELEVANT]), false);
      }
    },
    getTheAllItemNode: function LegacyCategoricalQuickFilter$GetTheAllItemNode() {
      return this.get_modeContents().fetchAllItem();
    },
    doSelectAll: function LegacyCategoricalQuickFilter$DoSelectAll(turnOn, forceApply) {
      if (this.shouldDeferChanges()) {
        this.get_modeContents().pendingManager.processAll(turnOn);
        if (turnOn) {
          this.domNode.classList.add('CFAll');
        }
        else {
          this.domNode.classList.remove('CFAll');
        }
        if (forceApply) {
          this.applyPendingChangesByChangelist();
        }
      }
      else {
        this.$applyDoSelectAll(turnOn);
      }
    },
    $isSingleSelectWithAllHidden: function LegacyCategoricalQuickFilter$IsSingleSelectWithAllHidden() {
      return this.isSingleSelect() && !this.hasAllItem();
    },
    $isTiled: function LegacyCategoricalQuickFilter$IsTiled() {
      return $(this.get_domContent()).find('.tiledContent').length > 0;
    },
    $setCheckedIfTiled: function LegacyCategoricalQuickFilter$SetCheckedIfTiled(checkstate) {
      if (this.$isTiled()) {
        var len = this.get_oFilter().table.actual_size;
        for (var i = 0; i < len; ++i) {
          var item = this.fetchChildNodeByIndex(i);
          if (ss.isValue(item)) {
            $tab_FilterItemUtil.filterItem.setChecked(item, checkstate);
          }
        }
      }
    },
    $applyDoSelectAll: function LegacyCategoricalQuickFilter$ApplyDoSelectAll(turnOn) {
      if (this.$isSingleSelectWithAllHidden()) {
        return;
      }
      if (this.mode === 'checklist' || this.mode === 'checkdropdown') {
        this.$setCheckedIfTiled((this.get_oFilter().exclude ? !turnOn : turnOn));
      }
      if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
        var filterData = new tab.LegacyCategoricalQuickFilterData(this.get_oFilter().targetSheets, this.get_identifier(), this.get_oFilter().exclude, null);
        if (turnOn) {
          filterData.set_includeAll(true);
        }
        tab.FilterClientCommands.updateCategoricalFilter(filterData);
      }
      if (turnOn) {
        tab.FilterClientCommands.setCategoricalQuickFilterToAll(new tab.CancelDialog(null, null, null, true), this.get_session().get_visualId(), this.get_identifier());
      }
      else if (this.mode === 'checklist' || this.mode === 'checkdropdown') {
        $tab_QfButtonUtil.enableResetButton(this.resetButton, this.isSetControlUI());
        if (this.get_oFilter().exclude) {
          this.$doTiledSelectExcludeAllOff();
        }
        else {
          tab.FilterClientCommands.setCategoricalQuickFilterToNothing(new tab.CancelDialog(null, null, null, true), this.get_session().get_visualId(), this.get_identifier());
        }
      }
    },
    $doTiledSelectExcludeAllOff: function LegacyCategoricalQuickFilter$DoTiledSelectExcludeAllOff() {
      var from = 0;
      var to = this.get_oFilter().table.actual_size - 1;
      var changelist = new $tab_Changelist();
      var change = new $tab_RawChange();
      this.$setCheckedIfTiled(true);
      change.setRange(new tab.IntegerRange(from, to), true);
      changelist.addChange(change);
      this.get_modeContents().applyChangesByChangelist(changelist, this.mode);
    },
    toggleSearchUI: function LegacyCategoricalQuickFilter$ToggleSearchUi() {
      this.get_searchWidget().toggleUI();
    },
    $doRequestSetAttributes: function LegacyCategoricalQuickFilter$DoRequestSetAttributes(attrs, suppressEvent) {
      this.requestSetAttributes(attrs, suppressEvent);
    },
    doscrollHoriz: function LegacyCategoricalQuickFilter$DoscrollHoriz() {
      this.get_domContent().scrollLeft = this.domHorizScroll.scrollLeft;
    },
    $isCompactFilter: function LegacyCategoricalQuickFilter$IsCompactFilter() {
      return this.mode === 'slider' || this.mode === 'dropdown' || this.mode === 'checkdropdown' || this.mode === 'pattern';
    },
    getDomTitleBar: function LegacyCategoricalQuickFilter$GetDomTitleBar() {
      return this.domTitleBar;
    },
    getTitleOffset: function LegacyCategoricalQuickFilter$GetTitleOffset() {
      if ($(this.domNode).hasClass('CFInlineTitle')) {
        return 0;
      }
      return dojo.marginBox(this.domTitleBar).h;
    },
    _getSearchWidgetDim: function LegacyCategoricalQuickFilter$GetSearchWidgetDim() {
      var s = this.get_searchWidget().get_dijitDomNode();
      if ($(s).css('display') === 'none' || this.$usingFilteringSearchWidget()) {
        var toRet = { h: 0, l: 0, t: 0, w: 0 };
        return toRet;
      }
      return dojo.marginBox(s);
    },
    layoutVertical: function LegacyCategoricalQuickFilter$LayoutVertical(notTitleSize) {
      this._layoutSearchWidget(notTitleSize);
      var oSearch = this._getSearchWidgetDim();
      var contentHeight = notTitleSize.h - oSearch.h;
      this.get_modeContents().layout({ w: notTitleSize.w, h: contentHeight }, false);
    },
    _getContentFloatingElement: function LegacyCategoricalQuickFilter$GetContentFloatingElement() {
      return (this.get_isTypeInList() ? this.get_searchWidget().get_dijitDomNode() : this.get_domContent());
    },
    _layoutSearchWidget: function LegacyCategoricalQuickFilter$LayoutSearchWidget(notTitleSize) {
      if (this.get_searchWidget().get_isVisible()) {
        var listHeight = notTitleSize.h;
        this.get_searchWidget().layout(listHeight);
      }
    },
    _layoutTypeInList: function LegacyCategoricalQuickFilter$LayoutTypeInList(notTitleSize) {
      if (this.$isInlineTitle()) {
        dojo.marginBox(this.get_searchWidget().get_dijitDomNode(), notTitleSize);
      }
      else {
        $(this.get_searchWidget().get_dijitDomNode()).css({ height: 'auto', width: 'auto' });
      }
      this.layoutVertical(notTitleSize);
    },
    _layoutCompactFilter: function LegacyCategoricalQuickFilter$LayoutCompactFilter(notTitleSize) {
      this.domNode.classList.add('CFHorizontal');
      this._layoutSearchWidget(notTitleSize);
      this.get_modeContents().layout({ w: notTitleSize.w, h: notTitleSize.h }, false);
    },
    updateTitleBar: function LegacyCategoricalQuickFilter$UpdateTitleBar() {
      this.inherited(arguments);
      var inclusivityString = (this.get_oFilter().exclude ? tab.Strings.QuickFilterExclusive : tab.Strings.QuickFilterInclusive);
      $('<span></span>').addClass('sr-only').text(tab.Strings.Filter + ' ').prependTo(this.domTitleBar);
      $('<span></span>').addClass('sr-only').text(' ' + inclusivityString).appendTo(this.domTitleBar);
    },
    layout: function LegacyCategoricalQuickFilter$Layout(pixelHeight) {
      this.updateTitleBar();
      if (ss.isNullOrUndefined(this.domNode.parentNode)) {
        return;
      }
      this.domNode.classList.remove('CFHorizontal');
      this.domNode.classList.remove('CFInlineTitle');
      this.domHorizScroll.style.display = 'none';
      var oTitleBar = this.layoutTitleBar();
      var oZoneSize = dojo.contentBox(this.domNode);
      var notTitleSize = { w: oZoneSize.w, h: oZoneSize.h };
      if (!this.metricsOnly) {
        var contentFloatingElem = this._getContentFloatingElement();
        if (!this.hideEmptyTitlebar()) {
          if (this.titleW > 0) {
            notTitleSize.w = oZoneSize.w - oTitleBar.w;
            this.domTitleBar.style.cssFloat = 'left';
            contentFloatingElem.style.cssFloat = 'left';
            this.domNode.classList.add('CFInlineTitle');
          }
          else {
            notTitleSize.h = oZoneSize.h - oTitleBar.h;
            this.domTitleBar.style.cssFloat = 'none';
            contentFloatingElem.style.cssFloat = 'none';
          }
        }
        else {
          contentFloatingElem.style.cssFloat = 'none';
        }
      }
      if (this.$isCompactFilter()) {
        this._layoutCompactFilter(notTitleSize);
      }
      else if (this.get_isTypeInList()) {
        this._layoutTypeInList(notTitleSize);
      }
      else {
        this.layoutVertical(notTitleSize);
      }
    },
    $localize: function LegacyCategoricalQuickFilter$Localize() {
      $tab_DojoUtils.localizeDojoLabeledControls([{ item1: this.searchButton, item2: 'QuickFilterSearch' }, { item1: this.domainButton, item2: 'QuickFilterDomainShowFewerValues' }, { item1: this.menuButton, item2: 'QuickFilterShowContextMenu' }]);
    },
    $onViewModelPropertyChanged: function LegacyCategoricalQuickFilter$OnViewModelPropertyChanged(sender, args) {
      switch (args.get_propertyName()) {
        case 'QuickFilterFocusIndexChanged': {
          var items = this.$getFocusableItems();
          items.eq(this.get_quickFilterViewModel().get_currentFocusIndex()).focus();
          break;
        }
      }
    },
    clearRangeAnchorAndSelection: function LegacyCategoricalQuickFilter$ClearRangeAnchorAndSelection() {
      this.categoricalSelectionBehavior.clearRangeAnchorAndSelection();
    },
    forEachSelected: function LegacyCategoricalQuickFilter$ForEachSelected(itemCallback) {
      if (ss.isNullOrUndefined(itemCallback) || !$.isFunction(itemCallback)) {
        return;
      }
      var selectedIndexes = this.categoricalSelectionBehavior.get_selectedIndexes();
      for (var i = 0, length = selectedIndexes.length; i < length; i++) {
        var index = selectedIndexes[i];
        var node = this.fetchChildNodeByIndex(index);
        itemCallback(index, node);
      }
    },
    onListItemClick: function LegacyCategoricalQuickFilter$OnListItemClick(evt) {
      this.categoricalSelectionBehavior.onListItemClick(evt);
    },
    notifyChange: function LegacyCategoricalQuickFilter$NotifyChange(callback) {
      this.categoricalSelectionBehavior.notifyChange(callback);
    },
    $focusSearchButton: function LegacyCategoricalQuickFilter$FocusSearchButton() {
      $tab_QfButtonUtil.focusQfButton(this.searchButton);
    }
  }, {
    $domainChanged: function LegacyCategoricalQuickFilter$DomainChanged(prevFilter, newFilter) {
      if (ss.isNullOrUndefined(prevFilter)) {
        return true;
      }
      var prevTuples = prevFilter.table.tuples;
      var newTuples = newFilter.table.tuples;
      if (prevTuples.length !== newTuples.length) {
        return true;
      }
      for (var i = 0, len = prevTuples.length; i < len; i++) {
        if (!ss.referenceEquals(prevTuples[i].t[0].v, newTuples[i].t[0].v)) {
          return true;
        }
      }
      return false;
    },
    $resetQFChangedFromEnabledToDisabled: function LegacyCategoricalQuickFilter$ResetQFChangedFromEnabledToDisabled(prevFilter, newFilter) {
      if (ss.isNullOrUndefined(prevFilter)) {
        return true;
      }
      var prevResetDisabled = ss.isValue(prevFilter.all) && prevFilter.all;
      var newResetDisabled = ss.isValue(newFilter.all) && newFilter.all;
      return prevResetDisabled !== newResetDisabled && newResetDisabled;
    },
    $getActiveElement: function LegacyCategoricalQuickFilter$GetActiveElement() {
      return $(document.activeElement);
    },
    $getFocusedListItem: function LegacyCategoricalQuickFilter$GetFocusedListItem(activeElement) {
      return activeElement.filter('.FIItem');
    },
    $getFocusableItems: function LegacyCategoricalQuickFilter$GetFocusableItems(listContainer, activeElementIsFilterItem) {
      var items = (activeElementIsFilterItem ? $(listContainer).find('.FIItem') : $([]));
      return items;
    },
    findFirstDesirableFocusable: function LegacyCategoricalQuickFilter$FindFirstDesirableFocusable(searchNode) {
      if (ss.isNullOrUndefined(searchNode)) {
        return null;
      }
      var result = null;
      var $t1 = ['.QueryBox', '.FIItem[tabindex]', '.CFContent [tabindex]', '[tabindex]'];
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var selector = $t1[$t2];
        if (ss.isValue(result) && $(result).is(':focusable')) {
          break;
        }
        result = searchNode.querySelector(selector);
      }
      return result;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyCategoricalQuickFilterViewModel
  var $tab_LegacyCategoricalQuickFilterViewModel = global.tab.LegacyCategoricalQuickFilterViewModel = ss.mkType($asm, 'tab.LegacyCategoricalQuickFilterViewModel', function(filterModel) {
    this.$model = null;
    this.$currentFocusIndex = 0;
    spiff.BaseViewModel.call(this);
    this.$model = filterModel;
    this.$model.add_filterUpdated(ss.mkdel(this, this.handleUpdateFilterContent));
    this.$currentFocusIndex = -1;
  }, {
    get_filterType: function LegacyCategoricalQuickFilterViewModel$get_FilterType() {
      return this.$model.get_filterType();
    },
    get_legacyCategoricalQuickFilterModel: function LegacyCategoricalQuickFilterViewModel$get_LegacyCategoricalQuickFilterModel() {
      return this.$model;
    },
    get_mode: function LegacyCategoricalQuickFilterViewModel$get_Mode() {
      return this.$model.get_mode();
    },
    get_pattern: function LegacyCategoricalQuickFilterViewModel$get_Pattern() {
      return this.$model.get_pattern();
    },
    get_isAllMode: function LegacyCategoricalQuickFilterViewModel$get_IsAllMode() {
      return this.$model.get_isAllMode();
    },
    get_isAllButtonVisible: function LegacyCategoricalQuickFilterViewModel$get_IsAllButtonVisible() {
      return this.$model.get_isAllButtonVisible();
    },
    set_isAllButtonVisible: function LegacyCategoricalQuickFilterViewModel$set_IsAllButtonVisible(value) {
      this.$model.set_isAllButtonVisible(value);
    },
    get_allItemsAreChecked: function LegacyCategoricalQuickFilterViewModel$get_AllItemsAreChecked() {
      return this.$model.get_allItemsAreChecked();
    },
    get_noItemsAreChecked: function LegacyCategoricalQuickFilterViewModel$get_NoItemsAreChecked() {
      return this.$model.get_noItemsAreChecked();
    },
    get_exclude: function LegacyCategoricalQuickFilterViewModel$get_Exclude() {
      return this.$model.get_exclude();
    },
    get_isTiled: function LegacyCategoricalQuickFilterViewModel$get_IsTiled() {
      return this.$model.get_isTiled();
    },
    get_isSearchable: function LegacyCategoricalQuickFilterViewModel$get_IsSearchable() {
      return this.$model.get_isSearchable();
    },
    get_summary: function LegacyCategoricalQuickFilterViewModel$get_Summary() {
      return this.$model.get_summary();
    },
    get_underlyingDataSourceIsCube: function LegacyCategoricalQuickFilterViewModel$get_UnderlyingDataSourceIsCube() {
      return this.$model.get_underlyingDataSourceIsCube();
    },
    get_condition: function LegacyCategoricalQuickFilterViewModel$get_Condition() {
      return this.$model.get_condition();
    },
    get_limit: function LegacyCategoricalQuickFilterViewModel$get_Limit() {
      return this.$model.get_limit();
    },
    get_rangeType: function LegacyCategoricalQuickFilterViewModel$get_RangeType() {
      return this.$model.get_rangeType();
    },
    get_catFilterTable: function LegacyCategoricalQuickFilterViewModel$get_CatFilterTable() {
      return this.$model.get_catFilterTable();
    },
    get_domainActualSize: function LegacyCategoricalQuickFilterViewModel$get_DomainActualSize() {
      return this.$model.get_domainActualSize();
    },
    get_tuples: function LegacyCategoricalQuickFilterViewModel$get_Tuples() {
      return this.$model.get_tuples();
    },
    get_domainType: function LegacyCategoricalQuickFilterViewModel$get_DomainType() {
      return this.$model.get_domainType();
    },
    get_currentFocusIndex: function LegacyCategoricalQuickFilterViewModel$get_CurrentFocusIndex() {
      return this.$currentFocusIndex;
    },
    set_currentFocusIndex: function LegacyCategoricalQuickFilterViewModel$set_CurrentFocusIndex(value) {
      this.$currentFocusIndex = value;
      this.notifyPropertyChanged('QuickFilterFocusIndexChanged');
    },
    get_domainButtonTooltipText: function LegacyCategoricalQuickFilterViewModel$get_DomainButtonTooltipText() {
      var domainType = this.get_domainType();
      var domainButtonTooltipText;
      if (domainType === tableau.types.QFDomain.QFD_RELEVANT) {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainRelevant;
      }
      else if (domainType === tableau.types.QFDomain.QFD_CONTEXT) {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainContext;
      }
      else if (domainType === tableau.types.QFDomain.QFD_CASCADING) {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainCascading;
      }
      else if (domainType === tableau.types.QFDomain.QFD_CASCADING_CONTEXT) {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainCascadingContext;
      }
      else {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainDatabase;
      }
      return domainButtonTooltipText;
    },
    handleUpdateFilterContent: function LegacyCategoricalQuickFilterViewModel$HandleUpdateFilterContent() {
    },
    changeFocusIndexByDelta: function LegacyCategoricalQuickFilterViewModel$ChangeFocusIndexByDelta(delta) {
      var numberOfFocusableItems = this.get_domainActualSize();
      var newFocusIndex;
      if (this.get_legacyCategoricalQuickFilterModel().get_isAllButtonVisible()) {
        numberOfFocusableItems += 1;
      }
      if (numberOfFocusableItems === 0) {
        this.set_currentFocusIndex(-1);
      }
      else {
        newFocusIndex = ss.imod(this.get_currentFocusIndex() + delta, numberOfFocusableItems);
        if (newFocusIndex < 0) {
          newFocusIndex += numberOfFocusableItems;
        }
        this.set_currentFocusIndex(newFocusIndex);
      }
    },
    dispose: function LegacyCategoricalQuickFilterViewModel$Dispose() {
      this.$model.remove_filterUpdated(ss.mkdel(this, this.handleUpdateFilterContent));
      this.$model = null;
      spiff.BaseViewModel.prototype.dispose.call(this);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyFilterDropDownArrowTemplate
  var $tab_LegacyFilterDropDownArrowTemplate = global.tab.LegacyFilterDropDownArrowTemplate = ss.mkType($asm, 'tab.LegacyFilterDropDownArrowTemplate', null, null, {
    getDropDownForColor: function LegacyFilterDropDownArrowTemplate$GetDropDownForColor(color) {
      return "<svg focusable='false' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='12px' height='12px' viewBox='0 0 12 12' style='enable-background:new 0 0 12 12;' xml:space='preserve'>" + "<path style='fill:" + color + ";' d='M4.9,6.9L2.1,3.3C2,3.2,2.1,3,2.2,3h5.6C8,3,8.1,3.2,8,3.3L5.2,6.9C5.1,7,4.9,7,4.9,6.9z'/>" + '</svg>';
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyHierarchicalQuickFilter
  var $tab_LegacyHierarchicalQuickFilter = global.tab.LegacyHierarchicalQuickFilter = ss.mkType($asm, 'tab.LegacyHierarchicalQuickFilter', function(props) {
    this.templateString = "<div class='HierarchicalFilter'>" + "<div dojoAttachPoint='domBox' class='HierarchicalFilterBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<h3 class='FilterTitle' dojoAttachPoint='domTitleBar'></h3>" + "<div dojoType='dijit.form.Button' class='HFButton HFSearchButton' showlabel='false'" + "dojoAttachPoint='searchButton' dojoAttachEvent='onClick:toggleSearchUI'" + "iconClass='wcIconSearch'>Search</div>" + "<div dojoType='dijit.form.Button' class='HFButton HFMenuButton' dojoAttachPoint='menuButton'" + "name='type' dojoAttachEvent='onClick:doMenu' iconClass='wcIconContextMenu'>" + '</div>' + '</div>' + "<div dojoAttachPoint='searchDiv'></div>" + "<div class='HFLevels tab-ctrl-formatted-coloronly' dojoAttachPoint='domLevelBox'>" + "<table cellspacing='2'><tr dojoAttachPoint='domLevelContainer'></tr></table></div>" + "<div class='HFSelection tab-ctrl-formatted-text' dojoAttachPoint='domContent'></div>" + '</div>' + '</div>';
    this.widgetsInTemplate = true;
    this.$items = [];
    this.session = null;
    this.field = '';
    this.membershipTarget = 'filter';
    this.filterViewModel = null;
    this.$applyDelay = 500;
    this.attributes = {};
    this.stateId = 0;
    this.domBox = null;
    this.domLevelBox = null;
    this.domContent = null;
    this.domControls = null;
    this.searchDiv = null;
    this.searchButton = null;
    this.RANGE_START = 'minValue';
    this.RANGE_END = 'maxValue';
    this.$getSID = null;
    this.$mode = null;
    this.tree = null;
    this._applyTimer = null;
    this.searchWidget = null;
    this.menuButton = null;
    this.domLevelContainer = null;
    this.metricsOnly = false;
    this.getContextMenuCommands = null;
    this.showContextMenu = null;
    this.requestSetAttributes = null;
    $tab_LegacyQuickFilterWidget.call(this);
  }, {
    get_applyDelay: function LegacyHierarchicalQuickFilter$get_ApplyDelay() {
      throw new ss.NotSupportedException();
    },
    get_isTypeInList: function LegacyHierarchicalQuickFilter$get_IsTypeInList() {
      return false;
    },
    get_oFilter: function LegacyHierarchicalQuickFilter$get_OFilter() {
      return this.oFilter;
    },
    get_quickFilterViewModel: function LegacyHierarchicalQuickFilter$get_QuickFilterViewModel() {
      return ss.cast(this.filterViewModel, $tab_LegacyHierarchicalQuickFilterViewModel);
    },
    get_viewModel: function LegacyHierarchicalQuickFilter$get_ViewModel() {
      return this.filterViewModel;
    },
    get_dijitDeclaredClass: function LegacyHierarchicalQuickFilter$get_DijitDeclaredClass() {
      return this.declaredClass;
    },
    get_mode: function LegacyHierarchicalQuickFilter$get_Mode() {
      return this.$mode;
    },
    set_mode: function LegacyHierarchicalQuickFilter$set_Mode(value) {
      window.alert(tab.Strings.noLoc('Bad interface call to set LegacyHierarchicalQuickFilter.Mode'));
    },
    get_session: function LegacyHierarchicalQuickFilter$get_Session() {
      return this.session;
    },
    set_session: function LegacyHierarchicalQuickFilter$set_Session(value) {
      this.session = value;
    },
    get_domain: function LegacyHierarchicalQuickFilter$get_Domain() {
      var domain = null;
      if (!!this.get_attributes()['values']) {
        domain = ss.cast(this.get_attributes()['values'], String);
      }
      return domain;
    },
    get_attributes: function LegacyHierarchicalQuickFilter$get_Attributes() {
      return this.attributes;
    },
    set_attributes: function LegacyHierarchicalQuickFilter$set_Attributes(value) {
      this.attributes = value;
    },
    get_field: function LegacyHierarchicalQuickFilter$get_Field() {
      return this.field;
    },
    get_membershipTarget: function LegacyHierarchicalQuickFilter$get_MembershipTarget() {
      return this.membershipTarget;
    },
    get_identifier: function LegacyHierarchicalQuickFilter$get_Identifier() {
      return new tab.QuickFilterIdentifier.$ctor1(this.get_field(), this.get_membershipTarget());
    },
    get_stateId: function LegacyHierarchicalQuickFilter$get_StateId() {
      return this.stateId;
    },
    set_stateId: function LegacyHierarchicalQuickFilter$set_StateId(value) {
      this.stateId = value;
    },
    get_modeContents: function LegacyHierarchicalQuickFilter$get_ModeContents() {
      tab.Log.get(this).info(tab.Strings.noLoc('Bad interface call on LegacyHierarchicalQuickFilter.ModeContents'), []);
      return null;
    },
    get_domContent: function LegacyHierarchicalQuickFilter$get_DomContent() {
      return this.domContent;
    },
    set_DomContent: function LegacyHierarchicalQuickFilter$set_DomContent(value) {
      this.domContent = value;
    },
    get_dijitDomNode: function LegacyHierarchicalQuickFilter$get_DijitDomNode() {
      return this.domNode;
    },
    set_DijitDomNode: function LegacyHierarchicalQuickFilter$set_DijitDomNode(value) {
      this.domNode = value;
    },
    get_searchWidget: function LegacyHierarchicalQuickFilter$get_SearchWidget() {
      return this.searchWidget;
    },
    $set_SearchWidget: function LegacyHierarchicalQuickFilter$set_SearchWidget(value) {
      this.searchWidget = value;
    },
    destroy: function LegacyHierarchicalQuickFilter$Destroy() {
      this.tree.remove_notifyChangeCalled(ss.mkdel(this, this.$notifyMemberChange));
      this.searchWidget.destroy();
      this.searchWidget = null;
      this.tree.destroy();
      this.tree = null;
      this.inherited(arguments);
    },
    applyChangesByChangelist: function LegacyHierarchicalQuickFilter$ApplyChangesByChangelist(changelist) {
      window.alert(tab.Strings.noLoc('Bad interface call on LegacyHierarchicalQuickFilter.ApplyChangesByChangelist'));
    },
    postCreate: function LegacyHierarchicalQuickFilter$PostCreate() {
      if (this.filterViewModel.get_filterType() !== 'Hierarchical') {
        tab.Log.get(this).warn('Incompatible filter view model type for LegacyHierarchicalQuickFilter: %s', [this.filterViewModel.get_filterType()]);
      }
      this.$getSID = ss.mkdel(this, function() {
        return this.stateId;
      });
      var thisQf = { qf: this };
      this.searchWidget = new tableau.base.widget.SearchWidget(thisQf, this.searchDiv);
      this.searchWidget.startup();
      this.initFromState(true);
      this.$localize();
      var tree = this.tree;
      _.each(this.tree.rootNode.getChildren(), function(node) {
        if (node.isExpandable) {
          tree._expandNode(node);
        }
      });
      $tab_LegacyHierarchicalQuickFilter.$applyLevelPickerFormatting(this.textStyle, this.backgroundColor);
    },
    $fixIEInitialDraw: function LegacyHierarchicalQuickFilter$FixIEInitialDraw() {
      if (!!BrowserSupport.BrowserSupport.IsIE()) {
        var contentElement = $(this.domContent);
        contentElement.css('zoom', '1');
        tab.WindowHelper.requestAnimationFrame(function() {
          tab.RenderUtil.manualFadeAnimation(contentElement, 96, 100, 8, 3875, true);
        });
      }
    },
    shouldHideLevelButtons: function LegacyHierarchicalQuickFilter$ShouldHideLevelButtons() {
      return ss.cast(this.attributes['show-levels'], String) === 'false';
    },
    shouldHideSearchButton: function LegacyHierarchicalQuickFilter$ShouldHideSearchButton() {
      return this.hideEmptyTitlebar() || ss.cast(this.attributes['show-search'], String) === 'false';
    },
    shouldHideContextMenu: function LegacyHierarchicalQuickFilter$ShouldHideContextMenu() {
      if (tsConfig.current_sheet_type === 'dashboard' && tsConfig.is_authoring) {
        return true;
      }
      var commandsWrapper = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
      return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commandsWrapper) || commandsWrapper.get_commandItems().length === 0;
    },
    resize: function LegacyHierarchicalQuickFilter$Resize(marginBox) {
      dojo.marginBox(this.domNode, marginBox);
      this.layout(null);
    },
    isSingleSelect: function LegacyHierarchicalQuickFilter$IsSingleSelect() {
      return this.$mode !== 'checklist';
    },
    initMode: function LegacyHierarchicalQuickFilter$InitMode() {
      this.$mode = this.$getModeFromAttributes();
    },
    $getModeFromAttributes: function LegacyHierarchicalQuickFilter$GetModeFromAttributes() {
      var m = 'checklist';
      if (ss.keyExists(this.attributes, 'mode')) {
        m = ss.cast(this.attributes['mode'], String);
      }
      return m;
    },
    createTreeDom: function LegacyHierarchicalQuickFilter$CreateTreeDom() {
      var model = new tableau.base.widget.hsm.TreeModel(this.session, this.get_identifier(), this.oFilter.levels.length, this.isSingleSelect());
      model.onChildrenChange(model.root, model.itemsFromTable(this.oFilter.table[0], 0));
      var $t1 = new Object();
      $t1.model = model;
      $t1.showRoot = false;
      var treeParams = $t1;
      this.tree = new tableau.base.widget.hsm.Tree(treeParams);
      this.tree.add_notifyChangeCalled(ss.mkdel(this, this.$notifyMemberChange));
      this.connect(this.tree, '_onTreeFocus', ss.mkdel(this, this.updateRangeAnchor));
      this.domContent.appendChild(this.tree.domNode);
    },
    initFromState: function LegacyHierarchicalQuickFilter$InitFromState(suppressRefresh) {
      if (!ss.referenceEquals(this.$getModeFromAttributes(), this.$mode)) {
        $(this.domContent).empty();
      }
      if (!this.domContent.hasChildNodes()) {
        this.initMode();
        this.createTreeDom();
      }
      var fieldname = $tab_FilterFormat.formatColumnDisplayName(this.oFilter, false, true);
      this.domTitleBar.setAttribute('title', fieldname);
      this.updateTitleBar();
      if (ss.isValue(this.domLevelContainer)) {
        $(this.domLevelContainer).empty();
      }
      if (this.shouldHideLevelButtons()) {
        if (ss.isValue(this.domLevelBox)) {
          this.domLevelBox.setAttribute('display', 'none');
        }
      }
      else {
        this.$formatLevelButtons();
      }
      if (!suppressRefresh) {
        this.tree.model.refresh(this.oFilter.table);
      }
      if (ss.isValue(this.tree.anchor)) {
        this.tree.anchor.labelNode.classList.add('anchorSelection');
        this.tree.anchor.domNode.classList.add('anchorSelectionNode');
      }
      else {
        this.tree.anchor = null;
      }
      this.layout(null);
      if (ss.isValue(this.searchWidget)) {
        this.searchWidget.updateSearch();
      }
      var buttonCount = 0;
      if (!this.metricsOnly) {
        var processButton = ss.mkdel(this, function(button, hide) {
          if (!this._hasDomNode(button)) {
            return;
          }
          if (hide) {
            $(button.domNode).removeClass('HFButtonR1 HFButtonR2');
            button.domNode.classList.add('HFButtonHide');
          }
          else {
            buttonCount += 1;
            button.domNode.classList.remove('HFButtonHide');
            button.domNode.classList.add('HFButtonR' + buttonCount);
          }
          $(button.domNode).css('background-color', this.backgroundColor);
        });
        processButton(this.menuButton, this.shouldHideContextMenu());
        processButton(this.searchButton, this.shouldHideSearchButton());
        this.domControls.classList.add('HF' + buttonCount + 'Button');
      }
    },
    $formatLevelButtons: function LegacyHierarchicalQuickFilter$FormatLevelButtons() {
      var domNode;
      if (ss.isNullOrUndefined(this.domLevelBox)) {
        return;
      }
      domNode = document.createElement('td');
      domNode.appendChild(document.createTextNode(' '));
      domNode.classList.add('HFLevelSpacer');
      for (var i = 0; i < this.oFilter.levels.length; i++) {
        domNode = document.createElement('td');
        domNode.appendChild(document.createTextNode(i.toString()));
        this.domLevelContainer.appendChild(domNode);
        if (this.$mode !== 'radiolist') {
          if (this.oFilter.levels[i] === 0) {
            domNode.classList.add('HFLevelAllSelected');
          }
          else if (this.oFilter.levels[i] === 1) {
            domNode.classList.add('HFLevelNoneSelected');
          }
          else {
            domNode.classList.add('HFLevelSomeSelected');
          }
        }
        if (i === 0) {
          domNode.classList.add('HFLevelFirst');
        }
        else if (i < this.oFilter.levels.length - 1) {
          domNode.classList.add('HFLevelNonLeaf');
        }
        else {
          domNode.classList.add('HFLevelLast');
        }
        this.connect(domNode, 'onclick', ss.mkdel(this, this.onLevelClick));
      }
    },
    doMenu: function LegacyHierarchicalQuickFilter$DoMenu() {
      this.showContextMenu(this.menuButton);
    },
    $applyChanges: function LegacyHierarchicalQuickFilter$ApplyChanges() {
      var curSchema = [];
      var curTuples = [];
      var nodes = [].concat.apply([], this.tree.rootNode.getChildren());
      var updateMode = 'filter-delta';
      var toAdd = [];
      var toRemove = [];
      if (nodes.length === 0) {
        return;
      }
      do {
        var node = nodes.shift();
        var t = node.item.tuple;
        if (node.item.schema.length > curSchema.length) {
          curSchema = node.item.schema;
        }
        if (node.isChecked && !t.s) {
          t.s = true;
          curTuples.push(t);
          if (this.isSingleSelect()) {
            updateMode = 'filter-replace';
            break;
          }
        }
        else if (!node.isChecked && t.s) {
          delete t['s'];
          curTuples.push(t);
        }
        nodes = nodes.concat.apply(nodes, node.getChildren());
      } while (nodes.length !== 0);
      var tuples = curTuples;
      if (tuples.length !== 0) {
        for (var i = 0; i < tuples.length; i++) {
          var lastIndex = tuples[i].t.length - 1;
          var alias = tuples[i].t[lastIndex].v;
          if (tuples[i].s) {
            toAdd.push(alias);
          }
          else {
            toRemove.push(alias);
          }
        }
        tab.FilterClientCommands.doMemberHierarchialFilter(this.session.get_visualId(), this.field, toAdd, toRemove, updateMode);
      }
    },
    $applyRangeChanges: function LegacyHierarchicalQuickFilter$ApplyRangeChanges(anchor, prev_anchor) {
      if (ss.isNullOrUndefined(anchor) || ss.isNullOrUndefined(prev_anchor)) {
        return;
      }
      var depth = this.tree.getDepth(prev_anchor);
      var earlier = this.tree.findEarlierNode(prev_anchor, anchor, depth);
      var later = (ss.referenceEquals(earlier, prev_anchor) ? anchor : prev_anchor);
      var earlierTuple = earlier.item.tuple.t;
      var laterTuple = later.item.tuple.t;
      var earlierAlias = earlierTuple[earlierTuple.length - 1].v;
      var laterAlias = laterTuple[laterTuple.length - 1].v;
      var rangeAdd = {};
      var rangeRemove = {};
      var updateMode = 'filter-delta';
      if (anchor.isChecked) {
        rangeAdd[this.RANGE_START] = earlierAlias;
        rangeAdd[this.RANGE_END] = laterAlias;
      }
      else {
        rangeRemove[this.RANGE_START] = earlierAlias;
        rangeRemove[this.RANGE_END] = laterAlias;
      }
      tab.FilterClientCommands.doRangeHierarchialFilter(this.session.get_visualId(), this.field, rangeAdd, rangeRemove, updateMode);
    },
    updateStateFromSearch: function LegacyHierarchicalQuickFilter$UpdateStateFromSearch(changed) {
      var changedHash = {};
      var newtuples = changed.tuples;
      for (var i = 0; i < newtuples.length; i++) {
        changedHash[newtuples[i].d] = newtuples[i].s === true;
      }
      var nodes = [].concat.apply([], this.tree.rootNode.getChildren());
      while (nodes.length !== 0) {
        var node = nodes.shift();
        var t = node.item.tuple;
        var match = changedHash[t.d];
        if (ss.isValue(match)) {
          if (match !== t.s) {
            if (match) {
              node.isChecked = true;
              ss.cast(node.labelNode.firstChild, ss.isValue(node.labelNode.firstChild) && (ss.isInstanceOfType(node.labelNode.firstChild, Element) && node.labelNode.firstChild.tagName === 'INPUT')).checked = true;
              t.s = true;
            }
            else {
              node.isChecked = false;
              ss.cast(node.labelNode.firstChild, ss.isValue(node.labelNode.firstChild) && (ss.isInstanceOfType(node.labelNode.firstChild, Element) && node.labelNode.firstChild.tagName === 'INPUT')).checked = false;
              delete t['s'];
            }
          }
        }
        else if (this.isSingleSelect() && t.s) {
          node.isChecked = false;
          ss.cast(node.labelNode.firstChild, ss.isValue(node.labelNode.firstChild) && (ss.isInstanceOfType(node.labelNode.firstChild, Element) && node.labelNode.firstChild.tagName === 'INPUT')).checked = false;
          delete t['s'];
        }
        nodes = nodes.concat.apply(nodes, node.getChildren());
      }
    },
    updateRangeAnchor: function LegacyHierarchicalQuickFilter$UpdateRangeAnchor(node) {
      if (this.isSingleSelect()) {
        return;
      }
      if (ss.referenceEquals(this.tree.anchor, node)) {
        return;
      }
      if (ss.isValue(this.tree.anchor)) {
        this.tree.anchor.labelNode.classList.remove('anchorSelection');
        this.tree.anchor.domNode.classList.remove('anchorSelectionNode');
        this.tree.anchor.labelNode.classList.remove('dijitTreeLabelFocused');
        this.tree.prev_anchor = this.tree.anchor;
      }
      this.tree.anchor = node;
      this.tree.anchor.labelNode.classList.add('anchorSelection');
      this.tree.anchor.domNode.classList.add('anchorSelectionNode');
    },
    $notifyMemberChange: function LegacyHierarchicalQuickFilter$NotifyMemberChange(e) {
      if (e.target.tagName.toLowerCase() === 'input') {
        this._applyTimer = tab.MiscUtil.clearTimeout(this._applyTimer);
        this.stateId++;
        var targetWidget = dijit.getEnclosingWidget(ss.cast(e.target.parentNode, HTMLElement));
        if (!ss.referenceEquals(this.tree.anchor, targetWidget)) {
          this.updateRangeAnchor(targetWidget);
        }
        if (e.shiftKey === true && ss.isValue(this.tree.prev_anchor) && this.tree.getDepth(this.tree.prev_anchor) === this.tree.getDepth(this.tree.anchor) && !this.isSingleSelect()) {
          this.updateCheckboxRange(this.tree.anchor, this.tree.prev_anchor);
          this.$applyRangeChanges(this.tree.anchor, this.tree.prev_anchor);
        }
        else {
          this._applyTimer = window.setTimeout(ss.mkdel(this, this.$applyChanges), this.$applyDelay);
        }
      }
    },
    updateCheckboxRange: function LegacyHierarchicalQuickFilter$UpdateCheckboxRange(anchor, prevAnchor) {
      var depth = this.tree.getDepth(prevAnchor);
      var earlier = this.tree.findEarlierNode(prevAnchor, anchor, depth);
      var later = (ss.referenceEquals(earlier, prevAnchor) ? anchor : prevAnchor);
      var newCheckState = anchor.isChecked;
      var node = earlier;
      this.tree.anchorIsStart = !ss.referenceEquals(earlier, prevAnchor);
      while (ss.isValue(node) && node.isTreeNode && !ss.referenceEquals(node, later)) {
        ss.cast(node.labelNode.firstChild, ss.isValue(node.labelNode.firstChild) && (ss.isInstanceOfType(node.labelNode.firstChild, Element) && node.labelNode.firstChild.tagName === 'INPUT')).checked = newCheckState;
        node.isChecked = newCheckState;
        node = this.$getNextInLevel(node, depth);
      }
      ss.cast(later.labelNode.firstChild, ss.isValue(later.labelNode.firstChild) && (ss.isInstanceOfType(later.labelNode.firstChild, Element) && later.labelNode.firstChild.tagName === 'INPUT')).checked = newCheckState;
      later.isChecked = newCheckState;
    },
    $getNextInLevel: function LegacyHierarchicalQuickFilter$GetNextInLevel(node, level) {
      var currentLevel = level;
      var currentNode = node;
      var nextNode = node.getNextSibling();
      if (ss.isValue(nextNode)) {
        return nextNode;
      }
      while (ss.isNullOrUndefined(nextNode) && currentLevel >= 0) {
        currentNode = currentNode.getParent();
        currentLevel -= 1;
        nextNode = currentNode.getNextSibling();
        while (ss.isValue(nextNode)) {
          var foundkid = this.$getFirstChildInLevel(nextNode, currentLevel, level);
          if (ss.isValue(foundkid)) {
            return foundkid;
          }
          nextNode = nextNode.getNextSibling();
        }
      }
      if (currentLevel >= 0) {
        return nextNode;
      }
      return null;
    },
    $getFirstChildInLevel: function LegacyHierarchicalQuickFilter$GetFirstChildInLevel(node, currentLevel, seekLevel) {
      if (ss.isNullOrUndefined(node)) {
        return null;
      }
      if (currentLevel < 0) {
        return null;
      }
      if (currentLevel > seekLevel) {
        return null;
      }
      if (currentLevel === seekLevel) {
        return node;
      }
      if (node.hasChildren()) {
        var kids = node.getChildren();
        var l = kids.length;
        for (var i = 0; i < l; i++) {
          var foundkid = this.$getFirstChildInLevel(kids[i], currentLevel + 1, seekLevel);
          if (ss.isValue(foundkid)) {
            return foundkid;
          }
        }
      }
      return null;
    },
    toggleSearchUI: function LegacyHierarchicalQuickFilter$ToggleSearchUI() {
      if (ss.isValue(this.searchWidget)) {
        this.searchWidget.toggleUI();
      }
    },
    onLevelClick: function LegacyHierarchicalQuickFilter$OnLevelClick(e) {
      var domNode = e.target;
      var newState;
      var addLevels = [];
      var removeLevels = [];
      if (domNode.tagName.toLowerCase() !== 'td') {
        return;
      }
      spiff.EventUtil.stopEvent(e);
      if (this.isSingleSelect()) {
        return;
      }
      var lvl = parseInt(domNode.textContent, 10);
      if (this.oFilter.levels[lvl] === 0) {
        newState = false;
        domNode.classList.remove('HFLevelAllSelected');
        domNode.classList.remove('HFLevelSomeSelected');
        domNode.classList.add('HFLevelNoneSelected');
      }
      else {
        newState = true;
        domNode.classList.remove('HFLevelNoneSelected');
        domNode.classList.remove('HFLevelSomeSelected');
        domNode.classList.add('HFLevelAllSelected');
      }
      if (newState) {
        addLevels.push(lvl);
      }
      else {
        removeLevels.push(lvl);
      }
      if (addLevels.length > 0 || removeLevels.length > 0) {
        tab.FilterClientCommands.doLevelHierarchialFilter(this.session.get_visualId(), this.field, addLevels, removeLevels, 'filter-delta');
      }
    },
    layout: function LegacyHierarchicalQuickFilter$Layout(pixelHeight) {
      var contentElement = $(this.domContent);
      contentElement.hide();
      this.domNode.classList.remove('HFHorizontal');
      var oZoneSize = dojo.contentBox(this.domNode);
      var oLevelBox = (ss.isValue(this.domLevelBox) ? dojo.marginBox(this.domLevelBox) : ss.mkdict(['w', 0, 'h', 0]));
      var oSearch = ss.mkdict(['h', 0]);
      this.updateTitleBar();
      var oTitleBar = this.layoutTitleBar();
      var titleHcontrib = oTitleBar.h;
      var contentW = oZoneSize.w;
      if (!this.hideEmptyTitlebar() && this.titleW > 0) {
        this.domNode.classList.add('HFHorizontal');
        this.domTitleBar.style.cssFloat = 'left';
        if (ss.isValue(this.domLevelBox)) {
          this.domLevelBox.style.cssFloat = 'left';
        }
        if (this._hasDomNode(this.menuButton)) {
          this.menuButton.domNode.classList.add('HFButtonHide');
        }
        if (this._hasDomNode(this.searchButton)) {
          this.searchButton.domNode.classList.add('HFButtonHide');
        }
        contentW -= oTitleBar.w;
        titleHcontrib = 0;
      }
      else {
        if (!this.shouldHideContextMenu() && this._hasDomNode(this.menuButton)) {
          this.menuButton.domNode.classList.remove('HFButtonHide');
        }
        if (!this.shouldHideSearchButton() && this._hasDomNode(this.searchButton)) {
          this.searchButton.domNode.classList.remove('HFButtonHide');
        }
        this.domTitleBar.style.cssFloat = 'none';
        if (ss.isValue(this.domLevelBox)) {
          this.domLevelBox.style.cssFloat = 'none';
        }
      }
      if (ss.isValue(this.searchWidget) && this.searchWidget.get_isVisible()) {
        var listHeight = oZoneSize.h - titleHcontrib - oLevelBox.h;
        this.searchWidget.layout(listHeight);
        oSearch = dojo.marginBox(this.searchWidget.get_dijitDomNode());
      }
      var h = oZoneSize.h - titleHcontrib - oLevelBox.h - oSearch.h;
      if (ss.isValue(this.domLevelBox)) {
        dojo.marginBox(this.domLevelBox, ss.mkdict(['w', contentW]));
      }
      if (tsConfig.is_mobile) {
        $tab_DojoUtils.setMarginBoxWidth(this.domContent, contentW);
        this.domContent.style.maxHeight = h + 'px';
      }
      else {
        dojo.marginBox(this.domContent, ss.mkdict(['h', h, 'w', contentW]));
      }
      this.$fixIEInitialDraw();
      contentElement.show();
    },
    _hasDomNode: function LegacyHierarchicalQuickFilter$HasDomNode(widget) {
      return ss.isValue(widget) && ss.isValue(widget.domNode);
    },
    $localize: function LegacyHierarchicalQuickFilter$Localize() {
      $tab_DojoUtils.localizeDojoLabeledControls([{ item1: this.searchButton, item2: 'QuickFilterSearch' }]);
    }
  }, {
    $applyLevelPickerFormatting: function LegacyHierarchicalQuickFilter$ApplyLevelPickerFormatting(textStyleModel, backgroundColorString) {
      var backgroundColorModel = tab.ColorModel.fromColorCode(backgroundColorString);
      var textColorModel = tab.ColorModel.fromColorCode(textStyleModel.color);
      var boxBorderColor = tab.ColorModel.alphaComposite(tab.ColorModel.fromColorModelPlusAlpha(textColorModel, $tab_LegacyHierarchicalQuickFilter.$borderColorAlpha), backgroundColorModel);
      var ctrlBoxStyle = { 'border-width': '1px', 'border-style': 'solid', 'border-color': boxBorderColor.toRgb() };
      tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelNoneSelected', ctrlBoxStyle);
      var boxBorderColorLighter = tab.ColorModel.alphaComposite(tab.ColorModel.fromColorModelPlusAlpha(textColorModel, $tab_LegacyHierarchicalQuickFilter.$borderColorLighterAlpha), backgroundColorModel);
      var ctrlBoxesStyleLighter = { 'border-color': boxBorderColorLighter.toRgb() };
      tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelSomeSelected', ctrlBoxesStyleLighter);
      tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelAllSelected', ctrlBoxesStyleLighter);
      var backgroundColorDefault = tab.ColorModel.fromColorCode(backgroundColorString);
      var backgroundColorLightest = tab.ColorModel.alphaComposite(tab.ColorModel.fromColorModelPlusAlpha(backgroundColorModel, $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightestAlpha), $tab_LegacyHierarchicalQuickFilter.$white);
      var backgroundColorLight = tab.ColorModel.alphaComposite(tab.ColorModel.fromColorModelPlusAlpha(backgroundColorModel, $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightAlpha), $tab_LegacyHierarchicalQuickFilter.$white);
      if (backgroundColorDefault.isLStarAboveThreshold($tab_LegacyHierarchicalQuickFilter.$backgroundColorLightestThreshold)) {
        backgroundColorLightest = $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightestOverride;
        backgroundColorLight = $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightOverride;
      }
      var allSelected = { 'background-color': backgroundColorLightest.toRgb() };
      var someSelected = { 'background-color': backgroundColorLight.toRgb() };
      var noneSelected = { 'background-color': backgroundColorDefault.toRgb() };
      tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelAllSelected', allSelected);
      tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelSomeSelected', someSelected);
      tab.StyleUtil.appendCSSRule('.HFLevels td.HFLevelNoneSelected', noneSelected);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyHierarchicalQuickFilterViewModel
  var $tab_LegacyHierarchicalQuickFilterViewModel = global.tab.LegacyHierarchicalQuickFilterViewModel = ss.mkType($asm, 'tab.LegacyHierarchicalQuickFilterViewModel', function(filterModel) {
    this.$model = null;
    spiff.BaseViewModel.call(this);
    this.$model = filterModel;
  }, {
    get_filterType: function LegacyHierarchicalQuickFilterViewModel$get_FilterType() {
      return this.$model.get_filterType();
    },
    get_legacyHierarchicalQuickFilterModel: function LegacyHierarchicalQuickFilterViewModel$get_LegacyHierarchicalQuickFilterModel() {
      return this.$model;
    },
    get_hierarchyTables: function LegacyHierarchicalQuickFilterViewModel$get_HierarchyTables() {
      return this.$model.get_hierarchyTables();
    },
    get_levels: function LegacyHierarchicalQuickFilterViewModel$get_Levels() {
      return this.$model.get_levels();
    },
    get_isSearchable: function LegacyHierarchicalQuickFilterViewModel$get_IsSearchable() {
      return this.$model.get_isSearchable();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyLegendTemplate
  var $tab_LegacyLegendTemplate = global.tab.LegacyLegendTemplate = ss.mkType($asm, 'tab.LegacyLegendTemplate', function(root) {
    this.domBox = null;
    this.domContent = null;
    this.highlighterButton = null;
    this.contextMenuButton = null;
    this.domImageBody = null;
    $tab_LegendTemplate.call(this, root);
    this.domBox = this.getElementBySelector('.LegendBox');
    this.domContent = this.getElementBySelector('.LegendContent');
    this.titleControls = this.getElementBySelector($tab_LegendTemplate.legendTitleControlsSelector);
    this.highlighterButton = this.getElementBySelector($tab_LegendTemplate.legendHighlighterButtonSelector);
    this.contextMenuButton = this.getElementBySelector($tab_LegendTemplate.legendContextMenuButtonSelector);
    this.domImageBody = this.getElementBySelector('.LegendImageBody');
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyLegendView
  var $tab_LegacyLegendView = global.tab.LegacyLegendView = ss.mkType($asm, 'tab.LegacyLegendView', function(viewModel, template) {
    this.legacyLegendViewModel = null;
    this.$legendPanelSize = null;
    this.$timestamp = 0;
    this.eventHandler = null;
    this.iterButtons = null;
    this.$rid = 0;
    this.bodyOffset = { x: 0, y: 0 };
    this.bodySize = null;
    this.$delayedImageDownload = false;
    ss.makeGenericType($tab_BaseLegendView$1, [$tab_LegacyLegendViewModel]).call(this, viewModel, template);
    this.legacyLegendViewModel = viewModel;
    this.legacyLegendViewModel.add_newLegacyLegend(ss.mkdel(this, this.handleNewLegacyLegend));
    this.legacyLegendViewModel.add_validStateChanged(ss.mkdel(this, this.handleValidStateChanged));
    this.$updateLegendSizeFromParent();
    var addHoverBehavior = false;
    var allowContextMenuButton = this.legacyLegendViewModel.get_shouldShowContextMenu();
    if (this.get_serverRenderedModel().isVisuallyCat) {
      addHoverBehavior = true;
    }
    else {
      this.get_legendTemplate().highlighterButton.toggle(false);
      addHoverBehavior = allowContextMenuButton;
    }
    if (addHoverBehavior) {
      this.disposables.add$1(new spiff.HoverBehavior(this, null, ss.mkdel(this, this.$handleItemEnter), ss.mkdel(this, this.$handleItemExit)));
    }
    if (allowContextMenuButton) {
      this.get_legendTemplate().contextMenuButton.show();
    }
  }, {
    get_domRoot: function LegacyLegendView$get_DomRoot() {
      return this.get_template().domRoot;
    },
    get_domNode: function LegacyLegendView$get_DomNode() {
      return this.get_template().domRoot.get(0);
    },
    get_$session: function LegacyLegendView$get_Session() {
      return this.legacyLegendViewModel.get_viewSession();
    },
    get_serverRenderedModel: function LegacyLegendView$get_ServerRenderedModel() {
      return this.legacyLegendViewModel.get_presModel();
    },
    get_legendTemplate: function LegacyLegendView$get_LegendTemplate() {
      return ss.cast(this.get_template(), $tab_LegacyLegendTemplate);
    },
    $handleItemEnter: function LegacyLegendView$HandleItemEnter(e) {
      this.get_legendTemplate().domRoot.addClass(spiff.UnificationClassNames.hover);
      this.get_legendTemplate().highlighterButton.toggle(tsConfig.allow_highlight && this.get_serverRenderedModel().isVisuallyCat && this.get_serverRenderedModel().isHighlightAllowed);
      this.get_legendTemplate().contextMenuButton.toggle(this.legacyLegendViewModel.get_shouldShowContextMenu());
    },
    $handleItemExit: function LegacyLegendView$HandleItemExit(e) {
      this.get_legendTemplate().domRoot.removeClass(spiff.UnificationClassNames.hover);
      this.get_legendTemplate().contextMenuButton.toggle(false);
      this.get_legendTemplate().highlighterButton.toggle(false);
    },
    showContextMenu: function LegacyLegendView$ShowContextMenu() {
      if (tab.FeatureFlags.isEnabled('MttwLegendTitles')) {
        this.legacyLegendViewModel.$showContextMenu(new spiff.ShowMenuOptions(this.get_legendTemplate().titleControls, false));
      }
      else {
        this.legacyLegendViewModel.showEditColorsDialog();
      }
    },
    onAddedToDom: function LegacyLegendView$OnAddedToDom() {
      ss.makeGenericType($tab_BaseLegendView$1, [$tab_LegacyLegendViewModel]).prototype.onAddedToDom.call(this);
      this.$timestamp = (new Date()).getTime();
      this.eventHandler = this.makeViewerInputHandler(this.get_legendTemplate().get_contentArea().get(0));
      this.get_viewModel().get_viewController().add_refreshLegacyLegendImages(ss.mkdel(this, this.refreshImages));
      tab.ViewController.add_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.get_viewModel().get_viewController().remove_refreshLegacyLegendImages(ss.mkdel(this, this.refreshImages));
        tab.ViewController.remove_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
      })));
      this.iterButtons = new tab.IteratorButtons(this.get_legendTemplate().get_contentArea(), true, $tab_LegendBaseViewModel.horizontalIteratorButtonSize);
      this.updateHighlightStatus();
      this.disposables.add$1(spiff.ClickHandler.targetAndClick(this.get_legendTemplate().highlighterButton, ss.mkdel(this, this.toggleHighlight)));
      this.disposables.add$1(spiff.ClickHandler.targetAndClick(this.get_legendTemplate().contextMenuButton, ss.mkdel(this, this.showContextMenu)));
      this.get_legendTemplate().domImageBody.on('load', ss.mkdel(this, function(e) {
        this.$sizeContentImage();
        this.setBodySize();
      }));
      this.get_legendTemplate().domImageBody.on('error', ss.mkdel(this, function(e1) {
        this.onImageLoadFailed();
      }));
      this.refreshImages();
      this.get_legendTemplate().highlighterButton.attr('title', tab.Strings.LegendPanelHighlightSelectedItems);
      if (!tab.FeatureFlags.isEnabled('MttwLegendTitles')) {
        this.get_legendTemplate().contextMenuButton.attr('title', tab.Strings.TabAuthColorEditButton);
      }
      this.get_legendTemplate().highlighterButton.toggle(false);
      this.get_legendTemplate().contextMenuButton.toggle(false);
      this.get_viewModel().add_zoneVisibilityChanged(ss.mkdel(this, this.$handleZoneVisibilityChanged));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.get_viewModel().remove_zoneVisibilityChanged(ss.mkdel(this, this.$handleZoneVisibilityChanged));
      })));
    },
    dispose: function LegacyLegendView$Dispose() {
      this.legacyLegendViewModel.remove_newLegacyLegend(ss.mkdel(this, this.handleNewLegacyLegend));
      if (ss.isValue(this.eventHandler)) {
        this.eventHandler.dispose();
        this.eventHandler = null;
      }
      this.iterButtons.dispose();
      ss.makeGenericType($tab_BaseLegendView$1, [$tab_LegacyLegendViewModel]).prototype.dispose.call(this);
    },
    handleNewLegacyLegend: function LegacyLegendView$HandleNewLegacyLegend() {
      var newModel = this.legacyLegendViewModel.get_presModel();
      if (ss.isValue(this.get_serverRenderedModel()) && this.get_serverRenderedModel().fieldNameId === newModel.fieldNameId && ss.referenceEquals(this.get_serverRenderedModel().fieldName, newModel.fieldName)) {
        this.$sizeContentImage();
        this.updateHighlightStatus();
      }
      else {
        this.refreshImages();
      }
      this.layout();
    },
    handleValidStateChanged: function LegacyLegendView$HandleValidStateChanged() {
      if (this.legacyLegendViewModel.get_$valid()) {
        this.refreshImages();
      }
    },
    onViewModelPropertyChanged: function LegacyLegendView$OnViewModelPropertyChanged(sender, e) {
      if (ss.compareStrings(e.get_propertyName(), $tab_LegacyLegendViewModel.$urlInfoCacheChangedIdentifier, false) === 0) {
      }
      else if (ss.compareStrings(e.get_propertyName(), $tab_LegendBaseViewModel.parentZoneSizeChangedKey, false) === 0) {
        this.$updateLegendSizeFromParent();
        if (this.get_legendTooltip().get_isTooltipShown()) {
          this.get_legendTooltip().repositionWithinRegion(tab.DomUtil.getRectXY(this.get_legendTemplate().domBox));
        }
      }
      else if (ss.referenceEquals(e.get_propertyName(), tab.ZoneViewModel.titleVisiblePropertyName)) {
        this.handleNewLegacyLegend();
      }
    },
    $updateLegendSizeFromParent: function LegacyLegendView$UpdateLegendSizeFromParent() {
      var parentSize = this.legacyLegendViewModel.get_$parentZoneSize();
      if (ss.isValue(parentSize) && !tab.SizeUtil.equals(parentSize, this.$legendPanelSize)) {
        this.get_legendTemplate().domBox.css(ss.mkdict(['width', parentSize.w + 'px', 'height', parentSize.h + 'px']));
        this.$legendPanelSize = parentSize;
      }
    },
    get_visualId: function LegacyLegendView$get_VisualId() {
      return tab.ModelUtils.getVisualId(this.legacyLegendViewModel.get_sheetName());
    },
    allowHover: function LegacyLegendView$AllowHover() {
    },
    disallowHover: function LegacyLegendView$DisallowHover() {
    },
    addMouseBindings: function LegacyLegendView$AddMouseBindings() {
    },
    cancelHover: function LegacyLegendView$CancelHover() {
    },
    updateHighlightStatus: function LegacyLegendView$UpdateHighlightStatus() {
      this.get_legendTemplate().highlighterButton.toggleClass('tabHighlightEnabled', this.get_serverRenderedModel().isHighlightEnabled);
      this.get_legendTemplate().highlighterButton.toggleClass('tabHighlightDisabled', !this.get_serverRenderedModel().isHighlightEnabled);
    },
    refreshImages: function LegacyLegendView$RefreshImages() {
      this.$delayedImageDownload = !this.get_viewModel().get_isZoneVisible() && !tab.ApplicationModel.get_instance().get_isOffline() && !tsConfig.is_authoring;
      if (this.$delayedImageDownload) {
        tab.DashboardDelayLoadingTelemetry.logDashboardDelayLoadingForHiddenZones('viz'.toString(), tsConfig.is_authoring);
        return;
      }
      var tileCacheUrl = this.get_viewModel().get_$tileCacheUrl();
      this.$rid += 1;
      this.bodySize = null;
      var requestId = this.$rid + 'Z' + this.$timestamp;
      var fieldId = (ss.isValue(this.get_serverRenderedModel().fieldNameId) ? this.get_serverRenderedModel().fieldNameId.toString() : '');
      this.disallowHover();
      this.get_legendTemplate().domBox.addClass('LegendBusy');
      if (BrowserSupport.BrowserSupport.IsSafari() || this.get_serverRenderedModel().isVisuallyCat) {
        this.get_legendTemplate().get_contentArea().css('overflow', 'hidden');
      }
      var bodyUrl = this.get_$session().getViewUrl().toLegendRegionTileUrl(tileCacheUrl, this.get_serverRenderedModel().legendType + '-body', this.get_serverRenderedModel().fieldName, fieldId, requestId);
      this.get_legendTemplate().domImageBody.attr('src', bodyUrl);
    },
    onImageLoadFailed: function LegacyLegendView$OnImageLoadFailed() {
      this.get_legendTemplate().domContent.css('visibility', 'hidden');
    },
    onSelectionChanged: function LegacyLegendView$OnSelectionChanged(sheetName, oSelectionInfo) {
      if (!ss.referenceEquals(sheetName, this.get_viewModel().get_viewController().get_sheetName())) {
        return;
      }
      if (ss.isNullOrUndefined(oSelectionInfo)) {
        return;
      }
      this.allowHover();
    },
    getDocumentPoint: function LegacyLegendView$GetDocumentPoint(pseudoEvent) {
      var offset = { x: 0, y: 0 };
      if (this.get_legendViewModel().get_titleInline() && !this.get_serverRenderedModel().titleInline) {
        offset.x = -this.get_legendViewModel().get_titleWidth();
        offset.y = this.get_legendViewModel().get_titleHeight();
      }
      return { x: pseudoEvent.pageX + offset.x, y: pseudoEvent.pageY + offset.y };
    },
    documentPointToContentPoint: function LegacyLegendView$DocumentPointToContentPoint(documentPoint) {
      var contentPosition = this.get_legendTemplate().get_contentArea().offset();
      return { x: documentPoint.x - tab.DoubleUtil.roundToInt(contentPosition.left) + this.get_legendTemplate().get_contentArea().scrollLeft() + this.bodyOffset.x, y: documentPoint.y - tab.DoubleUtil.roundToInt(contentPosition.top) + tab.DoubleUtil.roundToInt(this.get_legendTemplate().get_contentArea().scrollTop()) + this.bodyOffset.y };
    },
    onHover: function LegacyLegendView$OnHover(pseudoEvent) {
      var documentPoint = this.getDocumentPoint(pseudoEvent);
      var contentPoint = this.documentPointToContentPoint(documentPoint);
      if ('map' !== this.get_serverRenderedModel().legendType) {
        this.get_legendTooltip().hoverOverCoordinates(documentPoint, contentPoint, 'legenditem', this.legacyLegendViewModel.get_regionType(), this.getFieldNameVec(), null, false);
      }
    },
    toggleHighlight: function LegacyLegendView$ToggleHighlight() {
      this.get_serverRenderedModel().isHighlightEnabled = !this.get_serverRenderedModel().isHighlightEnabled;
      this.updateHighlightStatus();
      var regionPart = this.legacyLegendViewModel.get_regionType();
      var encodedFieldName = this.get_serverRenderedModel().fieldName;
      var fieldNames = encodedFieldName.split('\n');
      var zoneId = tab.ModelUtils.getZoneIdForSheetName(this.get_$session().sheetId);
      if (zoneId !== -1) {
        tab.SelectionClientCommands.toggleLegendHighlight(zoneId, this.get_$session().get_visualId(), regionPart, fieldNames, null);
      }
    },
    setBodySize: function LegacyLegendView$SetBodySize() {
      this.get_legendTemplate().domContent.css('visibility', '');
      this.allowHover();
      this.get_legendTemplate().domBox.removeClass('LegendBusy');
      this.bodySize = { w: tab.DoubleUtil.roundToInt(this.get_legendTemplate().domImageBody.width()), h: tab.DoubleUtil.roundToInt(this.get_legendTemplate().domImageBody.height()) };
      this.layout();
    },
    layout: function LegacyLegendView$Layout() {
      if (!!!this.bodySize) {
        return;
      }
      this.drawTitle();
      this.get_domRoot().removeClass('LegendHorizontal');
      if (this.get_serverRenderedModel().isVisuallyCat) {
        this.get_domRoot().addClass('CategoricalLegend');
      }
      else {
        this.get_domRoot().addClass('QuantitativeLegend');
      }
      var oZoneSize = this.$legendPanelSize;
      var notTitleSize = { w: oZoneSize.w, h: oZoneSize.h };
      this.bodyOffset = { x: 0, y: 0 };
      if (this.get_legendViewModel().get_titleInline()) {
        notTitleSize.w = oZoneSize.w - this.get_legendViewModel().get_titleWidth();
        this.bodyOffset.x = this.get_legendViewModel().get_titleWidth();
      }
      else {
        notTitleSize.h = oZoneSize.h - this.get_legendViewModel().get_titleHeight();
        if (this.get_serverRenderedModel().isVisuallyCat) {
          this.bodyOffset.y = this.get_legendViewModel().get_titleHeight();
        }
        else {
          this.bodyOffset.y = this.get_serverRenderedModel().rectRamp.y;
        }
      }
      if (!this.get_serverRenderedModel().isVisuallyCat) {
        this.get_legendTemplate().domContent.css('position', 'absolute');
        this.get_legendTemplate().domContent.css('top', this.get_serverRenderedModel().rectRamp.y + 'px');
      }
      this.layoutButtons(notTitleSize);
    },
    getFieldNameVec: function LegacyLegendView$GetFieldNameVec() {
      if (ss.isValue(this.get_serverRenderedModel().fieldName)) {
        return ss.cast(this.get_serverRenderedModel().fieldName.toString().split('\n'), Array);
      }
      return null;
    },
    $sizeContentImage: function LegacyLegendView$SizeContentImage() {
      var serverModel = this.get_serverRenderedModel();
      if (!serverModel.isVisuallyCat) {
        this.get_legendTemplate().domImageBody.css('width', 'inherit');
      }
      else if (this.get_serverRenderedModel().legendLayout !== 'vertical') {
        var height = serverModel.regionHeight;
        if (!!!serverModel.titleInline && this.get_legendViewModel().get_hasTitle() && ss.isValue(serverModel.titleHeight) && serverModel.titleHeight !== 0) {
          height -= serverModel.titleHeight + 1;
        }
        this.get_legendTemplate().domImageBody.css('height', height + 'px');
        this.get_legendTemplate().domImageBody.css('width', '');
      }
      else {
        this.get_legendTemplate().domImageBody.css('width', serverModel.regionWidth + 'px');
        this.get_legendTemplate().domImageBody.css('height', '');
      }
    },
    $handleZoneVisibilityChanged: function LegacyLegendView$HandleZoneVisibilityChanged() {
      if (this.$delayedImageDownload && this.get_viewModel().get_isZoneVisible()) {
        tab.DashboardDelayLoadingTelemetry.logUnhideDashboardDelayLoadedHiddenContent('viz'.toString(), tsConfig.is_authoring);
        this.refreshImages();
      }
    },
    layoutButtons: null,
    makeViewerInputHandler: null
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyLegendViewModel
  var $tab_LegacyLegendViewModel = global.tab.LegacyLegendViewModel = ss.mkType($asm, 'tab.LegacyLegendViewModel', function(legacyLegendModel, worksheetId, zoneVM) {
    this.$legacyLegendModel = null;
    this.$zoneVM = null;
    this.$viewController = null;
    this.$3$NewLegacyLegendField = null;
    this.$3$ValidStateChangedField = null;
    this.$3$ZoneVisibilityChangedField = null;
    $tab_LegendBaseViewModel.call(this, worksheetId, zoneVM);
    this.$legacyLegendModel = legacyLegendModel;
    this.$legacyLegendModel.add_newLegacyLegend(ss.mkdel(this, this.handleNewLegacyLegend));
    this.get_visualModel().add_urlInfoCacheChange(ss.mkdel(this, this.$handleUrlInfoCacheChanged));
    this.$zoneVM = zoneVM;
    this.$zoneVM.add_validStateChanged(ss.mkdel(this, this.handleZoneValidStateChanged));
    if (ss.isValue(this.$zoneVM.get_model())) {
      this.$zoneVM.get_model().add_zoneVisibilityChanged(ss.mkdel(this, this.handleZoneVisibilityChanged));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.$zoneVM.get_model().remove_zoneVisibilityChanged(ss.mkdel(this, this.handleZoneVisibilityChanged));
      })));
    }
  }, {
    add_newLegacyLegend: function LegacyLegendViewModel$add_NewLegacyLegend(value) {
      this.$3$NewLegacyLegendField = ss.delegateCombine(this.$3$NewLegacyLegendField, value);
    },
    remove_newLegacyLegend: function LegacyLegendViewModel$remove_NewLegacyLegend(value) {
      this.$3$NewLegacyLegendField = ss.delegateRemove(this.$3$NewLegacyLegendField, value);
    },
    add_validStateChanged: function LegacyLegendViewModel$add_ValidStateChanged(value) {
      this.$3$ValidStateChangedField = ss.delegateCombine(this.$3$ValidStateChangedField, value);
    },
    remove_validStateChanged: function LegacyLegendViewModel$remove_ValidStateChanged(value) {
      this.$3$ValidStateChangedField = ss.delegateRemove(this.$3$ValidStateChangedField, value);
    },
    add_zoneVisibilityChanged: function LegacyLegendViewModel$add_ZoneVisibilityChanged(value) {
      this.$3$ZoneVisibilityChangedField = ss.delegateCombine(this.$3$ZoneVisibilityChangedField, value);
    },
    remove_zoneVisibilityChanged: function LegacyLegendViewModel$remove_ZoneVisibilityChanged(value) {
      this.$3$ZoneVisibilityChangedField = ss.delegateRemove(this.$3$ZoneVisibilityChangedField, value);
    },
    get_presModel: function LegacyLegendViewModel$get_PresModel() {
      return this.$legacyLegendModel.pm;
    },
    get_viewId: function LegacyLegendViewModel$get_ViewId() {
      return tab.ModelUtils.findContentDashboard(null).getViewId(this.get_sheetName());
    },
    get_sessionId: function LegacyLegendViewModel$get_SessionId() {
      return tab.CommandController.get().legacySession.get_id();
    },
    get_sheetName: function LegacyLegendViewModel$get_SheetName() {
      return this.get_parentZoneVM().get_associatedSheet();
    },
    get_viewSession: function LegacyLegendViewModel$get_ViewSession() {
      return tab.ModelUtils.getViewSession(this.get_sheetName());
    },
    get_viewController: function LegacyLegendViewModel$get_ViewController() {
      if (ss.isNullOrUndefined(this.$viewController)) {
        this.$viewController = _.find(tab.Application.get_instance().get_client().get_viewControllers(), ss.mkdel(this, function(vc) {
          return ss.referenceEquals(vc.get_sheetName(), this.get_sheetName());
        }));
      }
      return this.$viewController;
    },
    get_$tileCacheUrl: function LegacyLegendViewModel$get_TileCacheUrl() {
      return this.get_visualModel().get_tileCacheUrl();
    },
    get_$valid: function LegacyLegendViewModel$get_Valid() {
      return this.get_parentZoneVM().get_valid();
    },
    get_presModelTitleHtml: function LegacyLegendViewModel$get_PresModelTitleHtml() {
      return this.get_presModel().titleHtml;
    },
    get_presModelTitleInline: function LegacyLegendViewModel$get_PresModelTitleInline() {
      return this.get_presModel().titleInline;
    },
    get_regionType: function LegacyLegendViewModel$get_RegionType() {
      var toRet = 'color';
      switch (this.get_presModel().legendType) {
        case 'color': {
          toRet = 'color';
          break;
        }
        case 'size': {
          toRet = 'size';
          break;
        }
        case 'shape': {
          toRet = 'shape';
          break;
        }
        case 'map': {
          toRet = 'map';
          break;
        }
        default: {
          ss.Debug.fail('unsupported legend type: ' + this.get_presModel().legendType);
          break;
        }
      }
      return toRet;
    },
    get_borderWidth: function LegacyLegendViewModel$get_BorderWidth() {
      if (ss.isValue(this.get_parentZoneVM())) {
        return this.get_parentZoneVM().get_model().contentBorderWidth();
      }
      return 0;
    },
    get_presModelTitleHeight: function LegacyLegendViewModel$get_PresModelTitleHeight() {
      return this.get_presModel().titleHeight;
    },
    get_presModelTitleWidth: function LegacyLegendViewModel$get_PresModelTitleWidth() {
      return (this.get_presModel().isVisuallyCat ? this.get_presModel().titleWidth : this.get_$parentZoneTitleSize().w);
    },
    get_shouldShowContextMenu: function LegacyLegendViewModel$get_ShouldShowContextMenu() {
      return tsConfig.is_authoring && tsConfig.current_sheet_type === 'worksheet' && this.get_presModel().isContextMenuAllowed;
    },
    get_legendColumns: function LegacyLegendViewModel$get_LegendColumns() {
      return this.get_presModel().legendNames;
    },
    get_legendTypeEnum: function LegacyLegendViewModel$get_LegendTypeEnum() {
      return this.get_presModel().legendType;
    },
    get_isZoneVisible: function LegacyLegendViewModel$get_IsZoneVisible() {
      return this.get_parentZoneVM().get_model().get_isVisible();
    },
    get_zoneID: function LegacyLegendViewModel$get_ZoneID() {
      return this.get_parentZoneVM().get_zoneId();
    },
    handleZoneValidStateChanged: function LegacyLegendViewModel$HandleZoneValidStateChanged() {
      this.$raiseValidStateChanged();
    },
    dispose: function LegacyLegendViewModel$Dispose() {
      this.$legacyLegendModel.remove_newLegacyLegend(ss.mkdel(this, this.handleNewLegacyLegend));
      this.get_visualModel().remove_urlInfoCacheChange(ss.mkdel(this, this.$handleUrlInfoCacheChanged));
      this.$zoneVM.remove_validStateChanged(ss.mkdel(this, this.handleZoneValidStateChanged));
      $tab_LegendBaseViewModel.prototype.dispose.call(this);
    },
    handleNewLegacyLegend: function LegacyLegendViewModel$HandleNewLegacyLegend() {
      this.$raiseNewLegacyLegend();
    },
    showEditColorsDialog: function LegacyLegendViewModel$ShowEditColorsDialog() {
      if (this.get_presModel().isVisuallyCat) {
        var $t1 = new tab.GetWebCategoricalColorDialogCmd();
        $t1.cmdParams['fieldVector'] = this.get_presModel().legendNames;
        $t1.invoke();
      }
      else {
        var $t2 = new tab.GetWebQuantitativeColorDialogCmd();
        $t2.cmdParams['fieldVector'] = this.get_presModel().legendNames;
        $t2.invoke();
      }
    },
    $raiseNewLegacyLegend: function LegacyLegendViewModel$RaiseNewLegacyLegend() {
      if (ss.isValue(this.$3$NewLegacyLegendField)) {
        this.$3$NewLegacyLegendField();
      }
    },
    $raiseValidStateChanged: function LegacyLegendViewModel$RaiseValidStateChanged() {
      if (ss.isValue(this.$3$ValidStateChangedField)) {
        this.$3$ValidStateChangedField();
      }
    },
    $handleUrlInfoCacheChanged: function LegacyLegendViewModel$HandleUrlInfoCacheChanged() {
      this.notifyPropertyChanged($tab_LegacyLegendViewModel.$urlInfoCacheChangedIdentifier);
    },
    handleZoneVisibilityChanged: function LegacyLegendViewModel$HandleZoneVisibilityChanged() {
      if (ss.isValue(this.$3$ZoneVisibilityChangedField)) {
        this.$3$ZoneVisibilityChangedField();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyQuantitativeDateQuickFilter
  var $tab_LegacyQuantitativeDateQuickFilter = global.tab.LegacyQuantitativeDateQuickFilter = ss.mkType($asm, 'tab.LegacyQuantitativeDateQuickFilter', function(props) {
    this.$showFullDateTimes = 0;
    this.$calendarControl = null;
    this.$focusedInput = null;
    this.$calendarClicked = false;
    $tab_LegacyQuantitativeQuickFilter.call(this, props);
  }, {
    get_editingFormat: function LegacyQuantitativeDateQuickFilter$get_EditingFormat() {
      return this.oFilter.editing_format;
    },
    postCreate: function LegacyQuantitativeDateQuickFilter$PostCreate() {
      this.inherited(arguments);
      var dateFormat = this.oFilter.date_format;
      var fmt = dateFormat.locale_formatting_strings;
      var editingFormat = this.get_editingFormat();
      var narrowDayNames = fmt.narrowDay.filter(function(s) {
        return !ss.isNullOrEmptyString(s);
      });
      var firstDayOfWeek = this.oFilter.first_day_of_week;
      if (ss.isValue(firstDayOfWeek)) {
        firstDayOfWeek = firstDayOfWeek - 1;
      }
      var now = new Date();
      var nowUTC = new Date(Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()));
      var formattingInfo = {};
      formattingInfo.format = tableau.format.mapIcuToOleFormat(dateFormat.yearMonthFormat);
      formattingInfo.locale_formatting_strings = fmt;
      var editingFormattingInfo = {};
      editingFormattingInfo.format = editingFormat.format;
      editingFormattingInfo.locale_formatting_strings = fmt;
      this.$calendarControl = new tab.DatePicker(new tab.DatePickerSettings(nowUTC, nowUTC, null, null, firstDayOfWeek, narrowDayNames, fmt.todayFormatTemplate, function(dateUTC) {
        return tableau.format.formatCustomJsDateTime(dateUTC, formattingInfo, 0, 'd');
      }, function(dateUTC1) {
        return tableau.format.formatCustomJsDateTime(dateUTC1, editingFormattingInfo, 0, 'd');
      }));
      this.$calendarControl.element.on('dateSelected', ss.mkdel(this, this.$dateSelected)).on('mousedown', ss.mkdel(this, this.$calendarMouseDown)).appendTo(document.body);
      this.$calendarClicked = false;
    },
    destroy: function LegacyQuantitativeDateQuickFilter$Destroy(preserveDom) {
      this.$calendarControl.dispose();
      this.$calendarControl = null;
      this.inherited(arguments);
    },
    showFullDateTimes: function LegacyQuantitativeDateQuickFilter$ShowFullDateTimes(dateFormat, val) {
      this.$showFullDateTimes = tab.QuickFilterDateFormatUtil.getDateTimeFormatMode([this.oCurrentMin, this.oCurrentMax, this.oRangeMin, this.oRangeMax, val], this.get_presModel().aggregation, dateFormat, this.$showFullDateTimes);
      return this.$showFullDateTimes;
    },
    getFilterValueAtResolution: function LegacyQuantitativeDateQuickFilter$GetFilterValueAtResolution(filterValue) {
      if (ss.isValue(filterValue) && this.showFullDateTimes(this.get_editingFormat(), null) === 0) {
        return Math.floor(ss.unbox(filterValue));
      }
      return filterValue;
    },
    speciallyFormatDataValueForQuantitativeQF: function LegacyQuantitativeDateQuickFilter$SpeciallyFormatDataValueForQuantitativeQF(val) {
      return tableau.format.formatDataValue(tab.LegacyFilterModel.buildDataValueFromFilterValue(val), this.oFilter.role, this.oFilter.date_format, null, this.showFullDateTimes(this.oFilter.date_format, val));
    },
    $isPureTimeFilter: function LegacyQuantitativeDateQuickFilter$IsPureTimeFilter() {
      return tab.QuickFilterDateFormatUtil.isPureTime([this.oCurrentMin, this.oCurrentMax, this.oRangeMin, this.oRangeMax], this.get_presModel().aggregation);
    },
    showInput: function LegacyQuantitativeDateQuickFilter$ShowInput(e, val, oInput) {
      this.inherited(arguments);
      if (this.get_presModel().aggregation !== 'trunc-month' && this.get_presModel().aggregation !== 'trunc-year' && !this.$isPureTimeFilter() && (!ss.referenceEquals(this.$focusedInput, oInput) || this.$calendarControl.element.is(':hidden'))) {
        var selectedDate = ((tab.LegacyFilterModel.isNormalValue(val) && !isNaN(ss.unbox(val.v))) ? new Date(tableau.types.JsDateFromOleDate(ss.unbox(val.v))) : null);
        this.$calendarControl.show(selectedDate);
        this.$focusedInput = oInput;
        this.$layoutCalendar();
      }
    },
    layout: function LegacyQuantitativeDateQuickFilter$Layout(pixelHeight) {
      this.inherited(arguments);
      this.$layoutCalendar();
    },
    $layoutCalendar: function LegacyQuantitativeDateQuickFilter$LayoutCalendar() {
      if (ss.isNullOrUndefined(this.$focusedInput)) {
        return;
      }
      var inputContainer = $((ss.referenceEquals(this.$focusedInput, this.domLowerInput) ? this.domLowerBound : this.domUpperBound));
      this.$calendarControl.positionCalendarByElement(inputContainer);
    },
    $dateSelected: function LegacyQuantitativeDateQuickFilter$DateSelected(evt, date) {
      this.$calendarControl.hide();
      var isMin = ss.referenceEquals(this.$focusedInput, this.domLowerInput);
      var oldValue = (isMin ? this.oCurrentMin : this.oCurrentMax);
      var inputContainer = (isMin ? this.domLowerBound : this.domUpperBound);
      var newDate = $tab_LegacyQuantitativeDateQuickFilter.mergeDateWithTime(date, new Date(tableau.types.JsDateFromOleDate(ss.unbox(oldValue.v))));
      var selectedDateValue = tableau.types.OleDateFromJsDate(newDate.getTime());
      this.applyInputValue(oldValue, this.$focusedInput, inputContainer, selectedDateValue, ss.mkdel(this, function() {
        this.$updateFromCalendar(isMin, selectedDateValue);
      }));
    },
    $updateFromCalendar: function LegacyQuantitativeDateQuickFilter$UpdateFromCalendar(updateMin, selectedDateValue) {
      if (updateMin) {
        this.updateMinAndMax(selectedDateValue, this.oCurrentMax.v);
      }
      else {
        this.updateMinAndMax(this.oCurrentMin.v, selectedDateValue);
      }
    },
    $calendarMouseDown: function LegacyQuantitativeDateQuickFilter$CalendarMouseDown(ignored) {
      this.$calendarClicked = true;
    },
    hideLowerInput: function LegacyQuantitativeDateQuickFilter$HideLowerInput(e) {
      this.$handleInputBlur(e, this.domLowerInput, ss.mkdel(this, function(de) {
        $tab_LegacyQuantitativeQuickFilter.prototype.hideLowerInput.call(this, de);
      }));
    },
    hideUpperInput: function LegacyQuantitativeDateQuickFilter$HideUpperInput(e) {
      this.$handleInputBlur(e, this.domUpperInput, ss.mkdel(this, function(de) {
        $tab_LegacyQuantitativeQuickFilter.prototype.hideUpperInput.call(this, de);
      }));
    },
    $handleInputBlur: function LegacyQuantitativeDateQuickFilter$HandleInputBlur(e, input, hideInput) {
      if (this.$calendarClicked) {
        spiff.EventUtil.stopEvent$2(e);
        this.$calendarClicked = false;
        window.setTimeout(function() {
          if ($(input).is(':visible')) {
            input.focus();
          }
        }, 0);
      }
      else {
        hideInput(e);
        this.$calendarControl.hide();
        if (ss.referenceEquals(this.$focusedInput, input)) {
          this.$focusedInput = null;
        }
      }
    }
  }, {
    mergeDateWithTime: function LegacyQuantitativeDateQuickFilter$MergeDateWithTime(inputDate, inputTime) {
      var result = new Date(Date.UTC(inputDate.getUTCFullYear(), inputDate.getUTCMonth(), inputDate.getUTCDate(), inputTime.getUTCHours(), inputTime.getUTCMinutes(), inputTime.getUTCSeconds(), inputTime.getUTCMilliseconds()));
      return result;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyQuantitativeQuickFilter
  var $tab_LegacyQuantitativeQuickFilter = global.tab.LegacyQuantitativeQuickFilter = ss.mkType($asm, 'tab.LegacyQuantitativeQuickFilter', function(props) {
    this.templateString = "<div class='QuantitativeFilter'>" + "<div class='QuantitativeFilterBox' dojoAttachPoint='domBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<h3 class='QFTitle' dojoAttachPoint='domTitleBar'></h3>" + "<div dojoType='dijit.form.Button' class='QFButton QFResetButton' showlabel='false'" + "dojoAttachPoint='resetButton'" + "iconClass='wcIconNonfiltered'>Showing all values</div>" + "<div dojoType='dijit.form.Button' class='QFButton QFDomainButton' showlabel='false'" + "dojoAttachPoint='domainButton'" + "iconClass='wcIconDomainAll'>Show Smaller Range</div>" + "<div dojoType='dijit.form.Button' class='QFButton QFMenuButton' name='type' dojoAttachPoint='menuButton'" + "iconClass='wcIconContextMenu'></div>" + '</div>' + "<div class='QFContent' dojoAttachPoint='domContent'>" + "<div class='QFReadout QFLowerBound tab-ctrl-formatted-border-hover' dojoAttachEvent='onclick:showLowerInput' dojoAttachPoint='domLowerBound'>" + "<div class='readoutText tab-ctrl-formatted-fixedsize' dojoAttachPoint='domLowerText'></div>" + "<input type='text' dojoAttachPoint='domLowerInput'></input>" + '</div>' + "<div class='QFReadout QFUpperBound tab-ctrl-formatted-border-hover' dojoAttachEvent='onclick:showUpperInput' dojoAttachPoint='domUpperBound'>" + "<div class='readoutText tab-ctrl-formatted-fixedsize' dojoAttachPoint='domUpperText'></div>" + "<input type='text' dojoAttachPoint='domUpperInput'></input>" + '</div>' + "<div dojoAttachPoint='domBar' class='QFSlider QFBar'>" + "<div dojoAttachPoint='domRange' class='QFRange' dojoAttachEvent='onmousedown:startRangeCapture'>" + "<div dojoAttachPoint='domHighlight' class='QFRangeHighlight'></div>" + '</div>' + '</div>' + "<span dojoAttachPoint='domLowerImg' class='QFSlider QFImg QFFilterLeft' dojoAttachEvent='onmousedown:startLowerCapture'></span>" + "<span dojoAttachPoint='domUpperImg' class='QFSlider QFImg QFFilterRight' dojoAttachEvent='onmousedown:startUpperCapture'></span>" + '</div>' + '</div>' + '</div>';
    this.getContextMenuCommands = null;
    this.requestSetAttributes = null;
    this.attributes = {};
    this.widgetsInTemplate = true;
    this.global = false;
    this.templateRoot = null;
    this.session = null;
    this.field = '';
    this.filterViewModel = null;
    this.presModel = null;
    this.$applyDelay = 200;
    this.$applyTimer = null;
    this.$iconWidth = 10;
    this.rid = 0;
    this.timestamp = 0;
    this.$disposables = null;
    this.domContent = null;
    this.domControls = null;
    this.domLowerText = null;
    this.domUpperText = null;
    this.domLowerInput = null;
    this.domUpperInput = null;
    this.domBar = null;
    this.domRange = null;
    this.domHighlight = null;
    this.domLowerImg = null;
    this.domUpperImg = null;
    this.domLowerBound = null;
    this.domUpperBound = null;
    this.resetButton = null;
    this.menuButton = null;
    this.domainButton = null;
    this.lastLowerOffset = 0;
    this.lastUpperOffset = 0;
    this.classQF = 'QF';
    this.classQFButtonR = 'QFButtonR';
    this.classQFButtonHide = 'QFButtonHide';
    this.classQFDisabled = 'QFDisabled';
    this.classQFCenterText = 'QFCenterText';
    this.classQFHideButtons = 'QFHideButtons';
    this.classQFHideSlider = 'QFHideSlider';
    this.classQFHideReadout = 'QFHideReadout';
    this.classQFResetDisabled = 'QFResetDisabled';
    this.oCurrentMin = null;
    this.oCurrentMax = null;
    this.oRangeMin = null;
    this.oRangeMax = null;
    this.oDataMin = null;
    this.oDataMax = null;
    this.rangeMinOverride = null;
    this.rangeMaxOverride = null;
    this.previousMinVal = null;
    this.previousMaxVal = null;
    this.metricsOnly = false;
    this.oMetrics = null;
    this.$mouseEvtDisposables = null;
    this.precision = 0;
    this.captureInfo = null;
    this.showInputStartValue = null;
    this.mode = null;
    this.showContextMenu = null;
    this.showDomainMenu = null;
    this.$editingFormat = null;
    this.$layoutWasCalled = false;
    $tab_LegacyQuickFilterWidget.call(this);
    this.$disposables = new tab.DisposableHolder();
    tab.ServerFontLoader.get_instance().add_fontPreparationComplete(ss.mkdel(this, this.$fontLoaded));
  }, {
    get_attributes: function LegacyQuantitativeQuickFilter$get_Attributes() {
      return this.attributes;
    },
    get_presModel: function LegacyQuantitativeQuickFilter$get_PresModel() {
      return this.presModel;
    },
    get_oCurrentMin: function LegacyQuantitativeQuickFilter$get_OCurrentMin() {
      return this.oCurrentMin;
    },
    get_oCurrentMax: function LegacyQuantitativeQuickFilter$get_OCurrentMax() {
      return this.oCurrentMax;
    },
    get_editingFormat: function LegacyQuantitativeQuickFilter$get_EditingFormat() {
      if (ss.isNullOrUndefined(this.$editingFormat)) {
        this.$editingFormat = tableau.format.deriveNumberEditingFormat(this.oFilter.format);
      }
      return this.$editingFormat;
    },
    get_visualId: function LegacyQuantitativeQuickFilter$get_VisualId() {
      return this.session.get_visualId();
    },
    get_field: function LegacyQuantitativeQuickFilter$get_Field() {
      return this.field;
    },
    get_$includeValues: function LegacyQuantitativeQuickFilter$get_IncludeValues() {
      return this.oFilter.table.included;
    },
    $fontLoaded: function LegacyQuantitativeQuickFilter$FontLoaded() {
      if (ss.isValue(this.domNode) && this.$layoutWasCalled) {
        this.layout(null);
      }
    },
    postCreate: function LegacyQuantitativeQuickFilter$PostCreate() {
      if (this.filterViewModel.get_filterType() !== 'Quantitative') {
        tab.Log.get(this).warn('Incompatible filter view model type for LegacyQuantitativeQuickFilter: %s', [this.filterViewModel.get_filterType()]);
      }
      this.domLowerInput.style.display = 'none';
      this.domUpperInput.style.display = 'none';
      $(this.domLowerInput).on('blur', ss.mkdel(this, this.hideLowerInput)).on('keydown', ss.mkdel(this, this.lowerInputKeyDown)).on('keypress', ss.mkdel(this, this.checkLowerEnter));
      $(this.domUpperInput).on('blur', ss.mkdel(this, this.hideUpperInput)).on('keydown', ss.mkdel(this, this.upperInputKeyDown)).on('keypress', ss.mkdel(this, this.checkUpperEnter));
      $(document.body).on('mousedown.' + this.domNode.id, ss.mkdel(this, function(e) {
        if (!ss.referenceEquals(e.target, this.domLowerInput)) {
          this.domLowerInput.blur();
        }
        if (!ss.referenceEquals(e.target, this.domUpperInput)) {
          this.domUpperInput.blur();
        }
      }));
      this.timestamp = (new Date()).getTime();
      this.localize();
      var title = $tab_FilterFormat.formatColumnDisplayName(this.oFilter, false, true);
      this.domTitleBar.setAttribute('title', title);
      this.updateTitleBar();
      this.$processControlButtons();
      var startRange = this.oFilter.table;
      this.$handleResetButtonState(startRange.min.v, startRange.max.v);
      this.$setupEventHandlers();
    },
    $setupEventHandlers: function LegacyQuantitativeQuickFilter$SetupEventHandlers() {
      this.$disposables.add$2([spiff.TableauClickHandler.targetAndClick(this.menuButton.domNode, ss.mkdel(this, this.doMenu)), spiff.TableauClickHandler.targetAndClick(this.resetButton.domNode, ss.mkdel(this, this.toggleReset)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.menuButton.domNode, ss.mkdel(this, this.doMenu)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.resetButton.domNode, ss.mkdel(this, this.toggleReset))]);
      this.$disposables.add$2([spiff.TableauClickHandler.targetAndClick(this.domainButton.domNode, ss.mkdel(this, this.doDomainMenu)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.domainButton.domNode, ss.mkdel(this, this.doDomainMenu))]);
    },
    $processControlButtons: function LegacyQuantitativeQuickFilter$ProcessControlButtons() {
      if (this.metricsOnly) {
        return;
      }
      var buttonCount = 0;
      var processButton = ss.mkdel(this, function(button, hide) {
        if (ss.isNullOrUndefined(button) || ss.isNullOrUndefined(button.domNode)) {
          return;
        }
        if (hide) {
          $(button.domNode).removeClass(this.classQFButtonR + '1 ' + this.classQFButtonR + '2 ' + this.classQFButtonR + '3');
          button.domNode.classList.add(this.classQFButtonHide);
        }
        else {
          buttonCount += 1;
          button.domNode.classList.remove(this.classQFButtonHide);
          button.domNode.classList.add(this.classQFButtonR + buttonCount);
        }
        $(button.domNode).css('background-color', this.backgroundColor);
      });
      processButton(this.menuButton, this.shouldHideContextMenu());
      processButton(this.domainButton, this.shouldHideDomainButton());
      processButton(this.resetButton, this.shouldHideResetButton());
      this.domControls.classList.add(this.classQF + buttonCount + 'Button');
    },
    isSetControlUI: function LegacyQuantitativeQuickFilter$IsSetControlUI() {
      return false;
    },
    $handleResetButtonState: function LegacyQuantitativeQuickFilter$HandleResetButtonState(curMin, curMax) {
      if (this.isMaxRange(curMin, curMax)) {
        $tab_QfButtonUtil.disableResetButton(this.resetButton, false);
      }
      else {
        $tab_QfButtonUtil.enableResetButton(this.resetButton, false);
      }
    },
    isMaxRange: function LegacyQuantitativeQuickFilter$IsMaxRange(newMin, newMax) {
      var minHasValue = ss.isValue(newMin);
      var maxHasValue = ss.isValue(newMax);
      if (minHasValue && maxHasValue && this.get_$includeValues() !== 'include-all') {
        return false;
      }
      var curMin = this.oFilter.range.min.v;
      var curMax = this.oFilter.range.max.v;
      if (!minHasValue) {
        newMin = curMin;
      }
      if (!maxHasValue) {
        newMax = curMax;
      }
      return ss.isValue(curMin) && ss.isValue(newMin) && tab.DoubleUtil.isLessThanOrApproximatelyEqual(ss.unbox(newMin), ss.unbox(curMin)) && (ss.isValue(curMax) && ss.isValue(newMax) && tab.DoubleUtil.isGreaterThanOrApproximatelyEqual(ss.unbox(newMax), ss.unbox(curMax)));
    },
    postMixInProperties: function LegacyQuantitativeQuickFilter$PostMixInProperties() {
      this.inherited(arguments);
      this.templateRoot = dojo.moduleUrl('tableau.base.widget', 'templates').toString();
    },
    destroy: function LegacyQuantitativeQuickFilter$Destroy(preserveDom) {
      if (ss.isValue(this.$mouseEvtDisposables)) {
        this.$mouseEvtDisposables.dispose();
      }
      this.$disposables.dispose();
      $(this.domLowerInput).off('blur').off('keydown').off('keypress');
      $(this.domUpperInput).off('blur').off('keydown').off('keypress');
      $(document.body).off('mousedown.' + this.domNode.id);
      this.showContextMenu = null;
      this.showDomainMenu = null;
      this.requestSetAttributes = null;
      this.getContextMenuCommands = null;
      tab.ServerFontLoader.get_instance().remove_fontPreparationComplete(ss.mkdel(this, this.$fontLoaded));
      this.inherited(arguments);
    },
    showFullDateTimes: function LegacyQuantitativeQuickFilter$ShowFullDateTimes(dateFormat, val) {
      return 0;
    },
    getPrecision: function LegacyQuantitativeQuickFilter$GetPrecision() {
      return this.precision;
    },
    hasCurrentMin: function LegacyQuantitativeQuickFilter$HasCurrentMin() {
      return tab.LegacyFilterModel.isNormalValue(this.oCurrentMin);
    },
    hasCurrentMax: function LegacyQuantitativeQuickFilter$HasCurrentMax() {
      return tab.LegacyFilterModel.isNormalValue(this.oCurrentMax);
    },
    getRangeMin: function LegacyQuantitativeQuickFilter$GetRangeMin() {
      return (ss.isValue(this.rangeMinOverride) ? this.rangeMinOverride : this.oRangeMin.v);
    },
    getRangeMax: function LegacyQuantitativeQuickFilter$GetRangeMax() {
      return (ss.isValue(this.rangeMaxOverride) ? this.rangeMaxOverride : this.oRangeMax.v);
    },
    getRange: function LegacyQuantitativeQuickFilter$GetRange() {
      var rangeMin = this.getRangeMin();
      var rangeMax = this.getRangeMax();
      if (ss.isValue(rangeMin) && ss.isValue(rangeMax)) {
        return ss.Nullable$1.sub(rangeMax, rangeMin);
      }
      return null;
    },
    hasDataMin: function LegacyQuantitativeQuickFilter$HasDataMin() {
      var presModelDict = this.presModel.quickFilter;
      return tab.LegacyFilterModel.isNormalValue(this.oDataMin) && ss.keyExists(presModelDict, 'dataMin'.toString());
    },
    hasDataMax: function LegacyQuantitativeQuickFilter$HasDataMax() {
      var presModelDict = this.presModel.quickFilter;
      return tab.LegacyFilterModel.isNormalValue(this.oDataMax) && ss.keyExists(presModelDict, 'dataMax'.toString());
    },
    getDataMin: function LegacyQuantitativeQuickFilter$GetDataMin() {
      return this.oDataMin.v;
    },
    getDataMax: function LegacyQuantitativeQuickFilter$GetDataMax() {
      return this.oDataMax.v;
    },
    getCurMin: function LegacyQuantitativeQuickFilter$GetCurMin() {
      return this.oCurrentMin.v;
    },
    getCurMax: function LegacyQuantitativeQuickFilter$GetCurMax() {
      return this.oCurrentMax.v;
    },
    getMinText: function LegacyQuantitativeQuickFilter$GetMinText() {
      return this.speciallyFormatDataValueForQuantitativeQF(this.oCurrentMin);
    },
    getMaxText: function LegacyQuantitativeQuickFilter$GetMaxText() {
      return this.speciallyFormatDataValueForQuantitativeQF(this.oCurrentMax);
    },
    getLowerPos: function LegacyQuantitativeQuickFilter$GetLowerPos() {
      return this.domLowerImg.offsetLeft - this.oMetrics.absOffset + (this.$iconWidth - 1);
    },
    setLowerPos: function LegacyQuantitativeQuickFilter$SetLowerPos(val) {
      this.domLowerImg.style.left = val + this.oMetrics.absOffset - (this.$iconWidth - 1) + 'px';
    },
    $hasLowerImgMoved: function LegacyQuantitativeQuickFilter$HasLowerImgMoved() {
      return this.lastLowerOffset !== this.domLowerImg.offsetLeft;
    },
    $getUpperPos: function LegacyQuantitativeQuickFilter$GetUpperPos() {
      return this.domUpperImg.offsetLeft - this.oMetrics.absOffset;
    },
    setUpperPos: function LegacyQuantitativeQuickFilter$SetUpperPos(val) {
      this.domUpperImg.style.left = val + this.oMetrics.absOffset + 'px';
    },
    $hasUpperImgMoved: function LegacyQuantitativeQuickFilter$HasUpperImgMoved() {
      return this.lastUpperOffset !== this.domUpperImg.offsetLeft;
    },
    isRange: function LegacyQuantitativeQuickFilter$IsRange() {
      switch (this.get_$includeValues()) {
        case 'include-all':
        case 'include-null':
        case 'include-non-null': {
          return false;
        }
        default: {
          return true;
        }
      }
    },
    shouldHideDomainButton: function LegacyQuantitativeQuickFilter$ShouldHideDomainButton() {
      return this.hideEmptyTitlebar() || this.attributes['show-morefewerbutton'] !== 'true';
    },
    shouldHideContextMenu: function LegacyQuantitativeQuickFilter$ShouldHideContextMenu() {
      if (tsConfig.current_sheet_type === 'dashboard' && tsConfig.is_authoring) {
        return true;
      }
      var commandsWrapper = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
      return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commandsWrapper) || commandsWrapper.get_commandItems().length === 0;
    },
    shouldHideResetButton: function LegacyQuantitativeQuickFilter$ShouldHideResetButton() {
      return this.hideEmptyTitlebar() || this.attributes['show-all'] === 'false' || this.attributes['show-filter-state'] === 'false';
    },
    computePrecision: function LegacyQuantitativeQuickFilter$ComputePrecision(pixelRange) {
      var range = this.getRange();
      var pixelValue = ((ss.isValue(range) && pixelRange !== 0) ? (ss.unbox(range) / pixelRange) : 1);
      var valueDigits = Math.log(pixelValue) / Math.log(10);
      this.precision = ((valueDigits > 0) ? Math.ceil(valueDigits) : Math.floor(valueDigits));
      if (this.precision === Number.NEGATIVE_INFINITY || isNaN(this.precision)) {
        this.precision = 5;
      }
    },
    $scalePixelsToRange: function LegacyQuantitativeQuickFilter$ScalePixelsToRange(delta, pixelRange, offset) {
      var factor;
      var pixelValue = delta * ss.coalesce(this.getRange(), 0) / pixelRange;
      if (this.precision >= 0) {
        return Math.round(offset + pixelValue);
      }
      factor = Math.pow(10, -this.precision);
      return Math.round((offset + pixelValue) * factor) / factor;
    },
    clearDataRange: function LegacyQuantitativeQuickFilter$ClearDataRange() {
      if (ss.isValue(this.oDataMin)) {
        this.oDataMin = null;
      }
      if (ss.isValue(this.oDataMax)) {
        this.oDataMax = null;
      }
      this.domHighlight.style.visibility = 'hidden';
    },
    setMinValue: function LegacyQuantitativeQuickFilter$SetMinValue(v) {
      if (ss.isNullOrUndefined(v) || isNaN(v)) {
        return;
      }
      if (this.hasCurrentMax() && ss.Nullable$1.gt(v, this.getCurMax())) {
        v = ss.unbox(this.getCurMax());
      }
      if (this.oCurrentMin.t === 'i') {
        this.oCurrentMin.v = Math.round(v);
      }
      else {
        this.oCurrentMin.v = v;
      }
      this.domLowerText.textContent = this.getMinText();
      var rangeMin = this.getRangeMin();
      if (this.hasCurrentMin() && (!ss.isValue(rangeMin) || ss.Nullable$1.lt(this.getCurMin(), rangeMin))) {
        this.rangeMinOverride = this.getCurMin();
      }
    },
    setMaxValue: function LegacyQuantitativeQuickFilter$SetMaxValue(v) {
      if (ss.isNullOrUndefined(v) || isNaN(v)) {
        return;
      }
      if (this.hasCurrentMin() && ss.Nullable$1.lt(v, this.getCurMin())) {
        v = ss.unbox(this.getCurMin());
      }
      if (this.oCurrentMax.t === 'i') {
        this.oCurrentMax.v = Math.round(v);
      }
      else {
        this.oCurrentMax.v = v;
      }
      this.domUpperText.textContent = this.getMaxText();
      var rangeMax = this.getRangeMax();
      if (this.hasCurrentMax() && (!ss.isValue(rangeMax) || ss.Nullable$1.gt(this.getCurMax(), rangeMax))) {
        this.rangeMaxOverride = this.getCurMax();
      }
    },
    removeRangeOverride: function LegacyQuantitativeQuickFilter$RemoveRangeOverride() {
      this.rangeMinOverride = null;
      this.rangeMaxOverride = null;
    },
    getValueFromInput: function LegacyQuantitativeQuickFilter$GetValueFromInput(oNode, oldValue) {
      var oldDataValue = { t: oldValue.t, v: ss.unbox(oldValue.v), s: null };
      return tableau.format.parseQuantitativeDataValue(oNode.value, oldValue.t, this.get_editingFormat(), this.showFullDateTimes(this.get_editingFormat(), null), oldDataValue);
    },
    speciallyFormatDataValueForQuantitativeQF: function LegacyQuantitativeQuickFilter$SpeciallyFormatDataValueForQuantitativeQF(val) {
      return tableau.format.formatDataValue(tab.LegacyFilterModel.buildDataValueFromFilterValue(val), this.oFilter.role, this.oFilter.format, null, 0);
    },
    initValues: function LegacyQuantitativeQuickFilter$InitValues() {
      this.oRangeMin = $.extend({}, this.oFilter.range.min);
      this.oRangeMax = $.extend({}, this.oFilter.range.max);
      this.oDataMin = $.extend({}, this.oFilter.data.min);
      this.oDataMax = $.extend({}, this.oFilter.data.max);
      if (this.isRange() && (ss.isValue(this.oFilter.table.min.v) || ss.isValue(this.oFilter.table.max.v))) {
        this.oCurrentMin = $.extend({}, this.oFilter.table.min);
        this.oCurrentMax = $.extend({}, this.oFilter.table.max);
      }
      else {
        this.oCurrentMin = $.extend({}, this.oFilter.range.min);
        this.oCurrentMax = $.extend({}, this.oFilter.range.max);
      }
      this.oMetrics = {};
      this.domLowerInput.value = tableau.format.formatDataValue(tab.LegacyFilterModel.buildDataValueFromFilterValue(this.oCurrentMin), this.oFilter.role, this.get_editingFormat(), null, this.showFullDateTimes(this.get_editingFormat(), null));
      this.domUpperInput.value = tableau.format.formatDataValue(tab.LegacyFilterModel.buildDataValueFromFilterValue(this.oCurrentMax), this.oFilter.role, this.get_editingFormat(), null, this.showFullDateTimes(this.get_editingFormat(), null));
    },
    resize: function LegacyQuantitativeQuickFilter$Resize(marginBox) {
      tab.DomUtil.setMarginBox(this.domNode, marginBox);
      this.layout(null);
    },
    layout: function LegacyQuantitativeQuickFilter$Layout(pixelHeight) {
      this.$layoutWasCalled = true;
      var maxReadoutW = 200;
      this.initValues();
      this.updateTitleBar();
      this.$showOrHideTheUpperAndLowerText();
      this.domNode.classList.add(this.classQFHideButtons);
      this.domNode.classList.remove(this.classQFCenterText);
      var oTitleBar = this.layoutTitleBar();
      var oZoneSize = dojo.contentBox(this.domNode);
      var notTitleSize = { w: oZoneSize.w, h: oZoneSize.h };
      if (!this.metricsOnly) {
        if (this.titleW > 0) {
          notTitleSize.w = oZoneSize.w - oTitleBar.w;
          this.domContent.style.top = '';
          this.domContent.style.left = oTitleBar.w + 'px';
        }
        else if (this.titleH > 0) {
          this.domNode.classList.remove(this.classQFHideButtons);
          notTitleSize.h = oZoneSize.h - oTitleBar.h;
          this.domContent.style.top = oTitleBar.h + 'px';
          this.domContent.style.left = '';
        }
        else {
          this.domNode.classList.remove(this.classQFHideButtons);
          this.domContent.style.top = '';
          this.domContent.style.left = '';
        }
      }
      dojo.marginBox(this.domContent, ss.mkdict(['w', notTitleSize.w, 'h', notTitleSize.h]));
      this.$showOrHideSliderAndReadout(notTitleSize, maxReadoutW);
      this.oMetrics.top = this.domBar.offsetTop - 2;
      this.oMetrics.absOffset = this.domBar.offsetLeft;
      this.oMetrics.left = 0;
      this.oMetrics.right = this.domBar.offsetWidth;
      if (this.hasCurrentMin()) {
        this.domLowerImg.style.top = this.oMetrics.top - 4 + 'px';
        this.domLowerImg.style.visibility = '';
      }
      else {
        this.domLowerImg.style.visibility = 'hidden';
      }
      if (this.hasCurrentMax()) {
        this.domUpperImg.style.top = this.oMetrics.top - 4 + 'px';
        this.domUpperImg.style.visibility = '';
      }
      else {
        this.domUpperImg.style.visibility = 'hidden';
      }
      var domContentVisibility = (this.shouldShowDomContent() ? '' : 'hidden');
      this.domContent.style.visibility = domContentVisibility;
      this.oMetrics.width = this.oMetrics.right - this.oMetrics.left;
      this.computePrecision(this.oMetrics.width);
      var showDataHighlight = this.hasDataMin() || this.hasDataMax();
      this.domHighlight.style.visibility = (showDataHighlight ? '' : 'hidden');
      this.updateMinAndMax(this.oCurrentMin.v, this.oCurrentMax.v);
      this.updateDomainButton();
    },
    $showOrHideSliderAndReadout: function LegacyQuantitativeQuickFilter$ShowOrHideSliderAndReadout(notTitleSize, maxReadoutW) {
      if (this.attributes[$tab_SliderConstants.showSliderAttr] !== 'false' && this.attributes[$tab_SliderConstants.showReadoutAttr] !== 'false') {
        this.domNode.classList.remove(this.classQFHideReadout);
        this.domNode.classList.remove(this.classQFHideSlider);
        var twolineH = dojo.contentBox(this.domLowerBound).h + dojo.contentBox(this.domLowerImg).h + 8;
        if (notTitleSize.h < twolineH && notTitleSize.w > 200) {
          this.domNode.classList.add(this.classQFCenterText);
          var lowerReadoutNaturalWidth = this.contentBox(this.domLowerText).w;
          var upperReadoutNaturalWidth = this.contentBox(this.domUpperText).w;
          this.domLowerBound.style.width = '';
          this.domUpperBound.style.width = '';
          this.domLowerBound.style.top = '0';
          this.domUpperBound.style.top = '0';
          var barW = notTitleSize.w - (lowerReadoutNaturalWidth + dojo.contentBox(this.domLowerImg).w) - (upperReadoutNaturalWidth + dojo.contentBox(this.domUpperImg).w) - 2 * 8;
          if (barW <= 0) {
            this.domNode.classList.add(this.classQFHideSlider);
          }
          else {
            dojo.marginBox(this.domBar, ss.mkdict(['w', barW]));
            this.domBar.style.top = '7px';
            this.domBar.style.left = lowerReadoutNaturalWidth + tab.DomUtil.getContentBox(this.domLowerImg).w + 8 + 'px';
            this.domLowerInput.style.width = lowerReadoutNaturalWidth + 'px';
            this.domUpperInput.style.width = upperReadoutNaturalWidth + 'px';
          }
        }
        else {
          var boundW = Math.min(maxReadoutW, Math.floor(notTitleSize.w / 2 - 4));
          dojo.marginBox(this.domLowerBound, ss.mkdict(['w', boundW]));
          dojo.marginBox(this.domUpperBound, ss.mkdict(['w', boundW]));
          this.domLowerInput.style.width = dojo.contentBox(this.domLowerBound).w + 'px';
          this.domUpperInput.style.width = dojo.contentBox(this.domUpperBound).w + 'px';
          var off = this.domLowerBound.offsetTop + this.domLowerBound.offsetHeight + 8;
          dojo.marginBox(this.domBar, ss.mkdict(['w', notTitleSize.w - 24]));
          this.domBar.style.top = off + 'px';
          this.domBar.style.left = '12px';
        }
      }
      else if (this.attributes[$tab_SliderConstants.showSliderAttr] !== 'false') {
        this.domNode.classList.add(this.classQFHideReadout);
        this.domNode.classList.remove(this.classQFHideSlider);
        dojo.marginBox(this.domBar, ss.mkdict(['w', notTitleSize.w - 24]));
        this.domBar.style.left = '12px';
      }
      else if (this.attributes[$tab_SliderConstants.showReadoutAttr] !== 'false') {
        this.domNode.classList.remove(this.classQFHideReadout);
        this.domNode.classList.add(this.classQFHideSlider);
        var boundW1 = Math.min(maxReadoutW, Math.floor(notTitleSize.w / 2 - 4));
        dojo.marginBox(this.domLowerBound, ss.mkdict(['w', boundW1]));
        dojo.marginBox(this.domUpperBound, ss.mkdict(['w', boundW1]));
        this.domLowerInput.style.width = tab.DomUtil.getContentBox(this.domLowerBound).w + 'px';
        this.domUpperInput.style.width = tab.DomUtil.getContentBox(this.domUpperBound).w + 'px';
      }
      else {
        this.domNode.classList.add(this.classQFHideSlider);
        this.domNode.classList.add(this.classQFHideReadout);
      }
    },
    $showOrHideTheUpperAndLowerText: function LegacyQuantitativeQuickFilter$ShowOrHideTheUpperAndLowerText() {
      var TabCtrlFormattedBorderHover = 'tab-ctrl-formatted-border-hover';
      if (this.hasCurrentMin()) {
        this.domLowerText.textContent = this.getMinText();
        this.domLowerText.parentNode.classList.remove(this.classQFDisabled);
        this.domLowerText.parentNode.classList.add(TabCtrlFormattedBorderHover);
      }
      else {
        this.domLowerText.textContent = this.speciallyFormatDataValueForQuantitativeQF(this.oRangeMin);
        this.domLowerText.parentNode.classList.add(this.classQFDisabled);
        this.domLowerText.parentNode.classList.remove(TabCtrlFormattedBorderHover);
      }
      if (this.hasCurrentMax()) {
        this.domUpperText.textContent = this.getMaxText();
        this.domUpperText.parentNode.classList.remove(this.classQFDisabled);
        this.domUpperText.parentNode.classList.add(TabCtrlFormattedBorderHover);
      }
      else {
        this.domUpperText.textContent = this.speciallyFormatDataValueForQuantitativeQF(this.oRangeMax);
        this.domUpperText.parentNode.classList.add(this.classQFDisabled);
        this.domUpperText.parentNode.classList.remove(TabCtrlFormattedBorderHover);
      }
    },
    shouldShowDomContent: function LegacyQuantitativeQuickFilter$ShouldShowDomContent() {
      return this.hasCurrentMax() || this.hasCurrentMin();
    },
    updateFromIcons: function LegacyQuantitativeQuickFilter$UpdateFromIcons() {
      var delta, lowerPos;
      var newValue;
      if (this.hasCurrentMin() && this.$hasLowerImgMoved()) {
        var lowerOffset = this.getLowerPos();
        delta = lowerOffset - this.oMetrics.left;
        if (delta === 0) {
          newValue = this.getRangeMin();
        }
        else if (delta === this.oMetrics.width) {
          newValue = this.getRangeMax();
        }
        else if (this.hasCurrentMax() && this.getLowerPos() === this.$getUpperPos()) {
          newValue = this.getCurMax();
        }
        else {
          newValue = this.$scalePixelsToRange(delta, this.oMetrics.width, ss.unbox(this.getRangeMin()) || 0);
        }
        if (ss.isValue(newValue)) {
          this.setMinValue(ss.unbox(newValue));
        }
        this.lastLowerOffset = this.domLowerImg.offsetLeft;
        this.domRange.style.left = lowerOffset + 'px';
      }
      lowerPos = (this.hasCurrentMin() ? this.getLowerPos() : this.oMetrics.left);
      if (this.hasCurrentMax()) {
        var rangeWidth = this.$getUpperPos() - lowerPos;
        if (this.$hasUpperImgMoved()) {
          delta = this.oMetrics.right - this.$getUpperPos();
          if (delta === 0) {
            newValue = this.getRangeMax();
          }
          else if (delta === this.oMetrics.width) {
            newValue = this.getRangeMin();
          }
          else if (this.hasCurrentMin() && this.getLowerPos() === this.$getUpperPos()) {
            newValue = this.getCurMin();
          }
          else {
            newValue = this.$scalePixelsToRange(-delta, this.oMetrics.width, ss.unbox(this.getRangeMax()) || 0);
          }
          if (ss.isValue(newValue)) {
            this.setMaxValue(ss.unbox(newValue));
          }
          this.lastUpperOffset = this.domUpperImg.offsetLeft;
        }
        this.domRange.style.width = rangeWidth + 'px';
      }
      else {
        this.domRange.style.width = this.oMetrics.right - lowerPos + 'px';
      }
      this.updateDataBar();
    },
    doMenu: function LegacyQuantitativeQuickFilter$DoMenu() {
      this.showContextMenu(this.menuButton);
    },
    doDomainMenu: function LegacyQuantitativeQuickFilter$DoDomainMenu() {
      this.showDomainMenu(this.domainButton);
    },
    updateFromOneInput: function LegacyQuantitativeQuickFilter$UpdateFromOneInput(oInput) {
      var valMin, valMax;
      if (ss.referenceEquals(oInput, this.domLowerInput)) {
        valMin = (this.hasCurrentMin() ? this.getValueFromInput(this.domLowerInput, this.oCurrentMin) : Number.MIN_VALUE);
        valMax = this.oCurrentMax.v;
      }
      else {
        valMin = this.oCurrentMin.v;
        valMax = (this.hasCurrentMax() ? this.getValueFromInput(this.domUpperInput, this.oCurrentMax) : Number.MAX_VALUE);
      }
      this.updateMinAndMax(valMin, valMax);
    },
    updateMinAndMax: function LegacyQuantitativeQuickFilter$UpdateMinAndMax(valMin, valMax) {
      var lowerPos;
      if (ss.isValue(valMin) && ss.isValue(valMax)) {
        if (ss.unbox(valMin) > ss.unbox(valMax)) {
          var vT = valMin;
          valMin = valMax;
          valMax = vT;
        }
      }
      this.removeRangeOverride();
      if (this.hasCurrentMin() && ss.isValue(valMin) && !isNaN(ss.unbox(valMin))) {
        this.setMinValue(ss.unbox(valMin));
      }
      if (this.hasCurrentMax() && ss.isValue(valMax) && !isNaN(ss.unbox(valMax))) {
        this.setMaxValue(ss.unbox(valMax));
      }
      var range = this.getRange();
      lowerPos = this.oMetrics.left;
      if (this.hasCurrentMin()) {
        var lowerOffset = ((ss.isValue(range) && !tab.DoubleUtil.isApproximatelyZero(ss.unbox(range))) ? Math.round((ss.coalesce(this.getCurMin(), 0) - ss.coalesce(this.getRangeMin(), 0)) * this.oMetrics.width / ss.unbox(range)) : 0);
        if (this.oMetrics.left + lowerOffset > this.oMetrics.width) {
          lowerOffset = this.oMetrics.left + this.oMetrics.width;
        }
        this.setLowerPos(this.oMetrics.left + lowerOffset);
        this.lastLowerOffset = this.domLowerImg.offsetLeft;
        this.domRange.style.left = this.oMetrics.left + lowerOffset + 'px';
        lowerPos = this.getLowerPos();
      }
      else {
        this.domRange.style.left = lowerPos + 'px';
      }
      if (this.hasCurrentMax()) {
        var rangeMin = (this.hasCurrentMin() ? this.getCurMin() : this.getRangeMin());
        var rangeWidth = ((ss.isValue(range) && !tab.DoubleUtil.isApproximatelyZero(ss.unbox(range))) ? Math.round((ss.coalesce(this.getCurMax(), 0) - ss.unbox(rangeMin)) * this.oMetrics.width / ss.unbox(range)) : this.oMetrics.width);
        this.setUpperPos(lowerPos + rangeWidth);
        this.lastUpperOffset = this.domUpperImg.offsetLeft;
        this.domRange.style.width = Math.max(rangeWidth, 0) + 'px';
      }
      else {
        this.domRange.style.width = Math.max(this.oMetrics.right - lowerPos, 0) + 'px';
      }
      this.updateDataBar();
    },
    updateDataBar: function LegacyQuantitativeQuickFilter$UpdateDataBar() {
      var dataOffset = 0;
      var dataWidth;
      var lowerPos;
      var range = this.getRange();
      if (ss.isValue(range) && !tab.DoubleUtil.isApproximatelyZero(ss.unbox(range)) && this.hasDataMin()) {
        var leftValue = ss.coalesce((this.hasCurrentMin() ? this.getCurMin() : this.getRangeMin()), 0);
        dataOffset = Math.round((ss.coalesce(this.getDataMin(), 0) - leftValue) * this.oMetrics.width / ss.unbox(range));
      }
      this.domHighlight.style.left = dataOffset + 'px';
      lowerPos = (this.hasCurrentMin() ? this.getLowerPos() : this.oMetrics.left);
      dataWidth = (this.hasCurrentMax() ? this.$getUpperPos() : this.oMetrics.right) - lowerPos;
      if (ss.isValue(range) && this.hasDataMax()) {
        var dataMin = (this.hasDataMin() ? this.getDataMin() : this.getRangeMin());
        if (!tab.DoubleUtil.isApproximatelyZero(ss.unbox(range))) {
          dataWidth = Math.round((ss.coalesce(this.getDataMax(), 0) - ss.unbox(dataMin)) * this.oMetrics.width / ss.unbox(range));
        }
        dataWidth = Math.max(dataWidth, 2);
      }
      this.domHighlight.style.width = Math.max(dataWidth, 0) + 'px';
    },
    startUpperCapture: function LegacyQuantitativeQuickFilter$StartUpperCapture(e) {
      this.startCapture(e, false, this.domUpperImg);
    },
    startLowerCapture: function LegacyQuantitativeQuickFilter$StartLowerCapture(e) {
      this.startCapture(e, false, this.domLowerImg);
    },
    startRangeCapture: function LegacyQuantitativeQuickFilter$StartRangeCapture(e) {
      if (this.hasCurrentMin() && this.hasCurrentMax()) {
        this.startCapture(e, true, this.domRange);
      }
    },
    startCapture: function LegacyQuantitativeQuickFilter$StartCapture(e, isRangeCapture, item) {
      this.savePreviousMinAndMaxVals();
      var moveEvent = (isRangeCapture ? ss.mkdel(this, this.$onRangeMove) : ss.mkdel(this, this.onMouseMove));
      spiff.EventUtil.stopEvent(e);
      var range = this.getRange();
      if (!ss.isValue(range) || tab.DoubleUtil.isApproximatelyZero(ss.unbox(range))) {
        return;
      }
      this.captureInfo = { x: e.pageX, y: e.pageY, xStart: item.offsetLeft, isRangeCapture: isRangeCapture, oImg: item };
      if (isRangeCapture) {
        this.captureInfo.lowerStart = this.getLowerPos();
        this.captureInfo.upperStart = this.$getUpperPos();
      }
      if (ss.isValue(this.$mouseEvtDisposables)) {
        this.$mouseEvtDisposables.dispose();
      }
      this.$mouseEvtDisposables = new tab.DisposableHolder();
      this.$mouseEvtDisposables.add$1(spiff.EventUtil.bindWithDispose($(document), 'mousemove', moveEvent));
      this.$mouseEvtDisposables.add$1(spiff.EventUtil.bindWithDispose($(document), 'mouseup', ss.mkdel(this, this.$stopCapture)));
      this.$mouseEvtDisposables.add$1(spiff.EventUtil.bindWithDispose($(document), 'mouseleave', ss.mkdel(this, this.$stopCapture)));
    },
    onMouseMove: function LegacyQuantitativeQuickFilter$OnMouseMove(e) {
      var lowerPos = (this.hasCurrentMin() ? this.getLowerPos() : this.oMetrics.left);
      var upperPos = (this.hasCurrentMax() ? this.$getUpperPos() : this.oMetrics.right);
      var minPos = (ss.referenceEquals(this.captureInfo.oImg, this.domLowerImg) ? (this.oMetrics.left - this.$iconWidth) : lowerPos);
      var maxPos = (ss.referenceEquals(this.captureInfo.oImg, this.domUpperImg) ? this.oMetrics.right : (upperPos - this.$iconWidth));
      var newPos = e.pageX - this.captureInfo.x + this.captureInfo.xStart - this.oMetrics.absOffset;
      spiff.EventUtil.stopEvent$2(e);
      newPos = Math.min(maxPos, Math.max(minPos, newPos));
      var change = false;
      if (ss.referenceEquals(this.captureInfo.oImg, this.domLowerImg)) {
        change = newPos + this.$iconWidth !== lowerPos;
        this.setLowerPos(newPos + this.$iconWidth);
      }
      else {
        change = newPos !== upperPos;
        this.setUpperPos(newPos);
      }
      this.updateFromIcons();
      if (change) {
        this.applyQuantFilter(this.getCurMin(), this.getCurMax());
      }
    },
    applyQuantFilter: function LegacyQuantitativeQuickFilter$ApplyQuantFilter(minVal, maxVal) {
      if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
        var filterData = new tab.QuantitativeFilterData(this.oFilter.targetSheets, this.get_field(), minVal, maxVal, this.previousMinVal, this.previousMaxVal);
        tab.FilterClientCommands.updateQuantitativeFilter(filterData);
      }
    },
    savePreviousMinAndMaxVals: function LegacyQuantitativeQuickFilter$SavePreviousMinAndMaxVals() {
      this.previousMinVal = this.getCurMin();
      this.previousMaxVal = this.getCurMax();
    },
    $onRangeMove: function LegacyQuantitativeQuickFilter$OnRangeMove(e) {
      var minPos = this.captureInfo.x - (this.captureInfo.lowerStart - this.oMetrics.left);
      var maxPos = this.captureInfo.x + (this.oMetrics.right - this.captureInfo.upperStart);
      var newPos = e.pageX;
      newPos = Math.min(maxPos, Math.max(minPos, newPos));
      spiff.EventUtil.stopEvent$2(e);
      this.setLowerPos(this.captureInfo.lowerStart + (newPos - this.captureInfo.x));
      this.setUpperPos(this.captureInfo.upperStart + (newPos - this.captureInfo.x));
      tab.ModelUtils.invalidateVisuals(this.oFilter.targetSheets);
      this.updateFromIcons();
    },
    $stopCapture: function LegacyQuantitativeQuickFilter$StopCapture(e) {
      if (ss.isValue(this.$mouseEvtDisposables)) {
        this.$mouseEvtDisposables.dispose();
      }
      this.$mouseEvtDisposables = null;
      spiff.EventUtil.stopEvent$2(e);
      if (this.captureInfo.x !== e.pageX) {
        this.updateFromIcons();
        this.notifyChange();
      }
    },
    showLowerInput: function LegacyQuantitativeQuickFilter$ShowLowerInput(e) {
      if (!this.hasCurrentMin()) {
        return;
      }
      this.showInput(e, this.oCurrentMin, this.domLowerInput);
      this.domLowerBound.classList.add('active');
      this.savePreviousMinAndMaxVals();
    },
    showUpperInput: function LegacyQuantitativeQuickFilter$ShowUpperInput(e) {
      if (!this.hasCurrentMax()) {
        return;
      }
      this.showInput(e, this.oCurrentMax, this.domUpperInput);
      this.domUpperBound.classList.add('active');
      this.savePreviousMinAndMaxVals();
    },
    showInput: function LegacyQuantitativeQuickFilter$ShowInput(e, val, oInput) {
      spiff.EventUtil.stopEvent(e);
      if ($(oInput).css('display') !== 'none') {
        return;
      }
      oInput.value = tableau.format.formatDataValue(tab.LegacyFilterModel.buildDataValueFromFilterValue(val), this.oFilter.role, this.get_editingFormat(), null, this.showFullDateTimes(this.get_editingFormat(), null));
      this.showInputStartValue = this.getValueFromInput(oInput, val);
      $(oInput).show().siblings('.readoutText').hide();
      oInput.focus();
      oInput.select();
    },
    lowerInputKeyDown: function LegacyQuantitativeQuickFilter$LowerInputKeyDown(e) {
      this.$inputKeyDown(e, this.domLowerInput);
    },
    upperInputKeyDown: function LegacyQuantitativeQuickFilter$UpperInputKeyDown(e) {
      this.$inputKeyDown(e, this.domUpperInput);
    },
    $inputKeyDown: function LegacyQuantitativeQuickFilter$InputKeyDown(e, oInput) {
      if (e.which === 27) {
        $(oInput).val('');
        oInput.blur();
      }
    },
    checkLowerEnter: function LegacyQuantitativeQuickFilter$CheckLowerEnter(e) {
      $tab_LegacyQuantitativeQuickFilter.$checkEnter(e, this.domLowerInput);
    },
    checkUpperEnter: function LegacyQuantitativeQuickFilter$CheckUpperEnter(e) {
      $tab_LegacyQuantitativeQuickFilter.$checkEnter(e, this.domUpperInput);
    },
    hideLowerInput: function LegacyQuantitativeQuickFilter$HideLowerInput(e) {
      this.$hideInput(e, this.oCurrentMin, this.domLowerInput, this.domLowerBound);
    },
    hideUpperInput: function LegacyQuantitativeQuickFilter$HideUpperInput(e) {
      this.$hideInput(e, this.oCurrentMax, this.domUpperInput, this.domUpperBound);
    },
    $hideInput: function LegacyQuantitativeQuickFilter$HideInput(e, oldDV, oInput, inputContainer) {
      var newValue = this.getValueFromInput(oInput, oldDV);
      spiff.EventUtil.stopEvent$2(e);
      this.applyInputValue(oldDV, oInput, inputContainer, newValue, ss.mkdel(this, function() {
        this.updateFromOneInput(oInput);
      }));
    },
    applyInputValue: function LegacyQuantitativeQuickFilter$ApplyInputValue(oldDV, oInput, inputContainer, newValue, updateFilter) {
      var newDV = new Object();
      newDV = $.extend({}, oldDV);
      var formattedNewValue = null;
      if (ss.isNullOrUndefined(newValue) || isNaN(ss.unbox(newValue))) {
        newValue = this.showInputStartValue;
      }
      else {
        newDV.v = ss.unbox(newValue);
        formattedNewValue = this.speciallyFormatDataValueForQuantitativeQF(newDV);
      }
      var oReadout = $(oInput).hide().siblings('.readoutText').show();
      if (ss.isValue(newValue) && (ss.isValue(this.showInputStartValue) && !tab.DoubleUtil.isApproximatelyEqual(ss.unbox(this.showInputStartValue), ss.unbox(newValue)))) {
        oReadout.text(formattedNewValue);
        updateFilter();
        this.notifyChange();
      }
      this.showInputStartValue = null;
      inputContainer.classList.remove('active');
    },
    getFilterValueAtResolution: function LegacyQuantitativeQuickFilter$GetFilterValueAtResolution(filterValue) {
      return filterValue;
    },
    applyChanges: function LegacyQuantitativeQuickFilter$ApplyChanges() {
      var changed = false;
      var newFilter = $.extend(false, new Object(), this.oFilter.table);
      if (this.hasCurrentMin() && (!ss.isValue(newFilter.min.v) || !tab.DoubleUtil.isApproximatelyEqual(ss.unbox(newFilter.min.v), ss.unbox(this.getCurMin())))) {
        changed = true;
        newFilter.min = $.extend({}, this.oCurrentMin);
      }
      if (this.hasCurrentMax() && (!ss.isValue(newFilter.max.v) || !tab.DoubleUtil.isApproximatelyEqual(ss.unbox(newFilter.max.v), ss.unbox(this.getCurMax())))) {
        changed = true;
        newFilter.max = $.extend({}, this.oCurrentMax);
      }
      if (!changed) {
        tab.FilterClientCommands.resetQuantitativeFilter(this.get_field(), this.oFilter.targetSheets);
        return;
      }
      this.clearDataRange();
      ++this.rid;
      if (!this.isRange()) {
        newFilter.included = ((this.get_$includeValues() === 'include-non-null') ? 'include-range' : 'include-range-or-null');
      }
      var newFilterMin = this.getFilterValueAtResolution(newFilter.min.v);
      var newFilterMax = this.getFilterValueAtResolution(newFilter.max.v);
      tab.FilterClientCommands.setQuantitativeFilterRange(this.get_visualId(), this.get_field(), newFilterMin, newFilterMax, newFilter.included);
      this.$handleResetButtonState(newFilterMin, newFilterMax);
    },
    updateDomainButton: function LegacyQuantitativeQuickFilter$UpdateDomainButton() {
      if (!ss.isValue(this.oFilter.domains) || this.oFilter.domains.length <= 1) {
        this.domainButton.domNode.style.display = 'none';
        return;
      }
      this.$updateDomainButtonTooltipText();
      this.$updateDomainButtonIcon();
    },
    $updateDomainButtonTooltipText: function LegacyQuantitativeQuickFilter$UpdateDomainButtonTooltipText() {
      if (ss.isInstanceOfType(this.filterViewModel, $tab_LegacyQuantitativeQuickFilterViewModel)) {
        var quantitativeQuickFilterViewModel = ss.cast(this.filterViewModel, $tab_LegacyQuantitativeQuickFilterViewModel);
        this.domainButton.attr('label', quantitativeQuickFilterViewModel.get_domainButtonTooltipText());
      }
    },
    $updateDomainButtonIcon: function LegacyQuantitativeQuickFilter$UpdateDomainButtonIcon() {
      var classes = this.domainButton.iconNode.classList;
      classes.add('wcIconDomainAll');
    },
    toggleReset: function LegacyQuantitativeQuickFilter$ToggleReset() {
      var currTable = this.oFilter.table;
      var minHasValue = ss.isValue(currTable.min.v);
      var maxHasValue = ss.isValue(currTable.max.v);
      if (!minHasValue && maxHasValue || !maxHasValue && minHasValue) {
        var min = null;
        var max = null;
        if (!minHasValue) {
          max = this.getRangeMax();
        }
        else {
          min = this.getRangeMin();
        }
        tab.FilterClientCommands.setQuantitativeFilterRange(this.get_visualId(), this.get_field(), min, max, this.get_$includeValues());
      }
      else {
        tab.FilterClientCommands.setQuantitativeFilterRange(this.get_visualId(), this.get_field(), this.oRangeMin.v, this.oRangeMax.v, 'include-all');
      }
      $tab_QfButtonUtil.disableResetButton(this.resetButton, false);
    },
    toggleDomain: function LegacyQuantitativeQuickFilter$ToggleDomain() {
      var isContext = function(item) {
        return item === 'context';
      };
      var newDomainType;
      var currentDomainType = ss.cast(this.attributes['values'], String);
      switch (currentDomainType) {
        case 'relevant': {
          newDomainType = 'all';
          break;
        }
        case 'context': {
          newDomainType = 'relevant';
          break;
        }
        case 'all':
        default: {
          newDomainType = (_.any(this.oFilter.domains, isContext) ? 'context' : 'relevant');
          break;
        }
      }
      this.doRequestSetAttributes(ss.mkdict(['values', newDomainType.toString()]), false);
    },
    doRequestSetAttributes: function LegacyQuantitativeQuickFilter$DoRequestSetAttributes(attrs, suppressEvent) {
      var $t1 = ss.getEnumerator(Object.keys(attrs));
      try {
        while ($t1.moveNext()) {
          var att = $t1.current();
          this.attributes[att] = attrs[att];
        }
      }
      finally {
        $t1.dispose();
      }
      if (!tab.ApplicationModel.get_instance().get_autoUpdate()) {
        this.initFromState();
      }
      this.requestSetAttributes(attrs, suppressEvent);
    },
    notifyChange: function LegacyQuantitativeQuickFilter$NotifyChange() {
      this.$applyTimer = tab.MiscUtil.clearTimeout(this.$applyTimer);
      this.$applyTimer = window.setTimeout(ss.mkdel(this, this.applyChanges), this.$applyDelay);
    },
    initFromState: function LegacyQuantitativeQuickFilter$InitFromState() {
      this.$processControlButtons();
      this.layout(null);
    },
    localize: function LegacyQuantitativeQuickFilter$Localize() {
    },
    contentBox: function LegacyQuantitativeQuickFilter$ContentBox(node) {
      var oldDisplay = $(node).css('display');
      if (oldDisplay === 'none') {
        node.style.display = '';
      }
      var ret = dojo.contentBox(node);
      node.style.display = oldDisplay;
      return ret;
    }
  }, {
    $checkEnter: function LegacyQuantitativeQuickFilter$CheckEnter(e, oInput) {
      if (e.keyCode === 13) {
        spiff.EventUtil.stopEvent(e);
        oInput.blur();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyQuantitativeQuickFilterViewModel
  var $tab_LegacyQuantitativeQuickFilterViewModel = global.tab.LegacyQuantitativeQuickFilterViewModel = ss.mkType($asm, 'tab.LegacyQuantitativeQuickFilterViewModel', function(filterModel) {
    this.$model = null;
    spiff.BaseViewModel.call(this);
    this.$model = filterModel;
  }, {
    get_filterType: function LegacyQuantitativeQuickFilterViewModel$get_FilterType() {
      return this.$model.get_filterType();
    },
    get_legacyQuantitativeQuickFilterModel: function LegacyQuantitativeQuickFilterViewModel$get_LegacyQuantitativeQuickFilterModel() {
      return this.$model;
    },
    get_range: function LegacyQuantitativeQuickFilterViewModel$get_Range() {
      return this.$model.get_range();
    },
    get_data: function LegacyQuantitativeQuickFilterViewModel$get_Data() {
      return this.$model.get_data();
    },
    get_dateFormat: function LegacyQuantitativeQuickFilterViewModel$get_DateFormat() {
      return this.$model.get_dateFormat();
    },
    get_editingFormat: function LegacyQuantitativeQuickFilterViewModel$get_EditingFormat() {
      return this.$model.get_editingFormat();
    },
    get_format: function LegacyQuantitativeQuickFilterViewModel$get_Format() {
      return this.$model.get_format();
    },
    get_calendarControlStartOfWeek: function LegacyQuantitativeQuickFilterViewModel$get_CalendarControlStartOfWeek() {
      return this.$model.get_calendarControlStartOfWeek();
    },
    get_dataSourceStartOfWeek: function LegacyQuantitativeQuickFilterViewModel$get_DataSourceStartOfWeek() {
      return this.$model.get_dataSourceStartOfWeek();
    },
    get_quantitativeFilterTable: function LegacyQuantitativeQuickFilterViewModel$get_QuantitativeFilterTable() {
      return this.$model.get_quantitativeFilterTable();
    },
    get_column: function LegacyQuantitativeQuickFilterViewModel$get_Column() {
      return this.get_quantitativeFilterTable().column;
    },
    get_included: function LegacyQuantitativeQuickFilterViewModel$get_Included() {
      return this.get_quantitativeFilterTable().included;
    },
    get_min: function LegacyQuantitativeQuickFilterViewModel$get_Min() {
      return this.get_quantitativeFilterTable().min;
    },
    get_max: function LegacyQuantitativeQuickFilterViewModel$get_Max() {
      return this.get_quantitativeFilterTable().max;
    },
    get_domainType: function LegacyQuantitativeQuickFilterViewModel$get_DomainType() {
      return this.$model.get_domainType();
    },
    get_domainButtonTooltipText: function LegacyQuantitativeQuickFilterViewModel$get_DomainButtonTooltipText() {
      var domainType = this.get_domainType();
      var domainButtonTooltipText;
      if (domainType === tableau.types.QFDomain.QFD_RELEVANT) {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainRelevant;
      }
      else if (domainType === tableau.types.QFDomain.QFD_CONTEXT) {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainContext;
      }
      else if (domainType === tableau.types.QFDomain.QFD_CASCADING) {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainCascading;
      }
      else if (domainType === tableau.types.QFDomain.QFD_CASCADING_CONTEXT) {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainCascadingContext;
      }
      else {
        domainButtonTooltipText = tab.Strings.QuickFilterDomainDatabase;
      }
      return domainButtonTooltipText;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyQuickFilterDisplayView
  var $tab_LegacyQuickFilterDisplayView = global.tab.LegacyQuickFilterDisplayView = ss.mkType($asm, 'tab.LegacyQuickFilterDisplayView', function(viewModel) {
    this.$node = null;
    ss.makeGenericType(spiff.BaseView$1, [$tab_LegacyQuickFilterDisplayViewModel]).call(this, viewModel, new $tab_QuickFilterDisplayTemplate());
    this.get_$quickFilterDisplayViewModel().add_updateQuickFilterDisplay(ss.mkdel(this, this.$handleUpdateQuickFilterDisplay));
    this.get_$quickFilterDisplayViewModel().add_resized(ss.mkdel(this, this.$updateSize));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.get_$quickFilterDisplayViewModel().remove_updateQuickFilterDisplay(ss.mkdel(this, this.$handleUpdateQuickFilterDisplay));
    })));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.get_$quickFilterDisplayViewModel().remove_resized(ss.mkdel(this, this.$updateSize));
    })));
    this.get_$quickFilterDisplayViewModel().add_updateQuickFilterContent(ss.mkdel(this, this.$handleUpdateQuickFilterContent));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.get_$quickFilterDisplayViewModel().remove_updateQuickFilterContent(ss.mkdel(this, this.$handleUpdateQuickFilterContent));
    })));
    if (this.get_$quickFilterDisplayViewModel().get_hasBorder()) {
      this.get_template().domRoot.addClass('tabBordered');
    }
  }, {
    get_zoneModel: function LegacyQuickFilterDisplayView$get_ZoneModel() {
      return this.get_$quickFilterDisplayViewModel().get_zoneModel();
    },
    get_domRoot: function LegacyQuickFilterDisplayView$get_DomRoot() {
      return this.get_template().domRoot;
    },
    get_$quickFilterDisplayViewModel: function LegacyQuickFilterDisplayView$get_QuickFilterDisplayViewModel() {
      return this.get_viewModel();
    },
    dispose: function LegacyQuickFilterDisplayView$Dispose() {
      if (ss.isValue(this.$node)) {
        this.$node.destroyRecursiveShim(false);
        this.$node = null;
      }
      ss.makeGenericType(spiff.BaseView$1, [$tab_LegacyQuickFilterDisplayViewModel]).prototype.dispose.call(this);
    },
    onAddedToDom: function LegacyQuickFilterDisplayView$OnAddedToDom() {
      spiff.Widget.prototype.onAddedToDom.call(this);
      if (ss.isValue(this.get_$quickFilterDisplayViewModel().get_quickFilterDisplayModel())) {
        this.$handleUpdateQuickFilterDisplay();
      }
    },
    $handleUpdateQuickFilterDisplay: function LegacyQuickFilterDisplayView$HandleUpdateQuickFilterDisplay() {
      if (ss.isNullOrUndefined(this.$node) || this.get_$quickFilterDisplayViewModel().get_needToUpdateDisplay()) {
        if (ss.isNullOrUndefined(this.$node)) {
          this.$node = this.$createFilterPanel();
          this.get_template().domRoot.append(this.$node.getDomNode());
          this.$node.startupShim();
        }
        else {
          this.$updateFilterPanel();
        }
        this.$updateSize();
        this.$handleUpdateQuickFilterContent();
      }
    },
    $handleUpdateQuickFilterContent: function LegacyQuickFilterDisplayView$HandleUpdateQuickFilterContent() {
      if (ss.isValue(this.$node) && (this.get_$quickFilterDisplayViewModel().get_needToUpdateContent() || this.get_$quickFilterDisplayViewModel().get_needToUpdateDisplay())) {
        this.$node.updateAttributesShim(this.get_$quickFilterDisplayViewModel().get_quickFilterDisplayModel().get_attributes());
        this.$node.updateFilterStateShim(this.get_$quickFilterDisplayViewModel().get_filterPresModel());
      }
    },
    $updateSize: function LegacyQuickFilterDisplayView$UpdateSize() {
      tab.DomUtil.resize(this.$node, this.get_zoneModel().get_zoneContentBounds());
      this.$node.setTitleSizeShim(this.get_$quickFilterDisplayViewModel().get_zoneTitleHeight(), this.get_$quickFilterDisplayViewModel().get_zoneTitleWidth());
    },
    $createFilterPanel: function LegacyQuickFilterDisplayView$CreateFilterPanel() {
      var oProps = this.$initializeFilterPanelProps();
      var panel = this.makeFilterPanel(oProps);
      return panel;
    },
    $updateFilterPanel: function LegacyQuickFilterDisplayView$UpdateFilterPanel() {
      var oProps = this.$initializeFilterPanelProps();
      this.$node.updateFilterPropertiesShim(oProps);
      this.$node.updateSubWidgetShim(this.get_$quickFilterDisplayViewModel().get_filterPresModel());
    },
    $initializeFilterPanelProps: function LegacyQuickFilterDisplayView$InitializeFilterPanelProps() {
      var session = this.get_$quickFilterDisplayViewModel().get_layoutSession();
      var sheetName = this.get_$quickFilterDisplayViewModel().get_zoneModel().get_worksheetName();
      var $t1 = new Object();
      $t1.sessionid = session.get_id();
      $t1.urlRoot = session.get_urlRoot();
      $t1.layoutSession = session;
      $t1.sheetid = sheetName;
      var oProps = $t1;
      var quickFilterDisplayModel = this.get_$quickFilterDisplayViewModel().get_quickFilterDisplayModel();
      oProps.titleHTML = (this.get_zoneModel().get_zoneCommonModel().get_hasTitle() ? quickFilterDisplayModel.get_quickFilterTitle().html : '');
      oProps.session = this.get_$quickFilterDisplayViewModel().get_viewSession();
      var fieldName = quickFilterDisplayModel.get_fieldName();
      var membershipTarget = quickFilterDisplayModel.get_membershipTarget();
      oProps.field = fieldName;
      oProps.membershipTarget = membershipTarget;
      oProps.quickFilterDisplayViewModel = this.get_$quickFilterDisplayViewModel();
      if (ss.isValue(quickFilterDisplayModel.get_attributes())) {
        oProps.attributes = quickFilterDisplayModel.get_attributes();
      }
      if (ss.isValue(quickFilterDisplayModel.get_width())) {
        oProps.width = quickFilterDisplayModel.get_width();
      }
      var requestSetAttributes = ss.mkdel(this, function(att, suppressEvent) {
        this.$setZoneAttribute(new tab.QuickFilterIdentifier(fieldName, membershipTarget), this.get_$quickFilterDisplayViewModel().get_visualId(), att, suppressEvent);
      });
      oProps.requestSetAttributes = requestSetAttributes;
      oProps.textStyle = this.get_$quickFilterDisplayViewModel().get_quickFilterDisplayPresModel().textStyle;
      if (ss.isValue(this.get_zoneModel().pm.zoneCommon.styledBox)) {
        oProps.backgroundColor = this.get_zoneModel().get_zoneCommonModel().get_zoneStyle().get_fillColor();
      }
      oProps.blendedZoneContentColor = this.get_zoneModel().get_blendedZoneContentColor();
      return oProps;
    },
    makeFilterPanel: function LegacyQuickFilterDisplayView$MakeFilterPanel(oProps) {
      var maker = tab.ObjectRegistry.resolve(tab.ILegacyDojoWidgetMaker).call(null, []);
      return maker.makeFilterPanelWidget(oProps);
    },
    $setZoneAttribute: function LegacyQuickFilterDisplayView$SetZoneAttribute(identifier, visualId, attributes, suppressEvent) {
      if (ss.keyExists(attributes, 'mode')) {
        tab.Log.get(this).warn('Setting zone mode attribute.  This is deprecated', []);
        tab.FilterClientCommands.setCategoricalQuickFilterMode(visualId, identifier, ss.cast(attributes['mode'], String));
      }
      else if (ss.keyExists(attributes, 'values')) {
        tab.FilterClientCommands.setCategoricalQuickFilterDomain(visualId, identifier, ss.cast(attributes['values'], String));
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyQuickFilterDisplayViewModel
  var $tab_LegacyQuickFilterDisplayViewModel = global.tab.LegacyQuickFilterDisplayViewModel = ss.mkType($asm, 'tab.LegacyQuickFilterDisplayViewModel', function(quickFilterDisplayModel, filterModel) {
    this.$quickFilterDisplayModel = null;
    this.$filterModel = null;
    this.$needToUpdateContent = true;
    this.$needToUpdateDisplay = true;
    this.$filterViewModel = null;
    this.$2$UpdateQuickFilterDisplayField = null;
    this.$2$UpdateQuickFilterContentField = null;
    this.$2$ResizedField = null;
    spiff.BaseViewModel.call(this);
    this.$filterModel = filterModel;
    this.$filterModel.add_filterUpdated(ss.mkdel(this, this.$handleUpdateQuickFilterContent));
    this.$quickFilterDisplayModel = quickFilterDisplayModel;
    this.$quickFilterDisplayModel.add_quickFilterDisplayUpdated(ss.mkdel(this, this.handleUpdateQuickFilterDisplay));
    this.$quickFilterDisplayModel.get_zoneModel().get_zoneCommonModel().add_resizeZone(ss.mkdel(this, this.$handleParentZoneResized));
    this.$handleNewFilterModel();
  }, {
    add_updateQuickFilterDisplay: function LegacyQuickFilterDisplayViewModel$add_UpdateQuickFilterDisplay(value) {
      this.$2$UpdateQuickFilterDisplayField = ss.delegateCombine(this.$2$UpdateQuickFilterDisplayField, value);
    },
    remove_updateQuickFilterDisplay: function LegacyQuickFilterDisplayViewModel$remove_UpdateQuickFilterDisplay(value) {
      this.$2$UpdateQuickFilterDisplayField = ss.delegateRemove(this.$2$UpdateQuickFilterDisplayField, value);
    },
    add_updateQuickFilterContent: function LegacyQuickFilterDisplayViewModel$add_UpdateQuickFilterContent(value) {
      this.$2$UpdateQuickFilterContentField = ss.delegateCombine(this.$2$UpdateQuickFilterContentField, value);
    },
    remove_updateQuickFilterContent: function LegacyQuickFilterDisplayViewModel$remove_UpdateQuickFilterContent(value) {
      this.$2$UpdateQuickFilterContentField = ss.delegateRemove(this.$2$UpdateQuickFilterContentField, value);
    },
    add_resized: function LegacyQuickFilterDisplayViewModel$add_Resized(value) {
      this.$2$ResizedField = ss.delegateCombine(this.$2$ResizedField, value);
    },
    remove_resized: function LegacyQuickFilterDisplayViewModel$remove_Resized(value) {
      this.$2$ResizedField = ss.delegateRemove(this.$2$ResizedField, value);
    },
    get_quickFilterDisplayModel: function LegacyQuickFilterDisplayViewModel$get_QuickFilterDisplayModel() {
      return this.$quickFilterDisplayModel;
    },
    get_zoneModel: function LegacyQuickFilterDisplayViewModel$get_ZoneModel() {
      return this.$quickFilterDisplayModel.get_zoneModel();
    },
    get_quickFilterDisplayPresModel: function LegacyQuickFilterDisplayViewModel$get_QuickFilterDisplayPresModel() {
      return this.$quickFilterDisplayModel.get_quickFilterDisplayPresModel();
    },
    get_viewSession: function LegacyQuickFilterDisplayViewModel$get_ViewSession() {
      return tab.ModelUtils.getViewSession(this.get_zoneModel().get_worksheetName());
    },
    get_layoutSession: function LegacyQuickFilterDisplayViewModel$get_LayoutSession() {
      return tab.CommandController.get().legacySession;
    },
    get_zoneTitleHeight: function LegacyQuickFilterDisplayViewModel$get_ZoneTitleHeight() {
      if (!this.get_zoneModel().get_zoneCommonModel().get_hasTitle() || this.get_zoneModel().get_titleHeight() === 0) {
        return 0;
      }
      var titleHeight = this.get_quickFilterDisplayPresModel().quickFilterTitle.h;
      if (titleHeight > 0) {
        if (this.get_hasBorder()) {
          titleHeight += 3;
        }
        titleHeight = Math.max(titleHeight, 17);
      }
      return titleHeight;
    },
    get_zoneTitleWidth: function LegacyQuickFilterDisplayViewModel$get_ZoneTitleWidth() {
      if (!this.get_zoneModel().get_zoneCommonModel().get_hasTitle() || this.get_zoneModel().get_titleWidth() === 0) {
        return 0;
      }
      return this.get_quickFilterDisplayPresModel().quickFilterTitle.w;
    },
    get_hasBorder: function LegacyQuickFilterDisplayViewModel$get_HasBorder() {
      return this.$quickFilterDisplayModel.get_zoneModel().get_hasBorder();
    },
    get_filterPresModel: function LegacyQuickFilterDisplayViewModel$get_FilterPresModel() {
      if (ss.isValue(this.$quickFilterDisplayModel.get_fakeFilterPresModel())) {
        return this.$quickFilterDisplayModel.get_fakeFilterPresModel();
      }
      else {
        return this.$filterModel.get_filterPresModel();
      }
    },
    get_filterTypeViewModel: function LegacyQuickFilterDisplayViewModel$get_FilterTypeViewModel() {
      return this.$filterViewModel;
    },
    get_needToUpdateContent: function LegacyQuickFilterDisplayViewModel$get_NeedToUpdateContent() {
      return this.$needToUpdateContent;
    },
    set_needToUpdateContent: function LegacyQuickFilterDisplayViewModel$set_NeedToUpdateContent(value) {
      this.$needToUpdateContent = value;
    },
    get_needToUpdateDisplay: function LegacyQuickFilterDisplayViewModel$get_NeedToUpdateDisplay() {
      return this.$needToUpdateDisplay;
    },
    set_needToUpdateDisplay: function LegacyQuickFilterDisplayViewModel$set_NeedToUpdateDisplay(value) {
      this.$needToUpdateDisplay = value;
    },
    get_visualId: function LegacyQuickFilterDisplayViewModel$get_VisualId() {
      return tab.ModelUtils.getVisualId(this.get_zoneModel().get_worksheetName());
    },
    handleUpdateQuickFilterDisplay: function LegacyQuickFilterDisplayViewModel$HandleUpdateQuickFilterDisplay(presModel) {
      this.set_needToUpdateDisplay(true);
      _.defer(ss.mkdel(this, function() {
        this.raiseActionEvent(this.$2$UpdateQuickFilterDisplayField);
        this.set_needToUpdateDisplay(false);
      }));
    },
    $handleParentZoneResized: function LegacyQuickFilterDisplayViewModel$HandleParentZoneResized() {
      this.raiseActionEvent(this.$2$ResizedField);
    },
    $handleUpdateQuickFilterContent: function LegacyQuickFilterDisplayViewModel$HandleUpdateQuickFilterContent() {
      this.set_needToUpdateContent(true);
      _.defer(ss.mkdel(this, function() {
        this.raiseActionEvent(this.$2$UpdateQuickFilterContentField);
        this.set_needToUpdateContent(false);
      }));
    },
    $handleNewFilterModel: function LegacyQuickFilterDisplayViewModel$HandleNewFilterModel() {
      this.$disposeFilterViewModel();
      switch (this.$filterModel.get_filterType()) {
        case 'Categorical': {
          this.$filterViewModel = new $tab_LegacyCategoricalQuickFilterViewModel(ss.cast(this.$filterModel, tab.LegacyCategoricalQuickFilterModel));
          break;
        }
        case 'Hierarchical': {
          this.$filterViewModel = new $tab_LegacyHierarchicalQuickFilterViewModel(ss.cast(this.$filterModel, tab.LegacyHierarchicalQuickFilterModel));
          break;
        }
        case 'Quantitative': {
          this.$filterViewModel = new $tab_LegacyQuantitativeQuickFilterViewModel(ss.cast(this.$filterModel, tab.LegacyQuantitativeQuickFilterModel));
          break;
        }
        case 'RelativeDate':
        case 'RelativeDatePick': {
          this.$filterViewModel = new $tab_RelativeDateFilterViewModel(ss.cast(this.$filterModel, tab.LegacyRelativeDateQuickFilterModel));
          break;
        }
      }
    },
    $disposeFilterViewModel: function LegacyQuickFilterDisplayViewModel$DisposeFilterViewModel() {
      if (ss.isValue(this.$filterViewModel)) {
        this.$filterViewModel.dispose();
        this.$filterViewModel = null;
      }
    },
    dispose: function LegacyQuickFilterDisplayViewModel$Dispose() {
      this.$quickFilterDisplayModel.remove_quickFilterDisplayUpdated(ss.mkdel(this, this.handleUpdateQuickFilterDisplay));
      this.$quickFilterDisplayModel.get_zoneModel().get_zoneCommonModel().remove_resizeZone(ss.mkdel(this, this.$handleParentZoneResized));
      this.$quickFilterDisplayModel = null;
      this.$filterModel.remove_filterUpdated(ss.mkdel(this, this.$handleUpdateQuickFilterContent));
      this.$filterModel = null;
      this.$disposeFilterViewModel();
      spiff.BaseViewModel.prototype.dispose.call(this);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyQuickFilterWidget
  var $tab_LegacyQuickFilterWidget = global.tab.LegacyQuickFilterWidget = ss.mkType($asm, 'tab.LegacyQuickFilterWidget', function() {
    this.titleHTML = null;
    this.backgroundColor = null;
    this.blendedZoneContentColor = null;
    this.textStyle = null;
    this.domTitleBar = null;
    this.oFilter = null;
    this.titleH = 0;
    this.titleW = 0;
    Object.call(this);
  }, {
    updateFilterProperties: function LegacyQuickFilterWidget$UpdateFilterProperties(props) {
      this.titleHTML = props.titleHTML;
      this.backgroundColor = props.backgroundColor;
      this.blendedZoneContentColor = props.blendedZoneContentColor;
      this.textStyle = props.textStyle;
    },
    hideEmptyTitlebar: function LegacyQuickFilterWidget$HideEmptyTitlebar() {
      return ss.isNullOrEmptyString(this.titleHTML);
    },
    unformattedDisplayName: function LegacyQuickFilterWidget$UnformattedDisplayName() {
      if (!this.hideEmptyTitlebar()) {
        return $tab_FilterFormat.formatColumnDisplayName(this.oFilter, false, false);
      }
      return '';
    },
    updateTitleBar: function LegacyQuickFilterWidget$UpdateTitleBar() {
      this.domTitleBar.innerHTML = this.titleHTML;
      tab.FormattingConverters.cleanUpFontFamilyStyles($(this.domTitleBar));
    },
    setTitleSize: function LegacyQuickFilterWidget$SetTitleSize(newH, newW) {
      this.titleH = newH;
      this.titleW = newW;
    },
    layoutTitleBar: function LegacyQuickFilterWidget$LayoutTitleBar() {
      var oTitleBar = dojo.marginBox(this.domTitleBar);
      this.$resetTitleSize();
      var noTitle = this.titleH === 0 && this.titleW === 0;
      if (this.titleH > 0 || noTitle) {
        oTitleBar.h = this.titleH;
        this.domTitleBar.style.height = oTitleBar.h + 'px';
      }
      if (this.titleW > 0 || noTitle) {
        oTitleBar.w = this.titleW;
        this.domTitleBar.style.width = oTitleBar.w + 'px';
      }
      tableau.util.setupTitleEllipsis($(this.domTitleBar));
      return oTitleBar;
    },
    $resetTitleSize: function LegacyQuickFilterWidget$ResetTitleSize() {
      if (ss.isValue(this.domTitleBar)) {
        $(this.domTitleBar).css({ height: 'auto', width: 'auto' });
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegacyRelativeDateQuickFilter
  var $tab_LegacyRelativeDateQuickFilter = global.tab.LegacyRelativeDateQuickFilter = ss.mkType($asm, 'tab.LegacyRelativeDateQuickFilter', function(props) {
    this.templateString = "<div class='RelativeDateFilter'>" + "<div class='RelativeDateFilterBox' dojoAttachPoint='domBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<h3 class='FilterTitle' dojoAttachPoint='domTitleBar'></h3>" + "<div dojoType='dijit.form.Button' class='RDFButton RDFMenuButton' name='type' dojoAttachPoint='menuButton'" + "dojoAttachEvent='onClick:doMenu' iconClass='wcIconContextMenu'></div></div>" + "<div dojoType='dijit.form.DropDownButton' dojoAttachPoint='domDropdownButton'>" + "<span class='RDText'>date description</span>" + "<div dojoType='dijit.TooltipDialog' dojoAttachPoint='domTooltipDialog'>" + "<div class='RelativeDateFilterDialog' dojoAttachPoint='domDialog'>" + "<div class='RangeButtonsBar'>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPYear'" + "dojoAttachPoint='buttonYear' name='year'>Years</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPQuarter'" + "dojoAttachPoint='buttonQuarter' name='quarter'>Quarters</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPMonth'" + "dojoAttachPoint='buttonMonth' name='month'>Months</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPWeek'" + "dojoAttachPoint='buttonWeek' name='week'>Weeks</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPDay'" + "dojoAttachPoint='buttonDay' name='day'>Days</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPHour'" + "dojoAttachPoint='buttonHour' name='hour'>Hours</div>" + "<div dojotype='dijit.form.ToggleButton' dojoAttachEvent='onClick:setPMinute'" + "dojoAttachPoint='buttonMinute' name='minute'>Minutes</div>" + '</div>' + "<div class='vertSpacer topHR'></div>" + "<div class='radioLine'>" + "<label class='column1'>" + "<input class='rradio' aria-describedby='rdf-preview' type='radio' name='radio-${field}' value='last'" + "dojoAttachPoint='radioLast' dojoAttachEvent='onclick:setRLast'></input>" + "<div class='fakeRadio'></div>" + "<span class='rlabel' dojoAttachPoint='textLast' dojoAttachEvent='onclick:setRLast'></span>" + '</label>' + "<label class='column2' id='rdf-Lastn-label'>" + "<input class='rradio' aria-describedby='rdf-preview' type='radio' name='radio-${field}' value='lastn'" + "dojoAttachPoint='radioLastn' dojoAttachEvent='onclick:setRLastn'></input>" + "<div class='fakeRadio'></div>" + "<span class='rlabel alignLN' dojoAttachPoint='textLastn1' dojoAttachEvent='onclick:setRLastn'></span>" + "<input class='rtext' type='text' size='2' aria-describedby='rdf-Lastn-label' dojoAttachPoint='inputLastn' value='3'" + "dojoAttachEvent='onkeyup:onTypingLast'></input>" + "<span class='spinner' dojoAttachPoint='lastSpinner'>" + "<div class='spinnerElement spinnerUp' dojoAttachPoint='lastUp'" + "dojoAttachEvent='onmouseover:overLastUp,onmouseout:outLastUp,onclick:upLast'></div>" + "<div class='spinnerElement spinnerDown' dojoAttachPoint='lastDown'" + "dojoAttachEvent='onmouseover:overLastDown,onmouseout:outLastDown,onclick:downLast'></div>" + '</span>' + "<span class='rlabel' dojoAttachPoint='textLastn2' dojoAttachEvent='onclick:setRLastn'></span>" + '</label>' + '</div>' + "<div class='radioLine'>" + "<label class='column1'>" + "<input class='rradio' aria-describedby='rdf-preview' type='radio' name='radio-${field}' value='curr'" + "dojoAttachPoint='radioCurr' dojoAttachEvent='onclick:setRCurr'></input>" + "<div class='fakeRadio'></div>" + "<span class='rlabel' dojoAttachPoint='textCurr' dojoAttachEvent='onclick:setRCurr'></span>" + '</label>' + "<label class='column2' id='rdf-Nextn-label'>" + "<input class='rradio' aria-describedby='rdf-preview' type='radio' name='radio-${field}' value='nextn'" + "dojoAttachPoint='radioNextn' dojoAttachEvent='onclick:setRNextn'></input>" + "<div class='fakeRadio'></div>" + "<span class='rlabel alignLN' dojoAttachPoint='textNextn1' dojoAttachEvent='onclick:setRNextn'></span>" + "<input class='rtext' type='text' size='2' aria-describedby='rdf-Nextn-label' dojoAttachPoint='inputNextn' value='3'" + "dojoAttachEvent='onkeyup:onTypingNext'></input>" + "<span class='spinner' dojoAttachPoint='nextSpinner'>" + "<div class='spinnerElement spinnerUp' dojoAttachPoint='nextUp'" + "dojoAttachEvent='onmouseover:overNextUp,onmouseout:outNextUp,onclick:upNext'></div>" + "<div class='spinnerElement spinnerDown' dojoAttachPoint='nextDown'" + "dojoAttachEvent='onmouseover:overNextDown,onmouseout:outNextDown,onclick:downNext'></div>" + '</span>' + "<span class='rlabel' dojoAttachPoint='textNextn2' dojoAttachEvent='onclick:setRNextn'></span>" + '</label>' + '</div>' + "<div class='radioline'>" + "<label class='column1'>" + "<input class='rradio' aria-describedby='rdf-preview' type='radio' name='radio-${field}' value='next'" + "dojoAttachPoint='radioNext' dojoAttachEvent='onclick:setRNext'></input>" + "<div class='fakeRadio'></div>" + "<span class='rlabel' dojoAttachPoint='textNext' dojoAttachEvent='onclick:setRNext'></span>" + '</label>' + "<label class='column2'>" + "<input class='rradio' aria-describedby='rdf-preview' type='radio' name='radio-${field}' value='todate'" + "dojoAttachPoint='radioTodate' dojoAttachEvent='onclick:setRTodate'></input>" + "<div class='fakeRadio'></div>" + "<span class='rlabel' dojoAttachPoint='textTodate' dojoAttachEvent='onclick:setRTodate'></span>" + '</label>' + '</div>' + "<div class='vertSpacer bottomHR'></div>" + "<div class='preview' id='rdf-preview'>" + "<span dojoAttachPoint='domPreview'></span>" + '</div>' + '</div>' + '</div>' + '</div>' + '</div>' + '</div>';
    this.widgetsInTemplate = true;
    this.session = null;
    this.field = '';
    this.filterViewModel = null;
    this.stateId = 0;
    this.rid = 0;
    this.timestamp = 0;
    this.$periodInputs = [];
    this.layoutSession = null;
    this.getContextMenuCommands = null;
    this.showContextMenu = null;
    this.domText = null;
    this.domDropdownButton = null;
    this.domDialog = null;
    this.$rangeButtons = [];
    this.buttonYear = null;
    this.buttonQuarter = null;
    this.buttonMonth = null;
    this.buttonWeek = null;
    this.buttonDay = null;
    this.buttonHour = null;
    this.buttonMinute = null;
    this.radioLast = null;
    this.radioCurr = null;
    this.radioNext = null;
    this.radioLastn = null;
    this.radioNextn = null;
    this.lastSpinner = null;
    this.nextSpinner = null;
    this.lastUp = null;
    this.lastDown = null;
    this.nextUp = null;
    this.nextDown = null;
    this.domNode = null;
    this.domTooltipDialog = null;
    this.menuButton = null;
    this.$classButtonR1 = 'RDFButtonR1';
    this.$classButtonHide = 'RDFButtonHide';
    this.$disposables = new tab.DisposableHolder();
    this.getSID = null;
    this.attributes = null;
    this.requestSetAttributes = null;
    $tab_DateFilterWidget.call(this);
  }, {
    get_filterViewModel: function LegacyRelativeDateQuickFilter$get_FilterViewModel() {
      return ss.cast(this.filterViewModel, $tab_RelativeDateFilterViewModel);
    },
    postCreate: function LegacyRelativeDateQuickFilter$PostCreate() {
      if (this.filterViewModel.get_filterType() !== 'RelativeDate') {
        tab.Log.get(this).warn('Incompatible filter view model type for LegacyRelativeDateQuickFilter: %s', [this.filterViewModel.get_filterType()]);
      }
      this.$localize();
      this.getSID = ss.mkdel(this, function() {
        return this.stateId;
      });
      if (ss.isValue(this.oFilter.fy)) {
        this.fy = this.oFilter.fy - 1;
      }
      if (ss.isValue(this.oFilter.start_of_week)) {
        this.startOfWeek = this.oFilter.start_of_week;
      }
      this.timestamp = (new Date()).getTime();
      this.$rangeButtons = [this.buttonYear, this.buttonQuarter, this.buttonMonth, this.buttonWeek, this.buttonDay];
      if (this.oFilter.noTime) {
        this.buttonHour.domNode.style.display = 'none';
        this.buttonMinute.domNode.style.display = 'none';
      }
      else {
        this.$rangeButtons.push(this.buttonHour);
        this.$rangeButtons.push(this.buttonMinute);
      }
      this.connect(this.domTooltipDialog, 'onOpen', ss.mkdel(this, this.$openDialog));
      this.initFromState();
      $(this.menuButton.domNode).css('background-color', this.backgroundColor);
    },
    $handleDialogFocusCapture: function LegacyRelativeDateQuickFilter$HandleDialogFocusCapture(e) {
      $(this.domDialog).toggleClass('focus-visible', !spiff.FocusManager.wasFocusedByPointer());
    },
    $handleDialogKeyDownCapture: function LegacyRelativeDateQuickFilter$HandleDialogKeyDownCapture(event) {
      var e = event;
      if (e.which === 27) {
        this.domDropdownButton._closeDropDown(true);
        e.stopPropagation();
        e.preventDefault();
      }
      else if (e.which === 9) {
        var tabbables = $(e.currentTarget).find(":tabbable:not(input[type='radio']:not(:checked))");
        if (ss.referenceEquals(e.target, tabbables.last()[0]) && !e.shiftKey) {
          tabbables.first().focus();
          e.stopPropagation();
          e.preventDefault();
        }
        else if (ss.referenceEquals(e.target, tabbables.first()[0]) && e.shiftKey) {
          tabbables.last().focus();
          e.stopPropagation();
          e.preventDefault();
        }
      }
    },
    shouldHideContextMenu: function LegacyRelativeDateQuickFilter$ShouldHideContextMenu() {
      if (tsConfig.current_sheet_type === 'dashboard' && tsConfig.is_authoring) {
        return true;
      }
      var commandsWrapper = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
      return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commandsWrapper) || commandsWrapper.get_commandItems().length === 0;
    },
    shouldHideDomainButton: function LegacyRelativeDateQuickFilter$ShouldHideDomainButton() {
      return true;
    },
    dispose: function LegacyRelativeDateQuickFilter$Dispose() {
      this.$disposables.dispose();
      this.showContextMenu = null;
    },
    destroy: function LegacyRelativeDateQuickFilter$Destroy(preserveDom) {
      this.dispose();
      if (ss.isValue(this.domText)) {
        this.domText.innerHTML = '';
      }
      this.inherited(arguments);
    },
    layout: function LegacyRelativeDateQuickFilter$Layout(pixelHeight) {
      this.updateTitleBar();
      this.domNode.classList.remove('RDFHorizontal');
      var oDiagSize = dojo.marginBox(this.domDialog);
      if (!ss.isValue(oDiagSize) || !ss.isValue(oDiagSize.w) || oDiagSize.w === 0) {
        return;
      }
      var oTitleBar = this.layoutTitleBar();
      var oZoneSize = dojo.contentBox(this.domNode);
      var width = oZoneSize.w - 2 * 3;
      var domObj = $(this.domDropdownButton.domNode);
      domObj.find('.dijitButtonNode').addClass('tab-ctrl-formatted-widget tab-ctrl-formatted-darker-border-hover');
      domObj.find('.dijitButtonText').addClass('tab-ctrl-formatted-fixedsize');
      domObj.find('.dijitArrowButtonInner')[0].innerHTML = $tab_LegacyFilterDropDownArrowTemplate.getDropDownForColor(this.textStyle.color.toString());
      if (!this.hideEmptyTitlebar() && this.titleW > 0) {
        this.domNode.classList.add('RDFHorizontal');
        this.domTitleBar.style.cssFloat = 'left';
        this.domDropdownButton.domNode.style.cssFloat = 'left';
        var domResultsPBExtents = dojo._getPadBorderExtents(this.domDropdownButton.domNode);
        width = oZoneSize.w - oTitleBar.w - domResultsPBExtents.w;
      }
      else {
        this.domTitleBar.style.cssFloat = 'none';
        this.domDropdownButton.domNode.style.cssFloat = 'none';
      }
      if (width > 29) {
        this.domDropdownButton.domNode.style.width = width + 'px';
        this.domDropdownButton.domNode.firstChild.style.width = width - 2 + 'px';
        width = width - 25;
        var text = ss.cast(this.domDropdownButton.domNode.firstChild.firstChild.firstChild.childNodes[1], HTMLElement);
        if (ss.isValue(text)) {
          text.style.width = width + 'px';
        }
      }
      var labelSize = Math.floor((oDiagSize.w - 10) / this.$rangeButtons.length);
      for (var $t1 = 0; $t1 < this.$rangeButtons.length; $t1++) {
        var n = this.$rangeButtons[$t1];
        n.titleNode.style.width = labelSize - 5 + 'px';
      }
    },
    initFromState: function LegacyRelativeDateQuickFilter$InitFromState() {
      var processButton = ss.mkdel(this, function(button, hide) {
        if (hide) {
          button.domNode.classList.remove(this.$classButtonR1);
          button.domNode.classList.add(this.$classButtonHide);
        }
        else {
          button.domNode.classList.remove(this.$classButtonHide);
          button.domNode.classList.add(this.$classButtonR1);
        }
      });
      processButton(this.menuButton, this.shouldHideContextMenu());
      this.domDropdownButton.attr('label', this.oFilter.text);
      this.domTitleBar.id = tab.DomUtil.generateUniqueId();
      var buttonElem = this.domDropdownButton.domNode.querySelector('button');
      buttonElem.setAttribute('aria-haspopup', 'dialog');
      buttonElem.setAttribute('aria-labelledby', this.domTitleBar.id + ' ' + buttonElem.id + '_label');
      var dialogElem = this.domTooltipDialog.domNode;
      dialogElem.setAttribute('aria-labelledby', this.domTitleBar.id);
      dialogElem.setAttribute('aria-modal', 'true');
      dialogElem.addEventListener('focus', ss.mkdel(this, this.$handleDialogFocusCapture), true);
      dialogElem.addEventListener('keydown', ss.mkdel(this, this.$handleDialogKeyDownCapture), true);
      this.updateCurrentStateOfData();
      this.setRangeType(this.rangeType, this.rangeN);
      this.setTitle();
      this.updateTitleBar();
    },
    updateCurrentStateOfData: function LegacyRelativeDateQuickFilter$UpdateCurrentStateOfData() {
      var f = this.oFilter.table;
      this.periodType = f.periodType;
      this.rangeType = f.rangeType;
      this.rangeN = f.rangeN;
      if (!(typeof(f.anchor) === 'undefined')) {
        var a = f.anchor;
        this.anchorDateTime = new Date(a.year, a.month - 1, a.day, a.hour, a.minute, a.second);
      }
    },
    setTitle: function LegacyRelativeDateQuickFilter$SetTitle() {
      var title = $tab_FilterFormat.formatColumnDisplayName(this.oFilter, false, true);
      this.domTitleBar.setAttribute('title', title);
    },
    applyChanges: function LegacyRelativeDateQuickFilter$ApplyChanges() {
      var data = {};
      data.periodType = this.periodType;
      data.rangeType = this.rangeType;
      data.rangeN = this.rangeN;
      this.stateId += 1;
      var node = tableau.util.findDirectParentByClassName(this.domDialog, 'dijitPopup', document.body);
      if (!ss.isNullOrUndefined(node)) {
        node.style.zIndex = '980';
      }
      tab.FilterClientCommands.doRelativeDateQuickFilter(this.session.get_visualId(), this.field, this.periodType, this.rangeType, this.rangeN);
    },
    doMenu: function LegacyRelativeDateQuickFilter$DoMenu() {
      this.showContextMenu(this.menuButton);
    },
    $openDialog: function LegacyRelativeDateQuickFilter$OpenDialog() {
      this.setPeriodUI(this.periodType);
      this.setRangeUI(this.rangeType, this.rangeN);
      this.setPreviewUI();
      this.updateVisibilityOfDayToAnchor();
    },
    setRangeUI: function LegacyRelativeDateQuickFilter$SetRangeUI(range, n) {
      this.inputLastn.disabled = true;
      this.inputNextn.disabled = true;
      this.lastSpinner.style.display = 'none';
      this.radioLastn.classList.remove('spinnerBugFix');
      this.nextSpinner.style.display = 'none';
      this.radioNextn.classList.remove('spinnerBugFix');
      switch (range) {
        case 'last': {
          this.radioLast['checked'] = true;
          break;
        }
        case 'curr': {
          this.radioCurr['checked'] = true;
          break;
        }
        case 'next': {
          this.radioNext['checked'] = true;
          break;
        }
        case 'lastn': {
          this.radioLastn['checked'] = true;
          this.rangeN = n;
          this.inputLastn.value = this.rangeN.toString();
          this.inputLastn.disabled = false;
          this.lastSpinner.style.display = '';
          this.radioLastn.classList.add('spinnerBugFix');
          break;
        }
        case 'nextn': {
          this.radioNextn['checked'] = true;
          this.rangeN = n;
          this.inputNextn.value = this.rangeN.toString();
          this.inputNextn.disabled = false;
          this.nextSpinner.style.display = '';
          this.radioNextn.classList.add('spinnerBugFix');
          break;
        }
        case 'todate': {
          this.radioTodate['checked'] = true;
          break;
        }
      }
    },
    updateRangeButtons: function LegacyRelativeDateQuickFilter$UpdateRangeButtons(newPeriodType) {
      var len = this.$rangeButtons.length;
      for (var i = 0; i < len; i++) {
        this.$rangeButtons[i].attr('checked', ss.referenceEquals(this.$rangeButtons[i].name, newPeriodType.toString()));
      }
    },
    overLastUp: function LegacyRelativeDateQuickFilter$OverLastUp() {
      this.lastUp.classList.add('hover');
    },
    outLastUp: function LegacyRelativeDateQuickFilter$OutLastUp() {
      this.lastUp.classList.remove('hover');
    },
    overLastDown: function LegacyRelativeDateQuickFilter$OverLastDown() {
      this.lastDown.classList.add('hover');
    },
    outLastDown: function LegacyRelativeDateQuickFilter$OutLastDown() {
      this.lastDown.classList.remove('hover');
    },
    overNextUp: function LegacyRelativeDateQuickFilter$OverNextUp() {
      this.nextUp.classList.add('hover');
    },
    outNextUp: function LegacyRelativeDateQuickFilter$OutNextUp() {
      this.nextUp.classList.remove('hover');
    },
    overNextDown: function LegacyRelativeDateQuickFilter$OverNextDown() {
      this.nextDown.classList.add('hover');
    },
    outNextDown: function LegacyRelativeDateQuickFilter$OutNextDown() {
      this.nextDown.classList.remove('hover');
    },
    $spin: function LegacyRelativeDateQuickFilter$Spin(elem, up) {
      var newValue = parseInt(elem.value, 10) + (up ? 1 : -1);
      if (newValue < 1) {
        return;
      }
      elem.value = newValue.toString();
      this.onTyping(elem);
    },
    upLast: function LegacyRelativeDateQuickFilter$UpLast() {
      this.$spin(this.inputLastn, true);
    },
    downLast: function LegacyRelativeDateQuickFilter$DownLast() {
      this.$spin(this.inputLastn, false);
    },
    upNext: function LegacyRelativeDateQuickFilter$UpNext() {
      this.$spin(this.inputNextn, true);
    },
    downNext: function LegacyRelativeDateQuickFilter$DownNext() {
      this.$spin(this.inputNextn, false);
    },
    $localize: function LegacyRelativeDateQuickFilter$Localize() {
      $tab_DojoUtils.localizeDojoLabeledControls([{ item1: this.buttonYear, item2: 'RelDateFilterYears' }, { item1: this.buttonQuarter, item2: 'RelDateFilterQuarters' }, { item1: this.buttonMonth, item2: 'RelDateFilterMonths' }, { item1: this.buttonWeek, item2: 'RelDateFilterWeeks' }, { item1: this.buttonDay, item2: 'RelDateFilterDays' }, { item1: this.buttonHour, item2: 'RelDateFilterHours' }, { item1: this.buttonMinute, item2: 'RelDateFilterMinutes' }]);
    }
  }, {
    get_anchoredDescriptions: function LegacyRelativeDateQuickFilter$get_AnchoredDescriptions() {
      if (ss.isNullOrUndefined($tab_LegacyRelativeDateQuickFilter.$anchoredDescriptions)) {
        $tab_LegacyRelativeDateQuickFilter.$createDescriptions();
      }
      return $tab_LegacyRelativeDateQuickFilter.$anchoredDescriptions;
    },
    get_nonAnchoredDescriptions: function LegacyRelativeDateQuickFilter$get_NonAnchoredDescriptions() {
      if (ss.isNullOrUndefined($tab_LegacyRelativeDateQuickFilter.$nonAnchoredDescriptions)) {
        $tab_LegacyRelativeDateQuickFilter.$createDescriptions();
      }
      return $tab_LegacyRelativeDateQuickFilter.$nonAnchoredDescriptions;
    },
    $createDescriptions: function LegacyRelativeDateQuickFilter$CreateDescriptions() {
      $tab_LegacyRelativeDateQuickFilter.$anchoredDescriptions = {};
      $tab_LegacyRelativeDateQuickFilter.$nonAnchoredDescriptions = {};
      var strings = tab.Strings;
      var $t1 = ss.Enum.getValues($tab_RelativeDateFilterPeriodType);
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var period = ss.cast($t1[$t2], String);
        var anchoredRangeStrings = {};
        var nonAnchoredRangeStrings = {};
        var $t3 = ss.Enum.getValues($tab_RelativeDateFilterRangeType);
        for (var $t4 = 0; $t4 < $t3.length; $t4++) {
          var range = ss.cast($t3[$t4], String);
          var stringKey = ss.formatString('RelDateAnchored_{0}_{1}', range, period);
          anchoredRangeStrings[range] = strings[stringKey];
          stringKey = ss.formatString('RelDate_{0}_{1}', range, period);
          nonAnchoredRangeStrings[range] = strings[stringKey];
        }
        $tab_LegacyRelativeDateQuickFilter.$anchoredDescriptions[period] = anchoredRangeStrings;
        $tab_LegacyRelativeDateQuickFilter.$nonAnchoredDescriptions[period] = nonAnchoredRangeStrings;
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegendBaseViewModel
  var $tab_LegendBaseViewModel = global.tab.LegendBaseViewModel = ss.mkType($asm, 'tab.LegendBaseViewModel', function(vizName, zoneVM) {
    this.$vizName = null;
    this.$parentZoneVM = null;
    this.$visualModel = null;
    spiff.BaseViewModel.call(this);
    this.$vizName = vizName;
    this.$parentZoneVM = zoneVM;
    this.$parentZoneVM.add_propertyChanged(ss.mkdel(this, this.$handleParentZoneChanged));
    this.$parentZoneVM.add_zoneResized(ss.mkdel(this, this.$handleParentZoneResized));
    this.$handleParentZoneChanged(this.$parentZoneVM, new tab.PropertyChangedEventArgs($tab_LegendBaseViewModel.newZoneParentKey));
  }, {
    get_$parentZoneSize: function LegendBaseViewModel$get_ParentZoneSize() {
      var toRet = null;
      if (ss.isValue(this.$parentZoneVM)) {
        toRet = { w: this.$parentZoneVM.get_contentWidth(), h: this.$parentZoneVM.get_contentHeight() };
      }
      return toRet;
    },
    get_$parentZoneTitleSize: function LegendBaseViewModel$get_ParentZoneTitleSize() {
      var toRet = null;
      if (ss.isValue(this.$parentZoneVM)) {
        toRet = this.$parentZoneVM.get_titleSize();
        toRet.h = Math.max(0, toRet.h - 2 * this.get_borderWidth());
        toRet.w = Math.max(0, toRet.w - 2 * this.get_borderWidth());
      }
      else {
        toRet = { w: 0, h: 0 };
      }
      return toRet;
    },
    get_$vizName: function LegendBaseViewModel$get_VizName() {
      return this.$vizName;
    },
    get_$visualId: function LegendBaseViewModel$get_VisualId() {
      return (ss.isValue(this.get_visualModel()) ? this.$visualModel.get_visualId() : null);
    },
    get_visualModel: function LegendBaseViewModel$get_VisualModel() {
      if (ss.isNullOrUndefined(this.$visualModel)) {
        this.$visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), this.$vizName);
      }
      return this.$visualModel;
    },
    get_parentZoneVM: function LegendBaseViewModel$get_ParentZoneVM() {
      return this.$parentZoneVM;
    },
    get_hasTitle: function LegendBaseViewModel$get_HasTitle() {
      return this.get_parentZoneVM().get_hasTitle();
    },
    get_backgroundColor: function LegendBaseViewModel$get_BackgroundColor() {
      return tab.ColorModel.fromColorCode(this.get_parentZoneVM().get_contentContainerStyle().get_fillColor());
    },
    get_borderWidth: null,
    get_regionType: null,
    get_titleHtml: function LegendBaseViewModel$get_TitleHtml() {
      if (this.get_hasTitle()) {
        return this.get_presModelTitleHtml();
      }
      return '';
    },
    get_presModelTitleHtml: null,
    get_titleInline: function LegendBaseViewModel$get_TitleInline() {
      var titleSize = this.get_$parentZoneTitleSize();
      if (this.get_presModelTitleInline() === false && titleSize.h === 0 && titleSize.w > 0) {
        return true;
      }
      return this.get_presModelTitleInline();
    },
    get_shouldShowContextMenu: null,
    get_legendColumns: null,
    get_legendTypeEnum: null,
    get_presModelTitleInline: null,
    get_titleHeight: function LegendBaseViewModel$get_TitleHeight() {
      if (!this.get_hasTitle()) {
        return 0;
      }
      var height = this.get_presModelTitleHeight();
      if (height === 0) {
        height = this.get_$parentZoneTitleSize().h;
      }
      return height;
    },
    get_presModelTitleHeight: null,
    get_titleWidth: function LegendBaseViewModel$get_TitleWidth() {
      if (!this.get_hasTitle()) {
        return 0;
      }
      var width = this.get_presModelTitleWidth();
      if (width === 0) {
        width = this.get_$parentZoneTitleSize().w;
      }
      return width;
    },
    get_presModelTitleWidth: null,
    $showContextMenu: function LegendBaseViewModel$ShowContextMenu(options) {
      if (!this.get_shouldShowContextMenu()) {
        return;
      }
      var $t1 = new tab.GetLegendMenuCmd();
      $t1.cmdParams['legendNames'] = this.get_legendColumns();
      $t1.cmdParams['legendType'] = this.get_legendTypeEnum();
      $t1.invoke().done(function(response) {
        var commands = response.$$cmdParams['commands'];
        if (tsConfig.is_mobile || tsConfig.is_mobile_app) {
          tab.RichTextClientCommands.removeRichTextCommands(commands);
        }
        var menuViewModel = tab.WidgetUtil.menuViewModelFromCommands(commands, function(menuItem) {
          tab.WidgetUtil.commandMenuItemClicked(menuItem);
        }, null, null, null);
        if (ss.isValue(menuViewModel)) {
          menuViewModel.show(options);
        }
      });
    },
    dispose: function LegendBaseViewModel$Dispose() {
      if (ss.isValue(this.$parentZoneVM)) {
        this.$parentZoneVM.remove_propertyChanged(ss.mkdel(this, this.$handleParentZoneChanged));
        this.$parentZoneVM.remove_zoneResized(ss.mkdel(this, this.$handleParentZoneResized));
      }
      spiff.BaseViewModel.prototype.dispose.call(this);
    },
    $handleParentZoneChanged: function LegendBaseViewModel$HandleParentZoneChanged(sender, args) {
      this.notifyPropertyChanged(args.get_propertyName());
    },
    $handleParentZoneResized: function LegendBaseViewModel$HandleParentZoneResized() {
      this.notifyPropertyChanged($tab_LegendBaseViewModel.parentZoneSizeChangedKey);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegendSelectionState
  var $tab_LegendSelectionState = global.tab.LegendSelectionState = ss.mkType($asm, 'tab.LegendSelectionState', function(selectedItems, brushedItems, isHighlightingEnabled, hasMarkNodeSelection, isOneway) {
    this.selectedItems = null;
    this.brushedItems = null;
    this.isHighlightingEnabled = false;
    this.hasMarkNodeSelection = false;
    this.isOneway = false;
    this.selectedItems = selectedItems.slice(0);
    this.brushedItems = brushedItems.slice(0);
    this.isHighlightingEnabled = isHighlightingEnabled;
    this.hasMarkNodeSelection = hasMarkNodeSelection;
    this.isOneway = isOneway;
  }, {
    get_isCurrentLegendGreyed: function LegendSelectionState$get_IsCurrentLegendGreyed() {
      var hasSelection = ss.isValue(this.selectedItems) && this.selectedItems.length > 0;
      var hasBrushing = ss.isValue(this.brushedItems) && this.brushedItems.length > 0;
      return $tab_LegendSelectionState.shouldBeGrayed(this.isOneway, this.hasMarkNodeSelection, hasSelection, hasBrushing);
    },
    computeChangedItems: function LegendSelectionState$ComputeChangedItems(other) {
      if (ss.isNullOrUndefined(other)) {
        return null;
      }
      if (this.isHighlightingEnabled !== other.isHighlightingEnabled) {
        return null;
      }
      if (this.get_isCurrentLegendGreyed() !== other.get_isCurrentLegendGreyed()) {
        return null;
      }
      var changedSelected = $tab_LegendSelectionState.$computeDelta(this.selectedItems, other.selectedItems);
      var changedBrushed = $tab_LegendSelectionState.$computeDelta(this.brushedItems, other.brushedItems);
      return changedSelected.concat.apply(changedSelected, changedBrushed);
    },
    isSelectionStateTheSame: function LegendSelectionState$IsSelectionStateTheSame(other) {
      ss.Debug.assert(ss.isValue(other), 'Other selection state must not be null');
      if (ss.isNullOrUndefined(other)) {
        return false;
      }
      if (this.isHighlightingEnabled !== other.isHighlightingEnabled) {
        return false;
      }
      if (this.get_isCurrentLegendGreyed() !== other.get_isCurrentLegendGreyed()) {
        return false;
      }
      var selectionModelSame = _.isEqual(other.selectedItems, this.selectedItems);
      var brushingModelSame = _.isEqual(other.brushedItems, this.brushedItems);
      return selectionModelSame && brushingModelSame;
    }
  }, {
    shouldBeGrayed: function LegendSelectionState$ShouldBeGrayed(isOneWaySelection, hasMarkNodeSelection, hasSelection, hasBrushing) {
      if (isOneWaySelection && hasMarkNodeSelection && !hasSelection) {
        return false;
      }
      return hasSelection || hasMarkNodeSelection || hasBrushing;
    },
    $computeDelta: function LegendSelectionState$ComputeDelta(array1, array2) {
      var set1 = new Set();
      tab.SetUtilities.addAll(ss.UInt32).call(null, set1, array1);
      var set2 = new Set();
      tab.SetUtilities.addAll(ss.UInt32).call(null, set2, array2);
      var result = tab.SetUtilities.symmetricDifferenceWith(ss.UInt32).call(null, set1, set2);
      return tab.SetUtilities.getValues(ss.UInt32).call(null, result);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegendStateManager
  var $tab_LegendStateManager = global.tab.LegendStateManager = ss.mkType($asm, 'tab.LegendStateManager', function(zoneViewModel, visualModel, catLegendModel, legendTypeEnum) {
    this.zoneViewModel = null;
    this.visualModel = null;
    this.categoricalLegendModel = null;
    this.legendTypeEnum = null;
    this.legendTypeEnum = legendTypeEnum;
    this.zoneViewModel = zoneViewModel;
    this.visualModel = visualModel;
    this.categoricalLegendModel = catLegendModel;
  }, {
    dispose: null,
    isSelected: null,
    isLegendItemGrayed: null,
    selectItems: null,
    get_visualId: function LegendStateManager$get_VisualId() {
      return (ss.isValue(this.visualModel) ? this.visualModel.get_visualId() : null);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegendStateManagerWithItemPresModel
  var $tab_LegendStateManagerWithItemPresModel = global.tab.LegendStateManagerWithItemPresModel = ss.mkType($asm, 'tab.LegendStateManagerWithItemPresModel', function(zoneViewModel, visualModel, catLegendModel, legendTypeEnum) {
    $tab_LegendStateManager.call(this, zoneViewModel, visualModel, catLegendModel, legendTypeEnum);
  }, {
    dispose: function LegendStateManagerWithItemPresModel$Dispose() {
    },
    isSelected: function LegendStateManagerWithItemPresModel$IsSelected(item) {
      return ss.coalesce(item.isSelected, false);
    },
    isLegendItemGrayed: function LegendStateManagerWithItemPresModel$IsLegendItemGrayed(item) {
      return ss.coalesce(item.isGrayed, false);
    },
    selectItems: function LegendStateManagerWithItemPresModel$SelectItems(items, action, zoneSelectionType) {
      var alreadySelectedItems = _.filter(this.categoricalLegendModel.get_items(), function(item) {
        return item.isSelected;
      });
      var selectedItems = this.$resolveSelectedItems(alreadySelectedItems, items, action);
      var hasLegendSelection = alreadySelectedItems.length > 0;
      return tab.SelectionClientCommands.selectLegendItemsRemote(this.zoneViewModel.get_zoneId(), selectedItems, this.get_visualId(), this.categoricalLegendModel, this.legendTypeEnum, hasLegendSelection, zoneSelectionType);
    },
    $resolveSelectedItems: function LegendStateManagerWithItemPresModel$ResolveSelectedItems(alreadySelectedItems, items, action) {
      switch (action) {
        case 'toggle': {
          return this.$resolveToggleSelection(alreadySelectedItems, items);
        }
        case 'simple': {
          return this.$resolveSimpleSelection(alreadySelectedItems, items);
        }
        case 'range':
        case 'menu':
        default: {
          return [];
        }
      }
    },
    $resolveSimpleSelection: function LegendStateManagerWithItemPresModel$ResolveSimpleSelection(alreadySelectedItems, items) {
      if (alreadySelectedItems.length === 1) {
        items = items.filter(function(item) {
          return !item.isSelected;
        });
      }
      return items.map(function(item1) {
        return item1.objectId;
      });
    },
    $resolveToggleSelection: function LegendStateManagerWithItemPresModel$ResolveToggleSelection(alreadySelectedItems, items) {
      var previouslySelectedIDs = alreadySelectedItems.map(function(item) {
        return item.objectId;
      });
      var newlySelectedIDs = items.map(function(item1) {
        return item1.objectId;
      });
      return _.difference(_.union(previouslySelectedIDs, newlySelectedIDs), _.intersection(previouslySelectedIDs, newlySelectedIDs));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegendStateManagerWithSelectionPresModel
  var $tab_LegendStateManagerWithSelectionPresModel = global.tab.LegendStateManagerWithSelectionPresModel = ss.mkType($asm, 'tab.LegendStateManagerWithSelectionPresModel', function(zoneViewModel, visualModel, catLegendModel, legendTypeEnum) {
    this.$selectionModel = null;
    this.$brushingModel = null;
    this.propertyChanged = null;
    this.selectionChanged = null;
    this.$legendSelectionState = null;
    $tab_LegendStateManager.call(this, zoneViewModel, visualModel, catLegendModel, legendTypeEnum);
    this.$selectionModel = visualModel.get_selectionsModel().getLegendSelection(legendTypeEnum, catLegendModel.get_legendNames());
    this.$selectionModel.add_newSelection(ss.mkdel(this, this.$handleNewSelection));
    this.$brushingModel = visualModel.get_brushingsModel().getLegendSelection(legendTypeEnum, catLegendModel.get_legendNames());
    this.$brushingModel.add_newSelection(ss.mkdel(this, this.$handleNewSelection));
    this.categoricalLegendModel.add_legendNameChanged(ss.mkdel(this, this.$handleLegendNameChanged));
    this.categoricalLegendModel.add_legendChanged(ss.mkdel(this, this.$handleModelChanged));
    visualModel.get_selectionsModel().add_newSelections(ss.mkdel(this, this.$handleNewSelection));
    visualModel.add_emptyHighlightFogAllChanged(ss.mkdel(this, this.$handleEmptyHighlightFogAllChanged));
    this.$handleModelChanged();
  }, {
    dispose: function LegendStateManagerWithSelectionPresModel$Dispose() {
      this.categoricalLegendModel.remove_legendNameChanged(ss.mkdel(this, this.$handleLegendNameChanged));
      this.categoricalLegendModel.remove_legendChanged(ss.mkdel(this, this.$handleModelChanged));
      this.$selectionModel.remove_newSelection(ss.mkdel(this, this.$handleNewSelection));
      this.$brushingModel.remove_newSelection(ss.mkdel(this, this.$handleNewSelection));
      this.visualModel.get_selectionsModel().remove_newSelections(ss.mkdel(this, this.$handleNewSelection));
      this.visualModel.remove_emptyHighlightFogAllChanged(ss.mkdel(this, this.$handleEmptyHighlightFogAllChanged));
    },
    isSelected: function LegendStateManagerWithSelectionPresModel$IsSelected(item) {
      return this.$selectionModel.isLegendItemSelected(item);
    },
    isLegendItemGrayed: function LegendStateManagerWithSelectionPresModel$IsLegendItemGrayed(item) {
      if (this.categoricalLegendModel.get_isHighlightEnabled()) {
        if (this.isSelected(item) || this.$isBrushed(item)) {
          return false;
        }
        if (ss.isNullOrUndefined(this.visualModel)) {
          return false;
        }
        return this.visualModel.get_emptyHighlightFogAll() || $tab_LegendSelectionState.shouldBeGrayed(this.categoricalLegendModel.get_isOneWay(), this.get_$hasMarkOrNodeSelection(), this.get_$hasSelection(), this.get_$hasBrushing());
      }
      return false;
    },
    selectItems: function LegendStateManagerWithSelectionPresModel$SelectItems(items, action, zoneSelectionType) {
      return tab.SelectionClientCommands.selectLegendItemsLocal(this.zoneViewModel.get_zoneId(), action, items, this.get_visualId(), this.categoricalLegendModel, this.legendTypeEnum, this.get_$hasSelection(), zoneSelectionType);
    },
    get_$hasMarkOrNodeSelection: function LegendStateManagerWithSelectionPresModel$get_HasMarkOrNodeSelection() {
      return this.visualModel.get_selectionsModel().get_brushVizForNodeSelection() || !this.visualModel.get_selectionsModel().tupleSelection.isEmpty;
    },
    $isBrushed: function LegendStateManagerWithSelectionPresModel$IsBrushed(item) {
      return this.$brushingModel.isLegendItemSelected(item);
    },
    get_$hasSelection: function LegendStateManagerWithSelectionPresModel$get_HasSelection() {
      return !this.$selectionModel.isEmpty;
    },
    get_$hasBrushing: function LegendStateManagerWithSelectionPresModel$get_HasBrushing() {
      return ss.isValue(this.$brushingModel) && !this.$brushingModel.isEmpty;
    },
    $handleNewSelection: function LegendStateManagerWithSelectionPresModel$HandleNewSelection() {
      var currentSelectionState = this.$constructSelectionState();
      var isSelectionChanged = !this.$legendSelectionState.isSelectionStateTheSame(currentSelectionState);
      if (isSelectionChanged) {
        var changedItems = this.$legendSelectionState.computeChangedItems(currentSelectionState);
        this.selectionChanged(changedItems);
        this.$legendSelectionState = currentSelectionState;
      }
    },
    $handleEmptyHighlightFogAllChanged: function LegendStateManagerWithSelectionPresModel$HandleEmptyHighlightFogAllChanged() {
      this.propertyChanged();
    },
    $constructSelectionState: function LegendStateManagerWithSelectionPresModel$ConstructSelectionState() {
      return new $tab_LegendSelectionState(this.$selectionModel.get_ids(), this.$brushingModel.get_ids(), this.categoricalLegendModel.get_isHighlightEnabled(), this.get_$hasMarkOrNodeSelection(), this.categoricalLegendModel.get_isOneWay());
    },
    $handleLegendNameChanged: function LegendStateManagerWithSelectionPresModel$HandleLegendNameChanged() {
      this.$selectionModel.remove_newSelection(ss.mkdel(this, this.$handleNewSelection));
      this.$selectionModel = this.visualModel.get_selectionsModel().getLegendSelection(this.legendTypeEnum, this.categoricalLegendModel.get_legendNames());
      this.$selectionModel.add_newSelection(ss.mkdel(this, this.$handleNewSelection));
      this.$brushingModel.remove_newSelection(ss.mkdel(this, this.$handleNewSelection));
      this.$brushingModel = this.visualModel.get_brushingsModel().getLegendSelection(this.legendTypeEnum, this.categoricalLegendModel.get_legendNames());
      this.$brushingModel.add_newSelection(ss.mkdel(this, this.$handleNewSelection));
    },
    $handleModelChanged: function LegendStateManagerWithSelectionPresModel$HandleModelChanged() {
      this.$legendSelectionState = this.$constructSelectionState();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LegendTemplate
  var $tab_LegendTemplate = global.tab.LegendTemplate = ss.mkType($asm, 'tab.LegendTemplate', function(template) {
    this.legendContentArea = null;
    this.titleControls = null;
    this.titleArea = null;
    spiff.Template.call(this, template);
    this.titleArea = this.getElementBySelector('.tabLegendTitle');
  }, {
    get_contentArea: function LegendTemplate$get_ContentArea() {
      return this.legendContentArea;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ListGridModel
  var $tab_ListGridModel = global.tab.ListGridModel = ss.mkType($asm, 'tab.ListGridModel', function(itemCount, itemHeight, tileSize, viewportHeight) {
    this.$itemCount = 0;
    this.$itemHeight = 0;
    this.$tileSize = 0;
    this.$viewportHeight = 0;
    this.$totalHeight = 0;
    this.$tileCount = 0;
    this.$grid = null;
    this.$itemCount = itemCount;
    this.$itemHeight = itemHeight;
    this.$tileSize = tileSize;
    this.$viewportHeight = viewportHeight;
    this.$totalHeight = this.$itemCount * this.$itemHeight;
    if (tileSize > 0) {
      this.$tileCount = Math.ceil(itemCount / tileSize);
    }
    else {
      this.$tileCount = 0;
    }
    this.$grid = {};
    var y = 0;
    var tileHeight = tileSize * itemHeight;
    var remainingHeight = this.$totalHeight;
    for (var i = 0; i < this.$tileCount; ++i) {
      if (remainingHeight < tileHeight) {
        tileHeight = remainingHeight;
      }
      var pixelRange = new tab.IntegerRange(y, y + tileHeight - 1);
      var itemRange = tab.IntegerRange.pixelToItemRange(pixelRange, itemHeight);
      var info = new $tab_$TileInfo(i, false, { x: 0, y: y }, itemRange, 'item');
      this.$grid[i] = info;
      remainingHeight -= tileHeight;
      y += tileHeight;
    }
  }, {
    get_totalHeight: function ListGridModel$get_TotalHeight() {
      return this.$totalHeight;
    },
    get_itemHeight: function ListGridModel$get_ItemHeight() {
      return this.$itemHeight;
    },
    get_tileCount: function ListGridModel$get_TileCount() {
      return this.$tileCount;
    },
    get_viewportHeight: function ListGridModel$get_ViewportHeight() {
      return this.$viewportHeight;
    },
    destroy: function ListGridModel$Destroy() {
    },
    updateViewport: function ListGridModel$UpdateViewport(width, height) {
      this.$viewportHeight = height;
    },
    getTileStatus: function ListGridModel$GetTileStatus(index) {
      var info = this.$grid[index];
      if (typeof(info) === 'undefined') {
        tab.Log.get(this).warn('internal error: tile index out of bound', []);
        return false;
      }
      return info.get_$hasLoaded();
    },
    updateTileStatus: function ListGridModel$UpdateTileStatus(index, hasLoaded) {
      var info = this.$grid[index];
      if (typeof(info) === 'undefined') {
        tab.Log.get(this).warn('internal error: tile index out of bound', []);
        return;
      }
      this.$grid[index].set_$hasLoaded(hasLoaded);
    },
    getTilePosition: function ListGridModel$GetTilePosition(index) {
      var info = this.$grid[index];
      if (typeof(info) === 'undefined') {
        tab.Log.get(this).warn('internal error: tile index out of bound', []);
        return null;
      }
      return { x: info.get_$pos().x, y: info.get_$pos().y };
    },
    getTileRange: function ListGridModel$GetTileRange(index) {
      var info = this.$grid[index];
      if (typeof(info) === 'undefined') {
        tab.Log.get(this).warn('internal error: tile index out of bound', []);
        return null;
      }
      return new tab.IntegerRange(info.get_$range().get_from(), info.get_$range().get_to());
    },
    getTileRangeType: function ListGridModel$GetTileRangeType(index) {
      var info = this.$grid[index];
      if (typeof(info) === 'undefined') {
        tab.Log.get(this).debug('internal error: tile index out of bound', []);
        return 'unknown';
      }
      return info.get_$rangeType();
    },
    pixelToTileRange: function ListGridModel$PixelToTileRange(pixelRange) {
      return tab.IntegerRange.pixelToTileRange(pixelRange, this.$itemHeight, this.$tileSize);
    },
    itemToTileIndex: function ListGridModel$ItemToTileIndex(itemIndex) {
      var tileIndex = Math.floor(itemIndex / this.$tileSize);
      return tileIndex;
    },
    globalToLocalItemIndex: function ListGridModel$GlobalToLocalItemIndex(globalItemIndex) {
      return ss.imod(globalItemIndex, this.$tileSize);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.LocalSearch
  var $tab_LocalSearch = global.tab.LocalSearch = ss.mkType($asm, 'tab.LocalSearch', function() {
  }, null, {
    searchQueryMatchesText: function LocalSearch$SearchQueryMatchesText(query, text) {
      var len = query.length;
      var match;
      if (query.charCodeAt(0) === 39 && query.charCodeAt(len - 1) === 39) {
        return ss.referenceEquals(query.substr(1, len - 2), text);
      }
      else if (query.charCodeAt(0) !== 42 && query.charCodeAt(len - 1) === 42) {
        return text.indexOf(query.substr(0, len - 1)) === 0;
      }
      else if (query.charCodeAt(0) === 42 && query.charCodeAt(len - 1) !== 42) {
        match = text.lastIndexOf(query.substr(1, len - 1));
        return match >= 0 && match === text.length - (len - 1);
      }
      else if (query.charCodeAt(0) === 42 && query.charCodeAt(len - 1) === 42) {
        return text.indexOf(query.substr(1, len - 2)) >= 0;
      }
      else {
        return text.indexOf(query) >= 0;
      }
    },
    findMatches: function LocalSearch$FindMatches(query, filter, tupleFormatter, resultTransformer) {
      var queryLowerCase = query.toLowerCase();
      var results = [];
      var t = filter.table.tuples;
      if (ss.isNullOrUndefined(resultTransformer)) {
        resultTransformer = function(tuple, dummy1, dummy2) {
          return tuple;
        };
      }
      for (var i = 0; i < t.length; i++) {
        var displayName = tupleFormatter(t[i]);
        if ($tab_LocalSearch.searchQueryMatchesText(queryLowerCase, displayName.toLowerCase())) {
          results.push(resultTransformer(t[i], displayName, i));
        }
      }
      return results;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.OnClickOverride
  var $tab_OnClickOverride = global.tab.OnClickOverride = ss.mkType($asm, 'tab.OnClickOverride', function() {
    this.$applyTimer = null;
    this.$isMobile = tsConfig.is_mobile;
    dijit.MenuItem.call(this);
  }, {
    postCreate: function OnClickOverride$PostCreate() {
      this.inherited(arguments);
      if (this.$isMobile) {
        var tmp = new tableau.util.NoClickDelay(this.domNode);
      }
    },
    $blurItem: function OnClickOverride$BlurItem() {
      this.getParent().focusChild(this);
    },
    $setApplyTimer: function OnClickOverride$SetApplyTimer(func) {
      this.$applyTimer = tab.MiscUtil.clearTimeout(this.$applyTimer);
      this.$applyTimer = window.setTimeout(func, $tab_OnClickOverride.$delay);
    },
    _onClick: function OnClickOverride$OnClick(evt) {
      if (this.$isMobile) {
        if (!this._isReasonableEvent(evt)) {
          return;
        }
        var func = ss.mkdel(this, function() {
          this.getParent().onItemClick(this, evt);
          spiff.EventUtil.stopEvent(evt);
        });
        this.$blurItem();
        this.$setApplyTimer(func);
      }
      else {
        this.inherited(arguments);
      }
    },
    _onHover: function OnClickOverride$OnHover(evt) {
      if (this.$isMobile) {
        this._onClick(evt);
      }
      else {
        this.inherited(arguments);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.PageTemplate
  var $tab_PageTemplate = global.tab.PageTemplate = ss.mkType($asm, 'tab.PageTemplate', function() {
    spiff.Template.call(this, $($tab_PageTemplate.$htmlTemplate));
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.PageView
  var $tab_PageView = global.tab.PageView = ss.mkType($asm, 'tab.PageView', function(viewModel) {
    this.pageViewModel = null;
    this.$node = null;
    ss.makeGenericType(spiff.BaseView$1, [$tab_PageViewModel]).call(this, viewModel, new $tab_PageTemplate());
    this.pageViewModel = viewModel;
    this.pageViewModel.add_newPage(ss.mkdel(this, this.handleNewPage));
    this.pageViewModel.add_resized(ss.mkdel(this, this.updatePageControl));
    this.pageViewModel.add_titleVisibilityChanged(ss.mkdel(this, this.updatePageControl));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.pageViewModel.remove_newPage(ss.mkdel(this, this.handleNewPage));
    })));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.pageViewModel.remove_resized(ss.mkdel(this, this.updatePageControl));
    })));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.pageViewModel.remove_titleVisibilityChanged(ss.mkdel(this, this.updatePageControl));
    })));
  }, {
    get_$zoneModel: function PageView$get_ZoneModel() {
      return this.get_viewModel().get_pageModel().get_zoneModel();
    },
    dispose: function PageView$Dispose() {
      if (ss.isValue(this.$node)) {
        this.$node.destroyRecursiveShim(false);
        this.$node = null;
      }
      ss.makeGenericType(spiff.BaseView$1, [$tab_PageViewModel]).prototype.dispose.call(this);
    },
    onAddedToDom: function PageView$OnAddedToDom() {
      spiff.Widget.prototype.onAddedToDom.call(this);
      if (ss.isValue(this.pageViewModel.get_pageModel())) {
        this.handleNewPage();
      }
    },
    handleNewPage: function PageView$HandleNewPage() {
      if (ss.isNullOrUndefined(this.$node) && ss.isValue(this.pageViewModel.get_pageModel()) && ss.isValue(this.pageViewModel.get_pageModel().pm)) {
        this.$node = this.createCurrentPagePanel();
        this.get_template().domRoot.append(this.$node.getDomNode());
        this.$node.startupShim();
        var zoneRect = { x: 0, y: 0, w: this.get_$zoneModel().get_contentWidth(), h: this.get_$zoneModel().get_contentHeight() };
        tab.DomUtil.resize(this.$node, tab.RectXYUtil.toRect(zoneRect));
      }
      else {
        var updatedProperties = this.createCurrentPagePanelProperties();
        this.$node.updatePropertiesShim(updatedProperties);
        this.$node.refreshLayoutShim();
      }
    },
    updatePageControl: function PageView$UpdatePageControl() {
      if (ss.isValue(this.pageViewModel.get_pageModel()) && ss.isValue(this.pageViewModel.get_pageModel().pm)) {
        this.$node.destroyRecursiveShim$1();
        this.$node = null;
        this.handleNewPage();
      }
    },
    createCurrentPagePanelProperties: function PageView$CreateCurrentPagePanelProperties() {
      var presModel = this.pageViewModel.get_pageModel().pm;
      var props = new Object();
      props.cpHeight = this.get_$zoneModel().get_contentHeight();
      props.sheetid = this.get_$zoneModel().get_associatedSheet();
      props.enable = this.pageViewModel.get_historyTrailsEnabled();
      props.show_slider = presModel.showPageSlider;
      props.show_toggle = this.pageViewModel.get_showHistoryToggle();
      props.show_dropdown = presModel.showPageReadout;
      props.current_page = presModel.currentPage;
      props.pages = presModel.pageNames;
      props.session = this.pageViewModel.get_viewSession();
      props.layoutSession = this.pageViewModel.get_layoutSession();
      props.lTitle = this.pageViewModel.get_title();
      props.titleHtml = this.pageViewModel.get_titleHtml();
      props.zoneTitleHeight = this.pageViewModel.get_zoneTitleHeight();
      props.zoneTitleWidth = this.pageViewModel.get_zoneTitleWidth();
      props.isDashboard = true;
      props.pageViewModel = this.pageViewModel;
      props.backgroundColor = this.pageViewModel.get_backgroundColor();
      return props;
    },
    createCurrentPagePanel: function PageView$CreateCurrentPagePanel() {
      var oProps = this.createCurrentPagePanelProperties();
      return this.instantiateCurrentPagePanel(oProps);
    },
    instantiateCurrentPagePanel: function PageView$InstantiateCurrentPagePanel(props) {
      var maker = tab.ObjectRegistry.resolve(tab.ILegacyDojoWidgetMaker).call(null, []);
      return maker.makeCurrentPagePanelWidget(props);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.PageViewModel
  var $tab_PageViewModel = global.tab.PageViewModel = ss.mkType($asm, 'tab.PageViewModel', function(pageModel) {
    this.$pageModel = null;
    this.$2$NewPageField = null;
    this.$2$ResizedField = null;
    this.$2$TitleVisibilityChangedField = null;
    spiff.BaseViewModel.call(this);
    this.$pageModel = pageModel;
    this.$pageModel.add_newPage(ss.mkdel(this, this.handleNewPage));
    this.$pageModel.get_zoneModel().get_zoneCommonModel().add_resizeZone(ss.mkdel(this, this.handleParentZoneResized));
    this.get_pageModel().get_zoneModel().get_zoneCommonModel().add_changeZoneTitleVisibility(ss.mkdel(this, this.handleTitleVisibilityChanged));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$pageModel.remove_newPage(ss.mkdel(this, this.handleNewPage));
    })));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$pageModel.get_zoneModel().get_zoneCommonModel().remove_resizeZone(ss.mkdel(this, this.handleParentZoneResized));
    })));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$pageModel.get_zoneModel().get_zoneCommonModel().remove_changeZoneTitleVisibility(ss.mkdel(this, this.handleTitleVisibilityChanged));
    })));
  }, {
    add_newPage: function PageViewModel$add_NewPage(value) {
      this.$2$NewPageField = ss.delegateCombine(this.$2$NewPageField, value);
    },
    remove_newPage: function PageViewModel$remove_NewPage(value) {
      this.$2$NewPageField = ss.delegateRemove(this.$2$NewPageField, value);
    },
    add_resized: function PageViewModel$add_Resized(value) {
      this.$2$ResizedField = ss.delegateCombine(this.$2$ResizedField, value);
    },
    remove_resized: function PageViewModel$remove_Resized(value) {
      this.$2$ResizedField = ss.delegateRemove(this.$2$ResizedField, value);
    },
    add_titleVisibilityChanged: function PageViewModel$add_TitleVisibilityChanged(value) {
      this.$2$TitleVisibilityChangedField = ss.delegateCombine(this.$2$TitleVisibilityChangedField, value);
    },
    remove_titleVisibilityChanged: function PageViewModel$remove_TitleVisibilityChanged(value) {
      this.$2$TitleVisibilityChangedField = ss.delegateRemove(this.$2$TitleVisibilityChangedField, value);
    },
    get_pageModel: function PageViewModel$get_PageModel() {
      return this.$pageModel;
    },
    get_viewSession: function PageViewModel$get_ViewSession() {
      return tab.ModelUtils.getViewSession(this.get_pageModel().get_zoneModel().get_associatedSheet());
    },
    get_layoutSession: function PageViewModel$get_LayoutSession() {
      return tab.CommandController.get().legacySession;
    },
    get_visualId: function PageViewModel$get_VisualId() {
      return tab.ModelUtils.getVisualId(this.get_pageModel().get_zoneModel().get_associatedSheet());
    },
    get_titleHtml: function PageViewModel$get_TitleHtml() {
      return (this.get_pageModel().get_zoneModel().get_hasTitle() ? this.get_pageModel().pm.titleHtml : '');
    },
    get_title: function PageViewModel$get_Title() {
      return (this.get_pageModel().get_zoneModel().get_hasTitle() ? this.get_pageModel().get_title() : '');
    },
    get_historyTrailsEnabled: function PageViewModel$get_HistoryTrailsEnabled() {
      return this.$pageModel.pm.pageTrailOptions.state;
    },
    get_isHistoryToggleInteractionDisabled: function PageViewModel$get_IsHistoryToggleInteractionDisabled() {
      return tab.ApplicationModel.get_instance().get_workbook().get_isCurrentSheetStoryboard() || !this.$pageModel.pm.supportTrailOptions;
    },
    get_showHistoryToggle: function PageViewModel$get_ShowHistoryToggle() {
      var showHistory = this.$pageModel.pm.showHistoryControls;
      if (tsConfig.is_mobile && this.get_isHistoryToggleInteractionDisabled() && !this.get_historyTrailsEnabled()) {
        showHistory = false;
      }
      return showHistory;
    },
    get_showHistoryToggleForPopup: function PageViewModel$get_ShowHistoryToggleForPopup() {
      var showHistory = this.get_showHistoryToggle();
      if (this.get_isHistoryToggleInteractionDisabled()) {
        showHistory = false;
      }
      return showHistory;
    },
    get_zoneTitleHeight: function PageViewModel$get_ZoneTitleHeight() {
      return (this.get_pageModel().get_zoneModel().get_hasTitle() ? this.get_pageModel().get_zoneModel().get_titleHeight() : 0);
    },
    get_zoneTitleWidth: function PageViewModel$get_ZoneTitleWidth() {
      return (this.get_pageModel().get_zoneModel().get_hasTitle() ? this.get_pageModel().get_zoneModel().get_titleWidth() : 0);
    },
    get_backgroundColor: function PageViewModel$get_BackgroundColor() {
      return this.get_pageModel().get_zoneModel().get_drawnZoneColor();
    },
    handleNewPage: function PageViewModel$HandleNewPage(presModel) {
      this.raiseActionEvent(this.$2$NewPageField);
    },
    handleParentZoneResized: function PageViewModel$HandleParentZoneResized() {
      this.raiseActionEvent(this.$2$ResizedField);
    },
    handleTitleVisibilityChanged: function PageViewModel$HandleTitleVisibilityChanged() {
      this.raiseActionEvent(this.$2$TitleVisibilityChangedField);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParameterControl
  var $tab_ParameterControl = global.tab.ParameterControl = ss.mkType($asm, 'tab.ParameterControl', function(oProps) {
    this.$widgetsInTemplate = true;
    this.paramMenuButton = null;
    this.domBox = null;
    this.domControls = null;
    this.getSID = null;
    this.session = null;
    this.$currentDisplayMode = null;
    this.$field = '';
    this.$attributes = {};
    this.stateId = 0;
    this.$viewModel = null;
    this.$ui = null;
    this.domTitleBar = null;
    this.domContent = null;
    this.$titleH = 0;
    this.$titleW = 0;
    this.$titleHTML = null;
    this.backgroundColor = null;
    this.blendedZoneContentColor = null;
    this.$disposables = null;
    this.$menuButton = null;
    Object.call(this);
    this.$disposables = new tab.DisposableHolder();
    this.session = oProps.session;
    this.$field = oProps.field;
    this.$titleH = oProps.titleH;
    this.$titleW = oProps.titleW;
    this.$titleHTML = oProps.titleHTML;
    this.backgroundColor = oProps.backgroundColor;
    this.blendedZoneContentColor = oProps.blendedZoneContentColor;
    this.$attributes = oProps.attributes;
    this.$viewModel = oProps.viewModel;
  }, {
    get_model: function ParameterControl$get_Model() {
      return this.$viewModel.get_parameterCtrlModel().get_parameterCtrlPresModel();
    },
    get_paramTitle: function ParameterControl$get_ParamTitle() {
      if (ss.isValue(this.domTitleBar)) {
        return this.domTitleBar.title;
      }
      return null;
    },
    get_domBoxElement: function ParameterControl$get_DomBoxElement() {
      return this.domBox;
    },
    get_backgroundColor: function ParameterControl$get_BackgroundColor() {
      return this.backgroundColor;
    },
    get_blendedZoneContentColor: function ParameterControl$get_BlendedZoneContentColor() {
      return this.blendedZoneContentColor;
    },
    postCreate: function ParameterControl$PostCreate() {
      this.getSID = ss.mkdel(this, function() {
        return this.stateId;
      });
      this.$initFromState();
    },
    destroy: function ParameterControl$Destroy(preserveDom) {
      if (ss.isValue(this.$ui)) {
        this.$ui.destroy();
      }
      if (ss.isValue(this.$menuButton)) {
        this.$menuButton.dispose();
      }
      this.$disposables.dispose();
      this.domContent.innerHTML = '';
      this.inherited(arguments);
    },
    getTypeInParamClass: function ParameterControl$GetTypeInParamClass() {
      return tableau.base.widget.paramui.TypeIn;
    },
    getTypeInDateFieldParamClass: function ParameterControl$GetTypeInDateFieldParamClass() {
      return tableau.base.widget.paramui.TypeInDateField;
    },
    getCompactParamClass: function ParameterControl$GetCompactParamClass() {
      return tableau.base.widget.paramui.Compact;
    },
    getListParamClass: function ParameterControl$GetListParamClass() {
      return tableau.base.widget.paramui.List;
    },
    getSliderParamClass: function ParameterControl$GetSliderParamClass() {
      return tableau.base.widget.paramui.Slider;
    },
    $initFromState: function ParameterControl$InitFromState() {
      var newUI = null;
      if (ss.isNullOrUndefined(this.get_model()) || ss.isNullOrUndefined(this.get_model().legacyPresModel)) {
        tab.Log.get(this).debug('Failed in instantiating the contents of parameter control.', []);
        return;
      }
      if (ss.isValue(this.get_model().legacyPresModel)) {
        this.domTitleBar.setAttribute('title', this.get_model().legacyPresModel.title);
      }
      this.$currentDisplayMode = this.$paramCtrlModelDisplayMode();
      switch (this.$currentDisplayMode) {
        case 'type_in': {
          newUI = this.getTypeInParamClass();
          break;
        }
        case 'compact': {
          newUI = this.getCompactParamClass();
          break;
        }
        case 'list': {
          newUI = this.getListParamClass();
          break;
        }
        case 'slider': {
          newUI = this.getSliderParamClass();
          break;
        }
        case 'datetime': {
          newUI = this.getTypeInDateFieldParamClass();
          break;
        }
        default: {
          tab.Log.get(this).debug('Invalid display mode for parameter control ui. DisplayMode: %s ', [this.$currentDisplayMode]);
          return;
        }
      }
      if (ss.isValue(this.$ui)) {
        this.$ui.destroy();
        this.$ui = null;
      }
      if (ss.isNullOrUndefined(this.$attributes)) {
        tab.Log.get(this).debug('this.attributes is %s', [this.$attributes]);
        this.$attributes = {};
      }
      this.$ui = new newUI(this, this.domContent, this.$field, this.$attributes, this.$viewModel);
      this.$ui.instantiate(false);
      this.$setTitle();
      this.$initMenuButton();
      this.$refreshFormatting();
    },
    $initMenuButton: function ParameterControl$InitMenuButton() {
      var buttonContainer = $(this.paramMenuButton);
      if (!this.$viewModel.get_hasContextMenu()) {
        buttonContainer.remove();
        return;
      }
      if (ss.isNullOrUndefined(this.$menuButton)) {
        this.$menuButton = new spiff.ToggleButton($('<div></div>'), null);
        this.$menuButton.addClass('wcIconContextMenu');
        this.$menuButton.add_click(ss.mkdel(this, this.$showMenu));
        this.$disposables.add$1(this.$menuButton);
        buttonContainer.append(this.$menuButton.element);
        this.setupEventHandlers();
        buttonContainer.css('background-color', this.backgroundColor);
      }
      this.hideControls();
    },
    setupEventHandlers: function ParameterControl$SetupEventHandlers() {
      var clickHandler = spiff.TableauClickHandler.targetAndClick(this.domNode, ss.mkdel(this, this.$showControls));
      clickHandler.set_stopPropagationOnEvent(false);
      this.$disposables.add$1(clickHandler);
      var paramWidgetDomNodeJQuery = $(this.domNode);
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(paramWidgetDomNodeJQuery, 'mouseenter', ss.mkdel(this, this.$onMouseEnter)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(paramWidgetDomNodeJQuery, 'mouseleave', ss.mkdel(this, this.$onMouseOut)));
      var focusHandler = ss.mkdel(this, function(e) {
        this.$showControls();
      });
      var blurHandler = ss.mkdel(this, function(e1) {
        window.setTimeout(ss.mkdel(this, function() {
          if (!tab.DomUtil.isAncestorOf(this.domNode, document.activeElement)) {
            this.hideControls();
          }
        }), 200);
      });
      this.domNode.addEventListener('focus', focusHandler, true);
      this.domNode.addEventListener('blur', blurHandler, true);
      this.$disposables.add(ss.mkdel(this, function() {
        this.domNode.removeEventListener('focus', focusHandler, true);
        this.domNode.removeEventListener('blur', blurHandler, true);
      }));
      this.$disposables.add$2([spiff.TableauClickHandler.targetAndClick(this.paramMenuButton, ss.mkdel(this, this.$showMenu)), tab.KeyboardHandlers.setAccessibilityKeyboardHandlers(this.paramMenuButton, ss.mkdel(this, this.$showMenu))]);
    },
    $showMenu: function ParameterControl$ShowMenu() {
      this.$viewModel.showContextMenu(new spiff.ShowMenuOptions($(this.paramMenuButton), false), ss.mkdel(this, function() {
        this.$menuButton.set_selected(false);
      }));
    },
    $showControls: function ParameterControl$ShowControls() {
      if (this.$titleH > 0) {
        $(this.domControls).removeClass('HideControls');
      }
    },
    hideControls: function ParameterControl$HideControls() {
      if (!this.$menuButton.get_selected()) {
        $(this.domControls).addClass('HideControls');
      }
    },
    $onMouseEnter: function ParameterControl$OnMouseEnter(e) {
      this.$showControls();
    },
    $onMouseOut: function ParameterControl$OnMouseOut(e) {
      var c = dojo.coords(this.domNode, true);
      if (c.x > e.pageX || c.x + c.w <= e.pageX || c.y > e.pageY || c.y + c.h <= e.pageY) {
        this.hideControls();
      }
    },
    $setTitle: function ParameterControl$SetTitle() {
      this.domTitleBar.innerHTML = this.$titleHTML;
      tab.FormattingConverters.cleanUpFontFamilyStyles($(this.domTitleBar));
      $(this.domTitleBar).find('div').css(ss.mkdict(['text-overflow', 'ellipsis', 'overflow', 'hidden']));
    },
    updateProperties: function ParameterControl$UpdateProperties(oProps) {
      this.session = oProps.session;
      this.$field = oProps.field;
      this.$titleH = oProps.titleH;
      this.$titleW = oProps.titleW;
      this.$titleHTML = oProps.titleHTML;
      this.backgroundColor = oProps.backgroundColor;
      this.blendedZoneContentColor = oProps.blendedZoneContentColor;
      this.$attributes = oProps.attributes;
      if (this.$paramCtrlModelDisplayMode() !== this.$currentDisplayMode) {
        this.$initFromState();
      }
      else {
        this.$setTitle();
        this.$refreshFormatting();
        this.$refreshState();
      }
    },
    $refreshFormatting: function ParameterControl$RefreshFormatting() {
      if (ss.isValue(this.get_model().textStyle) && ss.isValue(this.get_blendedZoneContentColor())) {
        $tab_WidgetStyle.applyFormatting(this.domNode, this.get_model().textStyle, this.get_blendedZoneContentColor(), this.get_model().lineHeight, true);
      }
    },
    $refreshState: function ParameterControl$RefreshState() {
      if (ss.isValue(this.$ui)) {
        this.$ui.refreshState(this.$attributes);
      }
    },
    $paramCtrlModelDisplayMode: function ParameterControl$ParamCtrlModelDisplayMode() {
      return this.get_model().paramDisplayMode;
    },
    $hideEmptyTitlebar: function ParameterControl$HideEmptyTitlebar() {
      return this.$titleW === 0 && this.$titleH === 0;
    },
    $resetTitleSize: function ParameterControl$ResetTitleSize() {
      if (ss.isValue(this.domTitleBar)) {
        $(this.domTitleBar).css({ height: 'auto', width: 'auto' });
      }
    },
    getTitleOffset: function ParameterControl$GetTitleOffset() {
      return ($(this.domNode).hasClass('PCInlineTitle') ? 0 : dojo.marginBox(this.domTitleBar).h);
    },
    layout: function ParameterControl$Layout(pixelHeight) {
      if (ss.isNullOrUndefined(this.domNode.parentNode) || ss.isNullOrUndefined(this.$ui)) {
        return;
      }
      $(this.domNode).removeClass('PCInlineTitle');
      var oTitleBar = this.$layoutTitleBar();
      var oZoneSize = dojo.contentBox(this.domNode);
      var notTitleSize = { w: oZoneSize.w, h: oZoneSize.h };
      if (!this.$hideEmptyTitlebar()) {
        if (this.$titleW > 0) {
          notTitleSize.w = oZoneSize.w - oTitleBar.w;
          if (this.$viewModel.get_hasBorder()) {
            this.domContent.style.paddingTop = '1px';
          }
          this.domTitleBar.style.cssFloat = 'left';
          this.domContent.style.cssFloat = 'left';
          this.domNode.classList.add('PCInlineTitle');
        }
        else {
          notTitleSize.h = oZoneSize.h - oTitleBar.h;
          if (tsConfig.is_mobile && this.$viewModel.get_hasBorder()) {
            notTitleSize.h -= 3;
          }
          this.domTitleBar.style.cssFloat = 'none';
          this.domContent.style.cssFloat = 'none';
        }
      }
      this.$ui.layout(notTitleSize);
    },
    $layoutTitleBar: function ParameterControl$LayoutTitleBar() {
      var oTitleBar = {};
      this.$resetTitleSize();
      if (this.$titleH > 0 || this.$hideEmptyTitlebar()) {
        oTitleBar.h = this.$titleH;
        this.domTitleBar.style.height = oTitleBar.h + 'px';
      }
      if (this.$titleW > 0 || this.$hideEmptyTitlebar()) {
        oTitleBar.w = this.$titleW;
        this.domTitleBar.style.width = oTitleBar.w + 'px';
      }
      tableau.util.setupTitleEllipsis($(this.domTitleBar));
      return oTitleBar;
    },
    getDomNode: function ParameterControl$GetDomNode() {
      return this.domNode;
    },
    destroyRecursiveShim: function ParameterControl$DestroyRecursiveShim(preserveDom) {
      this.destroyRecursive(preserveDom);
    },
    startupShim: function ParameterControl$StartupShim() {
      this.startup();
    },
    destroyRecursiveShim$1: function ParameterControl$DestroyRecursiveShim() {
      this.destroyRecursive();
    },
    updatePropertiesShim: function ParameterControl$UpdatePropertiesShim(oProps) {
      this.updateProperties(oProps);
    },
    layoutShim: function ParameterControl$LayoutShim(pixelHeight) {
      this.layout(pixelHeight);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParameterControlTemplate
  var $tab_ParameterControlTemplate = global.tab.ParameterControlTemplate = ss.mkType($asm, 'tab.ParameterControlTemplate', function() {
    spiff.Template.call(this, $($tab_ParameterControlTemplate.$htmlTemplate));
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParameterControlView
  var $tab_ParameterControlView = global.tab.ParameterControlView = ss.mkType($asm, 'tab.ParameterControlView', function(viewModel) {
    this.$parameterViewModel = null;
    this.$node = null;
    ss.makeGenericType(spiff.BaseView$1, [$tab_ParameterControlViewModel]).call(this, viewModel, new $tab_ParameterControlTemplate());
    this.$parameterViewModel = viewModel;
    this.$parameterViewModel.add_newParameterControl(ss.mkdel(this, this.handleNewParameterControl));
    this.$parameterViewModel.add_resized(ss.mkdel(this, this.updateSize));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$parameterViewModel.remove_newParameterControl(ss.mkdel(this, this.handleNewParameterControl));
    })));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$parameterViewModel.remove_resized(ss.mkdel(this, this.updateSize));
    })));
    if (this.$parameterViewModel.get_hasBorder()) {
      this.get_template().domRoot.addClass('tabBordered');
    }
  }, {
    get_zoneModel: function ParameterControlView$get_ZoneModel() {
      return this.$parameterViewModel.get_zoneModel();
    },
    dispose: function ParameterControlView$Dispose() {
      if (ss.isValue(this.$node)) {
        this.$node.destroyRecursiveShim(false);
        this.$node = null;
      }
      ss.makeGenericType(spiff.BaseView$1, [$tab_ParameterControlViewModel]).prototype.dispose.call(this);
    },
    onAddedToDom: function ParameterControlView$OnAddedToDom() {
      spiff.Widget.prototype.onAddedToDom.call(this);
      if (ss.isValue(this.$parameterViewModel.get_parameterCtrlModel())) {
        this.handleNewParameterControl();
      }
    },
    handleNewParameterControl: function ParameterControlView$HandleNewParameterControl() {
      if (ss.isNullOrUndefined(this.$node)) {
        this.$node = this.createParameterControl();
        this.get_template().domRoot.append(this.$node.getDomNode());
        this.$node.startupShim();
        if (ss.isValue(this.get_zoneModel().get_zoneContentBounds())) {
          tab.DomUtil.resize(this.$node, this.get_zoneModel().get_zoneContentBounds());
        }
      }
      else {
        this.updateViewProperties();
      }
      this.$node.layoutShim(null);
    },
    updateSize: function ParameterControlView$UpdateSize() {
      tab.DomUtil.resize(this.$node, this.get_zoneModel().get_zoneContentBounds());
      this.$node.layoutShim(null);
    },
    updateViewProperties: function ParameterControlView$UpdateViewProperties() {
      if (!ss.isNullOrUndefined(this.$node)) {
        var updatedProperties = this.createParameterControlProperties();
        this.$node.updatePropertiesShim(updatedProperties);
      }
    },
    createParameterControlProperties: function ParameterControlView$CreateParameterControlProperties() {
      var oProps = new Object();
      oProps.session = this.$parameterViewModel.get_layoutSession();
      var parameterCtrlModel = this.get_viewModel().get_parameterCtrlModel();
      oProps.field = parameterCtrlModel.get_parameterName();
      if (ss.isValue(this.get_zoneModel().pm) && ss.isValue(this.get_zoneModel().pm.zoneCommon.styledBox)) {
        oProps.backgroundColor = this.get_zoneModel().get_zoneCommonModel().get_contentStyle().get_fillColor();
      }
      oProps.blendedZoneContentColor = this.get_zoneModel().get_blendedZoneContentColor();
      if (ss.isValue(this.get_zoneModel().pm) && ss.isValue(this.get_zoneModel().pm.zoneTitle)) {
        oProps.titleHTML = this.$parameterViewModel.get_titleHtml();
        oProps.titleH = this.$parameterViewModel.get_titleHeight();
        oProps.titleW = this.$parameterViewModel.get_titleWidth();
      }
      if (ss.isValue(parameterCtrlModel.get_attributes())) {
        oProps.attributes = parameterCtrlModel.get_attributes();
      }
      oProps.viewModel = this.$parameterViewModel;
      return oProps;
    },
    createParameterControl: function ParameterControlView$CreateParameterControl() {
      var oProps = this.createParameterControlProperties();
      this.$node = this.makeParameterControl(oProps);
      return this.$node;
    },
    makeParameterControl: function ParameterControlView$MakeParameterControl(oProps) {
      var maker = tab.ObjectRegistry.resolve(tab.ILegacyDojoWidgetMaker).call(null, []);
      return maker.makeControlWidget(oProps);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParameterControlViewModel
  var $tab_ParameterControlViewModel = global.tab.ParameterControlViewModel = ss.mkType($asm, 'tab.ParameterControlViewModel', function(parameterCtrlModel) {
    this.$parameterCtrlModel = null;
    this.$2$NewParameterControlField = null;
    this.$2$ResizedField = null;
    spiff.BaseViewModel.call(this);
    this.$parameterCtrlModel = parameterCtrlModel;
    this.$parameterCtrlModel.add_newParameterCtrl(ss.mkdel(this, this.$handleNewParameterControl));
    this.$parameterCtrlModel.get_zoneModel().get_zoneCommonModel().add_resizeZone(ss.mkdel(this, this.$handleParentZoneResized));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$parameterCtrlModel.remove_newParameterCtrl(ss.mkdel(this, this.$handleNewParameterControl));
    })));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$parameterCtrlModel.get_zoneModel().get_zoneCommonModel().remove_resizeZone(ss.mkdel(this, this.$handleParentZoneResized));
    })));
  }, {
    add_newParameterControl: function ParameterControlViewModel$add_NewParameterControl(value) {
      this.$2$NewParameterControlField = ss.delegateCombine(this.$2$NewParameterControlField, value);
    },
    remove_newParameterControl: function ParameterControlViewModel$remove_NewParameterControl(value) {
      this.$2$NewParameterControlField = ss.delegateRemove(this.$2$NewParameterControlField, value);
    },
    add_resized: function ParameterControlViewModel$add_Resized(value) {
      this.$2$ResizedField = ss.delegateCombine(this.$2$ResizedField, value);
    },
    remove_resized: function ParameterControlViewModel$remove_Resized(value) {
      this.$2$ResizedField = ss.delegateRemove(this.$2$ResizedField, value);
    },
    get_parameterCtrlModel: function ParameterControlViewModel$get_ParameterCtrlModel() {
      return this.$parameterCtrlModel;
    },
    get_zoneModel: function ParameterControlViewModel$get_ZoneModel() {
      return this.$parameterCtrlModel.get_zoneModel();
    },
    get_layoutSession: function ParameterControlViewModel$get_LayoutSession() {
      return tab.CommandController.get().legacySession;
    },
    get_hasBorder: function ParameterControlViewModel$get_HasBorder() {
      return this.$parameterCtrlModel.get_zoneModel().get_hasBorder();
    },
    get_hasContextMenu: function ParameterControlViewModel$get_HasContextMenu() {
      return tsConfig.is_authoring && !tsConfig.is_mobile && tsConfig.current_sheet_type === 'worksheet';
    },
    get_titleHtml: function ParameterControlViewModel$get_TitleHtml() {
      return (this.get_isTitleVisible() ? this.get_zoneModel().pm.zoneTitle.html : '');
    },
    get_isTitleVisible: function ParameterControlViewModel$get_IsTitleVisible() {
      return this.get_zoneModel().get_zoneCommonModel().get_hasTitle();
    },
    get_titleWidth: function ParameterControlViewModel$get_TitleWidth() {
      var titleW = 0;
      if (this.get_isTitleVisible() && this.get_zoneModel().get_titleWidth() > 0) {
        titleW = this.get_zoneModel().pm.zoneTitle.w;
      }
      return titleW;
    },
    get_titleHeight: function ParameterControlViewModel$get_TitleHeight() {
      var titleH = 0;
      if (this.get_isTitleVisible() && this.get_zoneModel().get_titleHeight() > 0) {
        titleH = this.get_zoneModel().pm.zoneTitle.h;
        if (this.get_hasBorder()) {
          titleH += 3;
        }
        titleH = Math.max(titleH, 17);
      }
      return titleH;
    },
    showContextMenu: function ParameterControlViewModel$ShowContextMenu(options, onMenuHidden) {
      if (!this.get_hasContextMenu()) {
        return;
      }
      tab.ParameterClientCommands.getParameterControlMenu(this.get_parameterCtrlModel().get_parameterName(), ss.mkdel(this, function(response) {
        this.$showMenuFromCommandsPresModel(response.$$cmdParams['commands'], options, onMenuHidden);
      }));
    },
    $showMenuFromCommandsPresModel: function ParameterControlViewModel$ShowMenuFromCommandsPresModel(commands, options, onMenuHidden) {
      if (ss.isNullOrUndefined(commands)) {
        return;
      }
      var menuViewModel = tab.WidgetUtil.menuViewModelFromCommands(commands, function(menuItem) {
        tab.WidgetUtil.commandMenuItemClicked(menuItem);
      }, onMenuHidden, null, null);
      if (ss.isValue(menuViewModel)) {
        menuViewModel.show(options);
      }
    },
    $handleNewParameterControl: function ParameterControlViewModel$HandleNewParameterControl(presModel) {
      this.raiseActionEvent(this.$2$NewParameterControlField);
    },
    $handleParentZoneResized: function ParameterControlViewModel$HandleParentZoneResized() {
      this.raiseActionEvent(this.$2$ResizedField);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParamUIBase
  var $tab_ParamUIBase = global.tab.ParamUIBase = ss.mkType($asm, 'tab.ParamUIBase', function(parent, div, field, attrs, viewModel) {
    this.disposables = null;
    this.parameterViewModel = null;
    this.parent = null;
    this.field = null;
    this.newValInFlight = null;
    this.div = null;
    this.attributes = null;
    Object.call(this);
    this.disposables = new tab.DisposableHolder();
    this.parent = parent;
    this.div = div;
    this.field = field;
    this.attributes = attrs;
    this.parameterViewModel = viewModel;
    this.newValInFlight = null;
  }, {
    setAriaLabel: function ParamUIBase$SetAriaLabel(element) {
      if (ss.isNullOrUndefined(element)) {
        return;
      }
      if (tab.MiscUtil.isNullOrEmpty$1(this.parent.get_paramTitle())) {
        element.removeAttribute('aria-label');
      }
      else {
        element.setAttribute('aria-label', this.parent.get_paramTitle());
      }
    },
    get_legacyModel: function ParamUIBase$get_LegacyModel() {
      return this.parameterViewModel.get_parameterCtrlModel().get_parameterCtrlJsonPresModel();
    },
    get_model: function ParamUIBase$get_Model() {
      return this.parameterViewModel.get_parameterCtrlModel().get_parameterCtrlPresModel();
    },
    get_unformattedDisplayName: function ParamUIBase$get_UnformattedDisplayName() {
      if (this.parameterViewModel.get_isTitleVisible()) {
        return this.get_legacyModel().title;
      }
      return '';
    },
    instantiate: null,
    setNewState: null,
    refreshState: function ParamUIBase$RefreshState(attrs) {
      this.attributes = attrs;
      this.setNewState();
    },
    dispose: function ParamUIBase$Dispose() {
      this.disposables.dispose();
    },
    destroy: function ParamUIBase$Destroy(preserveDom) {
      this.dispose();
      this.div.innerHTML = '';
    },
    layout: function ParamUIBase$Layout(contentSize) {
      if (tsConfig.is_mobile) {
        $tab_DojoUtils.setMarginBoxWidth(this.div, contentSize.w);
        this.div.style.maxHeight = contentSize.h + 'px';
      }
      else {
        dojo.marginBox(this.div, contentSize);
      }
    },
    validateAndSetParameterValue: function ParamUIBase$ValidateAndSetParameterValue(newVal, parseWithUSLocale, dataType, fieldName, domainType, formattedValues, successCallback, errorCallback) {
      if (tab.MiscUtil.isNullOrEmpty$1(newVal) && dataType !== 'cstring') {
        errorCallback();
        return;
      }
      if (ss.referenceEquals(newVal, this.newValInFlight)) {
        return;
      }
      this.newValInFlight = newVal;
      if (domainType === 'list') {
        if (ss.contains(formattedValues, newVal)) {
          tab.ParameterServerCommands.setParameterValue$1(this.field, this.newValInFlight, parseWithUSLocale, successCallback, function(e) {
            errorCallback();
          });
          this.newValInFlight = null;
          return;
        }
      }
      var $t1 = new tab.ValidateDataValueCmd();
      $t1.cmdParams['dataType'] = dataType;
      $t1.cmdParams['globalFieldName'] = fieldName;
      $t1.cmdParams['isForInput'] = true;
      $t1.cmdParams['rawDataValueString'] = newVal;
      $t1.cmdParams['useUsLocale'] = parseWithUSLocale;
      $t1.invoke().fail(errorCallback).done(ss.mkdel(this, function(response) {
        if (response.hasCaptionedValue()) {
          tab.ParameterServerCommands.setParameterValue$1(this.field, this.newValInFlight, parseWithUSLocale, successCallback, function(e1) {
            errorCallback();
          });
        }
        else {
          errorCallback();
        }
      })).always(ss.mkdel(this, function() {
        this.newValInFlight = null;
      }));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParamUICompact
  var $tab_ParamUICompact = global.tab.ParamUICompact = ss.mkType($asm, 'tab.ParamUICompact', function(parent, div, field, attrs, parameterViewModel) {
    this.$viewModel = null;
    this.$view = null;
    $tab_ParamUIBase.call(this, parent, div, field, attrs, parameterViewModel);
    var $t1 = new spiff.ComboBoxViewModel();
    $t1.set_menuTheme(1);
    $t1.set_menuStyleClass(this.parent.domNode.id + '_menu');
    $t1.set_labelText(parent.get_paramTitle());
    this.$viewModel = $t1;
    this.$viewModel.add_selectedItemChanged(ss.mkdel(this, this.$onSelection));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$viewModel.remove_selectedItemChanged(ss.mkdel(this, this.$onSelection));
    })));
    this.$initializeMenuItemsFromDomain();
    if (ss.isValue(this.parent.get_blendedZoneContentColor())) {
      if (!tab.ColorModel.fromColorCode(this.parent.get_blendedZoneContentColor()).isLuminanceAboveThreshold(0.314999997615814)) {
        this.$viewModel.set_additionalMenuClass(spiff.UnificationClassNames.darkBackground);
      }
      var styleInfo = new $tab_FormattingStyleInfo(this.parent.get_model().textStyle, this.parent.get_blendedZoneContentColor(), this.parent.get_model().lineHeight);
      $tab_WidgetStyle.applyFormattingByClassName(this.$viewModel.get_menuStyleClass(), styleInfo, true);
    }
    this.$view = tab.ObjectRegistry.newView(spiff.ComboBoxView).call(null, [this.$viewModel]);
    if (ss.isValue(this.parent.get_model().textStyle)) {
      var element = this.$view.get_rootElement().find('.tabComboBoxButton')[0];
      element.innerHTML = $tab_LegacyFilterDropDownArrowTemplate.getDropDownForColor(this.parent.get_model().textStyle.color.toString());
    }
    this.$view.addToDom($(this.div));
    this.disposables.add$1(this.$viewModel);
    this.disposables.add$1(this.$view);
  }, {
    instantiate: function ParamUICompact$Instantiate(isUpdate) {
    },
    setNewState: function ParamUICompact$SetNewState() {
      this.$initializeMenuItemsFromDomain();
    },
    $initializeMenuItemsFromDomain: function ParamUICompact$InitializeMenuItemsFromDomain() {
      this.$viewModel.clearItems();
      var selectedItem = null;
      var items = _.map(this.get_legacyModel().domain, ss.mkdel(this, function(alias, index) {
        var item = new spiff.ComboBoxItem(null, alias, null, '', null);
        if (ss.referenceEquals(alias, this.get_legacyModel().alias)) {
          selectedItem = item;
        }
        return item;
      }));
      this.$viewModel.setItems(items);
      this.$viewModel.set_selectedItem(selectedItem);
    },
    $onSelection: function ParamUICompact$OnSelection(item) {
      if (ss.isNullOrUndefined(item) || tab.MiscUtil.isNullOrEmpty(this.get_legacyModel().domain)) {
        return;
      }
      var alias = item.get_name();
      if (ss.referenceEquals(alias, this.get_legacyModel().alias)) {
        return;
      }
      tab.ParameterServerCommands.setParameterValue(this.field, alias, null);
    },
    layout: function ParamUICompact$Layout(contentSize) {
      this.inherited(arguments);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParamUIList
  var $tab_ParamUIList = global.tab.ParamUIList = ss.mkType($asm, 'tab.ParamUIList', function(parent, div, field, attrs, parameterViewModel) {
    $tab_ParamUIBase.call(this, parent, div, field, attrs, parameterViewModel);
  }, {
    instantiate: function ParamUIList$Instantiate(isUpdate) {
      var restoreFocus = isUpdate && this.div.contains(document.activeElement);
      var getter = ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.getRadioHtml);
      var locField = this.field;
      var current = this.get_legacyModel().alias;
      var itemHTML = [];
      var aliasedDataValues = this.get_legacyModel().domain;
      var len = aliasedDataValues.length;
      for (var i = 0; i < len; i++) {
        var id = ss.formatString('{0}_{1}', locField, i.toString());
        itemHTML.push(getter(id, locField, aliasedDataValues[i], ss.referenceEquals(current, aliasedDataValues[i])));
      }
      this.div.innerHTML = itemHTML.join('');
      this.div.setAttribute('role', 'radiogroup');
      this.setAriaLabel(this.div);
      this.div.classList.add('tab-ctrl-formatted-text');
      if (!isUpdate) {
        this.disposables.add$1(spiff.EventUtil.bindWithDispose($(this.div), 'click', ss.mkdel(this, this.$onSelection)));
        this.disposables.add$1(spiff.EventUtil.bindWithDispose($(this.div), 'keydown', ss.mkdel(this, this.$handleKeyDown)));
      }
      else if (restoreFocus) {
        this.div.querySelector("[role='radio'][aria-checked='true']").focus();
      }
    },
    setNewState: function ParamUIList$SetNewState() {
      this.instantiate(true);
    },
    $handleKeyDown: function ParamUIList$HandleKeyDown(e) {
      if (e.ctrlKey || e.altKey || e.shiftKey || e.metaKey || e.target.getAttribute('role') !== 'radio') {
        return;
      }
      switch (e.which) {
        case 32: {
          e.target.querySelector('input').click();
          break;
        }
        case 40:
        case 39: {
          var nextElement = e.target.nextElementSibling;
          if (ss.isValue(nextElement) && nextElement.getAttribute('role') === 'radio') {
            nextElement.focus();
          }
          else {
            $(this.div).find("[role='radio']").first().focus();
          }
          break;
        }
        case 38:
        case 37: {
          var prevElement = e.target.previousElementSibling;
          if (ss.isValue(prevElement) && prevElement.getAttribute('role') === 'radio') {
            prevElement.focus();
          }
          else {
            $(this.div).find("[role='radio']").last().focus();
          }
          break;
        }
        default: {
          return;
        }
      }
      e.stopPropagation();
      e.preventDefault();
    },
    $onSelection: function ParamUIList$OnSelection(e) {
      var tagname = e.target.tagName.toLowerCase();
      if (tagname !== 'input') {
        return;
      }
      var target = $(e.target);
      var filterItem = target.parents('.FIItem');
      if (filterItem.length > 0) {
        var targetIndex = $tab_FilterItemUtil.filterItem.getIndex(filterItem.get(0));
        var newAlias = this.get_legacyModel().domain[targetIndex];
        tab.ParameterServerCommands.setParameterValue(this.field, newAlias, null);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParamUISlider
  var $tab_ParamUISlider = global.tab.ParamUISlider = ss.mkType($asm, 'tab.ParamUISlider', function(parent, div, field, attrs, parameterViewModel) {
    this.slider = null;
    $tab_ParamUIBase.call(this, parent, div, field, attrs, parameterViewModel);
  }, {
    get_currentDisplayValueFromModel: function ParamUISlider$get_CurrentDisplayValueFromModel() {
      return ((!this.get_$domainIsList() && this.get_$domainIsRange() && !this.get_$rangeIsContinuous() && this.get_$rangeHasDates()) ? this.formatValue(this.get_modelValueOrRangeMin()) : this.get_legacyModel().alias);
    },
    get_$domainIsList: function ParamUISlider$get_DomainIsList() {
      return ss.isValue(this.get_legacyModel().domain);
    },
    get_$domainIsRange: function ParamUISlider$get_DomainIsRange() {
      var legacyModel = this.get_legacyModel();
      return ss.isValue(legacyModel.granularity) && ss.isValue(legacyModel.min) && ss.isValue(legacyModel.max);
    },
    get_$rangeIsContinuous: function ParamUISlider$get_RangeIsContinuous() {
      return ss.referenceEquals(this.get_legacyModel().granularity.s, tableau.types.DataSpecial.DS_NULL);
    },
    get_$rangeHasDates: function ParamUISlider$get_RangeHasDates() {
      return ss.isValue(this.get_legacyModel().date_period_type);
    },
    get_$rangeMin: function ParamUISlider$get_RangeMin() {
      var $t1 = this.get_legacyModel().min.v;
      if (ss.isNullOrUndefined($t1)) {
        $t1 = ss.unbox(this.get_legacyModel().value.v);
      }
      return $t1;
    },
    get_$rangeMax: function ParamUISlider$get_RangeMax() {
      var $t1 = this.get_legacyModel().max.v;
      if (ss.isNullOrUndefined($t1)) {
        $t1 = ss.unbox(this.get_legacyModel().value.v);
      }
      return $t1;
    },
    get_modelValueOrRangeMin: function ParamUISlider$get_ModelValueOrRangeMin() {
      var $t1 = this.get_legacyModel().value.v;
      if (ss.isNullOrUndefined($t1)) {
        $t1 = this.get_$rangeMin();
      }
      return $t1;
    },
    get_$granularity: function ParamUISlider$get_Granularity() {
      return this.get_legacyModel().granularity.v;
    },
    get_$periodType: function ParamUISlider$get_PeriodType() {
      return this.get_legacyModel().date_period_type;
    },
    get_numPeriods: function ParamUISlider$get_NumPeriods() {
      return this.get_legacyModel().num_periods;
    },
    get_$sizeOfRange: function ParamUISlider$get_SizeOfRange() {
      return this.get_$rangeMax() - this.get_$rangeMin();
    },
    get_currentPercentageOfRange: function ParamUISlider$get_CurrentPercentageOfRange() {
      if (this.get_$sizeOfRange() === 0) {
        return 0;
      }
      var val = this.get_modelValueOrRangeMin();
      return (val - this.get_$rangeMin()) / this.get_$sizeOfRange() * 100;
    },
    get_sizeOfDiscreteRange: function ParamUISlider$get_SizeOfDiscreteRange() {
      return Math.round(this.get_$sizeOfRange() / this.get_$granularity()) + 1;
    },
    get_currentIndexInRange: function ParamUISlider$get_CurrentIndexInRange() {
      var val = this.get_modelValueOrRangeMin();
      return Math.round((val - this.get_$rangeMin()) / this.get_$granularity());
    },
    get_currentIndexInDateRange: function ParamUISlider$get_CurrentIndexInDateRange() {
      var val = this.get_modelValueOrRangeMin();
      return Math.round((val - this.get_$rangeMin()) / (this.get_$granularity() * this.get_$sizeOfPeriodInDays()));
    },
    get_$sizeOfPeriodInDays: function ParamUISlider$get_SizeOfPeriodInDays() {
      return $tab_ParamUISlider.$sizeOfPeriodInDays[this.get_$periodType()];
    },
    instantiate: function ParamUISlider$Instantiate(isUpdate) {
      var restoreSliderFocus = isUpdate && ss.isValue(this.slider) && this.div.contains(document.activeElement) && document.activeElement.getAttribute('role') === 'slider';
      if (ss.isValue(this.slider)) {
        this.slider.destroy();
        this.slider = null;
      }
      this.slider = new tableau.base.widget.ui.Slider(this.div, this.attributes, false, ss.mkdel(this, this.doUpdateViz), ss.mkdel(this.parent, this.parent.getTitleOffset), ss.mkdel(this, this.getCurrentText), null, null, false);
      var currentDisplayValue = this.get_currentDisplayValueFromModel();
      if (this.get_legacyModel().fake_continuous) {
        this.attributes[$tab_SliderConstants.showStepButtonsAttr] = 'false';
        this.attributes[$tab_SliderConstants.showTicksAttr] = 'false';
      }
      var iflist = ss.mkdel(this, function() {
        this.slider.instantiateFromDomain(this.get_legacyModel().domain, currentDisplayValue);
      });
      var ifcontinuous = ss.mkdel(this, function() {
        var numValues = Number.POSITIVE_INFINITY;
        var currentValue = this.get_currentPercentageOfRange();
        this.attributes[$tab_SliderConstants.showStepButtonsAttr] = 'false';
        this.slider.instantiate(numValues, currentValue, currentDisplayValue);
      });
      var ifdiscreteDate = ss.mkdel(this, function() {
        var numValues1 = this.get_numPeriods();
        var currentValue1 = this.get_currentIndexInDateRange();
        this.slider.instantiate(numValues1, currentValue1, currentDisplayValue);
      });
      var ifdiscreteOther = ss.mkdel(this, function() {
        var numValues2 = this.get_sizeOfDiscreteRange();
        var currentValue2 = this.get_currentIndexInRange();
        this.slider.instantiate(numValues2, currentValue2, currentDisplayValue);
      });
      var ifother = ss.mkdel(this, function() {
        var numValues3 = Number.POSITIVE_INFINITY;
        var DontCare = 50;
        this.attributes[$tab_SliderConstants.showStepButtonsAttr] = 'false';
        this.slider.instantiate(numValues3, DontCare, currentDisplayValue);
      });
      this.behaviorPicker(iflist, ifcontinuous, ifdiscreteDate, ifdiscreteOther, ifother);
      var sliderNode = this.div.querySelector("[role='slider']");
      if (ss.isValue(sliderNode)) {
        this.setAriaLabel(sliderNode);
        if (restoreSliderFocus) {
          sliderNode.focus();
        }
      }
    },
    behaviorPicker: function ParamUISlider$BehaviorPicker(list, continuousRange, discreteDateRange, discreteOtherRange, other) {
      if (this.get_$domainIsList()) {
        return list();
      }
      if (this.get_$domainIsRange()) {
        if (this.get_$rangeIsContinuous()) {
          return continuousRange();
        }
        if (this.get_$rangeHasDates()) {
          return discreteDateRange();
        }
        return discreteOtherRange();
      }
      return other();
    },
    setNewState: function ParamUISlider$SetNewState() {
      this.updateView();
    },
    updateView: function ParamUISlider$UpdateView() {
      this.instantiate(true);
      this.slider.layout();
    },
    currentlySelectedTupleInDomainList: function ParamUISlider$CurrentlySelectedTupleInDomainList() {
      var current = this.get_legacyModel().alias;
      var len = this.get_legacyModel().domain.length;
      for (var i = 0; i < len; i++) {
        if (ss.referenceEquals(this.get_legacyModel().domain[i], current)) {
          return { item1: current, item2: i };
        }
      }
      return null;
    },
    doUpdateViz: function ParamUISlider$DoUpdateViz(indexVal) {
      var iflist = ss.mkdel(this, function() {
        return { item1: this.get_legacyModel().domain[indexVal], item2: null };
      });
      var ifcontinuous = ss.mkdel(this, function() {
        return { item1: null, item2: this.$makeDataValue(this.$valueFromPercent(indexVal)) };
      });
      var ifdiscreteDate = ss.mkdel(this, function() {
        return { item1: null, item2: this.$makeDataValue(this.$valueFromDateIndex(indexVal)) };
      });
      var ifdiscreteOther = ss.mkdel(this, function() {
        return { item1: null, item2: this.$makeDataValue(this.$valueFromIndex(indexVal)) };
      });
      var ifother = ss.mkdel(this, function() {
        return { item1: null, item2: this.$makeDataValue(this.get_modelValueOrRangeMin()) };
      });
      var result = this.behaviorPicker(iflist, ifcontinuous, ifdiscreteDate, ifdiscreteOther, ifother);
      if (ss.isNullOrUndefined(result)) {
        return;
      }
      var stringValue = null;
      if (ss.isValue(result.item1)) {
        stringValue = result.item1;
      }
      else if (ss.isValue(result.item2)) {
        var formattingInfo = null;
        if (result.item2.t === 't') {
          formattingInfo = { format: 'M/d/yyyy', timeFormat: 'h:mm:ss tt' };
        }
        stringValue = tableau.format.formatDataValue(result.item2, null, formattingInfo, null, 2);
      }
      tab.ParameterServerCommands.setParameterValue(this.field, stringValue, true);
    },
    layout: function ParamUISlider$Layout(contentSize) {
      this.inherited(arguments);
      if (ss.isValue(this.slider) && typeof(this.slider['layout']) === 'function') {
        this.slider.layout();
      }
    },
    getCurrentText: function ParamUISlider$GetCurrentText(indexVal) {
      if (ss.referenceEquals(this.get_legacyModel().max, this.get_legacyModel().min)) {
        return this.get_currentDisplayValueFromModel();
      }
      var iflist = ss.mkdel(this, function() {
        return this.get_legacyModel().domain[indexVal];
      });
      var ifcontinuous = ss.mkdel(this, function() {
        return this.formatValue(this.$valueFromPercent(indexVal));
      });
      var ifdiscreteDate = ss.mkdel(this, function() {
        return this.formatValue(this.$valueFromDateIndex(indexVal));
      });
      var ifdiscreteOther = ss.mkdel(this, function() {
        return this.formatValue(this.$valueFromIndex(indexVal));
      });
      var ifother = function() {
        return '';
      };
      var result = this.behaviorPicker(iflist, ifcontinuous, ifdiscreteDate, ifdiscreteOther, ifother);
      return ss.coalesce(result, '');
    },
    $valueFromPercent: function ParamUISlider$ValueFromPercent(val) {
      if (this.get_$sizeOfRange() === 0) {
        return this.get_$rangeMin();
      }
      return val / 100 * this.get_$sizeOfRange() + this.get_$rangeMin();
    },
    $valueFromIndex: function ParamUISlider$ValueFromIndex(index) {
      return index * this.get_$granularity() + this.get_$rangeMin();
    },
    $valueFromDateIndex: function ParamUISlider$ValueFromDateIndex(val) {
      val = val * this.get_$granularity();
      var d = tab.DateUtil.adjustDateByPeriodInUTC(new Date(tableau.types.JsDateFromOleDate(this.get_$rangeMin())), this.get_$periodType(), val);
      return Math.min(tableau.types.OleDateFromJsDate(d.getTime()), this.get_$rangeMax());
    },
    formatValue: function ParamUISlider$FormatValue(val) {
      var format = this.get_legacyModel().date_format || this.get_legacyModel().format;
      return tableau.format.formatDataValue(this.$makeDataValue(val), null, format, null, 2);
    },
    $makeDataValue: function ParamUISlider$MakeDataValue(val) {
      return { t: (ss.isValue(this.get_legacyModel().min.v) ? this.get_legacyModel().min.t : this.get_legacyModel().value.t), v: val.toString(), s: null };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParamUITypeIn
  var $tab_ParamUITypeIn = global.tab.ParamUITypeIn = ss.mkType($asm, 'tab.ParamUITypeIn', function(parent, div, field, attrs, parameterViewModel) {
    this.widget = null;
    $tab_ParamUIBase.call(this, parent, div, field, attrs, parameterViewModel);
  }, {
    getWidgetClass: function ParamUITypeIn$GetWidgetClass() {
      return tableau.base.widget.ui.TypeIn;
    },
    instantiate: function ParamUITypeIn$Instantiate(isUpdate) {
      var widgetClass = this.getWidgetClass();
      this.widget = new widgetClass(this.div, ss.mkdel(this, this.$doChange), 'TypeIn');
      this.widget.instantiate(this.get_legacyModel().alias, this.field, this.get_legacyModel().value, this.get_legacyModel().min, this.get_legacyModel().max, this.get_legacyModel().format, this.get_legacyModel().date_format, this.get_legacyModel().editing_format, this.get_model().firstDayOfWeek);
      if (this.get_legacyModel().is_list_domain) {
        this.widget.$initializeAutocomplete(this.get_legacyModel().domain, ss.mkdel(this.parent.session, this.parent.session.getAutocompleteInfo));
      }
      if (tab.FeatureFlags.isEnabled('AccessibilityTypeInFilters')) {
        this.setAriaLabel(this.widget.queryBox);
      }
    },
    setNewState: function ParamUITypeIn$SetNewState() {
      this.widget.setNewState(this.get_legacyModel().alias, this.get_legacyModel().domain, this.get_legacyModel().value, this.get_legacyModel().min, this.get_legacyModel().max);
    },
    layout: function ParamUITypeIn$Layout(contentSize) {
      this.inherited(arguments);
      this.widget.layout();
    },
    $doChange: function ParamUITypeIn$DoChange(newVal) {
      this.validateAndSetParameterValue(newVal, $tab_ParamUITypeIn.$parseWithUSLocale, this.get_model().dataType, this.get_model().parameterName, this.get_model().parameterDomainType, this.get_model().formattedValues, ss.mkdel(this, this.$successCallback), ss.mkdel(this, this.$errorCallback));
    },
    $errorCallback: function ParamUITypeIn$ErrorCallback() {
      this.widget.queryBox.value = this.get_legacyModel().alias;
      this.setNewState();
    },
    $successCallback: function ParamUITypeIn$SuccessCallback(data) {
      _.defer(ss.mkdel(this, this.setNewState));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ParamUITypeInDateField
  var $tab_ParamUITypeInDateField = global.tab.ParamUITypeInDateField = ss.mkType($asm, 'tab.ParamUITypeInDateField', function(parent, div, field, attrs, parameterViewModel) {
    $tab_ParamUITypeIn.call(this, parent, div, field, attrs, parameterViewModel);
  }, {
    getWidgetClass: function ParamUITypeInDateField$GetWidgetClass() {
      return tableau.base.widget.ui.TypeInDateField;
    },
    instantiate: function ParamUITypeInDateField$Instantiate(isUpdate) {
      $tab_ParamUITypeIn.prototype.instantiate.call(this, isUpdate);
      var typeInDateField = this.widget;
      typeInDateField.set_customCalendarDateSelectionAction(ss.mkdel(this, function(date) {
        var originalDate = ss.toUTC(new Date(tableau.types.JsDateFromOleDate(ss.unbox(this.get_legacyModel().value.v))));
        var UtcDate = ss.toUTC(date);
        UtcDate.setHours(originalDate.getHours());
        UtcDate.setMinutes(originalDate.getMinutes());
        UtcDate.setSeconds(originalDate.getSeconds());
        return ss.fromUTC(UtcDate);
      }));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.Pattern
  var $tab_Pattern = global.tab.Pattern = ss.mkType($asm, 'tab.Pattern', function(parent, div, attrs) {
    this.widget = null;
    $tab_BaseMode.call(this, parent, div, attrs);
  }, {
    instantiate: function Pattern$Instantiate(newTuples, itemName, facet) {
      var pattern = ss.cast(arguments[0], String);
      this.widget = new tableau.base.widget.ui.TypeIn(this.div, ss.mkdel(this, this.doChange), 'Pattern');
      this.widget.instantiate(pattern, itemName);
      if (tab.FeatureFlags.isEnabled('AccessibilityTypeInFilters')) {
        this.$setAccessibilityAttribute();
      }
    },
    destroy: function Pattern$Destroy() {
      this.widget.destroy();
    },
    resetContent: function Pattern$ResetContent(tuples, itemName, facet) {
      this.widget.destroy();
      this.instantiate(tuples, itemName, facet);
    },
    layout: function Pattern$Layout(contentSize, horizontalLayout) {
      this.inherited(arguments);
      this.widget.layout();
    },
    doChange: function Pattern$DoChange(newPattern) {
      this.parent.set_stateId(this.parent.get_stateId() + 1);
      tab.FilterClientCommands.setPatternFilterState(this.parent.get_session().get_visualId(), this.parent.get_identifier(), newPattern.toString());
      this.parent.get_oFilter().pattern = newPattern;
    },
    $setAccessibilityAttribute: function Pattern$SetAccessibilityAttribute() {
      if (tab.MiscUtil.isNullOrEmpty$1(this.parent.get_titleDomId())) {
        $(this.widget.queryBox).removeAttr('aria-labelledby');
      }
      else {
        $(this.widget.queryBox).attr('aria-labelledby', this.parent.get_titleDomId());
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.PendingChangesManager
  var $tab_PendingChangesManager = global.tab.PendingChangesManager = ss.mkType($asm, 'tab.PendingChangesManager', function(parent, domainActualSize, exclusive, isAll) {
    this.domainActualSize = 0;
    this.$exclusive = false;
    this.$allMode = false;
    this.$pendingChangelist = null;
    this.$useRangePendingIndexes = false;
    this.$rangePendingState = false;
    this.$individualPendingIndexes = null;
    this.$allItemCheckState = null;
    this.parent = null;
    this.$1$OnPendingChangesField = null;
    this.$1$OnNoPendingChangesField = null;
    this.parent = parent;
    this.domainActualSize = domainActualSize;
    this.$exclusive = exclusive;
    this.$allMode = isAll;
    this.resetPendingChanges();
  }, {
    add_onPendingChanges: function PendingChangesManager$add_OnPendingChanges(value) {
      this.$1$OnPendingChangesField = ss.delegateCombine(this.$1$OnPendingChangesField, value);
    },
    remove_onPendingChanges: function PendingChangesManager$remove_OnPendingChanges(value) {
      this.$1$OnPendingChangesField = ss.delegateRemove(this.$1$OnPendingChangesField, value);
    },
    add_onNoPendingChanges: function PendingChangesManager$add_OnNoPendingChanges(value) {
      this.$1$OnNoPendingChangesField = ss.delegateCombine(this.$1$OnNoPendingChangesField, value);
    },
    remove_onNoPendingChanges: function PendingChangesManager$remove_OnNoPendingChanges(value) {
      this.$1$OnNoPendingChangesField = ss.delegateRemove(this.$1$OnNoPendingChangesField, value);
    },
    get_allItemCheckState: function PendingChangesManager$get_AllItemCheckState() {
      return this.$allItemCheckState;
    },
    set_allItemCheckState: function PendingChangesManager$set_AllItemCheckState(value) {
      this.$allItemCheckState = value;
    },
    get_pendingChangelist: function PendingChangesManager$get_PendingChangelist() {
      return this.$pendingChangelist;
    },
    set_pendingChangelist: function PendingChangesManager$set_PendingChangelist(value) {
      this.$pendingChangelist = value;
    },
    resetFilterInfo: function PendingChangesManager$ResetFilterInfo(domainSize, exclude, isAll) {
      this.domainActualSize = domainSize;
      this.$exclusive = exclude;
      this.$allMode = isAll;
    },
    resetPendingChanges: function PendingChangesManager$ResetPendingChanges() {
      this.$pendingChangelist = new $tab_Changelist();
      this.$individualPendingIndexes = [];
      this.$useRangePendingIndexes = false;
      this.$rangePendingState = false;
      this.$allItemCheckState = null;
      this.$raiseOnNoPendingChanges();
    },
    processChanges: function PendingChangesManager$ProcessChanges(changelist) {
      this.get_pendingChangelist().appendChangelist(changelist);
      this.$raiseEvents();
    },
    processAll: function PendingChangesManager$ProcessAll(select) {
      this.$individualPendingIndexes = [];
      this.$useRangePendingIndexes = true;
      this.$rangePendingState = (this.$exclusive ? !select : select);
      this.$pendingChangelist = new $tab_Changelist();
      var change = new $tab_RawChange();
      change.setRange(new tab.IntegerRange(0, this.domainActualSize), this.$rangePendingState);
      this.get_pendingChangelist().addChange(change);
      this.$raiseEvents();
    },
    isSelectAll: function PendingChangesManager$IsSelectAll() {
      return this.$useRangePendingIndexes && this.$individualPendingIndexes.length === 0 && (this.$exclusive ? !this.$rangePendingState : this.$rangePendingState);
    },
    isDeSelectAll: function PendingChangesManager$IsDeSelectAll() {
      return this.$useRangePendingIndexes && this.$individualPendingIndexes.length === 0 && (this.$exclusive ? this.$rangePendingState : !this.$rangePendingState);
    },
    handleAllItemClicked: function PendingChangesManager$HandleAllItemClicked(isChecked) {
      var selectAll = (this.$exclusive ? !isChecked : isChecked);
      this.set_allItemCheckState(isChecked);
      var i = 0;
      while (this.hasItemAtIndex(i)) {
        if (selectAll) {
          if (!this.isChecked(i)) {
            this.togglePendingCss(i);
          }
          this.setChecked(i, true);
        }
        else {
          if (this.isChecked(i)) {
            this.togglePendingCss(i);
          }
          this.setChecked(i, false);
        }
        i++;
      }
      this.$useRangePendingIndexes = true;
      this.$rangePendingState = selectAll;
      this.$individualPendingIndexes = [];
    },
    handleItemClicked: function PendingChangesManager$HandleItemClicked(index, node) {
      if (index === -1) {
        this.handleAllItemClicked(this.isChecked(index));
        return;
      }
      if (!this.isChecked(index, node)) {
        if (this.parent.shouldUseAllItem()) {
          this.set_allItemCheckState(false);
          if (this.hasAllItem()) {
            this.setAllItemChecked(false);
            if (this.$exclusive) {
              var allNotChecked = true;
              var i = 0;
              while (allNotChecked && this.hasItemAtIndex(i)) {
                if (this.isChecked(i)) {
                  allNotChecked = false;
                }
                i++;
              }
              this.setAllItemChecked(allNotChecked);
            }
          }
        }
      }
      else if (this.hasAllItem()) {
        var allChecked = true;
        var i1 = 0;
        while (allChecked && this.hasItemAtIndex(i1)) {
          if (!this.isChecked(i1)) {
            allChecked = false;
          }
          i1++;
        }
        this.setAllItemChecked(allChecked);
      }
      this.togglePendingCss(index, node);
      this.$toggleIndexPendingState(index);
    },
    hasAllItem: function PendingChangesManager$HasAllItem() {
      var all = this.parent.fetchAllItem();
      return ss.isValue(all) && $tab_FilterItemUtil.filterItem.isAllItem(all);
    },
    hasItemAtIndex: function PendingChangesManager$HasItemAtIndex(index) {
      return index < this.domainActualSize && ss.isValue(this.parent.fetchChildNodeByIndex(index));
    },
    setAllItemChecked: function PendingChangesManager$SetAllItemChecked(isChecked) {
      var all = this.parent.fetchAllItem();
      if (ss.isValue(all)) {
        $tab_FilterItemUtil.filterItem.setChecked(all, isChecked);
        this.set_allItemCheckState(isChecked);
      }
    },
    togglePendingCss: function PendingChangesManager$TogglePendingCss(index, node) {
      var item = (ss.isValue(node) ? node : this.parent.fetchChildNodeByIndex(index));
      if (ss.isValue(item)) {
        $tab_FilterItemUtil.filterItem.togglePendingState(item);
      }
    },
    setChecked: function PendingChangesManager$SetChecked(index, isChecked) {
      var item = this.parent.fetchChildNodeByIndex(index);
      if (ss.isValue(item)) {
        $tab_FilterItemUtil.filterItem.setChecked(item, isChecked);
      }
    },
    isChecked: function PendingChangesManager$IsChecked(index, node) {
      var item;
      if (index === -1) {
        item = this.parent.fetchAllItem();
      }
      else {
        item = (ss.isValue(node) ? node : this.parent.fetchChildNodeByIndex(index));
      }
      return $tab_FilterItemUtil.filterItem.isChecked(item);
    },
    isPending: function PendingChangesManager$IsPending(t, index) {
      if (this.$useRangePendingIndexes) {
        var originalCheckState = ((this.$allMode && !this.$exclusive) ? true : t.s);
        if (ss.contains(this.$individualPendingIndexes, index)) {
          return originalCheckState === this.$rangePendingState;
        }
        else {
          return originalCheckState !== this.$rangePendingState;
        }
      }
      else {
        return ss.contains(this.$individualPendingIndexes, index);
      }
    },
    $raiseEvents: function PendingChangesManager$RaiseEvents() {
      if (this.$useRangePendingIndexes || this.$individualPendingIndexes.length > 0) {
        this.$raiseOnPendingChanges();
      }
      else {
        this.$raiseOnNoPendingChanges();
      }
    },
    $raiseOnPendingChanges: function PendingChangesManager$RaiseOnPendingChanges() {
      if (ss.isValue(this.$1$OnPendingChangesField)) {
        this.$1$OnPendingChangesField();
      }
    },
    $raiseOnNoPendingChanges: function PendingChangesManager$RaiseOnNoPendingChanges() {
      if (ss.isValue(this.$1$OnNoPendingChangesField)) {
        this.$1$OnNoPendingChangesField();
      }
    },
    $toggleIndexPendingState: function PendingChangesManager$ToggleIndexPendingState(index) {
      if (ss.contains(this.$individualPendingIndexes, index)) {
        ss.remove(this.$individualPendingIndexes, index);
      }
      else {
        this.$individualPendingIndexes.push(index);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.QfButtonUtil
  var $tab_QfButtonUtil = global.tab.QfButtonUtil = ss.mkType($asm, 'tab.QfButtonUtil', null, null, {
    focusQfButton: function QfButtonUtil$FocusQfButton(button) {
      $(button.domNode).find('button').first().focus();
    },
    enableResetButton: function QfButtonUtil$EnableResetButton(button, isSetControl) {
      if (ss.isNullOrUndefined(button)) {
        return;
      }
      var iconEl = $(button.iconNode);
      if (isSetControl) {
        iconEl.removeClass('wcIconNonfiltered');
        iconEl.removeClass('wcIconFiltered');
        iconEl.removeClass('wcIconSetAllIncluded');
        iconEl.removeClass('wcIconSetPartiallyIncluded');
        iconEl.addClass('wcIconSetPartiallyIncluded');
        button.attr('label', tab.Strings.SetControlIncludeAllEnabled);
      }
      else {
        iconEl.removeClass('wcIconNonfiltered');
        iconEl.removeClass('wcIconFiltered');
        iconEl.removeClass('wcIconSetAllIncluded');
        iconEl.removeClass('wcIconSetPartiallyIncluded');
        iconEl.addClass('wcIconFiltered');
        button.attr('label', tab.Strings.QuickFilterClearEnabled);
      }
      button.setDisabled(false);
      $(ss.cast(button.domNode.firstChild.firstChild, HTMLElement)).removeClass('tab-quickFilterButtonDisabled');
    },
    disableResetButton: function QfButtonUtil$DisableResetButton(button, isSetControl) {
      if (ss.isNullOrUndefined(button)) {
        return;
      }
      var iconEl = $(button.iconNode);
      if (isSetControl) {
        iconEl.removeClass('wcIconNonfiltered');
        iconEl.removeClass('wcIconFiltered');
        iconEl.removeClass('wcIconSetAllIncluded');
        iconEl.removeClass('wcIconSetPartiallyIncluded');
        iconEl.addClass('wcIconSetAllIncluded');
        button.attr('label', tab.Strings.SetControlIncludeAllDisabled);
      }
      else {
        iconEl.removeClass('wcIconNonfiltered');
        iconEl.removeClass('wcIconFiltered');
        iconEl.removeClass('wcIconSetAllIncluded');
        iconEl.removeClass('wcIconSetPartiallyIncluded');
        iconEl.addClass('wcIconNonfiltered');
        button.attr('label', tab.Strings.QuickFilterClearDisabled);
      }
      button.setDisabled(true);
      iconEl.removeClass('dijitButtonHover');
      iconEl.removeClass('dijitHover');
      $(ss.cast(button.domNode.firstChild.firstChild, HTMLElement)).addClass('tab-quickFilterButtonDisabled');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.QuantitativeColorLegendTemplate
  var $tab_QuantitativeColorLegendTemplate = global.tab.QuantitativeColorLegendTemplate = ss.mkType($asm, 'tab.QuantitativeColorLegendTemplate', function() {
    this.panel = null;
    this.contextMenuButton = null;
    this.ramp = null;
    this.centerMark = null;
    this.minLabel = null;
    this.maxLabel = null;
    $tab_LegendTemplate.call(this, $($tab_QuantitativeColorLegendTemplate.$htmlTemplate));
    this.panel = this.domRoot;
    this.titleControls = this.getElementBySelector('.tabLegendTitleControls');
    this.contextMenuButton = this.getElementBySelector('.tabLegendContextMenuButton');
    this.ramp = this.getElementBySelector('.tabLegendRamp');
    this.centerMark = this.getElementBySelector('.tabLegendCenterMark');
    this.minLabel = this.getElementBySelector('.tabLegendMinLabel');
    this.maxLabel = this.getElementBySelector('.tabLegendMaxLabel');
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.QuantitativeColorLegendView
  var $tab_QuantitativeColorLegendView = global.tab.QuantitativeColorLegendView = ss.mkType($asm, 'tab.QuantitativeColorLegendView', function(viewModel) {
    ss.makeGenericType($tab_BaseLegendView$1, [$tab_QuantitativeColorLegendViewModel]).call(this, viewModel, new $tab_QuantitativeColorLegendTemplate());
    this.get_$quantColorLegendTemplate().contextMenuButton.hide();
    if (this.get_$quantColorLegendViewModel().get_shouldShowContextMenu()) {
      this.disposables.add$1(new spiff.HoverBehavior(this, null, ss.mkdel(this, this.$handleItemEnter), ss.mkdel(this, this.$handleItemExit)));
      var contextMenuButton = new spiff.Button(this.get_$quantColorLegendTemplate().contextMenuButton);
      if (!tab.FeatureFlags.isEnabled('MttwLegendTitles')) {
        contextMenuButton.set_hoverTooltipText(tab.Strings.TabAuthColorEditLegendButtonTooltip);
      }
      contextMenuButton.add_click(ss.mkdel(this, this.showContextMenu));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        contextMenuButton.remove_click(ss.mkdel(this, this.showContextMenu));
        tab.MiscUtil.dispose$1(contextMenuButton);
      })));
    }
  }, {
    get_$quantColorLegendViewModel: function QuantitativeColorLegendView$get_QuantColorLegendViewModel() {
      return this.get_viewModel();
    },
    get_$legendPresModel: function QuantitativeColorLegendView$get_LegendPresModel() {
      return this.get_$quantColorLegendViewModel().get_quantColorLegendPresModel();
    },
    get_$quantColorLegendTemplate: function QuantitativeColorLegendView$get_QuantColorLegendTemplate() {
      return ss.cast(this.get_template(), $tab_QuantitativeColorLegendTemplate);
    },
    onAddedToDom: function QuantitativeColorLegendView$OnAddedToDom() {
      ss.makeGenericType($tab_BaseLegendView$1, [$tab_QuantitativeColorLegendViewModel]).prototype.onAddedToDom.call(this);
      this.$drawLegend();
    },
    onViewModelPropertyChanged: function QuantitativeColorLegendView$OnViewModelPropertyChanged(sender, e) {
      switch (e.get_propertyName()) {
        case 'isActiveZone':
        case 'isReadyZone': {
          break;
        }
        case 'ParentZoneSizeChanged': {
          var parentZoneSize = this.get_$quantColorLegendViewModel().get_$parentZoneSize();
          if (parentZoneSize.w === tab.DoubleUtil.roundToInt(this.get_$quantColorLegendTemplate().panel.width()) && parentZoneSize.h === tab.DoubleUtil.roundToInt(this.get_$quantColorLegendTemplate().panel.height())) {
          }
          else {
            this.$resetLegend();
          }
          break;
        }
        case null:
        case 'titleVisible':
        case 'ModelChanged': {
          this.$resetLegend();
          break;
        }
        default: {
          ss.Debug.assert(false, 'QuantitativeColorLegendView.OnViewModelPropertyChanged will force legend redraw as such property name is unknown: ' + e.get_propertyName());
          this.$resetLegend();
          break;
        }
      }
    },
    showContextMenu: function QuantitativeColorLegendView$ShowContextMenu() {
      if (tab.FeatureFlags.isEnabled('MttwLegendTitles')) {
        this.get_$quantColorLegendViewModel().$showContextMenu(new spiff.ShowMenuOptions(this.get_$quantColorLegendTemplate().contextMenuButton.parent(), false));
      }
      else {
        this.get_$quantColorLegendViewModel().showWebQuantitativeColorDialog();
      }
    },
    $handleItemEnter: function QuantitativeColorLegendView$HandleItemEnter(e) {
      this.get_$quantColorLegendTemplate().panel.addClass(spiff.UnificationClassNames.hover);
      this.get_$quantColorLegendTemplate().contextMenuButton.toggle(true);
    },
    $handleItemExit: function QuantitativeColorLegendView$HandleItemExit(e) {
      this.get_$quantColorLegendTemplate().panel.removeClass(spiff.UnificationClassNames.hover);
      this.get_$quantColorLegendTemplate().contextMenuButton.toggle(false);
    },
    $resetLegend: function QuantitativeColorLegendView$ResetLegend() {
      this.$drawLegend();
    },
    $drawLegend: function QuantitativeColorLegendView$DrawLegend() {
      this.drawTitle();
      this.$setPanelSizeAndId();
      this.$renderContents();
    },
    drawTitle: function QuantitativeColorLegendView$DrawTitle() {
      ss.makeGenericType($tab_BaseLegendView$1, [$tab_QuantitativeColorLegendViewModel]).prototype.drawTitle.call(this);
      if (!this.get_legendViewModel().get_titleInline()) {
        this.get_$quantColorLegendTemplate().titleArea.width(this.get_$quantColorLegendViewModel().get_$parentZoneSize().w);
      }
    },
    $setPanelSizeAndId: function QuantitativeColorLegendView$SetPanelSizeAndId() {
      this.get_$quantColorLegendTemplate().panel.get(0).id = this.$makeHtmlId();
      var panelHeight = this.get_$quantColorLegendViewModel().get_$parentZoneSize().h;
      var panelWidth = this.get_$quantColorLegendViewModel().get_$parentZoneSize().w;
      $tab_QuantitativeColorLegendView.setDomNodeStyleSize(this.get_$quantColorLegendTemplate().panel, panelWidth, panelHeight);
    },
    $makeHtmlId: function QuantitativeColorLegendView$MakeHtmlId() {
      return $tab_QuantitativeColorLegendView.$htmlIdBase + encodeURIComponent(this.get_$quantColorLegendViewModel().get_$vizName());
    },
    $renderContents: function QuantitativeColorLegendView$RenderContents() {
      var layout = this.get_$legendPresModel().quantitativeLegendLayout;
      var rectRamp = $.extend(true, new Object(), layout.rectRamp);
      var ramp = this.get_$quantColorLegendTemplate().ramp;
      var $t1 = ramp.get(0);
      var canvas = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'CANVAS'));
      var transparentRamp = this.get_$legendPresModel().colorTransparencyValue !== 255;
      var context = tab.CanvasRenderer.getRenderContext(canvas, (transparentRamp ? 'transparent' : 'opaque'));
      var labelsAreInline = layout.rectMinLabel.x + layout.rectMinLabel.w < rectRamp.x;
      this.$renderLabelsAndAdjustRampRectForOverflow(context, labelsAreInline, rectRamp);
      this.$renderRamp(ramp, rectRamp, canvas, context, labelsAreInline);
    },
    $renderLabelsAndAdjustRampRectForOverflow: function QuantitativeColorLegendView$RenderLabelsAndAdjustRampRectForOverflow(context, labelsAreInline, rectRamp) {
      context.save();
      tab.DisplayList2DRenderer.setTextProperties(context, this.get_$legendPresModel().labelTextStyle, 0);
      {
        this.$setMinLabelCssFromPresModel(this.get_$quantColorLegendTemplate().minLabel);
        if (labelsAreInline) {
          this.$adjustRampRectForMinLabelOverflow(context, rectRamp);
        }
      }
      var maxLabel = this.get_$quantColorLegendTemplate().maxLabel;
      if (this.get_$legendPresModel().quantitativeLegendLayout.isSingleLabel) {
        maxLabel.css('visibility', 'hidden');
      }
      else {
        maxLabel.css('visibility', '');
        this.$setMaxLabelCssFromPresModel(maxLabel);
        if (labelsAreInline) {
          this.$adjustRampAndMaxLabelForOverflow(context, rectRamp, maxLabel);
        }
      }
      context.restore();
    },
    $renderRamp: function QuantitativeColorLegendView$RenderRamp(ramp, rectRamp, canvas, context, labelsAreInline) {
      var borderSize = this.get_$legendPresModel().rampBorderStyledBox.uw * 2;
      var effectiveWidth = rectRamp.w - borderSize + 1;
      var effectiveHeight = rectRamp.h - borderSize + 1;
      ramp.css({ left: rectRamp.x + 'px', top: rectRamp.y + 'px', width: effectiveWidth + 'px', height: effectiveHeight + 'px' });
      {
        var effectiveSize = { w: effectiveWidth, h: effectiveHeight };
        tab.CanvasUtil.sizeCanvasWithHighDPISupport(canvas, context, effectiveSize);
        context.save();
        var colors = this.get_$quantColorLegendViewModel().get_rampColorSamplesAsColorModels();
        var colorCount = colors.length;
        if (this.get_$legendPresModel().isColorStepped) {
          var currentStartStep = 0;
          var widthIncrement = Math.round(effectiveWidth / colorCount);
          for (var ii = 0; ii < colorCount - 1; ++ii) {
            context.set_shapeFillStyle(colors[ii]);
            context.fillRect(currentStartStep, 0, widthIncrement + 1, effectiveHeight);
            currentStartStep += widthIncrement;
          }
          var remainingWidth = effectiveWidth - currentStartStep;
          context.set_shapeFillStyle(colors[colorCount - 1]);
          context.fillRect(currentStartStep, 0, remainingWidth, effectiveHeight);
        }
        else {
          var positions = this.get_$quantColorLegendViewModel().get_rampColorPositions();
          var gradient = context.createLinearGradient(0, 0, effectiveWidth, 0);
          for (var ii1 = 0; ii1 < colorCount; ++ii1) {
            var colorStop = tab.DoubleUtil.parseDouble(positions[ii1]);
            if (ss.isValue(colorStop)) {
              gradient.addColorStop(ss.unbox(colorStop), colors[ii1]);
            }
          }
          context.set_shapeFillStyle(gradient);
          context.fillRect(0, 0, effectiveWidth, effectiveHeight);
        }
        context.restore();
      }
      {
        var rampBorderStyle = tab.FormattingConverters.makeBorderStyleDict(this.get_$legendPresModel().rampBorderStyledBox);
        ramp.css(rampBorderStyle);
      }
      if (this.get_$legendPresModel().isColorDiverging) {
        var centerMarkVisibility = 'visible';
        centerMarkVisibility = '';
        var left = this.get_$legendPresModel().quantitativeLegendLayout.centerMarkLineBegin.x;
        var top = this.get_$legendPresModel().quantitativeLegendLayout.centerMarkLineBegin.y;
        var bottom = this.get_$legendPresModel().quantitativeLegendLayout.centerMarkLineEnd.y;
        var height = bottom - top;
        if (labelsAreInline && rectRamp.w !== this.get_$legendPresModel().quantitativeLegendLayout.rectRamp.w) {
          var origRampRect = this.get_$legendPresModel().quantitativeLegendLayout.rectRamp;
          var leftAsRatio = (left - origRampRect.x) / origRampRect.w;
          left = rectRamp.x + Math.ceil(leftAsRatio * rectRamp.w);
        }
        this.get_$quantColorLegendTemplate().centerMark.css({ left: left + 'px', top: top + 'px', width: 1 + 'px', height: height + 'px', 'background-color': 'black', visibility: centerMarkVisibility });
      }
      else {
        this.get_$quantColorLegendTemplate().centerMark.css('visibility', 'hidden');
      }
    },
    $setMaxLabelCssFromPresModel: function QuantitativeColorLegendView$SetMaxLabelCssFromPresModel(maxLabel) {
      var layout = this.get_$legendPresModel().quantitativeLegendLayout;
      var label = layout.rectMaxLabel;
      maxLabel.css({ left: label.x + 'px', top: label.y + 'px', width: label.w + 'px', height: label.h + 'px', 'line-height': label.h + 'px', 'text-align': 'right' });
      var textStyle = this.get_$legendPresModel().labelTextStyle;
      maxLabel.css(tab.FormattingConverters.makeFormatStyleDict(textStyle, null));
      maxLabel.text(this.get_$legendPresModel().maxLabel);
    },
    $adjustRampAndMaxLabelForOverflow: function QuantitativeColorLegendView$AdjustRampAndMaxLabelForOverflow(context, rectRamp, maxLabel) {
      var labelOverflow = Math.max(0, Math.round(context.measureText(this.get_$legendPresModel().maxLabel).width) - this.get_$legendPresModel().quantitativeLegendLayout.rectMaxLabel.w);
      labelOverflow += this.get_$quantColorLegendViewModel().get_borderWidth() * 2;
      labelOverflow = this.$calculateLabelAdjustment(labelOverflow, rectRamp.w);
      if (labelOverflow > 0) {
        maxLabel.css('left', this.get_$legendPresModel().quantitativeLegendLayout.rectMaxLabel.x - labelOverflow + 'px');
        rectRamp.w -= labelOverflow;
      }
    },
    $setMinLabelCssFromPresModel: function QuantitativeColorLegendView$SetMinLabelCssFromPresModel(minLabel) {
      var layout = this.get_$legendPresModel().quantitativeLegendLayout;
      var label = layout.rectMinLabel;
      minLabel.css({ left: label.x + 'px', top: label.y + 'px', width: label.w + 'px', height: label.h + 'px', 'line-height': label.h + 'px', 'text-align': (layout.isSingleLabel ? 'center' : 'left') });
      var textStyle = this.get_$legendPresModel().labelTextStyle;
      minLabel.css(tab.FormattingConverters.makeFormatStyleDict(textStyle, null));
      minLabel.text(this.get_$legendPresModel().minLabel);
    },
    $adjustRampRectForMinLabelOverflow: function QuantitativeColorLegendView$AdjustRampRectForMinLabelOverflow(context, rectRamp) {
      var labelOverflow = Math.round(context.measureText(this.get_$legendPresModel().minLabel).width) - this.get_$legendPresModel().quantitativeLegendLayout.rectMinLabel.w;
      labelOverflow = this.$calculateLabelAdjustment(labelOverflow, rectRamp.w);
      if (labelOverflow > 0) {
        rectRamp.x += labelOverflow;
        rectRamp.w -= labelOverflow;
      }
    },
    $calculateLabelAdjustment: function QuantitativeColorLegendView$CalculateLabelAdjustment(labelOverflow, rampWidth) {
      var toRet = 0;
      if (labelOverflow > 0 && rampWidth > 1) {
        toRet = Math.min(labelOverflow, Math.floor(rampWidth * $tab_QuantitativeColorLegendView.$rampShrinkingTolerance));
      }
      return toRet;
    }
  }, {
    setDomNodeStyleSize: function QuantitativeColorLegendView$SetDomNodeStyleSize(domNode, width, height) {
      domNode.css({ width: width + 'px', height: height + 'px' });
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.QuantitativeColorLegendViewModel
  var $tab_QuantitativeColorLegendViewModel = global.tab.QuantitativeColorLegendViewModel = ss.mkType($asm, 'tab.QuantitativeColorLegendViewModel', function(quantColorLegendModel, worksheetId, zoneVM) {
    this.$quantColorLegendModel = null;
    $tab_LegendBaseViewModel.call(this, worksheetId, zoneVM);
    this.$quantColorLegendModel = quantColorLegendModel;
    this.$quantColorLegendModel.add_legendChanged(ss.mkdel(this, this.$handleModelChanged));
  }, {
    get_quantColorLegendPresModel: function QuantitativeColorLegendViewModel$get_QuantColorLegendPresModel() {
      return this.$quantColorLegendModel.get_quantColorLegendPresModel();
    },
    get_fieldNames: function QuantitativeColorLegendViewModel$get_FieldNames() {
      return this.get_quantColorLegendPresModel().legendNames;
    },
    get_presModelTitleHtml: function QuantitativeColorLegendViewModel$get_PresModelTitleHtml() {
      return this.get_quantColorLegendPresModel().titleHtml;
    },
    get_presModelTitleInline: function QuantitativeColorLegendViewModel$get_PresModelTitleInline() {
      return this.get_quantColorLegendPresModel().quantitativeLegendLayout.titleInline;
    },
    get_regionType: function QuantitativeColorLegendViewModel$get_RegionType() {
      return 'color';
    },
    get_rampColorPositions: function QuantitativeColorLegendViewModel$get_RampColorPositions() {
      return ss.arrayFromEnumerable(Object.keys(this.get_quantColorLegendPresModel().colorMap));
    },
    get_rampColorSamplesAsColorModels: function QuantitativeColorLegendViewModel$get_RampColorSamplesAsColorModels() {
      var toRet = [];
      var positions = ss.arrayFromEnumerable(Object.keys(this.get_quantColorLegendPresModel().colorMap));
      if (ss.isValue(positions)) {
        var alpha = this.get_quantColorLegendPresModel().colorTransparencyValue / 255;
        toRet = new Array(positions.length);
        for (var ii = 0; ii < positions.length; ++ii) {
          var pos = positions[ii];
          toRet[ii] = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.fromColorCode(this.get_quantColorLegendPresModel().colorMap[pos]), alpha).toString();
        }
      }
      return toRet;
    },
    get_borderWidth: function QuantitativeColorLegendViewModel$get_BorderWidth() {
      var toRet = this.get_quantColorLegendPresModel().styledBox.uw;
      if (this.get_quantColorLegendPresModel().styledBox.borderStyle === 'bs-none') {
        toRet = 0;
      }
      return toRet;
    },
    get_presModelTitleHeight: function QuantitativeColorLegendViewModel$get_PresModelTitleHeight() {
      return this.get_quantColorLegendPresModel().quantitativeLegendLayout.rectTitle.h;
    },
    get_presModelTitleWidth: function QuantitativeColorLegendViewModel$get_PresModelTitleWidth() {
      return this.get_quantColorLegendPresModel().quantitativeLegendLayout.rectTitle.w;
    },
    get_shouldShowContextMenu: function QuantitativeColorLegendViewModel$get_ShouldShowContextMenu() {
      return this.get_quantColorLegendPresModel().isContextMenuAllowed;
    },
    get_legendColumns: function QuantitativeColorLegendViewModel$get_LegendColumns() {
      return this.get_quantColorLegendPresModel().legendNames;
    },
    get_legendTypeEnum: function QuantitativeColorLegendViewModel$get_LegendTypeEnum() {
      return 'color';
    },
    dispose: function QuantitativeColorLegendViewModel$Dispose() {
      this.$quantColorLegendModel.remove_legendChanged(ss.mkdel(this, this.$handleModelChanged));
      $tab_LegendBaseViewModel.prototype.dispose.call(this);
    },
    $handleModelChanged: function QuantitativeColorLegendViewModel$HandleModelChanged() {
      this.notifyPropertyChanged($tab_QuantitativeColorLegendViewModel.modelChangedProperty);
    },
    showWebQuantitativeColorDialog: function QuantitativeColorLegendViewModel$ShowWebQuantitativeColorDialog() {
      var $t1 = new tab.GetWebQuantitativeColorDialogCmd();
      $t1.cmdParams['fieldVector'] = this.get_fieldNames();
      $t1.invoke();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.QuickFilterDisplayTemplate
  var $tab_QuickFilterDisplayTemplate = global.tab.QuickFilterDisplayTemplate = ss.mkType($asm, 'tab.QuickFilterDisplayTemplate', function() {
    spiff.Template.call(this, $($tab_QuickFilterDisplayTemplate.$htmlTemplate));
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.QuickFilterPanel
  var $tab_QuickFilterPanel = global.tab.QuickFilterPanel = ss.mkType($asm, 'tab.QuickFilterPanel', function(oProps) {
    this.templateString = "<div class='QuickFilterPanel' dojoAttachPoint='containerNode' dojoAttachEvent='onmousedown:onMouseDown'>" + '</div>';
    this.session = null;
    this.field = '';
    this.membershipTarget = 'filter';
    this.filter = null;
    this.width = 0;
    this.metricsOnly = false;
    this.layoutSession = null;
    this.quickFilterDisplayViewModel = null;
    this.$disposables = null;
    this.requestSetAttributes = null;
    this.titleHTML = null;
    this.$titleH = 0;
    this.$titleW = 0;
    this.attributes = {};
    this.$lastKnownPanelCoords = null;
    this.textStyle = null;
    this.backgroundColor = null;
    this.blendedZoneContentColor = null;
    this.$isMenuOpen = false;
    Object.call(this);
    this.$disposables = new tab.DisposableHolder();
  }, {
    get_$quickFilterDisplayModel: function QuickFilterPanel$get_QuickFilterDisplayModel() {
      return this.quickFilterDisplayViewModel.get_quickFilterDisplayModel();
    },
    get_getFilterModeMatrix: function QuickFilterPanel$get_GetFilterModeMatrix() {
      if (ss.isValue(this.get_$quickFilterDisplayModel()) && ss.isValue(this.get_$quickFilterDisplayModel().get_quickFilterModeMatrix())) {
        return this.get_$quickFilterDisplayModel().get_quickFilterModeMatrix();
      }
      else {
        return null;
      }
    },
    postCreate: function QuickFilterPanel$PostCreate() {
      if (this.metricsOnly) {
        return;
      }
    },
    dispose: function QuickFilterPanel$Dispose() {
      this.requestSetAttributes = null;
      this.$disposables.dispose();
    },
    updateFilterProperties: function QuickFilterPanel$UpdateFilterProperties(oProps) {
      this.titleHTML = oProps.titleHTML;
      this.attributes = oProps.attributes;
      this.layoutSession = oProps.layoutSession;
      this.width = oProps.width;
      this.textStyle = oProps.textStyle;
      this.backgroundColor = oProps.backgroundColor;
      this.blendedZoneContentColor = oProps.blendedZoneContentColor;
    },
    destroy: function QuickFilterPanel$Destroy() {
      this.dispose();
      this.inherited(arguments);
    },
    makeQuantitativeFilter: function QuickFilterPanel$MakeQuantitativeFilter(filterProps) {
      return new tableau.base.widget.LegacyQuantitativeQuickFilter(filterProps);
    },
    makeQuantitativeDateFilter: function QuickFilterPanel$MakeQuantitativeDateFilter(filterProps) {
      return new tableau.base.widget.LegacyQuantitativeDateQuickFilter(filterProps);
    },
    makeHierarchicalFilter: function QuickFilterPanel$MakeHierarchicalFilter(filterProps) {
      return new tableau.base.widget.LegacyHierarchicalQuickFilter(filterProps);
    },
    makeCategoricalFilter: function QuickFilterPanel$MakeCategoricalFilter(filterProps) {
      return new tableau.base.widget.LegacyCategoricalQuickFilter(filterProps);
    },
    makeRelativeDateFilter: function QuickFilterPanel$MakeRelativeDateFilter(filterProps) {
      return new tableau.base.widget.LegacyRelativeDateQuickFilter(filterProps);
    },
    makeRelativeDatePickFilter: function QuickFilterPanel$MakeRelativeDatePickFilter(filterProps) {
      return new tableau.base.widget.RelativeDatePickFilter(filterProps);
    },
    setupEventHandlers: function QuickFilterPanel$SetupEventHandlers() {
      var clickHandler = spiff.TableauClickHandler.targetAndClick(this.domNode, ss.mkdel(this, this.$showControls));
      clickHandler.set_stopPropagationOnEvent(false);
      this.$disposables.add$1(clickHandler);
      var filterWidgetDomNodeJQuery = $(this.filter.domNode);
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(filterWidgetDomNodeJQuery, 'mouseenter', ss.mkdel(this, this.$onMouseEnter)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(filterWidgetDomNodeJQuery, 'mouseleave', ss.mkdel(this, this.$onMouseOut)));
      var focusHandler = ss.mkdel(this, function(e) {
        this.$showControls();
      });
      var blurHandler = ss.mkdel(this, function(e1) {
        window.setTimeout(ss.mkdel(this, function() {
          if (!tab.DomUtil.isAncestorOf(this.domNode, document.activeElement)) {
            this.hideControls();
          }
        }), 200);
      });
      this.domNode.addEventListener('focus', focusHandler, true);
      this.domNode.addEventListener('blur', blurHandler, true);
      this.$disposables.add(ss.mkdel(this, function() {
        this.domNode.removeEventListener('focus', focusHandler, true);
        this.domNode.removeEventListener('blur', blurHandler, true);
      }));
    },
    $createFilterProps: function QuickFilterPanel$CreateFilterProps(filterState) {
      var $t1 = new Object();
      $t1.presModel = this.get_$quickFilterDisplayModel().get_quickFilterDisplayPresModel();
      $t1.backgroundColor = this.get_$quickFilterDisplayModel().get_contentStyle().get_fillColor();
      $t1.blendedZoneContentColor = this.get_$quickFilterDisplayModel().get_blendedZoneContentColor();
      $t1.textStyle = this.textStyle;
      $t1.field = this.field;
      $t1.membershipTarget = filterState.membershipTarget;
      $t1.oFilter = filterState;
      $t1.filterViewModel = this.quickFilterDisplayViewModel.get_filterTypeViewModel();
      $t1.layoutSession = this.layoutSession;
      $t1.attributes = this.attributes || {};
      $t1.requestSetAttributes = this.requestSetAttributes;
      $t1.titleH = this.$titleH;
      $t1.titleW = this.$titleW;
      $t1.titleHTML = this.titleHTML;
      $t1.width = this.width;
      $t1.getContextMenuCommands = ss.mkdel(this, function() {
        return this.getContextMenuCommands();
      });
      $t1.showContextMenu = ss.mkdel(this, function(button) {
        if (ss.isNullOrUndefined(this.get_getFilterModeMatrix())) {
          this.showContextMenu(button);
        }
        else {
          this.showFilterPicker();
        }
      });
      $t1.showDomainMenu = ss.mkdel(this, function(button1) {
        this.showDomainMenu(button1);
      });
      var filterProps = $t1;
      if (ss.isValue(this.session)) {
        filterProps.session = this.session;
      }
      else {
        filterProps.metricsOnly = true;
      }
      return filterProps;
    },
    updateFilterState: function QuickFilterPanel$UpdateFilterState(filterState) {
      var isSetControl = filterState.membershipTarget === 'set';
      if (!ss.referenceEquals(this.field, tableau.format.formatQualifiedName(filterState.name)) && !isSetControl) {
        return;
      }
      if (!!this.filter && (!ss.referenceEquals(this.filter.oFilter.type, filterState.type) || filterState.type === 'RD' && filterState.showRelDatePick !== this.filter.oFilter.showRelDatePick || filterState.type === 'C' && !ss.referenceEquals(filterState.mode, this.filter.oFilter.mode))) {
        this.filter.destroy(false);
        this.filter = null;
      }
      this.textStyle = this.quickFilterDisplayViewModel.get_quickFilterDisplayPresModel().textStyle;
      var filterProps = this.$createFilterProps(filterState);
      if (ss.isNullOrUndefined(this.filter)) {
        this.createFilterWidget(filterState, filterProps);
      }
      else {
        this.filter.attributes = (ss.isNullOrUndefined(this.attributes) ? {} : this.attributes);
        this.filter.oFilter = filterState;
        this.filter.setTitleSize(this.$titleH, this.$titleW);
        this.filter.initFromState();
        this.$applyStyles();
      }
    },
    createFilterWidget: function QuickFilterPanel$CreateFilterWidget(filterState, filterProps) {
      if (ss.isNullOrUndefined(filterProps)) {
        filterProps = this.$createFilterProps(filterState);
      }
      switch (filterState.type) {
        case 'Q': {
          if (tab.LegacyFilterModel.isQuantitativeDateFilter(filterState, null, null)) {
            this.filter = this.makeQuantitativeDateFilter(filterProps);
          }
          else {
            this.filter = this.makeQuantitativeFilter(filterProps);
          }
          break;
        }
        case 'H': {
          this.filter = this.makeHierarchicalFilter(filterProps);
          break;
        }
        case 'C': {
          this.filter = this.makeCategoricalFilter(filterProps);
          break;
        }
        case 'RD': {
          if (filterState.showRelDatePick) {
            this.filter = this.makeRelativeDatePickFilter(filterProps);
          }
          else {
            this.filter = this.makeRelativeDateFilter(filterProps);
          }
          break;
        }
        default: {
          this.domNode.style.display = 'none';
          return;
        }
      }
      this.addChild(this.filter);
      this.setupEventHandlers();
      this.filter.setTitleSize(this.$titleH, this.$titleW);
      this.$applyStyles();
      this.hideControls();
    },
    $applyStyles: function QuickFilterPanel$ApplyStyles() {
      var lineHeight = this.get_$quickFilterDisplayModel().get_quickFilterDisplayPresModel().lineHeight;
      if (ss.isValue(this.session)) {
        dojo.marginBox(this.filter.domNode, dojo.contentBox(this.domNode));
      }
      $tab_WidgetStyle.applyFormatting(this.domNode, this.textStyle, this.blendedZoneContentColor, lineHeight, true);
      this.filter.layout(null);
    },
    $showControls: function QuickFilterPanel$ShowControls() {
      if (this.$titleH > 0) {
        $(this.filter.domControls).removeClass('HideControls');
      }
    },
    hideControls: function QuickFilterPanel$HideControls() {
      if (!this.$isMenuOpen) {
        $(this.filter.domControls).addClass('HideControls');
      }
    },
    $onMouseEnter: function QuickFilterPanel$OnMouseEnter(e) {
      this.$showControls();
    },
    $onMouseOut: function QuickFilterPanel$OnMouseOut(e) {
      var c = dojo.coords(this.filter.domNode, true);
      if (c.x > e.pageX || c.x + c.w <= e.pageX || c.y > e.pageY || c.y + c.h <= e.pageY) {
        this.hideControls();
      }
    },
    setTitleSize: function QuickFilterPanel$SetTitleSize(newH, newW) {
      this.$titleH = newH;
      this.$titleW = newW;
    },
    resize: function QuickFilterPanel$Resize(changeSize, resultSize) {
      this.$lastKnownPanelCoords = dojo.marginBox(this.domNode);
      this.inherited(arguments);
    },
    layout: function QuickFilterPanel$Layout(pixelHeight) {
      if (!!this.filter) {
        var panelCoords = dojo.marginBox(this.domNode);
        var sameSizeAndPosition = _.isEqual(this.$lastKnownPanelCoords, panelCoords);
        if (!sameSizeAndPosition) {
          dojo.marginBox(this.filter.domNode, dojo.contentBox(this.domNode));
          this.filter.setTitleSize(this.$titleH, this.$titleW);
          this.filter.layout(null);
        }
      }
    },
    updateAttributes: function QuickFilterPanel$UpdateAttributes(attributes) {
      this.attributes = (ss.isNullOrUndefined(attributes) ? {} : attributes);
    },
    updateSubWidget: function QuickFilterPanel$UpdateSubWidget(filterState) {
      if (ss.isValue(this.filter)) {
        var props = this.$createFilterProps(filterState);
        this.filter.setTitleSize(props.titleH, props.titleW);
        this.filter.updateFilterProperties(props);
      }
    },
    getContextMenuCommands: function QuickFilterPanel$GetContextMenuCommands() {
      if (ss.isValue(this.get_$quickFilterDisplayModel()) && ss.isValue(this.get_$quickFilterDisplayModel().get_quickFilterCommands())) {
        if (tsConfig.is_mobile || tsConfig.is_mobile_app) {
          tab.RichTextClientCommands.removeRichTextCommands(this.get_$quickFilterDisplayModel().get_quickFilterCommands());
          tab.FilterClientCommands.removeFilterDialogCommands(this.get_$quickFilterDisplayModel().get_quickFilterCommands());
        }
        return this.get_$quickFilterDisplayModel().get_quickFilterCommands();
      }
      else {
        return {};
      }
    },
    getDomainMenuCommands: function QuickFilterPanel$GetDomainMenuCommands() {
      if (ss.isValue(this.get_$quickFilterDisplayModel()) && ss.isValue(this.get_$quickFilterDisplayModel().get_quickFilterDomainCommands())) {
        return this.get_$quickFilterDisplayModel().get_quickFilterDomainCommands();
      }
      else {
        return {};
      }
    },
    showContextMenu: function QuickFilterPanel$ShowContextMenu(button) {
      var commands = this.getContextMenuCommands();
      this.$showCommandsInMenu(commands, button);
    },
    showDomainMenu: function QuickFilterPanel$ShowDomainMenu(button) {
      var commands = this.getDomainMenuCommands();
      this.$showCommandsInMenu(commands, button);
    },
    $showCommandsInMenu: function QuickFilterPanel$ShowCommandsInMenu(commands, button) {
      var menuViewModel = $tab_QuickFilterPanel.$createMenuViewModel(commands);
      this.$showMenu(button.domNode, menuViewModel);
      var refocusFilterOnMenuHidden = null;
      refocusFilterOnMenuHidden = ss.mkdel(this, function() {
        menuViewModel.remove_hidden(refocusFilterOnMenuHidden);
        this.$isMenuOpen = false;
        this.$showControls();
        $tab_QfButtonUtil.focusQfButton(button);
      });
      menuViewModel.add_hidden(refocusFilterOnMenuHidden);
    },
    $showMenu: function QuickFilterPanel$ShowMenu(menuButtonNode, menuViewModel) {
      var $t1 = new spiff.ShowMenuOptions($(menuButtonNode), false);
      $t1.additionalMenuClass = 'tabQFContextMenu';
      var smO = $t1;
      menuViewModel.show(smO);
      this.$isMenuOpen = true;
    },
    showFilterPicker: function QuickFilterPanel$ShowFilterPicker() {
    },
    getDomNode: function QuickFilterPanel$GetDomNode() {
      return this.domNode;
    },
    destroyRecursiveShim: function QuickFilterPanel$DestroyRecursiveShim(preserveDom) {
      this.destroyRecursive(preserveDom);
    },
    startupShim: function QuickFilterPanel$StartupShim() {
      this.startup();
    },
    updateAttributesShim: function QuickFilterPanel$UpdateAttributesShim(attributes) {
      this.updateAttributes(attributes);
    },
    updateFilterStateShim: function QuickFilterPanel$UpdateFilterStateShim(filterState) {
      this.updateFilterState(filterState);
    },
    setTitleSizeShim: function QuickFilterPanel$SetTitleSizeShim(newH, newW) {
      this.setTitleSize(newH, newW);
    },
    updateFilterPropertiesShim: function QuickFilterPanel$UpdateFilterPropertiesShim(oProps) {
      this.updateFilterProperties(oProps);
    },
    updateSubWidgetShim: function QuickFilterPanel$UpdateSubWidgetShim(filterState) {
      this.updateSubWidget(filterState);
    }
  }, {
    $createMenuViewModel: function QuickFilterPanel$CreateMenuViewModel(commands) {
      var menuViewModel = tab.WidgetUtil.menuViewModelFromCommands(commands, function(menuItem) {
        tab.WidgetUtil.commandMenuItemClicked(menuItem);
      }, null, null, null);
      return menuViewModel;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.Radiolist
  var $tab_Radiolist = global.tab.Radiolist = ss.mkType($asm, 'tab.Radiolist', function(parent, div, attrs) {
    this.$searchBox = null;
    this.contentNode = null;
    $tab_BaseMode.call(this, parent, div, attrs);
    this.set_itemFormatter(ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.formatRadiolistFilterItemHtml));
  }, {
    get_scrollNode: function Radiolist$get_ScrollNode() {
      return this.contentNode;
    },
    instantiate: function Radiolist$Instantiate(newTuples, itemName, facet) {
      if (this.parent.get_searchWidget().get_dijitClassName().indexOf('FilteringSearchWidget') < 0) {
        tab.Log.get(this).error('Checklist catmode Categorical search widget must be a FilteringSearchWidget', []);
      }
      this.$searchBox = this.parent.get_searchWidget();
      this.$searchBox.setStyle(2);
      var jqueryDiv = $(this.div).addClass('CFOuterContainer');
      this.$searchBox.startupAndAppendTo(jqueryDiv);
      this.$searchBox.hideUI();
      var rl = $('<div></div>').addClass('CFInnerContainer').addClass('tab-ctrl-formatted-text');
      if (BrowserSupport.BrowserSupport.IsFF()) {
        rl.attr('tabindex', '-1');
      }
      jqueryDiv.append(rl);
      this.contentNode = rl.get(0);
      this.resetContent(newTuples, itemName, facet);
      this.disposables.add$1(spiff.EventUtil.bindWithDispose($(this.div), 'click', ss.mkdel(this.parent, this.parent.onListItemClick)));
      this.div.addEventListener('focus', this.listItemFocusHandler, true);
      this.disposables.add(ss.mkdel(this, function() {
        this.div.removeEventListener('focus', this.listItemFocusHandler, true);
      }));
    },
    resetContent: function Radiolist$ResetContent(tuples, itemName, facet) {
      var jqueryDiv = $(this.contentNode);
      jqueryDiv.empty();
      if (this.shouldUseAllItem() && tuples.length > 0) {
        $tab_Checklist.addAllItem(jqueryDiv, this.parent, itemName, facet, $tab_FilterItemUtil.isAllOrAllChecked(this.parent), this.get_itemFormatter());
        if ($tab_FilterItemUtil.isAllOrAllChecked(this.parent)) {
          for (var i = 0; i < tuples.length; i++) {
            tuples[i].s = false;
          }
        }
      }
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.destroy();
      }
      this.tiledWidget = $tab_TiledWidgetFactory.createRadiolist(this.parent, tuples, this.contentNode, itemName, this.get_lineHeight());
      var radioGroup = this.contentNode.querySelector('[role=listbox]');
      if (ss.isValue(radioGroup)) {
        radioGroup.setAttribute('aria-labelledby', this.parent.get_titleDomId());
      }
    },
    updateContent: function Radiolist$UpdateContent(data) {
      var hadFocus = $.contains(this.div, document.activeElement);
      var results = ((data.length > 0) ? data.join('') : this.$searchBox.get_noMatchHtml());
      var jqueryDiv = $(this.contentNode);
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.destroy();
        this.tiledWidget = null;
      }
      jqueryDiv.html(results);
      this.updateTabIndexes(this.div, hadFocus);
    },
    shouldNotReinstantiate: function Radiolist$ShouldNotReinstantiate() {
      return ss.isValue(this.$searchBox) && this.$searchBox.isShowingResults();
    },
    layout: function Radiolist$Layout(contentSize, horizontalLayout) {
      this.inherited(arguments);
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.updateViewport(contentSize.w, contentSize.h);
      }
      if (!tsConfig.is_mobile) {
        var searchHeight = ((ss.isValue(this.$searchBox) && this.$searchBox.get_isVisible()) ? dojo.marginBox(this.$searchBox.domNode).h : 0);
        this.contentNode.style.height = this.div.clientHeight - searchHeight + 'px';
      }
    },
    destroy: function Radiolist$Destroy() {
      this.dispose();
      if (ss.isValue(this.$searchBox)) {
        this.$searchBox.destroy();
      }
      if (ss.isValue(this.tiledWidget)) {
        this.tiledWidget.destroy();
      }
      this.tiledWidget = null;
    },
    fetchChildNodeByIndex: function Radiolist$FetchChildNodeByIndex(index) {
      if (ss.isValue(this.tiledWidget)) {
        return this.tiledWidget.getElement(index);
      }
      else {
        return this.getNonTiledElement(index, this.contentNode);
      }
    },
    fetchAllItem: function Radiolist$FetchAllItem() {
      if (this.shouldUseAllItem() && ss.isValue(this.contentNode)) {
        return ss.cast(this.contentNode.firstChild, HTMLElement);
      }
      else {
        return null;
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.RadiolistContentFormatter
  var $tab_RadiolistContentFormatter = global.tab.RadiolistContentFormatter = ss.mkType($asm, 'tab.RadiolistContentFormatter', function(filter, itemName, itemFormatter) {
    $tab_ChecklistContentFormatter.call(this, filter, itemName, itemFormatter);
    this.tileHtml = '<div id=\'{1}\' role=\'listbox\' class="tile tab-ctrl-formatted-text" style="top: {0}px; position: absolute; width: 100%;">';
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.RawChange
  var $tab_RawChange = global.tab.RawChange = ss.mkType($asm, 'tab.RawChange', function() {
    this.range = null;
    this.index = 0;
    this.type = 0;
    this.checkState = false;
  }, {
    setRange: function RawChange$SetRange(range, checkState) {
      this.type = 1;
      this.range = range;
      this.checkState = checkState;
    },
    setSingle: function RawChange$SetSingle(index, checkState) {
      this.type = 0;
      this.index = index;
      this.checkState = checkState;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.RelativeDateFilterPeriodType
  var $tab_RelativeDateFilterPeriodType = global.tab.RelativeDateFilterPeriodType = ss.mkEnum($asm, 'tab.RelativeDateFilterPeriodType', { year: 'year', quarter: 'quarter', month: 'month', week: 'week', day: 'day', hour: 'hour', minute: 'minute', second: 'second' }, true);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.RelativeDateFilterRangeType
  var $tab_RelativeDateFilterRangeType = global.tab.RelativeDateFilterRangeType = ss.mkEnum($asm, 'tab.RelativeDateFilterRangeType', { curr: 'curr', todate: 'todate', last: 'last', next: 'next', lastn: 'lastn', nextn: 'nextn', other: 'other', othern: 'othern', invalid: 'invalid' }, true);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.RelativeDateFilterViewModel
  var $tab_RelativeDateFilterViewModel = global.tab.RelativeDateFilterViewModel = ss.mkType($asm, 'tab.RelativeDateFilterViewModel', function(filterModel) {
    this.$model = null;
    spiff.BaseViewModel.call(this);
    this.$model = filterModel;
  }, {
    get_filterType: function RelativeDateFilterViewModel$get_FilterType() {
      return this.$model.get_filterType();
    },
    get_legacyRelativeDateQuickFilterModel: function RelativeDateFilterViewModel$get_LegacyRelativeDateQuickFilterModel() {
      return this.$model;
    },
    get_defaultFormat: function RelativeDateFilterViewModel$get_DefaultFormat() {
      return this.$model.get_defaultFormat();
    },
    get_fiscalYearStart: function RelativeDateFilterViewModel$get_FiscalYearStart() {
      return this.$model.get_fiscalYearStart();
    },
    get_noTime: function RelativeDateFilterViewModel$get_NoTime() {
      return this.$model.get_noTime();
    },
    get_isRelativeDatePick: function RelativeDateFilterViewModel$get_IsRelativeDatePick() {
      return this.$model.get_isRelativeDatePick();
    },
    get_text: function RelativeDateFilterViewModel$get_Text() {
      return this.$model.get_text();
    },
    get_relativeDateTable: function RelativeDateFilterViewModel$get_RelativeDateTable() {
      return this.$model.get_relativeDateTable();
    },
    get_periodType: function RelativeDateFilterViewModel$get_PeriodType() {
      return this.get_relativeDateTable().periodType;
    },
    get_rangeType: function RelativeDateFilterViewModel$get_RangeType() {
      return this.get_relativeDateTable().rangeType;
    },
    get_rangeN: function RelativeDateFilterViewModel$get_RangeN() {
      return this.get_relativeDateTable().rangeN;
    },
    get_anchor: function RelativeDateFilterViewModel$get_Anchor() {
      return (ss.isValue(this.get_relativeDateTable().anchor) ? this.get_relativeDateTable().anchor : null);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.RelativeDatePickFilter
  var $tab_RelativeDatePickFilter = global.tab.RelativeDatePickFilter = ss.mkType($asm, 'tab.RelativeDatePickFilter', function(oProps) {
    this.templateString = "<div class='RelativeDatePickFilter'>" + "<div dojoAttachPoint='domBox' class='RelativeDatePickFilterBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<h3 class='FilterTitle' dojoAttachPoint='domTitleBar'></h3>" + "<div dojoType='dijit.form.Button' class='RDFButton RDFMenuButton' name='type' dojoAttachPoint='menuButton'" + "dojoAttachEvent='onClick:doMenu' iconClass='wcIconContextMenu'></div>" + "<div class='PicklistContentDiv tab-ctrl-formatted-coloronly' dojoAttachPoint='domPicker'></div>" + '</div>' + '</div>' + '</div>';
    this.widgetsInTemplate = true;
    this.session = null;
    this.field = '';
    this.stateId = 0;
    this.rid = 0;
    this.timestamp = 0;
    this.currentRange = null;
    this.layoutSession = null;
    this.filterViewModel = null;
    this.currentAbbrev = null;
    this.showContextMenu = null;
    this.disposables = null;
    this.getContextMenuCommands = null;
    this.periodType = null;
    this.rangeType = null;
    this.rangeN = 0;
    this.domPicker = null;
    this.getSID = null;
    this.$currentDiv = null;
    this.menuButton = null;
    $tab_LegacyQuickFilterWidget.call(this);
  }, {
    get_filterViewModel: function RelativeDatePickFilter$get_FilterViewModel() {
      return ss.cast(this.filterViewModel, $tab_RelativeDateFilterViewModel);
    },
    get_shouldLayoutTitleAndContentOnSameLine: function RelativeDatePickFilter$get_ShouldLayoutTitleAndContentOnSameLine() {
      return !this.hideEmptyTitlebar() && this.titleW > 0;
    },
    postCreate: function RelativeDatePickFilter$PostCreate() {
      if (this.filterViewModel.get_filterType() !== 'RelativeDatePick') {
        tab.Log.get(this).warn('Incompatible filter view model type for RelativeDatePickFilter: %s', [this.filterViewModel.get_filterType()]);
      }
      this.disposables = new tab.DisposableHolder();
      this.getSID = ss.mkdel(this, function() {
        return this.stateId;
      });
      this.timestamp = (new Date()).getMilliseconds();
      this.initFromState();
      $(this.menuButton.domNode).css('background-color', this.backgroundColor);
    },
    shouldHideDomainButton: function RelativeDatePickFilter$ShouldHideDomainButton() {
      return true;
    },
    shouldHideContextMenu: function RelativeDatePickFilter$ShouldHideContextMenu() {
      if (tsConfig.current_sheet_type === 'dashboard' && tsConfig.is_authoring) {
        return true;
      }
      var commandsWrapper = tab.CommandsPresModelWrapper.create(this.getContextMenuCommands());
      return this.hideEmptyTitlebar() || ss.isNullOrUndefined(commandsWrapper) || commandsWrapper.get_commandItems().length === 0;
    },
    dispose: function RelativeDatePickFilter$Dispose() {
      this.disposables.dispose();
      this.showContextMenu = null;
    },
    destroy: function RelativeDatePickFilter$Destroy(preserveDom) {
      this.dispose();
      this.domPicker.innerHTML = '';
      this.inherited(arguments);
    },
    initFromState: function RelativeDatePickFilter$InitFromState() {
      this.currentRange = this.oFilter.table;
      this.currentAbbrev = this.toAbbrev(this.currentRange);
      this.domPicker.innerHTML = '';
      var title = $tab_FilterFormat.formatColumnDisplayName(this.oFilter, false, false);
      this.domTitleBar.setAttribute('title', title);
      this.updateTitleBar();
      _.each($tab_RelativeDatePickFilter.pickerStrings, ss.mkdel(this, function(pickerStr, i) {
        var div = document.createElement('div');
        div.innerHTML = tab.EscapingUtil.escapeHtml(pickerStr);
        div.classList.add('PickLabel');
        div.classList.add('tab-ctrl-formatted-border-hover');
        this.domPicker.appendChild(div);
        var jqueryDiv = $(div);
        var clickHandler = ss.mkdel(this, function(evt) {
          this.onClick(i, evt);
        });
        this.disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryDiv, 'click', clickHandler));
        if (ss.referenceEquals(this.currentAbbrev, $tab_RelativeDatePickFilter.pickerDurations[i])) {
          this.$selectPick(div);
          this.$currentDiv = div;
        }
      }));
      this.layout(null);
      var processButton = function(button, hide) {
        var btn = $(button.domNode);
        if (hide) {
          btn.removeClass($tab_RelativeDatePickFilter.$classButtonR1);
          btn.addClass($tab_RelativeDatePickFilter.$classButtonHide);
        }
        else {
          btn.removeClass($tab_RelativeDatePickFilter.$classButtonHide);
          btn.addClass($tab_RelativeDatePickFilter.$classButtonR1);
        }
      };
      processButton(this.menuButton, this.shouldHideContextMenu());
    },
    $selectPick: function RelativeDatePickFilter$SelectPick(div) {
      var divObject = $(div);
      divObject.addClass('Selected');
      divObject.addClass('tab-ctrl-formatted-widget');
      divObject.removeClass('tab-ctrl-formatted-border-hover');
      divObject.addClass('tab-ctrl-formatted-darker-border-hover');
    },
    $unselectPick: function RelativeDatePickFilter$UnselectPick(div) {
      var divObject = $(div);
      divObject.removeClass('Selected');
      divObject.removeClass('tab-ctrl-formatted-widget');
      divObject.addClass('tab-ctrl-formatted-border-hover');
      divObject.removeClass('tab-ctrl-formatted-darker-border-hover');
    },
    formatTuple: function RelativeDatePickFilter$FormatTuple(tuple) {
      return $tab_FilterFormat.formatTupleDisplayName(tuple, true, this.oFilter.role);
    },
    toAbbrev: function RelativeDatePickFilter$ToAbbrev(rangeHash) {
      var n = rangeHash.rangeN.toString();
      var s;
      switch (rangeHash.rangeType) {
        case 'curr': {
          s = '0';
          break;
        }
        case 'lastn': {
          s = '-' + n;
          break;
        }
        case 'nextn': {
          s = n;
          break;
        }
        default: {
          return '';
        }
      }
      switch (rangeHash.periodType) {
        case 'year': {
          s += 'y';
          break;
        }
        case 'quarter': {
          s += 'q';
          break;
        }
        case 'month': {
          s += 'm';
          break;
        }
        case 'week': {
          s += 'w';
          break;
        }
        case 'day': {
          s += 'd';
          break;
        }
        case 'hour': {
          s += 'h';
          break;
        }
        default: {
          return '';
        }
      }
      return s;
    },
    onClick: function RelativeDatePickFilter$OnClick(pickedIndex, e) {
      var numberOfDays = $tab_RelativeDatePickFilter.pickerDurationsInteger[pickedIndex];
      if (!ss.referenceEquals(e.target, this.$currentDiv)) {
        if (ss.isValue(this.$currentDiv)) {
          this.$unselectPick(this.$currentDiv);
        }
        this.$selectPick(e.target);
        tab.FilterClientCommands.doRelativeDateQuickFilter(this.session.get_visualId(), this.field, 'day', 'lastn', numberOfDays);
      }
    },
    doMenu: function RelativeDatePickFilter$DoMenu() {
      this.showContextMenu(this.menuButton);
    },
    layout: function RelativeDatePickFilter$Layout(pixelHeight) {
      var width;
      $(this.domNode).removeClass('RDPFHorizontal');
      this.updateTitleBar();
      var oPickSize = dojo.marginBox(this.domPicker);
      if (!ss.isValue(oPickSize) || !ss.isValue(oPickSize.w) || oPickSize.w === 0) {
        return;
      }
      var oTitleBar = this.layoutTitleBar();
      var oZoneSize = dojo.contentBox(this.domNode);
      width = oZoneSize.w;
      if (this.get_shouldLayoutTitleAndContentOnSameLine()) {
        $(this.domNode).addClass('RDPFHorizontal');
        $(this.domTitleBar).css('float', 'left');
        $(this.domPicker).css('float', 'left');
        width = oZoneSize.w - oTitleBar.w;
      }
      else {
        $(this.domTitleBar).css('float', 'none');
        $(this.domPicker).css('float', 'none');
      }
      dojo.contentBox(this.domPicker, ss.mkdict(['w', width]));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.ScrolledEventArgs
  var $tab_ScrolledEventArgs = global.tab.ScrolledEventArgs = ss.mkType($asm, 'tab.ScrolledEventArgs', function(newPos) {
    this.$newPos = null;
    ss.EventArgs.call(this);
    this.$newPos = newPos;
  }, {
    get_newPos: function ScrolledEventArgs$get_NewPos() {
      return this.$newPos;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.SearchWidget
  var $tab_SearchWidget = global.tab.SearchWidget = ss.mkType($asm, 'tab.SearchWidget', function(props, dom) {
    this.templateString = "<div class='Search'>" + "<div class='SearchBox tab-ctrl-formatted-border tab-ctrl-formatted-darker-border-hover' dojoAttachPoint='domQuerySection'>" + "<textarea rows='1' class='QueryBox' spellcheck='false'" + "dojoAttachPoint='domQueryBox'" + "dojoAttachEvent='onkeydown:onQueryBoxKeyDown,onpaste:onQueryBoxPaste'></textarea>" + "<span class='wcSearchX' title='${XBUTTON_CLOSE_TOOLTIP}'" + "dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:onXButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<img class='searchBusyImg' title='${CANCEL_SEARCH_TOOLTIP}' src='${busy_gif_url}'" + "dojoAttachPoint='domSearchBusyImg'" + "dojoAttachEvent='onclick:onSearchBusyImgClick'></img>" + "<span class='wcIconSearch' title='${SEARCH_TOOLTIP}'" + "dojoAttachPoint='domSearchButton'" + "dojoAttachEvent='onclick:onSearchButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<span class='wcIconSearchAdd' title='${ADD_ITEM_CTRL_ENTER}'" + "dojoAttachPoint='domSearchAddButton'" + "dojoAttachEvent='onclick:onSearchAddButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + '</div>' + "<div class='SearchResults' dojoAttachPoint='domResults' dojoAttachEvent='onclick:onListItemClick, onkeydown:onSearchResultsKeyDown'></div>" + '</div>';
    this.domQuerySection = null;
    this.domQueryBox = null;
    this.domSearchAddButton = null;
    this.domSearchButton = null;
    this.domSearchBusyImg = null;
    this.domResults = null;
    this.$categoricalSelectionBehavior = null;
    this.applyDelay = 500;
    this.$searchResultsMaxRows = 100;
    this.$focusedListItemIndex = -1;
    this._bSearching = false;
    this._queryBoxPasteTimeout = null;
    this._searchTimer = null;
    this._isFilterSearchable = false;
    this._initializedSearchResults = false;
    this._domResultsPBExtents = null;
    this._lastRemoteSearch = null;
    $tab_SearchWidgetBase.call(this);
    this.$categoricalSelectionBehavior = new $tab_CategoricalSelection(this);
  }, {
    get_applyDelay: function SearchWidget$get_ApplyDelay() {
      return this.applyDelay;
    },
    get_isPendingMode: function SearchWidget$get_IsPendingMode() {
      return false;
    },
    get_filterTable: function SearchWidget$get_FilterTable() {
      return (!!this.get_oResults() ? this.get_oResults() : null);
    },
    get_quickFilter: function SearchWidget$get_QuickFilter() {
      return this.get_qf();
    },
    shouldDeferChanges: function SearchWidget$ShouldDeferChanges() {
      return false;
    },
    postCreate: function SearchWidget$PostCreate() {
      this.inherited(arguments);
      if (this._isTypeInList) {
        this.showUI(true);
      }
      this._isFilterSearchable = true;
      if (!!this.get_qf() && this._isTypeInList) {
        this._isFilterSearchable = this.get_qf().get_oFilter().is_searchable;
      }
      if (this._isFilterSearchable) {
        this.domSearchAddButton.title = this.ADD_ITEM_CTRL_ENTER;
      }
      else {
        this.domSearchAddButton.title = this.ADD_ITEM_ENTER;
      }
      this.setQueryIconsVisibility(true);
      $tab_DojoUtils.disableTextSelection(this.domResults);
    },
    destroy: function SearchWidget$Destroy() {
      if (ss.isValue(this.domResults)) {
        $([this.domResults]).remove();
      }
      this.inherited(arguments);
    },
    onQueryBoxPaste: function SearchWidget$OnQueryBoxPaste(someEvent) {
      this._queryBoxPasteTimeout = tab.MiscUtil.clearTimeout(this._queryBoxPasteTimeout);
      this._queryBoxPasteTimeout = window.setTimeout(ss.mkdel(this, this._handleQueryBoxPaste), 10);
    },
    _handleQueryBoxPaste: function SearchWidget$HandleQueryBoxPaste() {
      var items;
      var pastedText;
      pastedText = this.getQuery();
      pastedText = pastedText.replace('/\r\n/g', '\n');
      items = pastedText.split('\n');
      if (items.length > 1) {
        this.addManualSearchItems(items);
      }
    },
    getOnQueryBoxKeyDownBehavior: function SearchWidget$GetOnQueryBoxKeyDownBehavior(keyEvent) {
      var result;
      result = this.inherited(arguments);
      switch (keyEvent.keyCode) {
        case 9: {
          this.clearSearch(true, true);
          break;
        }
        case 27: {
          if (BrowserSupport.BrowserSupport.IsFF()) {
            result.functionToCall = ss.mkdel(this, this.onXButtonClick);
          }
          break;
        }
        case 13: {
          if (this._isTypeInList) {
            result.stopEvent = true;
            result.functionToCall = this._getEnterKeyDownBehaviorOnTypeInList(keyEvent);
          }
          break;
        }
        case 40: {
          if (ss.isValue(this.domResults) && this.isShowingResults()) {
            var firstItemCheckbox = this.$getSearchResultsItemElementAt(0);
            firstItemCheckbox.focus();
            if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
              var noModifiers = ss.mkdict(['ShiftKey', false]);
              this.$categoricalSelectionBehavior.handleSimpleSelection(noModifiers, 0);
            }
            result.functionToCall = null;
            result.stopEvent = true;
          }
          break;
        }
      }
      return result;
    },
    _getEnterKeyDownBehaviorOnTypeInList: function SearchWidget$GetEnterKeyDownBehaviorOnTypeInList(keyEvent) {
      if (keyEvent.ctrlKey) {
        return ss.mkdel(this, this.onSearchAddButtonClick);
      }
      if (this._isFilterSearchable) {
        return ss.mkdel(this, this.onSearchButtonClick);
      }
      return ss.mkdel(this, this.onSearchAddButtonClick);
    },
    handleQueryTextChanged: function SearchWidget$HandleQueryTextChanged(evt) {
      this.inherited(arguments);
      if (this._isTypeInList) {
        this.clearSearch(true, true);
      }
      if (!this._isTypeInList) {
        this.$startSearchTimer();
      }
    },
    onSearchAddButtonClick: function SearchWidget$OnSearchAddButtonClick(evt) {
      this.addManualSearchItems(null);
    },
    onSearchButtonClick: function SearchWidget$OnSearchButtonClick(evt) {
      this.doSearch();
    },
    onSearchBusyImgClick: function SearchWidget$OnSearchBusyImgClick(evt) {
      this.$cancelRemoteSearch();
    },
    focusQueryBox: function SearchWidget$FocusQueryBox() {
      this.domQueryBox.focus();
    },
    getQuery: function SearchWidget$GetQuery() {
      return this.domQueryBox.value;
    },
    setQuery: function SearchWidget$SetQuery(value) {
      this.domQueryBox.value = value;
    },
    showUI: function SearchWidget$ShowUI(noLayout) {
      if (this.get_isVisible()) {
        return;
      }
      if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.LegacyCategoricalQuickFilter' && this.get_qf().get_oFilter().table.tuples.length === 0 && !this._isTypeInList) {
        return;
      }
      this.inherited(arguments);
    },
    clearSearch: function SearchWidget$ClearSearch(preserveQueryBoxText, noFocus) {
      this.domResults.style.display = 'none';
      this.domResults.innerHTML = '';
      this.$focusedListItemIndex = -1;
      this.clearRangeAnchorAndSelection();
      this.$cancelRemoteSearch();
      this.inherited(arguments);
    },
    setQueryIconsVisibility: function SearchWidget$SetQueryIconsVisibility(initialLoad) {
      var isTypeIn = this._isTypeInList;
      var resultsVisible = ((!!initialLoad && initialLoad) ? false : tableau.util.isElementVisible(this.domResults));
      var typeInSearchButtonsVisible = !ss.isNullOrEmptyString(this.getQuery()) && isTypeIn && !resultsVisible;
      var addButtonVisible = typeInSearchButtonsVisible;
      var searchButtonsVisible = typeInSearchButtonsVisible && this._isFilterSearchable;
      this.domSearchBusyImg.style.display = ((searchButtonsVisible && this._bSearching) ? 'block' : 'none');
      this.domSearchButton.style.display = ((searchButtonsVisible && !this._bSearching) ? 'block' : 'none');
      this.domSearchAddButton.style.display = (addButtonVisible ? 'block' : 'none');
      var xButtonDisplay = ((isTypeIn && !resultsVisible) ? 'none' : 'block');
      this.get_domXButton().style.display = xButtonDisplay;
      this.fixQueryWidth();
    },
    fetchChildNodeByIndex: function SearchWidget$FetchChildNodeByIndex(index) {
      var items = this.domResults.childNodes;
      for (var i = 0, len = items.length; i < len; i++) {
        if ($tab_FilterItemUtil.filterItem.getIndex(items[i]) === index) {
          return items[i];
        }
      }
      return null;
    },
    layout: function SearchWidget$Layout(pixelHeight) {
      this.setQueryIconsVisibility();
      var itemHeight = this.$getItemHeight();
      if (this._isTypeInList || this.get_qf().get_mode() === 'checkdropdown') {
        this.$positionTypeInListSearchResults(itemHeight);
      }
      else if (itemHeight !== 0) {
        this.$setIntegralHeight(ss.idiv(ss.unbox(pixelHeight), itemHeight), itemHeight);
      }
    },
    fixQueryWidth: function SearchWidget$FixQueryWidth() {
      var xButtonVisible = tableau.util.isElementVisible(this.get_domXButton());
      var addButtonVisible = tableau.util.isElementVisible(this.domSearchAddButton);
      var searchButtonVisible = tableau.util.isElementVisible(this.domSearchButton);
      var spinnerVisible = tableau.util.isElementVisible(this.domSearchBusyImg);
      var iconsWidth = 0;
      if (xButtonVisible) {
        iconsWidth += dojo.marginBox(this.get_domXButton()).w;
      }
      if (addButtonVisible) {
        iconsWidth += dojo.marginBox(this.domSearchAddButton).w;
      }
      if (searchButtonVisible) {
        iconsWidth += dojo.marginBox(this.domSearchButton).w;
      }
      if (spinnerVisible) {
        iconsWidth += dojo.marginBox(this.domSearchBusyImg).w;
      }
      dojo.marginBox(this.domQueryBox, ss.mkdict(['w', dojo.contentBox(this.domQuerySection).w - iconsWidth - 1]));
    },
    $positionTypeInListSearchResults: function SearchWidget$PositionTypeInListSearchResults(itemHeight) {
      var dashboardSpacer = $(tab.WorkbookView.dashboardSpacerSelector);
      if (!this._initializedSearchResults) {
        this._initializedSearchResults = true;
        dashboardSpacer.append(this.domResults);
        $(this.domResults).css({ position: 'absolute', 'z-index': '987' });
        this._domResultsPBExtents = dojo._getPadBorderExtents(this.domResults);
      }
      var querySectionBox = dojo.coords(this.domQuerySection);
      var querySectionOffset = $(this.domQuerySection).offset();
      var parentOffset = dashboardSpacer.offset();
      var querySectionTop = tab.DoubleUtil.roundToInt(querySectionOffset.top) - tab.DoubleUtil.roundToInt(parentOffset.top);
      var querySectionBottom = querySectionTop + querySectionBox.h;
      var viewport = dojo.coords(dashboardSpacer.get(0));
      var viewportBottom = viewport.t + viewport.h;
      var minHeight = itemHeight + this._domResultsPBExtents.h;
      var optimalHeight = this.domResults.childNodes.length * itemHeight + this._domResultsPBExtents.h;
      var availableBelow = viewportBottom - querySectionBottom;
      var availableAbove = querySectionTop - viewport.t;
      var popupBelow = true;
      var height = Math.min(optimalHeight, availableBelow);
      if (height < minHeight && availableAbove > availableBelow) {
        height = Math.min(optimalHeight, availableAbove);
        popupBelow = false;
      }
      height = Math.max(height, minHeight);
      dojo.marginBox(this.domResults, ss.mkdict(['w', querySectionBox.w, 'h', height]));
      var top = (popupBelow ? querySectionBottom : (querySectionTop - height));
      var left = tab.DoubleUtil.roundToInt(querySectionOffset.left) - tab.DoubleUtil.roundToInt(parentOffset.left);
      $(this.domResults).css({ top: top + 'px', left: left + 'px', 'border-top-width': (popupBelow ? 0 : 1) + 'px', 'border-bottom-width': (popupBelow ? 1 : 0) + 'px' });
    },
    $setIntegralHeight: function SearchWidget$SetIntegralHeight(totalLines, itemHeight) {
      var minLines = Math.max(this.domResults.childNodes.length, 1);
      var linesForResults = Math.min(minLines, Math.floor(totalLines / 2));
      this.domResults.style.height = (linesForResults * itemHeight).toString() + 'px';
    },
    $getItemHeight: function SearchWidget$GetItemHeight() {
      if (ss.isNullOrUndefined(this.domResults.firstChild)) {
        return 0;
      }
      var firstChild = $(this.domResults.firstChild);
      if (ss.isValue(firstChild[0].offsetHeight)) {
        return firstChild[0].offsetHeight;
      }
      return 15;
    },
    $startSearchTimer: function SearchWidget$StartSearchTimer() {
      this._searchTimer = tab.MiscUtil.clearTimeout(this._searchTimer);
      this._searchTimer = window.setTimeout(ss.mkdel(this, this.doSearch), this.searchDelay);
    },
    showSearchSpinner: function SearchWidget$ShowSearchSpinner(show) {
      this._bSearching = show;
      this.setQueryIconsVisibility();
    },
    addManualSearchItems: function SearchWidget$AddManualSearchItems(items) {
      if (this.get_qf().get_dijitDeclaredClass() !== 'tableau.base.widget.LegacyCategoricalQuickFilter') {
        return;
      }
      if (tab.MiscUtil.isNullOrUndefined(items)) {
        items = this.getQuery().split('\n');
      }
      if (tab.MiscUtil.isNullOrEmpty(items)) {
        return;
      }
      var newTuples = [];
      for (var i = 0, length = items.length; i < length; i++) {
        var item = items[i];
        if (!tab.MiscUtil.isNullOrEmpty$1(item)) {
          newTuples.push({ d: item, s: true, t: [{ t: 's', v: item, s: null }] });
        }
      }
      var changed = new Object();
      changed.schema = this.get_qf().get_oFilter().table.schema;
      changed.tuples = newTuples;
      this.notifyParentFilterOfChanged(changed, true, false);
      this.clearSearch(false, false);
    },
    doSearch: function SearchWidget$DoSearch() {
      this.searchWithQuery(this.getQuery());
    },
    updateSearch: function SearchWidget$UpdateSearch() {
      if (this.get_isVisible() && this.resultCount > 0) {
        this.searchWithQuery(this.getQuery());
      }
    },
    searchWithQuery: function SearchWidget$SearchWithQuery(query) {
      if (query.length <= 0) {
        this.clearSearch(false, false);
      }
      else if (this.get_qf().get_dijitDeclaredClass().indexOf('LegacyCategoricalQuickFilter') > -1 && !this._isTypeInList) {
        if (this.get_qf().get_oFilter().isTiled) {
          this.doRemoteSearch(query, true);
        }
        else {
          this.handleSearchResults(this.doCategoricalSearch(query));
        }
      }
      else {
        this.doRemoteSearch(query, false);
      }
    },
    doRemoteSearch: function SearchWidget$DoRemoteSearch(query, shouldGetIndex) {
      this.showSearchSpinner(this._isTypeInList);
      this._lastRemoteSearch = this.doAjaxRemoteSearch(query, this.$searchResultsMaxRows, shouldGetIndex, ss.mkdel(this, this.handleSearchResults), ss.mkdel(this, this.handleSearchResultsError));
    },
    $cancelRemoteSearch: function SearchWidget$CancelRemoteSearch() {
      if (!!this._lastRemoteSearch) {
        this._lastRemoteSearch.abort();
        this._lastRemoteSearch = null;
      }
      this.showSearchSpinner(false);
    },
    $addNotShownCountDiv: function SearchWidget$AddNotShownCountDiv(html, shownCount, actualCount) {
      var esc = tab.EscapingUtil.escapeHtml;
      if (!ss.isNullOrUndefined(actualCount) && shownCount < actualCount) {
        var notShownCount = actualCount - shownCount;
        html.push('<div class="searchResultsRemaining">');
        if (notShownCount === 1) {
          html.push(esc(tab.Strings.SearchResultsNotShownSingular));
        }
        else {
          var dv = { t: 'i', v: notShownCount, s: null };
          var notShownCountFormatted = tableau.format.formatDataValue(dv, null, tab.ApplicationModel.get_instance().get_numberFormat(), null, 0);
          html.push(esc(tab.Strings.SearchResultsNotShownPlural(notShownCountFormatted)));
        }
        html.push('</div>');
      }
    },
    $searchResultsToHtml: function SearchWidget$SearchResultsToHtml(data) {
      if (data.length <= 0) {
        return [];
      }
      this.set_OResults(data);
      var t = this.get_oResults().tuples;
      var ti = this.get_oResults().indices;
      var resultsHtml = [];
      var itemName = this.makeUniqueSearchItemIdPrefix();
      for (var i = 0, len = t.length; i < len; i++) {
        var index = (!!ti ? ti[i] : i);
        var itemHtml = $tab_FilterItemUtil.filterItem.getSearchResultHtml(this.get_qf(), t[i], itemName, index);
        resultsHtml.push(itemHtml);
      }
      this.$addNotShownCountDiv(resultsHtml, t.length, data.actual_size);
      return resultsHtml;
    },
    handleSearchResults: function SearchWidget$HandleSearchResults(data) {
      var esc = tab.EscapingUtil.escapeHtml;
      var noMatchHTML = tab.Strings.QuickFilterSearchNoMatches;
      this.showSearchSpinner(false);
      if (!!data && data.dojoType === 'cancel') {
        return;
      }
      this.domResults.innerHTML = '';
      if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.LegacyHierarchicalQuickFilter' || this._isTypeInList || this.get_qf().get_oFilter().isTiled) {
        if (!!data.schema[0].collation && data.schema[0].collation.f === 0) {
          noMatchHTML = '<div>' + esc(noMatchHTML) + '<br/>' + esc(tab.Strings.QuickFilterSearchDataIsCaseSensitive) + '</div>';
        }
        data = this.$searchResultsToHtml(data);
      }
      this.resultCount = data.length;
      this.domResults.innerHTML = ((this.resultCount > 0) ? data.join('') : noMatchHTML);
      this.domResults.style.display = ((this.domResults.innerHTML.length > 0) ? 'block' : 'none');
      if (this.$focusedListItemIndex !== -1) {
        this.$getSearchResultsItemElementAt(this.$focusedListItemIndex).focus();
      }
      this.setQueryIconsVisibility();
      this.get_qf().layout(null);
      this.$categoricalSelectionBehavior.refreshRangeAnchorAndSelection();
    },
    handleSearchResultsError: function SearchWidget$HandleSearchResultsError(response) {
      this.showSearchSpinner(false);
      this.domResults.innerHTML = '';
      this.resultCount = 0;
    },
    applyChanges: function SearchWidget$ApplyChanges() {
      var changed = null;
      if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.LegacyCategoricalQuickFilter' && !this._isTypeInList) {
        changed = this.applyChangesCat();
      }
      else {
        changed = this.applyChangesHierOrTypeIn();
      }
      this.notifyParentFilterOfChanged(changed, false, false);
    },
    applyChangesByChangelist: function SearchWidget$ApplyChangesByChangelist(changelist) {
      if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.LegacyCategoricalQuickFilter' && !this._isTypeInList) {
        this.get_qf().applyChangesByChangelist(changelist);
      }
      else {
        this.applyChanges();
      }
    },
    notifyParentFilterOfChanged: function SearchWidget$NotifyParentFilterOfChanged(changed, manualAdd, noServerCall) {
      if (changed.tuples.length === 0) {
        return;
      }
      this.get_qf().updateStateFromSearch(changed);
      if (noServerCall) {
        return;
      }
      var $t1 = this.get_qf();
      $t1.set_stateId($t1.get_stateId() + 1);
      if (manualAdd) {
        tab.FilterClientCommands.addManualFilterItems(this.get_qf().get_session().get_visualId(), this.get_qf().get_identifier(), changed, manualAdd);
      }
      else {
        var isTypeInAll = this._isTypeInList && this.get_qf().get_oFilter().all;
        var replaceFilter = isTypeInAll || this.get_qf().isSingleSelect();
        if (replaceFilter) {
          if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.LegacyHierarchicalQuickFilter') {
            this._doModifyHierarchialFilter(replaceFilter, changed);
          }
          else {
            this.doSetCategoricalFilter(isTypeInAll, changed);
          }
        }
        else if (this.get_qf().get_dijitDeclaredClass() === 'tableau.base.widget.LegacyHierarchicalQuickFilter') {
          this._doModifyHierarchialFilter(false, changed);
        }
        else {
          this.doModifyCategoricalFilter(changed);
        }
      }
    },
    doSetCategoricalFilter: function SearchWidget$DoSetCategoricalFilter(isTypeInAll, changed) {
      var alias;
      var aliases = [];
      var count = changed.tuples.length;
      if (isTypeInAll) {
        for (var i = 0; i < count; i++) {
          alias = $tab_FilterItemUtil.getAliasForTuple(changed.tuples[i]);
          if (changed.tuples[i].s) {
            aliases.push(alias);
          }
        }
      }
      else {
        alias = $tab_FilterItemUtil.getAliasForTuple(changed.tuples[0]);
        aliases.push(alias);
      }
      tab.FilterClientCommands.replaceCategoricalFilterValues(new tab.CancelDialog(null, null, null, true), this.get_qf().get_session().get_visualId(), this.get_qf().get_identifier(), aliases);
    },
    doModifyCategoricalFilter: function SearchWidget$DoModifyCategoricalFilter(changed) {
      var addAliases = [];
      var removeAliases = [];
      var count = changed.tuples.length;
      for (var i = 0; i < count; i++) {
        var alias = $tab_FilterItemUtil.getAliasForTuple(changed.tuples[i]);
        if (changed.tuples[i].s) {
          addAliases.push(alias);
        }
        else {
          removeAliases.push(alias);
        }
      }
      if (this._isTypeInList && removeAliases.length === 0) {
        tab.FilterClientCommands.addManualFilterItems(this.get_qf().get_session().get_visualId(), this.get_qf().get_identifier(), changed, false);
      }
      else {
        tab.FilterClientCommands.modifyCategoricalFilterValues(this.get_qf().get_session().get_visualId(), this.get_qf().get_identifier(), addAliases, removeAliases, true);
      }
    },
    _doModifyHierarchialFilter: function SearchWidget$DoModifyHierarchialFilter(replaceFilter, changed) {
      var addAliases = [];
      var removeAliases = [];
      var updateMode = (replaceFilter ? 'filter-replace' : 'filter-delta');
      var selectionCount = changed.tuples.length;
      var tuples = changed.tuples;
      for (var i = 0; i < selectionCount; i++) {
        var keyCount = tuples[i].t.length;
        var alias = '';
        for (var j = 0; j < keyCount; ++j) {
          var key = tuples[i].t[j];
          if (!!key.v) {
            alias = key.v;
          }
        }
        if (tuples[i].s) {
          addAliases.push(alias);
        }
        else {
          removeAliases.push(alias);
        }
      }
      tab.FilterClientCommands.doMemberHierarchialFilter(this.get_qf().get_session().get_visualId(), this.get_qf().get_field(), addAliases, removeAliases, updateMode);
    },
    applyChangesCat: function SearchWidget$ApplyChangesCat() {
      var currentState = new Object();
      currentState.schema = this.get_qf().get_oFilter().table.schema;
      currentState.tuples = [];
      var item = ss.cast(this.domResults.firstChild, HTMLElement);
      var length = this.domResults.childNodes.length;
      var listIndex;
      var tuples = this.get_qf().get_oFilter().table.tuples;
      if (this.get_qf().isSingleSelect()) {
        for (var i = 0; i < length; i++, item = ss.cast(item.nextSibling, HTMLElement)) {
          if ($tab_FilterItemUtil.filterItem.isChecked(item)) {
            listIndex = $tab_FilterItemUtil.filterItem.getIndex(item);
            this.recordCheckedChanges(currentState, item, tuples[listIndex]);
            for (var j = 0; j < tuples.length; ++j) {
              if (j !== listIndex) {
                tuples[j].s = false;
              }
            }
            break;
          }
        }
      }
      else {
        var indexes = [];
        for (var i1 = 0; i1 < length; i1++, item = ss.cast(item.nextSibling, HTMLElement)) {
          listIndex = $tab_FilterItemUtil.filterItem.getIndex(item);
          this.recordCheckedChanges(currentState, item, tuples[listIndex]);
          indexes[listIndex] = 1;
        }
        item = ss.cast(this.get_qf().get_domContent().firstChild, HTMLElement);
        if ($tab_FilterItemUtil.filterItem.isAllItem(item)) {
          item = ss.cast(item.nextSibling, HTMLElement);
        }
        var len = tuples.length;
        for (var i2 = 0; i2 < len; i2++, item = ss.cast(item.nextSibling, HTMLElement)) {
          if (indexes[i2] === 0) {
            this.recordCheckedChanges(currentState, item, tuples[i2]);
          }
        }
      }
      return currentState;
    },
    applyChangesHierOrTypeIn: function SearchWidget$ApplyChangesHierOrTypeIn() {
      var currentState = new Object();
      currentState.schema = this.get_oResults().schema;
      currentState.tuples = [];
      var item = ss.cast(this.domResults.firstChild, HTMLElement);
      if (ss.isNullOrUndefined(item)) {
        return currentState;
      }
      var tuples = this.get_oResults().tuples;
      for (var i = 0, length = tuples.length; i < length; i++, item = ss.cast(item.nextSibling, HTMLElement)) {
        this.recordCheckedChanges(currentState, item, tuples[i]);
      }
      return currentState;
    },
    updateStateIfNeeded: function SearchWidget$UpdateStateIfNeeded() {
    },
    handleClickIfPending: function SearchWidget$HandleClickIfPending(node) {
    },
    clearRangeAnchorAndSelection: function SearchWidget$ClearRangeAnchorAndSelection() {
      this.$categoricalSelectionBehavior.clearRangeAnchorAndSelection();
    },
    forEachSelected: function SearchWidget$ForEachSelected(itemCallback) {
      this.$categoricalSelectionBehavior.forEachSelected(itemCallback);
    },
    onListItemClick: function SearchWidget$OnListItemClick(evt) {
      this.$categoricalSelectionBehavior.onListItemClick(evt);
    },
    onSearchResultsKeyDown: function SearchWidget$OnSearchResultsKeyDown(evt) {
      switch (evt.which) {
        case 39:
        case 40: {
          this.$moveUpOrDownResultsList(1, evt);
          break;
        }
        case 37:
        case 38: {
          this.$moveUpOrDownResultsList(-1, evt);
          break;
        }
        case 9: {
          this.clearSearch(true, false);
          evt.stopPropagation();
          return;
        }
        case 27: {
          this.clearSearch(true, false);
          this.focusQueryBox();
          break;
        }
        case 32: {
          this.$clickAndFocusCurrentSearchResultItem();
          break;
        }
        default: {
          return;
        }
      }
      evt.preventDefault();
      evt.stopPropagation();
    },
    handleItemClick: function SearchWidget$HandleItemClick(node) {
    },
    recordCheckedChanges: function SearchWidget$RecordCheckedChanges(changedList, item, tuple) {
      if ($tab_FilterItemUtil.filterItem.isChecked(item) && !tuple.s) {
        changedList.tuples.push($tab_FilterItemUtil.filterItem.setChecked(item, true, tuple));
      }
      else if (!$tab_FilterItemUtil.filterItem.isChecked(item) && tuple.s) {
        changedList.tuples.push($tab_FilterItemUtil.filterItem.setChecked(item, false, tuple));
      }
    },
    $moveUpOrDownResultsList: function SearchWidget$MoveUpOrDownResultsList(positionChange, evt) {
      var node = $tab_FilterItemUtil.filterItem.getNodeFromEvent(evt);
      var nextIndex = $tab_FilterItemUtil.getIndexFromId(node.getAttribute('id')) + positionChange;
      if (nextIndex >= this.domResults.children.length) {
        nextIndex = 0;
      }
      else if (nextIndex < 0) {
        nextIndex = this.domResults.children.length - 1;
      }
      var nextItemCheckbox = this.$getSearchResultsItemElementAt(nextIndex);
      nextItemCheckbox.focus();
      if (tab.FeatureFlags.isEnabled('WebCategoricalSelectionHighlight')) {
        this.$categoricalSelectionBehavior.handleSimpleSelection(evt, nextIndex);
      }
    },
    $getSearchResultsItemElementAt: function SearchWidget$GetSearchResultsItemElementAt(index) {
      return this.domResults.children[index];
    },
    $clickAndFocusCurrentSearchResultItem: function SearchWidget$ClickAndFocusCurrentSearchResultItem() {
      var focusedListItem = $(document.activeElement);
      if (focusedListItem.is('.FIItem')) {
        focusedListItem.find('input:first').click();
        this.$focusedListItemIndex = $tab_FilterItemUtil.getIndexFromId(focusedListItem.get(0).getAttribute('id'));
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.SearchWidgetBase
  var $tab_SearchWidgetBase = global.tab.SearchWidgetBase = ss.mkType($asm, 'tab.SearchWidgetBase', function() {
    this.isContainer = false;
    this.domXButton = null;
    this.CANCEL_SEARCH_TOOLTIP = tab.Strings.QuickFilterSearchCancel;
    this.SEARCH_TOOLTIP = tab.Strings.QuickFilterSearchTooltip;
    this.ADD_ITEM_CTRL_ENTER = tab.Strings.QuickFilterSearchAddItemCtrlEnter;
    this.ADD_ITEM_ENTER = tab.Strings.QuickFilterSearchAddItemEnter;
    this.XBUTTON_CLOSE_TOOLTIP = tab.Strings.QuickFilterSearchCloseTooltip;
    this.XBUTTON_CLEAR_TOOLTIP = tab.Strings.QuickFilterSearchClearTooltip;
    this.NO_MATCHES = tab.Strings.QuickFilterSearchNoMatches;
    this.isVisible = false;
    this.qf = null;
    this.oResults = null;
    this.resultCount = $tab_SearchWidgetBase.noSearchPerformed;
    this.searchDelay = 400;
    this.busy_gif_url = null;
    this._isTypeInList = false;
    this.$3$HiddenField = null;
    this.$3$EscapeKeyPressedField = null;
    Object.call(this);
  }, {
    add_hidden: function SearchWidgetBase$add_Hidden(value) {
      this.$3$HiddenField = ss.delegateCombine(this.$3$HiddenField, value);
    },
    remove_hidden: function SearchWidgetBase$remove_Hidden(value) {
      this.$3$HiddenField = ss.delegateRemove(this.$3$HiddenField, value);
    },
    add_escapeKeyPressed: function SearchWidgetBase$add_EscapeKeyPressed(value) {
      this.$3$EscapeKeyPressedField = ss.delegateCombine(this.$3$EscapeKeyPressedField, value);
    },
    remove_escapeKeyPressed: function SearchWidgetBase$remove_EscapeKeyPressed(value) {
      this.$3$EscapeKeyPressedField = ss.delegateRemove(this.$3$EscapeKeyPressedField, value);
    },
    get_domXButton: function SearchWidgetBase$get_DomXButton() {
      return this.domXButton;
    },
    get_isVisible: function SearchWidgetBase$get_IsVisible() {
      return this.isVisible;
    },
    set_IsVisible: function SearchWidgetBase$set_IsVisible(value) {
      this.isVisible = value;
    },
    get_qf: function SearchWidgetBase$get_Qf() {
      return this.qf;
    },
    set_Qf: function SearchWidgetBase$set_Qf(value) {
      this.qf = value;
    },
    get_dijitDomNode: function SearchWidgetBase$get_DijitDomNode() {
      return this.domNode;
    },
    get_oResults: function SearchWidgetBase$get_OResults() {
      return this.oResults;
    },
    set_OResults: function SearchWidgetBase$set_OResults(value) {
      this.oResults = value;
    },
    get_applyDelay: null,
    get_dijitClassName: function SearchWidgetBase$get_DijitClassName() {
      return this.declaredClass;
    },
    postMixInProperties: function SearchWidgetBase$PostMixInProperties() {
      this.inherited(arguments);
      this.busy_gif_url = tableau.util.assetUrl('/images/busy.gif', false);
    },
    postCreate: function SearchWidgetBase$PostCreate() {
      this._isTypeInList = !!this.get_qf() && this.get_qf().get_isTypeInList();
    },
    resize: function SearchWidgetBase$Resize(marginBox) {
      dojo.marginBox(this.domNode, marginBox);
      this.layout(null);
    },
    onQueryBoxKeyDown: function SearchWidgetBase$OnQueryBoxKeyDown(evt) {
      var behavior = this.getOnQueryBoxKeyDownBehavior(evt);
      if (!!behavior) {
        if (behavior.stopEvent) {
          spiff.EventUtil.stopEvent(evt);
        }
        if (!!behavior.functionToCall) {
          window.setTimeout(behavior.functionToCall, 10);
        }
      }
    },
    getOnQueryBoxKeyDownBehavior: function SearchWidgetBase$GetOnQueryBoxKeyDownBehavior(keyEvent) {
      var $t1 = new Object();
      $t1.functionToCall = null;
      $t1.stopEvent = false;
      var result = $t1;
      switch (keyEvent.keyCode) {
        case 13: {
          result.stopEvent = true;
          break;
        }
        case 27: {
          result.stopEvent = true;
          if (tab.MiscUtil.isNullOrEmpty$1(this.getQuery())) {
            if (!ss.staticEquals(this.$3$EscapeKeyPressedField, null)) {
              this.$3$EscapeKeyPressedField();
            }
          }
          this.onXButtonClick(null);
          break;
        }
        case 16: {
          result.stopEvent = true;
          break;
        }
        case 17: {
          result.stopEvent = true;
          break;
        }
        default: {
          if (keyEvent.keyCode >= 32 || keyEvent.keyCode === 8) {
            result.functionToCall = ss.mkdel(this, this.handleQueryTextChanged);
          }
          break;
        }
      }
      return result;
    },
    handleQueryTextChanged: function SearchWidgetBase$HandleQueryTextChanged(evt) {
      this.$updateXButtonTooltip();
    },
    onXButtonClick: function SearchWidgetBase$OnXButtonClick(evt) {
      if (!this._isTypeInList) {
        var queryStr = this.getQuery();
        this.hideUI();
        if (queryStr !== '') {
          this.showUI$1();
        }
      }
      else {
        this.clearSearch(false, false);
      }
    },
    onButtonHover: function SearchWidgetBase$OnButtonHover(evt) {
      $(evt.target).addClass('Hover');
    },
    onButtonUnhover: function SearchWidgetBase$OnButtonUnhover(evt) {
      $(evt.target).removeClass('Hover');
    },
    toggleUI: function SearchWidgetBase$ToggleUI() {
      if (this.get_isVisible()) {
        this.hideUI();
      }
      else {
        this.showUI$1();
      }
    },
    applyChangesByChangelist: function SearchWidgetBase$ApplyChangesByChangelist(changelist) {
      throw new ss.NotSupportedException();
    },
    isShowingResults: function SearchWidgetBase$IsShowingResults() {
      return this.isVisible && this.resultCount > 0;
    },
    focusQueryBox: null,
    getQuery: null,
    setQuery: null,
    updateSearch: null,
    notifyParentFilterOfChanged: function SearchWidgetBase$NotifyParentFilterOfChanged(changed, manualAdd, noServerCall) {
    },
    showUI$1: function SearchWidgetBase$ShowUI() {
      this.showUI(false);
    },
    showUI: function SearchWidgetBase$ShowUI(noLayout) {
      if (this.get_isVisible()) {
        return;
      }
      $(this.domNode).css('display', 'block');
      this.isVisible = true;
      if (!noLayout) {
        this.get_qf().layout(null);
      }
      this.focusQueryBox();
    },
    hideUI: function SearchWidgetBase$HideUI() {
      if (!this.get_isVisible()) {
        return;
      }
      this.clearSearch(false, true);
      $(this.domNode).css('display', 'none');
      if (!ss.staticEquals(this.$3$HiddenField, null)) {
        this.$3$HiddenField();
      }
      this.isVisible = false;
      this.get_qf().layout(null);
    },
    clearSearch: function SearchWidgetBase$ClearSearch(preserveQueryBoxText, noFocus) {
      if (!preserveQueryBoxText) {
        this.setQuery('');
        this.$updateXButtonTooltip();
      }
      this.resultCount = 0;
      this.get_qf().layout(null);
      if (!noFocus) {
        this.focusQueryBox();
      }
    },
    doCategoricalSearch: function SearchWidgetBase$DoCategoricalSearch(query) {
      var filter = this.get_qf().get_oFilter();
      var itemName = this.makeUniqueSearchItemIdPrefix();
      var resultsFormatter = ss.mkdel(this, function(t, displayName, index) {
        return $tab_FilterItemUtil.filterItem.getSearchResultHtml(this.get_qf(), t, itemName, index);
      });
      return $tab_LocalSearch.findMatches(query, filter, ss.mkdel(this, this.formatTuple), resultsFormatter);
    },
    $updateXButtonTooltip: function SearchWidgetBase$UpdateXButtonTooltip() {
      if (ss.isNullOrEmptyString(this.getQuery()) && !this._isTypeInList) {
        this.get_domXButton().title = this.XBUTTON_CLOSE_TOOLTIP;
      }
      else {
        this.get_domXButton().title = this.XBUTTON_CLEAR_TOOLTIP;
      }
    },
    formatTuple: function SearchWidgetBase$FormatTuple(tuple) {
      return $tab_FilterFormat.formatTupleDisplayName(tuple, true, this.get_qf().get_oFilter().role);
    },
    isSingleSelect: function SearchWidgetBase$IsSingleSelect() {
      return this.get_qf().isSingleSelect();
    },
    makeUniqueSearchItemIdPrefix: function SearchWidgetBase$MakeUniqueSearchItemIdPrefix() {
      return $tab_FilterItemUtil.getBaseItemName(this.get_qf(), 'SI');
    },
    currentDomain: function SearchWidgetBase$CurrentDomain() {
      var domain = ss.cast(tableau.types.QFDomain.QFD_ALL, String);
      if (!!this.get_qf().get_attributes()) {
        domain = ss.cast(this.get_qf().get_attributes()['values'], String);
      }
      return domain;
    },
    doAjaxRemoteSearch: function SearchWidgetBase$DoAjaxRemoteSearch(query, maxRows, shouldGetIndex, handleResults, handleResultsError) {
      return this.get_qf().get_session().searchFilter(this.get_qf().get_identifier(), query, maxRows, shouldGetIndex, this.currentDomain(), handleResults, handleResultsError);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.SimpleDropdown
  var $tab_SimpleDropdown = global.tab.SimpleDropdown = ss.mkType($asm, 'tab.SimpleDropdown', function(parent, div, attrs) {
    $tab_BaseDropdown.call(this, parent, div, attrs);
    this.set_itemFormatter(ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.formatDropdownListFilterItemHtml));
  }, {
    createListElement: function SimpleDropdown$CreateListElement(parentDiv, tuples, itemName, facet) {
      var checklistDiv = $(parentDiv);
      if (this.shouldUseAllItem() && tuples.length > 0) {
        $tab_Checklist.addAllItem(checklistDiv, this.parent, itemName, facet, false, ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.formatDropdownListFilterItemHtml));
      }
      {
        if (ss.isValue(this.tiledWidget)) {
          this.tiledWidget.destroy();
        }
        this.tiledWidget = $tab_TiledWidgetFactory.createSimpleList(this.parent, tuples, parentDiv, itemName, this.get_lineHeight());
      }
      {
        var mouseDisposable = spiff.EventUtil.bindWithDispose(checklistDiv, 'click', ss.mkdel(this, this.$onSelection));
        this.disposables.add$1(mouseDisposable);
        var touchDisposable = spiff.EventUtil.bindWithDispose(checklistDiv, 'touchend', ss.mkdel(this, this.$onSelection));
        this.disposables.add$1(touchDisposable);
      }
      checklistDiv.on('keyup', ss.mkdel(this, this.$onKeyUp));
      checklistDiv.parent().toggleClass('CFDropdownNoItems', tuples.length === 0);
      if (tuples.length === 0) {
        checklistDiv.text(tab.Strings.QuickFilterNoItems);
      }
    },
    $onSelection: function SimpleDropdown$OnSelection(evt) {
      var node = $tab_FilterItemUtil.filterItem.getNodeFromEvent(evt);
      if (!!!node) {
        return;
      }
      var index = $tab_FilterItemUtil.filterItem.getIndex(node);
      if (index === -1 && !this.parent.get_oFilter().all) {
        this.parent.doSelectAll(true);
        this.hideMenu();
        return;
      }
      if (index !== this.currentlySelected) {
        if (index >= this.parent.get_oFilter().table.actual_size || index < 0) {
          this.hideMenu();
          return;
        }
        this.parent.set_stateId(this.parent.get_stateId() + 1);
        var indices = [];
        indices.push(index);
        tab.FilterClientCommands.setCategoricalFilterValuesByIndex(new tab.CancelDialog(null, null, null, true), this.parent.get_session().get_visualId(), this.parent.get_identifier(), indices);
      }
      this.hideMenu();
    },
    $onKeyUp: function SimpleDropdown$OnKeyUp(e) {
      switch (e.which) {
        case 13:
        case 32: {
          this.$onSelection(e);
          break;
        }
        default: {
          return;
        }
      }
      e.preventDefault();
      e.stopPropagation();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.SimpleListContentFormatter
  var $tab_SimpleListContentFormatter = global.tab.SimpleListContentFormatter = ss.mkType($asm, 'tab.SimpleListContentFormatter', function(filter, itemName, itemFormatter) {
    this.$filter = null;
    this.$itemName = null;
    this.$itemFormatter = null;
    this.tileHtml = '<div id=\'{1}\' role=\'listbox\' class="tile tab-ctrl-formatted-text" style="top: {0}px; left: 0; right: 0; position: absolute; width: 100%;">';
    this.$filter = filter;
    this.$itemName = itemName;
    this.$itemFormatter = itemFormatter;
  }, {
    destroy: function SimpleListContentFormatter$Destroy() {
    },
    format: function SimpleListContentFormatter$Format(data, pos, range) {
      var html = '';
      var tuples = ss.safeCast(data, Array);
      if (ss.isNullOrUndefined(pos)) {
        tab.Log.get(this).warn('internal error: pos is null', []);
        return html;
      }
      if (ss.isNullOrUndefined(range)) {
        tab.Log.get(this).warn('internal error: range is null', []);
        return html;
      }
      if (!this.isValid(tuples)) {
        tab.Log.get(this).warn('internal error: invalid data input', []);
        return html;
      }
      html += ss.formatString(this.tileHtml, pos.y.toString(), tab.DomUtil.generateUniqueId());
      for (var i = 0, itemIndex = range.get_from(); i < tuples.length; ++i, ++itemIndex) {
        html += this.$itemFormatter(this.$filter, tuples[i], this.$itemName, itemIndex);
      }
      html += '</div>';
      return html;
    },
    isValid: function SimpleListContentFormatter$IsValid(data) {
      return true;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.Slider
  var $tab_Slider = global.tab.Slider = ss.mkType($asm, 'tab.Slider', function(targetDiv, attrs, isAll, doUpdateFunc, getTitleOffsetFunc, getCurrentTextFunc, onIntermediateChangeFunc, getCurrentFacetFunc, showFacets) {
    this.$disposables = null;
    this.styleid = 0;
    this.$sliderRules = null;
    this.$timer = -1;
    this.$readoutAttributes = [$tab_SliderConstants.showReadoutAttr, $tab_SliderConstants.hideReadoutAttr];
    this.$sliderAttributes = [$tab_SliderConstants.showSliderAttr, $tab_SliderConstants.hideSliderAttr];
    this.$arrowsAttributes = [$tab_SliderConstants.showStepButtonsAttr, $tab_SliderConstants.hideStepButtonsAttr];
    this.$ticksAttribtes = [$tab_SliderConstants.showTicksAttr, $tab_SliderConstants.hideTicksAttr];
    this.div = null;
    this.$attributes = null;
    this.currentlySelected = 0;
    this.numValues = 0;
    this.$startSub = null;
    this.$stopSub = null;
    this.slider = null;
    this.readout = null;
    this.$isContinuous = false;
    this.$textDiv = null;
    this.$facetDiv = null;
    this.$tooltipDiv = null;
    this.$leftButton = null;
    this.$rightButton = null;
    this.$isDragging = false;
    this.$getTitleOffset = null;
    this.$tooltipTimer = null;
    this.$shouldShowTooltip = false;
    this.$getCurrentText = null;
    this.$isAll = false;
    this.$doUpdate = null;
    this.$onIntermediateChange = null;
    this.$currentIndex = null;
    this.$showFacets = false;
    this.$oneline = false;
    this.$getCurrentFacet = null;
    this.$tooltip = null;
    this.div = targetDiv;
    this.$attributes = attrs;
    this.$isAll = isAll;
    this.$doUpdate = doUpdateFunc;
    this.$getTitleOffset = getTitleOffsetFunc;
    this.$getCurrentText = getCurrentTextFunc;
    this.$onIntermediateChange = onIntermediateChangeFunc;
    this.$getCurrentFacet = getCurrentFacetFunc;
    this.$showFacets = showFacets;
    $(this.div).addClass('tableauWidgetUiSlider');
    this.$disposables = new tab.DisposableHolder();
    this.currentlySelected = -1;
  }, {
    get_oneLineLayout: function Slider$get_OneLineLayout() {
      return this.$oneline;
    },
    $shouldShow: function Slider$ShouldShow(attrName) {
      return ss.cast(this.$attributes[attrName[0]], String) !== 'false' && ss.cast(this.$attributes[attrName[1]], String) !== 'true';
    },
    calculateStyleid: function Slider$CalculateStyleid() {
      this.styleid = 0;
      if (!this.$shouldShow(this.$readoutAttributes)) {
        this.styleid += 4;
      }
      if (!this.$shouldShow(this.$sliderAttributes)) {
        this.styleid += 2;
      }
      if (!this.$shouldShow(this.$arrowsAttributes)) {
        this.styleid += 1;
      }
      if (this.styleid > 5) {
        this.styleid = 3;
      }
    },
    dispose: function Slider$Dispose() {
      this.$disposables.dispose();
    },
    destroy: function Slider$Destroy() {
      dojo.unsubscribe(this.$startSub);
      dojo.unsubscribe(this.$stopSub);
      this.$killTimer();
      this.dispose();
      if (ss.isValue(this.$tooltip)) {
        this.$tooltip.domNode.parentNode.removeChild(this.$tooltip.domNode);
        this.$tooltip = null;
      }
      if (ss.isValue(this.slider) && typeof(this.slider['destroy']) === 'function') {
        this.slider.destroy();
      }
      if (ss.isValue(this.$sliderRules) && typeof(this.$sliderRules['destroy']) === 'function') {
        this.$sliderRules.destroy();
      }
      var jqueryDiv = $(this.div);
      jqueryDiv.removeClass('tableauWidgetUiSlider');
      jqueryDiv.empty();
    },
    instantiateFromDomain: function Slider$InstantiateFromDomain(domain, current) {
      var tuples = [];
      var len = domain.length;
      for (var i = 0; i < len; i++) {
        tuples[i] = { d: domain[i], s: ss.referenceEquals(current, domain[i]), t: [] };
      }
      this.instantiateFromTuples(tuples, null);
    },
    instantiateFromTuples: function Slider$InstantiateFromTuples(t, text) {
      var currentlySelectedLoc = -1;
      var initialText = tab.Strings.QuickFilterUnknown;
      var facet = null;
      if (t.length > 0) {
        var len = t.length;
        for (var i = 0; i < len; i++) {
          if (t[i].s && !this.$isAll) {
            if (currentlySelectedLoc > -1) {
              initialText = tab.Strings.QuickFilterMultipleValues;
            }
            else {
              currentlySelectedLoc = i;
              initialText = this.$getCurrentText(i);
            }
          }
        }
      }
      if (currentlySelectedLoc < 0) {
        currentlySelectedLoc = 0;
        if (ss.isValue(text)) {
          initialText = text;
        }
      }
      if (this.$showFacets) {
        facet = this.$getCurrentFacet(currentlySelectedLoc);
      }
      this.instantiate$1(t.length, currentlySelectedLoc, initialText, facet);
    },
    instantiate: function Slider$Instantiate(numValues, currentlySelectedArg, initialText) {
      this.instantiate$1(numValues, currentlySelectedArg, initialText, null);
    },
    instantiate$1: function Slider$Instantiate(numValues, currentlySelectedArg, initialText, facet) {
      var rulesNode = null;
      this.currentlySelected = currentlySelectedArg;
      this.calculateStyleid();
      if (this.$shouldShow(this.$readoutAttributes)) {
        this.readout = document.createElement('div');
        this.readout.classList.add('sliderTextReadout');
        this.readout.classList.add('tab-ctrl-formatted-widget');
        this.readout.classList.add('tab-ctrl-formatted-fixedsize');
        this.$textDiv = document.createElement('div');
        this.$textDiv.classList.add('sliderText');
        this.$textDiv.innerHTML = tab.EscapingUtil.escapeHtml(initialText);
        if (this.$showFacets) {
          this.$facetDiv = document.createElement('div');
          this.$facetDiv.className = 'facet';
          this.$facetDiv.innerHTML = tab.EscapingUtil.escapeHtml(facet);
          this.readout.appendChild(this.$facetDiv);
        }
        this.readout.appendChild(this.$textDiv);
        this.div.appendChild(this.readout);
      }
      if (this.styleid === 3) {
        return;
      }
      var sliderDiv = document.createElement('div');
      if (this.$shouldShow(this.$sliderAttributes)) {
        rulesNode = document.createElement('div');
        sliderDiv.appendChild(rulesNode);
      }
      this.div.appendChild(sliderDiv);
      if (!ss.isValue(numValues) || ss.unbox(numValues) < 1) {
        numValues = 1;
      }
      this.$isContinuous = !isFinite(ss.unbox(numValues));
      if (this.$shouldShow(this.$sliderAttributes) && ss.Nullable$1.lt(numValues, 1200) && this.$shouldShow(this.$ticksAttribtes)) {
        var rulesParams = ss.mkdict(['count', numValues]);
        this.$sliderRules = new dijit.form.HorizontalRule(rulesParams, rulesNode);
      }
      var sliderParams = { templateString: $tab_Slider.tableauSliderTemplate, onChange: ss.mkdel(this, this.$applyChanges), value: this.currentlySelected, slideDuration: 0, intermediateChanges: true, showButtons: this.$shouldShow(this.$arrowsAttributes), pageIncrement: 1 };
      if (isFinite(ss.unbox(numValues))) {
        sliderParams.minimum = 0;
        sliderParams.maximum = ss.unbox(numValues) - 1;
        sliderParams.discreteValues = ss.unbox(numValues);
      }
      this.slider = new dijit.form.HorizontalSlider(sliderParams, sliderDiv);
      var sliderHandle = $(this.slider.sliderHandle);
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(sliderHandle, 'keydown', ss.mkdel(this, this.handleKeyDown)));
      this.$startSub = dojo.subscribe('/dnd/move/start', ss.mkdel(this, this.startDrag));
      this.$stopSub = dojo.subscribe('/dnd/move/stop', ss.mkdel(this, this.stopDrag));
      this.slider.startup();
      if (ss.isValue(this.$sliderRules)) {
        this.$sliderRules.startup();
      }
      this.$shouldShowTooltip = false;
      if (!this.$shouldShow(this.$readoutAttributes)) {
        this.$tooltipDiv = document.createElement('div');
        this.slider.sliderHandle.appendChild(this.$tooltipDiv);
        var tooltipProto = dijit._MasterTooltip.prototype;
        tooltipProto['templateString'] = $tab_Slider.$simpleTooltipTemplate;
        this.$tooltip = new dijit._MasterTooltip();
        this.$tooltip.dojoOrient = this.$tooltip.orient;
        this.$tooltip.orient = ss.mkdel(this, function(node, aroundCorner, tooltipCorner, overflow) {
          this.$tooltip.dojoOrient(node, aroundCorner, tooltipCorner, overflow);
          $(this.$tooltip.domNode).addClass('sliderThumbTooltip');
        });
        this.$disposables.add$1(spiff.EventUtil.bindWithDispose(sliderHandle, 'mouseenter', ss.mkdel(this, this.$onOverThumb)));
        this.$disposables.add$1(spiff.EventUtil.bindWithDispose(sliderHandle, 'mouseleave', ss.mkdel(this, this.$onOutThumb)));
      }
      this.$leftButton = ss.cast(this.slider.decrementButton.childNodes[0], HTMLElement);
      this.$rightButton = ss.cast(this.slider.incrementButton.childNodes[0], HTMLElement);
      this.$addEventHandlerToSliderControls();
      this.$updateButtons();
      this.$initialLayout();
    },
    $addEventHandlerToSliderControls: function Slider$AddEventHandlerToSliderControls() {
      var sliderHandleEvent = new EventUtils.TableauEventHandler(this.slider.sliderHandle, new EventUtils.EventHandleSpec());
      var leftButtonEvent = new EventUtils.TableauEventHandler(this.$leftButton, new EventUtils.EventHandleSpec());
      var rightButtonEvent = new EventUtils.TableauEventHandler(this.$rightButton, new EventUtils.EventHandleSpec());
      this.$disposables.add$1(sliderHandleEvent);
      this.$disposables.add$1(leftButtonEvent);
      this.$disposables.add$1(rightButtonEvent);
    },
    $updateButtons: function Slider$UpdateButtons() {
      this.$setButtonState(this.$leftButton, 'Left', this.currentlySelected === 0);
      if (ss.isValue(this.slider)) {
        this.$setButtonState(this.$rightButton, 'Right', this.currentlySelected === this.slider.maximum);
      }
    },
    $setButtonState: function Slider$SetButtonState(button, pos, state) {
      var el = $(button);
      el.removeClass('cp' + pos + 'Arrow' + (state ? 'Black' : 'Grey'));
      el.addClass('cp' + pos + 'Arrow' + (state ? 'Grey' : 'Black'));
    },
    setNewState: function Slider$SetNewState(newSelected) {
      this.currentlySelected = newSelected;
      if (ss.isValue(this.slider)) {
        this.slider._setValueAttr(this.currentlySelected);
      }
    },
    handleKeyDown: function Slider$HandleKeyDown(e) {
      e.charOrCode = e.which;
      this.slider._onKeyPress(e);
    },
    startDrag: function Slider$StartDrag(mover) {
      if (ss.isValue(this.slider) && ss.isValue(mover) && ss.referenceEquals(mover.node, this.slider.sliderHandle)) {
        this.$isDragging = true;
        if (this.$timer > 0) {
          this.$killTimer();
        }
      }
    },
    stopDrag: function Slider$StopDrag(mover) {
      if (ss.isValue(this.slider) && ss.isValue(mover) && ss.referenceEquals(mover.node, this.slider.sliderHandle)) {
        this.$isDragging = false;
        if (this.$timer > 0) {
          this.$killTimer();
        }
        this.$setTimer();
        this.$doThumbTooltip();
      }
    },
    $onOverThumb: function Slider$OnOverThumb(e) {
      if (!this.$shouldShow(this.$readoutAttributes)) {
        this.$tooltipTimer = tab.MiscUtil.clearTimeout(this.$tooltipTimer);
        this.$shouldShowTooltip = true;
        this.$tooltipTimer = window.setTimeout(ss.mkdel(this, this.$doThumbTooltip), 50);
      }
    },
    $onOutThumb: function Slider$OnOutThumb(e) {
      this.$tooltipTimer = tab.MiscUtil.clearTimeout(this.$tooltipTimer);
      if (ss.isValue(this.$tooltip)) {
        this.$tooltip.hide(this.$tooltipDiv);
      }
      this.$shouldShowTooltip = false;
    },
    $doThumbTooltip: function Slider$DoThumbTooltip() {
      if (!this.$shouldShow(this.$readoutAttributes)) {
        this.$tooltip.hide(this.$tooltipDiv);
        if (this.$shouldShowTooltip || this.$isDragging) {
          var $t1 = this.$currentIndex;
          if (ss.isNullOrUndefined($t1)) {
            $t1 = ss.trunc(this.currentlySelected);
          }
          var index = $t1;
          var text = this.$getCurrentText(index);
          this.$tooltip.show(text, this.$tooltipDiv, ['above', 'below']);
        }
      }
    },
    $getRealIndex: function Slider$GetRealIndex() {
      var realIndex;
      if (!ss.isValue(this.$currentIndex) || isNaN(ss.unbox(this.$currentIndex))) {
        return 0;
      }
      if (this.$isContinuous) {
        realIndex = ss.unbox(this.$currentIndex);
      }
      else {
        realIndex = parseInt(ss.unbox(this.$currentIndex).toString(), 10);
      }
      if (realIndex < 0) {
        realIndex = 0;
      }
      return realIndex;
    },
    $updateViz: function Slider$UpdateViz() {
      if (ss.isNullOrUndefined(this.$currentIndex) || ss.isNullOrUndefined(this.currentlySelected) || this.$currentIndex === this.currentlySelected) {
        return;
      }
      var realIndex = this.$getRealIndex();
      if (ss.isValue(this.$doUpdate)) {
        this.$doUpdate(realIndex);
      }
      this.$currentIndex = realIndex;
      this.currentlySelected = realIndex;
      this.$updateButtons();
    },
    updateReadout: function Slider$UpdateReadout(text) {
      this.updateReadout$1(text, null);
    },
    updateReadout$1: function Slider$UpdateReadout(text, facet) {
      if (this.styleid < 4) {
        this.$textDiv.innerHTML = text;
        if (this.$showFacets) {
          this.$facetDiv.innerHTML = facet;
        }
      }
    },
    $applyChanges: function Slider$ApplyChanges(index) {
      if (isNaN(index)) {
        return;
      }
      var facet = (this.$showFacets ? this.$getCurrentFacet(index) : null);
      this.updateReadout$1(this.$getCurrentText(index), facet);
      this.$currentIndex = index;
      if (ss.isValue(this.$onIntermediateChange)) {
        this.$onIntermediateChange();
      }
      if (!this.$isDragging) {
        if (this.$timer > 0) {
          this.$killTimer();
        }
        this.$setTimer();
      }
      else if (this.$timer > 0) {
        this.$killTimer();
      }
      this.$doThumbTooltip();
    },
    $initialLayout: function Slider$InitialLayout() {
      if (!this.$shouldShow(this.$arrowsAttributes)) {
        this.div.classList.add($tab_SliderConstants.hideArrowClass);
      }
      else {
        this.div.classList.remove($tab_SliderConstants.hideArrowClass);
        this.div.classList.remove($tab_SliderConstants.showArrowClass);
      }
      if (!this.$shouldShow(this.$sliderAttributes)) {
        this.div.classList.add($tab_SliderConstants.hideSliderClass);
      }
      else {
        this.div.classList.remove($tab_SliderConstants.hideSliderClass);
      }
      if (this.styleid > 3) {
        $(this.div).css('height', '15px');
      }
    },
    $setTimer: function Slider$SetTimer() {
      this.$timer = window.setTimeout(ss.mkdel(this, this.$timerCallback), 500);
    },
    $killTimer: function Slider$KillTimer() {
      if (this.$timer > 0) {
        window.clearTimeout(this.$timer);
        this.$timer = -1;
      }
    },
    $timerCallback: function Slider$TimerCallback() {
      this.$updateViz();
    },
    layout: function Slider$Layout() {
      var arrowOffset = 0;
      var ArrowWidth = 34;
      this.$oneline = false;
      var divEl = $(this.div);
      divEl.css('overflow', 'hidden');
      var overallHeight = dojo.marginBox(this.div).h;
      var overallWidth = parseFloat(divEl.css('width')) - 5;
      divEl.css('overflow', '');
      if (overallWidth < ArrowWidth) {
        return;
      }
      if (ss.isValue(this.readout)) {
        $(this.readout).css('width', '');
        $(this.readout).css('float', 'none');
      }
      if (ss.isValue(this.slider)) {
        $(this.slider.tableauSlider).css('width', '');
        $(this.slider.tableauSlider).css('float', 'none');
      }
      if (ss.isValue(this.$sliderRules) && this.$sliderRules.count * 4 > overallWidth) {
        $(this.$sliderRules.domNode).css('display', 'none');
      }
      if (overallHeight < 38 && this.styleid <= 1) {
        var split = ((this.styleid === 0) ? (overallWidth - ArrowWidth) : overallWidth);
        split = Math.floor((split - 14) / 2);
        $(this.readout).css('width', split + 'px');
        if (ss.isValue(this.slider)) {
          $(this.slider.tableauSlider).css('width', split + 'px');
        }
        $(this.readout).css('float', 'left');
        if (ss.isValue(this.slider)) {
          $(this.slider.tableauSlider).css('float', 'left');
        }
        this.$oneline = true;
      }
      else if ((this.styleid === 0 || this.styleid === 4) && ss.isValue(this.slider)) {
        $(this.slider.tableauSlider).css('width', overallWidth - ArrowWidth + 'px');
      }
      else if ((this.styleid === 1 || this.styleid === 5) && ss.isValue(this.slider)) {
        $(this.slider.tableauSlider).css('width', overallWidth + 'px');
      }
      else if (this.styleid === 2) {
        $(this.readout).css('width', overallWidth - ArrowWidth - 4 + 'px');
      }
      if (this.$shouldShow(this.$arrowsAttributes)) {
        if (this.styleid === 2 || this.styleid === 4) {
          arrowOffset = $tab_Slider.$defaultArrowTop;
        }
        if (this.styleid === 0) {
          arrowOffset = (this.$oneline ? $tab_Slider.$defaultArrowTop : $tab_Slider.$defaultLargeSizeArrowTop);
        }
        arrowOffset += this.$getTitleOffset();
        if (ss.isValue(this.slider)) {
          $(this.slider.incrementButton).css('top', arrowOffset + 'px');
          $(this.slider.decrementButton).css('top', arrowOffset + 'px');
        }
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.SliderCatmode
  var $tab_SliderCatmode = global.tab.SliderCatmode = ss.mkType($asm, 'tab.SliderCatmode', function(parent, div, attrs) {
    this.$currentTuples = null;
    this.$widget = null;
    $tab_BaseMode.call(this, parent, div, attrs);
  }, {
    instantiate: function SliderCatmode$Instantiate(newTuples, itemName, facet) {
      this.$currentTuples = newTuples;
      var isAll = $tab_FilterItemUtil.isAllOrAllChecked(this.parent);
      if (this.shouldUseAllItem()) {
        this.$currentTuples = $tab_FilterItemUtil.addAllItemToTuples(this.$currentTuples, isAll, facet);
      }
      else {
        isAll = false;
      }
      this.$widget = new tableau.base.widget.ui.Slider(this.div, this.attributes, isAll, ss.mkdel(this, this.updateViz), ss.mkdel(this.parent, this.parent.getTitleOffset), ss.mkdel(this, this.getCurrentText), ss.mkdel(this, this.onIntermediateChange), ss.mkdel(this, this.getCurrentFacet), this.parent.get_oFilter().showFacets);
      this.$widget.instantiateFromTuples(this.$currentTuples, this.getSummaryText());
    },
    destroy: function SliderCatmode$Destroy() {
      this.$widget.destroy();
    },
    resetContent: function SliderCatmode$ResetContent(tuples, itemName, facet) {
      var retainFocusOnHandle = ss.referenceEquals(this.$widget.slider.sliderHandle, document.activeElement);
      this.$widget.destroy();
      this.instantiate(tuples, itemName, facet);
      if (retainFocusOnHandle) {
        this.$widget.slider.sliderHandle.focus();
      }
    },
    layout: function SliderCatmode$Layout(contentSize, horizontalLayout) {
      this.inherited(arguments);
      this.$widget.layout();
    },
    showOrHide: function SliderCatmode$ShowOrHide(elem, show) {
      elem.style.display = (show ? '' : 'none');
    },
    onSmallSearchUI: function SliderCatmode$OnSmallSearchUI(searchIsOn, searchDiv) {
      var show = !searchIsOn;
      var w = this.$widget;
      if (w.styleid === 2 || w.styleid === 4) {
        this.showOrHide(w.slider.decrementButton, show);
        this.showOrHide(w.slider.incrementButton, show);
      }
      if (w.styleid === 3) {
        this.showOrHide(w.div, show);
        searchDiv.style.marginBottom = '2px';
      }
      else if (w.styleid < 3) {
        this.showOrHide(w.readout, show);
        if (w.get_oneLineLayout()) {
          this.showOrHide(w.div, show);
        }
      }
      else {
        this.showOrHide(w.slider.tableauSlider, show);
      }
    },
    getRealIndex: function SliderCatmode$GetRealIndex(index) {
      if (typeof(index) === 'undefined' || isNaN(index)) {
        return 0;
      }
      var intIndex = parseInt(index.toString(), 10);
      if (intIndex < 0) {
        intIndex = 0;
      }
      return intIndex;
    },
    updateViz: function SliderCatmode$UpdateViz(index) {
      var $t1 = new Object();
      $t1.schema = this.parent.get_oFilter().table.schema;
      $t1.tuples = [];
      var currentState = $t1;
      var realIndex = this.getRealIndex(index);
      var aliases = new Array(0);
      if (this.shouldUseAllItem() && realIndex === 0) {
        this.parent.doSelectAll(true);
        return;
      }
      this.$currentTuples[realIndex].s = true;
      currentState.tuples.push(this.$currentTuples[realIndex]);
      this.parent.set_stateId(this.parent.get_stateId() + 1);
      var alias = $tab_FilterItemUtil.getAliasForTuple(this.$currentTuples[realIndex]);
      aliases.push(alias);
      tab.FilterClientCommands.replaceCategoricalFilterValues(new tab.CancelDialog(null, null, null, true), this.parent.get_session().get_visualId(), this.parent.get_identifier(), aliases);
    },
    onIntermediateChange: function SliderCatmode$OnIntermediateChange() {
      if (this.parent.get_searchWidget().get_isVisible()) {
        this.parent.get_searchWidget().toggleUI();
      }
    },
    getCurrentText: function SliderCatmode$GetCurrentText(index) {
      var realIndex = this.getRealIndex(index);
      var tuple = this.$currentTuples[realIndex];
      return $tab_FilterFormat.formatTupleDisplayName(tuple, true, this.parent.get_oFilter().role);
    },
    getCurrentFacet: function SliderCatmode$GetCurrentFacet(index) {
      var realIndex = this.getRealIndex(index);
      var tuple = this.$currentTuples[realIndex];
      return $tab_FilterFormat.formatTupleDisplayFacet(tuple, true, this.parent.get_oFilter().role);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.SliderConstants
  var $tab_SliderConstants = global.tab.SliderConstants = ss.mkType($asm, 'tab.SliderConstants', function() {
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.SmallSearchWidget
  var $tab_SmallSearchWidget = global.tab.SmallSearchWidget = ss.mkType($asm, 'tab.SmallSearchWidget', function(r, dom) {
    this.templateString = "<div class='SmallSearch'>" + "<div class='SmallSearchBox' dojoAttachPoint='domSearchBox'>" + "<div class='Autocompleter' dojoAttachPoint='domAutocompleter'></div>" + "<div class='wcSearchX dijitInlineTable' title='${XBUTTON_CLOSE_TOOLTIP}'" + "dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:onXButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></div>" + '</div>' + '</div>';
    this.domSearchBox = null;
    this.domAutocompleter = null;
    this.autocompleter = null;
    $tab_SearchWidgetBase.call(this);
  }, {
    get_applyDelay: function SmallSearchWidget$get_ApplyDelay() {
      window.alert(tab.Strings.noLoc('Bad call of ApplyDelay on SmallSearchWidget'));
      return 0;
    },
    startup: function SmallSearchWidget$Startup() {
      this.inherited(arguments);
      var options = new Object();
      options.store = null;
      options.autoComplete = false;
      options.hasDownArrow = false;
      options.highlightMatch = 'none';
      options.searchDelay = this.searchDelay;
      options.onChange = ss.mkdel(this, this.applyChanges);
      options.onKeyDown = ss.mkdel(this, this.onQueryBoxKeyDown);
      this.autocompleter = new dijit.form.ComboBox(options, this.domAutocompleter);
      this.autocompleter.startup();
      this.autocompleter._getQueryString = function(text) {
        var len = text.length;
        if (len < 1) {
          return '';
        }
        if (text.charCodeAt(0) === 39 && text.charCodeAt(len - 1) === 39) {
          return text.substr(1, len - 2);
        }
        var query = text;
        if (query.length > 1 && query.charCodeAt(0) === 92 && query.charCodeAt(1) === 42) {
          query = '*' + query.substr(2);
        }
        if (query.length > 1 && query.charCodeAt(query.length - 2) === 92 && query.charCodeAt(query.length - 1) === 42) {
          query = query.substr(0, query.length - 2) + '*';
        }
        if (query.charCodeAt(0) !== 42 && query.charCodeAt(query.length - 1) !== 42) {
          query = '*' + query + '*';
        }
        return query;
      };
      var noMatchesTooltip = this.NO_MATCHES;
      this.autocompleter.DOJO_openResultList = this.autocompleter._openResultList;
      this.autocompleter._openResultList = ss.mkdel(this, function(results, dataObject) {
        this.resultCount = results.length;
        this.autocompleter.DOJO_openResultList(results, dataObject);
        if (!!!results.length) {
          this.autocompleter.tooltipPosition = ['above', 'below'];
          this.autocompleter.displayMessage(noMatchesTooltip);
        }
        else {
          dijit.hideTooltip(this.autocompleter.domNode);
        }
        if (BrowserSupport.BrowserSupport.IsIE()) {
          this.focusQueryBox();
        }
      });
    },
    getOnQueryBoxKeyDownBehavior: function SmallSearchWidget$GetOnQueryBoxKeyDownBehavior(keyEvent) {
      var result;
      result = this.inherited(arguments);
      switch (keyEvent.keyCode) {
        case 13: {
          result.functionToCall = null;
          result.stopEvent = false;
          break;
        }
        case 40: {
          result.functionToCall = null;
          result.stopEvent = false;
          if (BrowserSupport.BrowserSupport.IsIE()) {
            var listItems = this.$getListItems();
            listItems.attr('tabindex', '1').keydown(ss.mkdel(this, this.$onKeyDown));
            listItems.eq(0).get(0).focus();
            var parent = $(this.domNode.parentElement);
            parent.find('input').eq(0).val(listItems.eq(0).html());
            result.stopEvent = true;
          }
          if (!$(keyEvent.target).hasClass('dijitReset')) {
            result.stopEvent = true;
          }
          break;
        }
        case 37:
        case 39:
        case 38: {
          result.functionToCall = null;
          result.stopEvent = false;
          break;
        }
        default: {
          result.functionToCall = ss.mkdel(this, this.onSmallSearchKeyDown);
          result.stopEvent = false;
          break;
        }
      }
      return result;
    },
    onSmallSearchKeyDown: function SmallSearchWidget$OnSmallSearchKeyDown(evt) {
      this.autocompleter._startSearchFromInput();
    },
    $onKeyDown: function SmallSearchWidget$OnKeyDown(evt) {
      switch (evt.which) {
        case 40:
        case 38: {
          this.$switchListFocus(evt.currentTarget, evt.which === 38);
          evt.preventDefault();
          break;
        }
        case 9: {
          evt.preventDefault();
          break;
        }
        case 13: {
          this.applyChanges($(this.domNode).find('input').val());
          break;
        }
      }
    },
    $switchListFocus: function SmallSearchWidget$SwitchListFocus(currentElement, isUpKeyPressed) {
      var listItems = this.$getListItems();
      for (var i = 0, numListItems = listItems.length; i < numListItems; i++) {
        if (ss.referenceEquals(listItems.eq(i).get(0).getAttribute('id'), currentElement.getAttribute('id'))) {
          var listItemToFocus = null;
          if (!isUpKeyPressed && i !== numListItems - 1) {
            listItemToFocus = listItems.eq(i + 1);
          }
          else if (isUpKeyPressed && i !== 0) {
            listItemToFocus = listItems.eq(i - 1);
          }
          else if (isUpKeyPressed && i === 0) {
            var parent = $(this.domNode.parentElement);
            parent.find('input').eq(0).get(0).focus();
            return;
          }
          if (ss.isValue(listItemToFocus)) {
            listItemToFocus.focus();
            var parent1 = $(this.domNode.parentElement);
            parent1.find('input').eq(0).val(listItemToFocus.html());
          }
          return;
        }
      }
    },
    $getListItems: function SmallSearchWidget$GetListItems() {
      return $('.dijitPopup .dijitMenu li.dijitReset');
    },
    getDataStore: function SmallSearchWidget$GetDataStore() {
      var i;
      var items = [];
      var len;
      var t = this.get_qf().get_oFilter().table.tuples;
      for (i = 0, len = t.length; i < len; i++) {
        items.push(ss.mkdict(['name', this.formatTuple(t[i])]));
      }
      return new dojo.data.ItemFileWriteStore(ss.mkdict(['data', ss.mkdict(['items', items])]));
    },
    destroy: function SmallSearchWidget$Destroy(preserveDom) {
      this.domSearchBox.innerHTML = '';
      this.autocompleter.destroy();
      this.autocompleter = null;
      this.inherited(arguments);
    },
    focusQueryBox: function SmallSearchWidget$FocusQueryBox() {
      this.autocompleter.focus();
    },
    getQuery: function SmallSearchWidget$GetQuery() {
      return this.autocompleter.attr('value');
    },
    setQuery: function SmallSearchWidget$SetQuery(value) {
      this.autocompleter.attr('value', value);
    },
    fixQueryWidth: function SmallSearchWidget$FixQueryWidth() {
      var boxWidth = dojo.marginBox(this.domNode).w;
      if (boxWidth > 25) {
        var remainingWidth = ss.mkdict(['w', boxWidth - 25]);
        dojo.marginBox(this.autocompleter.comboNode, remainingWidth);
        dojo.marginBox(ss.cast(this.autocompleter.comboNode.firstChild, HTMLElement), remainingWidth);
        dojo.marginBox(this.autocompleter.textbox, remainingWidth);
      }
      this.autocompleter.comboNode.style.cssFloat = 'left';
    },
    showUI: function SmallSearchWidget$ShowUI(noLayout) {
      if (this.get_isVisible()) {
        return;
      }
      $tab_SearchWidgetBase.prototype.showUI.call(this, noLayout);
      this.get_qf().get_modeContents().onSmallSearchUI(true, this.domNode);
    },
    hideUI: function SmallSearchWidget$HideUI() {
      if (!this.get_isVisible()) {
        return;
      }
      $tab_SearchWidgetBase.prototype.hideUI.call(this);
      this.get_qf().get_modeContents().onSmallSearchUI(false, this.domNode);
    },
    layout: function SmallSearchWidget$Layout(pixelHeight) {
      this.fixQueryWidth();
    },
    updateSearch: function SmallSearchWidget$UpdateSearch() {
      this.autocompleter.store = this.getDataStore();
      this.get_qf().get_modeContents().onSmallSearchUI(this.get_isVisible(), this.domNode);
    },
    applyChanges: function SmallSearchWidget$ApplyChanges(text) {
      if (!!!text) {
        return;
      }
      var tuples = [];
      var t = this.get_qf().get_oFilter().table.tuples;
      for (var i = 0, len = t.length; i < len; i++) {
        if (ss.referenceEquals(text, this.formatTuple(t[i]))) {
          tuples.push(t[i]);
          t[i].s = true;
        }
        else if (t[i].s) {
          delete t[i]['s'];
        }
      }
      if (tuples.length !== 0) {
        this.get_qf().updateStateFromSearch(null);
        var alias = $tab_FilterItemUtil.getAliasForTuple(tuples[0]);
        var aliases = [alias];
        tab.FilterClientCommands.replaceCategoricalFilterValues(new tab.CancelDialog(null, null, null, true), this.get_qf().get_session().get_visualId(), this.get_qf().get_identifier(), aliases);
        this.clearSearch(false, true);
        this.onXButtonClick(null);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TabbedNavigation
  var $tab_TabbedNavigation = global.tab.TabbedNavigation = ss.mkType($asm, 'tab.TabbedNavigation', function(paramaters, srcNodeRef) {
    this.baseClass = 'tableauTabbedNavigation';
    this.templateString = "<div style='width:${innerWidth};' class='tabbedNavigationOuterWrapper' role='navigation'>" + "<div id='container' dojoType='dijit.layout.LayoutContainer' style='width:100%; height:100%;' dojoAttachPoint='_innerWrapper'>" + "<button dojoType='dijit.form.Button' class='tabsMenuBtn' layoutAlign='left' id='menuBtn' dojoAttachPoint='_menuBtn' style='display:none;'></button>" + "<button dojoType='dijit.form.Button' class='tabsLeftBtn' layoutAlign='left' dojoAttachPoint='_leftBtn' style='display:none;'></button>" + "<button dojoType='dijit.form.Button' class='tabsRightBtn' layoutAlign='right' dojoAttachPoint='_rightBtn' style='display:none;'></button>" + "<div dojoType='dijit.layout.LayoutContainer' layoutAlign='client' dojoAttachPoint='_containerNode'>" + "<div class='dijitTabContainerTop-tabs' dojoAttachPoint='_scrollNode' role='tablist'></div>" + '</div>' + '</div>' + '</div>';
    this.widgetsInTemplate = true;
    this.innerWidth = '100%';
    this.selectedTabArrayIndex = 0;
    this.$currentTabFocus = 0;
    this.$tabNames = null;
    this.$dijitTabs = null;
    this.$disposables = new tab.DisposableHolder();
    this.$menuItems = null;
    this.currentTab = null;
    this._scrollNode = null;
    this._leftBtn = null;
    this._rightBtn = null;
    this._menuBtn = null;
    this._containerNode = null;
    this._innerWrapper = null;
    this.$tabsMenuViewModel = null;
    this._anim = null;
    this._buttons = null;
    Object.call(this);
    this.$tabNames = [];
    this.$dijitTabs = [];
    this.$tabNames = tsConfig.visible_sheets || this.$tabNames;
    var tabIdx = this._indexOf(this.$tabNames, tsConfig.current_sheet_name);
    var $t1 = tabIdx;
    if (ss.isNullOrUndefined($t1)) {
      $t1 = this.selectedTabArrayIndex;
    }
    this.selectedTabArrayIndex = $t1;
    this.innerWidth = ss.cast(paramaters['innerWidth'], String) || this.innerWidth;
    var updateScroll = ss.mkdel(this, function() {
      this.$scrollToTab(this.currentTab);
    });
    tab.ServerFontLoader.get_instance().add_fontPreparationComplete(updateScroll);
    this.$disposables.add$1(new tab.CallOnDispose(function() {
      tab.ServerFontLoader.get_instance().remove_fontPreparationComplete(updateScroll);
    }));
  }, {
    get_widgetDomNode: function TabbedNavigation$get_WidgetDomNode() {
      return this.domNode;
    },
    startup: function TabbedNavigation$Startup() {
      $(this._leftBtn.domNode).find('button').addClass('tnLeftButton');
      $(this._rightBtn.domNode).find('button').addClass('tnRightButton');
      $(this._menuBtn.domNode).find('button').addClass('tnMenuButton');
      this.containerNode = this.domNode;
      this.inherited(arguments);
    },
    destroy: function TabbedNavigation$Destroy() {
      tab.MiscUtil.dispose$1(this.$tabsMenuViewModel);
      for (var $t1 = 0; $t1 < this.$dijitTabs.length; $t1++) {
        var tab1 = this.$dijitTabs[$t1];
        tab1.destroyRecursive();
      }
      this.$disposables.dispose();
      this.inherited(arguments);
    },
    layout: function TabbedNavigation$Layout(pixelHeight) {
      if (this.$tabNames.length === 0) {
        return;
      }
      var contentBox = dojo.contentBox(this._containerNode.domNode);
      var shown = this.$shouldShowBtns(contentBox.w);
      this._buttons.css('display', (shown ? '' : 'none'));
      this._innerWrapper.layout(pixelHeight);
      this._containerNode.domNode.style.top = '-1px';
      this._rightBtn.domNode.style.height = 'auto';
      if (!shown) {
        this._containerNode.domNode.scrollLeft = 0;
      }
      this.$onMenuItemSelected(this.currentTab);
      this.$updateScrollButtons();
      this.$removeMenuButtonFromTabOrder();
      if (tabBootstrap.VizLayoutConstants.get_shouldShowTabs()) {
        $('.tabbedNavigationWrapper').css('visibility', 'visible');
        $('.tabbedNavigationOuterWrapper').css('display', '');
      }
      else {
        $('.tabbedNavigationOuterWrapper').css('display', 'none');
      }
    },
    postCreate: function TabbedNavigation$PostCreate() {
      tab.Application.add_onTabSelect(ss.mkdel(this, this.$onSelectTab));
      tab.CommandController.get().add_newLayoutId(ss.mkdel(this, this.$onNewLayout));
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        tab.Application.remove_onTabSelect(ss.mkdel(this, this.$onSelectTab));
        tab.CommandController.get().remove_newLayoutId(ss.mkdel(this, this.$onNewLayout));
      })));
      this.inherited(arguments);
      this.$attachHandlers();
      this.$menuItems = [];
      for (var i = 0; i < this.$tabNames.length; i++) {
        var tabName = this.$tabNames[i];
        this.addTab(tabName, i, tsConfig.repository_urls[i]);
        this.addToMenu(this.$menuItems, tabName);
      }
      this._buttons = $(this.domNode).find('.dijitButton');
      this.layout(null);
      this.$currentTabFocus = this.selectedTabArrayIndex;
      this.currentTab = this.$dijitTabs[this.selectedTabArrayIndex];
      if (ss.isValue(this.currentTab)) {
        $tab_TabbedNavigation.$setAriaSelected(this.currentTab.domNode, true);
      }
    },
    chooseTabByName: function TabbedNavigation$ChooseTabByName(str) {
      if (ss.isNullOrUndefined(str)) {
        return;
      }
      var tabElement = this.$findTabForName(str);
      if (ss.isValue(tabElement)) {
        this.chooseTab(tabElement);
      }
    },
    chooseTab: function TabbedNavigation$ChooseTab(selected) {
      if (ss.isNullOrUndefined(selected)) {
        return;
      }
      this.$changeTab(selected);
    },
    addTab: function TabbedNavigation$AddTab(tabElement, index, repo) {
      var refNode = document.createElement('span');
      this._scrollNode.appendChild(refNode);
      var tabId = this.baseClass + '_tab_' + index;
      var buttonParams = new Object();
      buttonParams.id = tabId;
      buttonParams.label = tab.EscapingUtil.escapeHtml(tabElement);
      buttonParams.value = tabElement;
      buttonParams.showLabel = true;
      buttonParams.repository_url = repo;
      buttonParams.onKeyDown = ss.mkdel(this, function(keyEvent) {
        switch (keyEvent.keyCode) {
          case 13:
          case 32: {
            this.$selectTabById(tabId);
            spiff.EventUtil.stopEvent(keyEvent);
            break;
          }
          case 39:
          case 40: {
            this.$focusNextTab();
            spiff.EventUtil.stopEvent(keyEvent);
            break;
          }
          case 37:
          case 38: {
            this.$focusPrevTab();
            spiff.EventUtil.stopEvent(keyEvent);
            break;
          }
          case 9: {
            var tabIdx = this._indexOf(this.$tabNames, tsConfig.current_sheet_name);
            var $t1 = tabIdx;
            if (ss.isNullOrUndefined($t1)) {
              $t1 = this.selectedTabArrayIndex;
            }
            this.$currentTabFocus = $t1;
            break;
          }
        }
      });
      var button = new dijit.layout._TabButton(buttonParams, refNode);
      var $t2 = new EventUtils.EventHandleSpec();
      $t2.tap = ss.mkdel(this, function(e) {
        this.$selectTabById(tabId);
      });
      var spec = $t2;
      var eventHandler = new EventUtils.TableauEventHandler(button.domNode, spec);
      this.$disposables.add$1(eventHandler);
      $tab_TabbedNavigation.$setSheetTabAccessibilityAttributes(button);
      this.$dijitTabs.push(button);
    },
    addToMenu: function TabbedNavigation$AddToMenu(items, tabElement) {
      var item = spiff.MenuItem.newActionItem(tabElement, ss.mkdel(this, function() {
        this.chooseTabByName(tabElement);
      }), true, '');
      items.push(item);
    },
    resize$1: function TabbedNavigation$Resize() {
      this._innerWrapper.resize();
      this.layout(null);
    },
    $onUpdateTab: function TabbedNavigation$OnUpdateTab(sheetName) {
      var tabElement = this.$findTabForName(sheetName);
      this.$onMenuItemSelected(tabElement);
    },
    $onSelectTab: function TabbedNavigation$OnSelectTab(data) {
      this.$onUpdateTab(data.sheetName);
    },
    $onNewLayout: function TabbedNavigation$OnNewLayout(layoutPresModel) {
      this.$onUpdateTab(layoutPresModel.sheetName);
    },
    $findTabForName: function TabbedNavigation$FindTabForName(str) {
      for (var i = 0; i < this.$dijitTabs.length; i++) {
        if (ss.referenceEquals(this.$dijitTabs[i].value, str)) {
          return this.$dijitTabs[i];
        }
      }
      return null;
    },
    $focusNextTab: function TabbedNavigation$FocusNextTab() {
      this.$currentTabFocus++;
      if (this.$currentTabFocus > this.$dijitTabs.length - 1) {
        this.$currentTabFocus = 0;
      }
      var nextTabId = this.$getFocusedTabId();
      var selected = dijit.byId(nextTabId);
      selected.domNode.focus();
      this.$updateScrollButtons();
    },
    $focusPrevTab: function TabbedNavigation$FocusPrevTab() {
      this.$currentTabFocus--;
      if (this.$currentTabFocus < 0) {
        this.$currentTabFocus = this.$dijitTabs.length - 1;
      }
      var prevTabId = this.$getFocusedTabId();
      var selected = dijit.byId(prevTabId);
      selected.domNode.focus();
      this.$updateScrollButtons();
    },
    $getFocusedTabId: function TabbedNavigation$GetFocusedTabId() {
      return this.baseClass + '_tab_' + this.$currentTabFocus;
    },
    $selectTabById: function TabbedNavigation$SelectTabById(tabId) {
      var selected = dijit.byId(tabId);
      this.chooseTab(selected);
    },
    $getTabsWidth: function TabbedNavigation$GetTabsWidth() {
      var locTabs = $(this._scrollNode).find('.dijitTab');
      if (!!locTabs.length) {
        var leftTab = locTabs[0];
        var rightTab = locTabs[locTabs.length - 1];
        return rightTab.offsetLeft + parseFloat($(rightTab).css('width')) - leftTab.offsetLeft;
      }
      else {
        return 0;
      }
    },
    $shouldShowBtns: function TabbedNavigation$ShouldShowBtns(width) {
      var tabsWidth = this.$getTabsWidth();
      return tabsWidth > 0 && width < tabsWidth;
    },
    _indexOf: function TabbedNavigation$IndexOf(arr, obj) {
      for (var i = 0; i < arr.length; i++) {
        if (ss.referenceEquals(arr[i], obj)) {
          return i;
        }
      }
      return -1;
    },
    _indexOf: function TabbedNavigation$IndexOf(arr, obj) {
      for (var i = 0; i < arr.length; i++) {
        if (ss.referenceEquals(arr[i], obj)) {
          return i;
        }
      }
      return -1;
    },
    $getScrollBounds: function TabbedNavigation$GetScrollBounds() {
      var locTabs = $(this._scrollNode).find('.dijitTab');
      var containerWidth = this._containerNode.domNode.offsetWidth;
      var tabsWidth = this.$getTabsWidth();
      var toRet = {};
      if (!!locTabs.length && tabsWidth > containerWidth) {
        toRet.min = 0;
        toRet.max = locTabs[locTabs.length - 1].offsetLeft + parseFloat($(locTabs[locTabs.length - 1]).css('width')) + 2 - containerWidth;
      }
      else {
        toRet.min = 0;
        toRet.max = 0;
      }
      return toRet;
    },
    $changeTab: function TabbedNavigation$ChangeTab(newTab) {
      if (ss.isValue(this.currentTab) && ss.referenceEquals(this.currentTab.value, newTab.value)) {
        return;
      }
      if (ss.isValue(this.currentTab)) {
        this.currentTab.attr('checked', false);
        $tab_TabbedNavigation.$setAriaSelected(this.currentTab.domNode, false);
      }
      this.$currentTabFocus = this._indexOf(this.$dijitTabs, newTab);
      var msg = new Object();
      msg.sheetName = newTab.value;
      msg.repositoryUrl = newTab.repository_url;
      msg.oldRepositoryUrl = (ss.isValue(this.currentTab) ? this.currentTab.repository_url : null);
      tab.Application.fireOnTabSelect(msg);
    },
    $onMenuItemSelected: function TabbedNavigation$OnMenuItemSelected(tabElement) {
      if (ss.isValue(this.currentTab)) {
        this.currentTab.attr('checked', false);
        $tab_TabbedNavigation.$setAriaSelected(this.currentTab.domNode, false);
      }
      else {
        tabElement = this.currentTab = this.$dijitTabs[this.selectedTabArrayIndex];
      }
      if (ss.isNullOrUndefined(tabElement)) {
        return;
      }
      tabElement.attr('checked', true);
      $tab_TabbedNavigation.$setAriaSelected(tabElement.domNode, true);
      this.currentTab = tabElement;
      this.$scrollToTab(tabElement);
    },
    $scrollToTab: function TabbedNavigation$ScrollToTab(tab1) {
      if (!ss.isNullOrUndefined(tab1)) {
        var node = tab1.domNode;
        var sl = this._getScroll();
        if (sl > node.offsetLeft || sl + parseFloat($(this._containerNode.domNode).css('width')) < node.offsetLeft + parseFloat($(node).css('width'))) {
          this._createSmoothScroll(tab1).play();
        }
      }
      else {
        var e = new ss.Exception('No defined tab to use for scrolling');
        e.name = 'TabbedNavigation Error for ScrollToTab';
        tab.ErrorTrace.report(e, false);
      }
    },
    $getScrollForSelectedTab: function TabbedNavigation$GetScrollForSelectedTab(tab) {
      var n = tab.domNode;
      var scrollNodeWidth = parseFloat($(this._containerNode.domNode).css('width'));
      var scrollBounds = this.$getScrollBounds();
      var pos;
      pos = n.offsetLeft + parseFloat($(n).css('width')) / 2 - scrollNodeWidth / 2;
      pos = Math.min(Math.max(pos, scrollBounds.min), scrollBounds.max);
      return pos;
    },
    $attachHandlers: function TabbedNavigation$AttachHandlers() {
      this.connect(this._rightBtn, 'onClick', ss.mkdel(this, function() {
        this.$onScroll(this._rightBtn);
      }));
      this.connect(this._leftBtn, 'onClick', ss.mkdel(this, function() {
        this.$onScroll(this._leftBtn);
      }));
      this.connect(this._menuBtn, 'onClick', ss.mkdel(this, this.onMenuButtonClicked));
    },
    onMenuButtonClicked: function TabbedNavigation$OnMenuButtonClicked() {
      if (ss.isValue(this.$tabsMenuViewModel)) {
        this.$tabsMenuViewModel.dispose();
      }
      this.$tabsMenuViewModel = spiff.MenuViewModel.createForMenu(new spiff.Menu(this.$menuItems), spiff.MenuViewModel.handleMenuActionItemClicked, null, null);
      this.$tabsMenuViewModel.show(new spiff.ShowMenuOptions($(this._menuBtn.domNode), false));
    },
    $onScroll: function TabbedNavigation$OnScroll(clicked) {
      if (clicked.dojoAttachPoint === '_leftBtn') {
        this.$doSlide(-1);
      }
      else {
        this.$doSlide(1);
      }
      clicked.domNode.focus();
    },
    $doSlide: function TabbedNavigation$DoSlide(direction) {
      var styleWidth = parseFloat($(this._containerNode.domNode).css('width'));
      var d = styleWidth * 0.5 * direction;
      var to = this._getScroll() + d;
      this._createSmoothScroll(null, to).play();
    },
    _getScroll: function TabbedNavigation$GetScroll() {
      return this._containerNode.domNode.scrollLeft;
    },
    _createSmoothScroll: function TabbedNavigation$CreateSmoothScroll(tab, x) {
      if (ss.isValue(tab)) {
        x = this.$getScrollForSelectedTab(tab);
      }
      else {
        var scrollBounds = this.$getScrollBounds();
        x = Math.min(Math.max(x, scrollBounds.min), scrollBounds.max);
      }
      if (ss.isValue(this._anim) && this._anim.status() === 'playing') {
        this._anim.stop();
      }
      var anim = null;
      var animProps = new Object();
      animProps.duration = 100;
      animProps.beforeBegin = ss.mkdel(this, function() {
        var oldS = this._containerNode.domNode.scrollLeft;
        anim.curve = new dojo._Line(oldS, x);
      });
      animProps.onAnimate = ss.mkdel(this, function(val) {
        this._containerNode.domNode.scrollLeft = val;
      });
      animProps.onEnd = ss.mkdel(this, function() {
        this.$updateScrollButtons();
      });
      anim = new dojo._Animation(animProps);
      this._anim = anim;
      return anim;
    },
    $updateScrollButtons: function TabbedNavigation$UpdateScrollButtons() {
      var scroll = this._getScroll();
      var scrollBounds = this.$getScrollBounds();
      var leftState;
      var rightState;
      if (scroll > scrollBounds.max) {
        this._containerNode.domNode.scrollLeft = tab.DoubleUtil.roundToInt(scrollBounds.max);
      }
      rightState = scroll >= ss.trunc(scrollBounds.max);
      leftState = scroll <= ss.trunc(scrollBounds.min);
      this._rightBtn.setAttribute('disabled', rightState);
      this._leftBtn.setAttribute('disabled', leftState);
      $(this._rightBtn.domNode).find('button').toggleClass('tnRightButtonDisabled', rightState);
      $(this._leftBtn.domNode).find('button').toggleClass('tnLeftButtonDisabled', leftState);
      $tab_TabbedNavigation.$addButtonAccessibilityAttributes(this._rightBtn.domNode, tab.Strings.AccessibilityScrollSheetTabsRight, rightState);
      $tab_TabbedNavigation.$addButtonAccessibilityAttributes(this._leftBtn.domNode, tab.Strings.AccessibilityScrollSheetTabsLeft, leftState);
    },
    $removeMenuButtonFromTabOrder: function TabbedNavigation$RemoveMenuButtonFromTabOrder() {
      $(this._menuBtn.domNode).find('button')[0].tabIndex = -1;
      this._menuBtn.domNode.tabIndex = -1;
      this._menuBtn.domNode.setAttribute('aria-disabled', 'true');
    },
    startupShim: function TabbedNavigation$StartupShim() {
      this.startup();
    },
    resizeShim: function TabbedNavigation$ResizeShim() {
      this.resize$1();
    },
    destroyShim: function TabbedNavigation$DestroyShim() {
      this.destroy();
    }
  }, {
    $setSheetTabAccessibilityAttributes: function TabbedNavigation$SetSheetTabAccessibilityAttributes(tabButton) {
      var node = $(tabButton.domNode);
      tabButton.domNode.setAttribute('role', 'tab');
      tabButton.domNode.setAttribute('aria-controls', tab.DashboardView.dashboardRegionId);
      node.find('.dijitTabButtonSpacer').attr('role', 'presentation');
      node.find('.tabLabel').removeAttr('wairole').removeAttr('role');
      node.find('.closeImage').removeAttr('wairole').removeAttr('role');
      $tab_TabbedNavigation.$setAriaSelected(tabButton.domNode, false);
    },
    $addButtonAccessibilityAttributes: function TabbedNavigation$AddButtonAccessibilityAttributes(domNode, label, isDisabled) {
      domNode.setAttribute('role', 'button');
      domNode.setAttribute('aria-label', label);
      domNode.setAttribute('aria-disabled', isDisabled.toString());
      $(domNode).find('button')[0].tabIndex = -1;
    },
    $setAriaSelected: function TabbedNavigation$SetAriaSelected(node, isSelected) {
      node.setAttribute('aria-selected', isSelected.toString());
      node.tabIndex = (isSelected ? 0 : -1);
      $(node).find('.tabLabel').removeAttr('aria-pressed');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TiledWidget
  var $tab_TiledWidget = global.tab.TiledWidget = ss.mkType($asm, 'tab.TiledWidget', function(fetcher, gridModel, ui, formatter, firstTileData, preloadEverything) {
    this.$fetcher = null;
    this.$gridModel = null;
    this.$formatter = null;
    this.$ui = null;
    this.$scrollToDataHandler = null;
    this.$padding = 100;
    this.$fetcher = fetcher;
    this.$gridModel = gridModel;
    this.$formatter = formatter;
    this.$ui = ui;
    if (this.$formatter.isValid(firstTileData) && this.$gridModel.get_tileCount() > 0) {
      this.$setContent(0, firstTileData);
    }
    this.$fetcher.add_contentFetched(ss.mkdel(this, this.$onContentFetched));
    if (preloadEverything) {
      this.$preloadEverything();
    }
    else {
      this.$ui.add_scrolled(ss.mkdel(this, this.$onScrolled));
    }
  }, {
    get_lastScrollTop: function TiledWidget$get_LastScrollTop() {
      return this.$ui.get_lastScrollTop();
    },
    get_itemHeight: function TiledWidget$get_ItemHeight() {
      return this.$gridModel.get_itemHeight();
    },
    get_tileCount: function TiledWidget$get_TileCount() {
      return this.$gridModel.get_tileCount();
    },
    destroy: function TiledWidget$Destroy() {
      this.$ui.remove_scrolled(ss.mkdel(this, this.$onScrolled));
      this.$ui.destroy();
      this.$ui = null;
      this.$fetcher.remove_contentFetched(ss.mkdel(this, this.$onContentFetched));
      this.$fetcher.remove_contentFetched(this.$scrollToDataHandler);
      this.$fetcher.destroy();
      this.$fetcher = null;
      this.$gridModel.destroy();
      this.$gridModel = null;
      this.$formatter.destroy();
      this.$formatter = null;
    },
    updateViewport: function TiledWidget$UpdateViewport(width, height) {
      this.$gridModel.updateViewport(width, height);
    },
    getElement: function TiledWidget$GetElement(globalItemIndex) {
      if (this.$gridModel.get_tileCount() === 0) {
        tab.Log.get(this).warn('GetElement called when there are no grid tiles.', []);
        return null;
      }
      var tileIndex = this.$gridModel.itemToTileIndex(globalItemIndex);
      if (!this.$gridModel.getTileStatus(tileIndex)) {
        return null;
      }
      else {
        var localItemIndex = this.$gridModel.globalToLocalItemIndex(globalItemIndex);
        return this.$ui.getItemElement(tileIndex, localItemIndex);
      }
    },
    fetchWithinScrollRange: function TiledWidget$FetchWithinScrollRange(pixelFrom, pixelTo, scrollToData) {
      this.$fetchWithinScrollPixelRange(pixelFrom, pixelTo);
      this.$scrollToDataHandler = ss.mkdel(this, function(sender, e) {
        if (this.$fetcher.getQueueLength() === 0) {
          scrollToData();
          this.$fetcher.remove_contentFetched(this.$scrollToDataHandler);
        }
      });
      this.$fetcher.add_contentFetched(this.$scrollToDataHandler);
    },
    $setContent: function TiledWidget$SetContent(tileIndex, data) {
      if (this.$gridModel.get_tileCount() === 0) {
        tab.Log.get(this).warn('SetContent called when there are no grid tiles.', []);
        return;
      }
      var html = this.$formatter.format(data, this.$gridModel.getTilePosition(tileIndex), this.$gridModel.getTileRange(tileIndex));
      if (html.length === 0) {
        return;
      }
      this.$ui.setContent(tileIndex, html);
      this.$gridModel.updateTileStatus(tileIndex, true);
    },
    $createFetchInfo: function TiledWidget$CreateFetchInfo(tileIndex) {
      var rangeType = this.$gridModel.getTileRangeType(tileIndex);
      var range = this.$gridModel.getTileRange(tileIndex);
      var fetchInfo = new $tab_FetchInfo(tileIndex, range, rangeType);
      return fetchInfo;
    },
    $preloadEverything: function TiledWidget$PreloadEverything() {
      var fetchList = [];
      var tileCount = this.$gridModel.get_tileCount();
      for (var i = 1; i < tileCount; ++i) {
        var fetchInfo = this.$createFetchInfo(i);
        fetchList.push(fetchInfo);
      }
      this.$fetcher.fetch(fetchList);
    },
    $fetchWithinScrollPixelRange: function TiledWidget$FetchWithinScrollPixelRange(pixelFrom, pixelTo) {
      if (this.$gridModel.get_tileCount() === 0) {
        tab.Log.get(this).warn('FetchWithinScrollPixelRange called when there are no grid tiles.', []);
        return;
      }
      var adjustedPixelTo = pixelTo - 1;
      var pixelRange = new tab.IntegerRange(Math.floor(pixelFrom), Math.ceil(adjustedPixelTo));
      var tileRange = this.$gridModel.pixelToTileRange(pixelRange);
      var fetchList = [];
      var from = tileRange.get_from();
      var to = tileRange.get_to();
      for (var i = from; i <= to; ++i) {
        if (this.$gridModel.getTileStatus(i) || this.$fetcher.isTilePending(i)) {
          continue;
        }
        var fetchInfo = this.$createFetchInfo(i);
        if (ss.isNullOrUndefined(fetchInfo.get_range())) {
          tab.Log.get(this).warn('If you are seeing this warning, investigate to see why we have an out-of-range fetch happening.', []);
        }
        else {
          fetchList.push(fetchInfo);
        }
      }
      this.$fetcher.fetch(fetchList);
    },
    $onScrolled: function TiledWidget$OnScrolled(sender, e) {
      var pixelPadding = this.$padding * this.$gridModel.get_itemHeight();
      var pixelFrom = e.get_newPos().y - pixelPadding;
      if (pixelFrom < 0) {
        pixelFrom = 0;
      }
      var pixelTo = e.get_newPos().y + pixelPadding + this.$gridModel.get_viewportHeight();
      if (pixelTo > this.$gridModel.get_totalHeight()) {
        pixelTo = this.$gridModel.get_totalHeight();
      }
      this.$fetchWithinScrollPixelRange(pixelFrom, pixelTo);
    },
    $onContentFetched: function TiledWidget$OnContentFetched(sender, e) {
      var tileIndex = e.get_tileIndex();
      var data = e.get_data();
      this.$setContent(tileIndex, data);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TiledWidgetFactory
  var $tab_TiledWidgetFactory = global.tab.TiledWidgetFactory = ss.mkType($asm, 'tab.TiledWidgetFactory', null, null, {
    createChecklist: function TiledWidgetFactory$CreateChecklist(filter, tuples, div, filterName, lineHeight) {
      var formatter = new $tab_ChecklistContentFormatter(filter, filterName, filter.get_modeContents().get_itemFormatter());
      return $tab_TiledWidgetFactory.createListTiledWidget(filter, tuples, div, formatter, lineHeight);
    },
    createRadiolist: function TiledWidgetFactory$CreateRadiolist(filter, tuples, div, filterName, lineHeight) {
      var formatter = new $tab_RadiolistContentFormatter(filter, filterName, filter.get_modeContents().get_itemFormatter());
      return $tab_TiledWidgetFactory.createListTiledWidget(filter, tuples, div, formatter, lineHeight);
    },
    createSimpleList: function TiledWidgetFactory$CreateSimpleList(filter, tuples, div, filterName, lineHeight) {
      var formatter = new $tab_SimpleListContentFormatter(filter, filterName, filter.get_modeContents().get_itemFormatter());
      return $tab_TiledWidgetFactory.createListTiledWidget(filter, tuples, div, formatter, lineHeight);
    },
    createListTiledWidget: function TiledWidgetFactory$CreateListTiledWidget(filter, tuples, div, formatter, lineHeight) {
      var tileCapacity = ((filter.get_oFilter().isTiled && ss.unbox(ss.cast(tsConfig.filterTileSize, ss.Int32)) > 0) ? ss.unbox(ss.cast(tsConfig.filterTileSize, ss.Int32)) : filter.get_oFilter().table.actual_size);
      div.style.position = 'relative';
      var totalHeight = filter.get_oFilter().table.actual_size * lineHeight;
      var tileCount = (!!tileCapacity ? Math.ceil(filter.get_oFilter().table.actual_size / tileCapacity) : 0);
      var ui = new $tab_FilterListUI(div, totalHeight, tileCount);
      var box = tab.DomUtil.getMarginBox(div);
      var gridModel = new $tab_ListGridModel(filter.get_oFilter().table.actual_size, lineHeight, tileCapacity, box.h);
      var fetcher = new $tab_FilterContentFetcher(filter.get_session(), filter.get_identifier(), filter.get_domain());
      var firstTile = tuples.slice(0, tileCapacity);
      var tiledWidget = new $tab_TiledWidget(fetcher, gridModel, ui, formatter, firstTile, false);
      return tiledWidget;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.Tree
  var $tab_Tree = global.tab.Tree = ss.mkType($asm, 'tab.Tree', function(param) {
    this.model = null;
    this.anchor = null;
    this.prev_anchor = null;
    this.anchorIsStart = false;
    this.$3$NotifyChangeCalledField = null;
    dijit.Tree.call(this);
  }, {
    add_notifyChangeCalled: function Tree$add_NotifyChangeCalled(value) {
      this.$3$NotifyChangeCalledField = ss.delegateCombine(this.$3$NotifyChangeCalledField, value);
    },
    remove_notifyChangeCalled: function Tree$remove_NotifyChangeCalled(value) {
      this.$3$NotifyChangeCalledField = ss.delegateRemove(this.$3$NotifyChangeCalledField, value);
    },
    _createTreeNode: function Tree$CreateTreeNode(paramsArg) {
      paramsArg['isChecked'] = this.model.isChecked(paramsArg['item']);
      var node = new tableau.base.widget.hsm._TreeNode(paramsArg);
      paramsArg['item'].node = node;
      return node;
    },
    $mayHaveChildren: function Tree$MayHaveChildren(item) {
      return this.model.mayHaveChildren(item);
    },
    getIconClass: function Tree$GetIconClass(item, opened) {
      return 'HFTreeNodeIcon';
    },
    getLabelClass: function Tree$GetLabelClass(item, opened) {
      var labelClass = (this.model.isSingleSelect ? 'HFTreeNodeLabelSS' : 'HFTreeNodeLabel');
      labelClass += (item.isRaggedOrSkipped ? ' HFTreeNodeRaggedOrSkipped' : '');
      return labelClass;
    },
    focusNode: function Tree$FocusNode(node) {
      var el = $(node.labelNode);
      var i = el.attr('tabindex');
      if (!!i) {
        el.removeAttr('tabindex');
      }
      this.inherited(arguments);
      if (!!i) {
        el.attr('tabindex', i);
      }
    },
    notifyChange: function Tree$NotifyChange(e) {
      if (ss.isValue(this.$3$NotifyChangeCalledField)) {
        this.$3$NotifyChangeCalledField(e);
      }
    },
    getDepth: function Tree$GetDepth(node) {
      var depth = 0;
      while (!ss.referenceEquals(node, this.rootNode)) {
        depth += 1;
        node = node.getParent();
      }
      return depth;
    },
    findEarlierNode: function Tree$FindEarlierNode(node1, node2, level) {
      return this.rEarlierContained(this.rootNode, 0, node1, node2, level);
    },
    rEarlierContained: function Tree$REarlierContained(searchNode, searchLevel, n1, n2, targetLevel) {
      if (searchLevel > targetLevel) {
        return null;
      }
      else if (searchLevel < targetLevel) {
        var kids = searchNode.getChildren();
        var l = kids.length;
        for (var i = 0; i < l; i++) {
          var result = this.rEarlierContained(kids[i], searchLevel + 1, n1, n2, targetLevel);
          if (ss.isValue(result)) {
            return result;
          }
        }
      }
      else {
        if (ss.referenceEquals(searchNode, n1)) {
          return n1;
        }
        if (ss.referenceEquals(searchNode, n2)) {
          return n2;
        }
        return null;
      }
      return null;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TreeNode
  var $tab_TreeNode = global.tab.TreeNode = ss.mkType($asm, 'tab.TreeNode', function(param) {
    this.isChecked = false;
    this.$clickHandle = null;
    this.tree = null;
    this.item = null;
    dijit._TreeNode.call(this);
  }, {
    dispose: function TreeNode$Dispose() {
      this.$clickHandle.dispose();
      this.$clickHandle = null;
    },
    destroy: function TreeNode$Destroy(preserveDom) {
      this.dispose();
      this.inherited(arguments);
    },
    updateCheckState: function TreeNode$UpdateCheckState() {
      this.isChecked = this.tree.model.isChecked(this.item);
      var checkbox = $(this.labelNode).find('input');
      checkbox.prop('checked', this.isChecked);
    },
    setLabelNode: function TreeNode$SetLabelNode(label) {
      this.isChecked = this.tree.model.isChecked(this.item);
      var selected = (this.isChecked ? " checked='checked'" : '');
      var html = '<input type=';
      if (this.tree.model.isSingleSelect) {
        var itemName = this.tree.model.identifier.get_fieldName();
        if (ss.isValue(this.tree.model.session)) {
          itemName += this.tree.model.session.get_viewId();
        }
        html += "'radio' name='FI_" + itemName + "'" + selected + '/>' + "<div class='fakeRadio'></div>";
      }
      else {
        html += "'checkbox'" + selected + '/>' + "<div class='fakeCheckBox'></div>";
      }
      html += "<a title='" + label + "'>" + label + '</a>';
      this.labelNode.innerHTML = html;
      if (ss.isValue(this.$clickHandle)) {
        this.$clickHandle.dispose();
      }
      this.$clickHandle = new tab.DisposableHolder();
      this.$clickHandle.add$1(spiff.EventUtil.bindWithDispose($(ss.cast(this.labelNode.firstChild, HTMLElement)), 'click', ss.mkdel(this, this.$onClick)));
    },
    $onClick: function TreeNode$OnClick(e) {
      this.isChecked = ss.cast(this.labelNode.firstChild, ss.isValue(this.labelNode.firstChild) && (ss.isInstanceOfType(this.labelNode.firstChild, Element) && this.labelNode.firstChild.tagName === 'INPUT')).checked;
      this.tree.notifyChange(e);
      e.stopPropagation();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TreeSupport
  var $tab_TreeSupport = global.tab.TreeSupport = ss.mkType($asm, 'tab.TreeSupport', function(session, identifier, levels, isSingleSelect) {
    this.root = null;
    this.session = null;
    this.identifier = null;
    this.levels = 0;
    this.isSingleSelect = false;
    this.session = session;
    this.identifier = identifier;
    this.levels = levels;
    this.isSingleSelect = isSingleSelect;
    this.root = new Object();
    this.root.schema = null;
    this.root.tuple = { d: null, s: false, t: null };
    this.root.label = '$ROOT$';
    this.root.level = -1;
    this.root.children = null;
  }, {
    $isRaggedOrSkipped: function TreeSupport$IsRaggedOrSkipped(tuple) {
      var dataValues = tuple.t;
      if (tab.MiscUtil.isNullOrEmpty(dataValues)) {
        return false;
      }
      var lastDataValue = dataValues[dataValues.length - 1];
      var special = lastDataValue.s;
      var ragged = tableau.types.DataSpecial.DS_RAGGED;
      var skipped = tableau.types.DataSpecial.DS_SKIPPED;
      return ss.referenceEquals(special, ragged) || ss.referenceEquals(special, skipped);
    },
    itemsFromTable: function TreeSupport$ItemsFromTable(data, level) {
      var items = [];
      var t = (ss.isValue(data.table) ? data.table.tuples : null);
      if (ss.isNullOrUndefined(data.table)) {
        return items;
      }
      for (var i = 0; i < t.length; i++) {
        var displayName = $tab_FilterFormat.formatTupleDisplayName(t[i]);
        var children = null;
        if (!!data.children) {
          children = this.itemsFromTable(data.children[i], level + 1);
        }
        var child = new Object();
        child.id = $tab_FilterFormat.formatTupleUniqueName(t[i], null);
        child.schema = data.table.schema;
        child.tuple = t[i];
        child.label = displayName;
        child.level = level;
        child.children = children;
        child.isRaggedOrSkipped = this.$isRaggedOrSkipped(t[i]);
        items.push(child);
      }
      return items;
    },
    $onChange: function TreeSupport$OnChange(item) {
      var node = item.node;
      node.updateCheckState();
      if (ss.isValue(item.node2)) {
        item.node2.updateCheckState();
      }
    },
    onChildrenChange: function TreeSupport$OnChildrenChange(parent, newChildrenList) {
      parent.children = newChildrenList;
    },
    getIdentity: function TreeSupport$GetIdentity(item) {
      return item.id;
    },
    getLabel: function TreeSupport$GetLabel(item) {
      return item.label;
    },
    isChecked: function TreeSupport$IsChecked(item) {
      return item.tuple.s;
    },
    mayHaveChildren: function TreeSupport$MayHaveChildren(item) {
      return item.level + 1 < this.levels;
    },
    getRoot: function TreeSupport$GetRoot(onComplete, onError) {
      onComplete(this.root);
    },
    getChildren: function TreeSupport$GetChildren(parent, onComplete, onError) {
      if (ss.isValue(parent.children) || ss.referenceEquals(parent, this.root)) {
        onComplete(parent.children);
      }
      else {
        var callback = ss.mkdel(this, function(result) {
          if (!!!result[0].table) {
            parent.children = null;
          }
          else {
            parent.children = this.itemsFromTable(result[0], parent.level + 1);
          }
          onComplete(parent.children);
        });
        var member = new Object();
        member.schema = parent.schema;
        member.tuples = [parent.tuple];
        this.session.requestHSMChildren(this.identifier, member, callback, onError);
      }
    },
    refresh: function TreeSupport$Refresh(table) {
      this.$refreshChildren(this.root, table);
    },
    $refreshChildren: function TreeSupport$RefreshChildren(parent, table) {
      if (tab.MiscUtil.isNullOrEmpty$2(parent.children)) {
        return;
      }
      this.$refreshItems(parent.children, table[0].table);
      _.each(parent.children, ss.mkdel(this, function(child, i) {
        if (!!child.children) {
          if (ss.isValue(table[0].children) && i < table[0].children.length) {
            this.$refreshChildren(child, [table[0].children[i]]);
          }
          else {
            var onComplete = ss.mkdel(this, function(newTable) {
              this.$refreshChildren(child, newTable);
            });
            var member = new Object();
            member.schema = child.schema;
            member.tuples = [child.tuple];
            this.session.requestHSMChildren(this.identifier, member, onComplete, null);
          }
        }
      }));
    },
    $refreshItems: function TreeSupport$RefreshItems(items, table) {
      var t = table.tuples;
      for (var i = 0; i < t.length; i++) {
        if (items[i].tuple.s !== t[i].s) {
          items[i].tuple.s = t[i].s;
          this.$onChange(items[i]);
        }
      }
      return items;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TypeIn
  var $tab_TypeIn = global.tab.TypeIn = ss.mkType($asm, 'tab.TypeIn', function(targetDiv, doUpdateFunc, style) {
    this.queryBox = null;
    this.div = null;
    this.outerDiv = null;
    this.querySpan = null;
    this.$disposables = null;
    this.$fieldname = null;
    this.goButton = null;
    this.$pattern = null;
    this.$dataValue = null;
    this.$isClickingOnActionButton = false;
    this.$domain = null;
    this.$cachedAutocomplete = null;
    this.$autocomplete = false;
    this.$applyTimer = null;
    this.$isHittingESC = false;
    this.$style = null;
    this.$editingDataValue = false;
    this.$keyCode = 0;
    this.$doUpdate = null;
    this.$autocompleteFunc = null;
    this.$numberFormat = null;
    this.div = targetDiv;
    this.$doUpdate = doUpdateFunc;
    this.$style = style;
    this.div.classList.add('tableauWidgetUiTypeIn');
    this.$disposables = new tab.DisposableHolder();
  }, {
    instantiate: function TypeIn$Instantiate(pattern, fieldnameArg, dataValue, minValue, maxValue, numberFormatArg, dateFormatArg, dateEditingFormatArg, firstDayOfWeek) {
      this.$pattern = pattern;
      this.$fieldname = fieldnameArg;
      this.$dataValue = dataValue;
      this.$numberFormat = numberFormatArg;
      if (ss.isNullOrUndefined(this.$pattern)) {
        this.$pattern = '';
      }
      var descriptionId = tab.DomUtil.generateUniqueId();
      this.div.innerHTML = "<div id='typein_" + tab.EscapingUtil.escapeHtml(fieldnameArg) + "' class='TypeInDiv tab-ctrl-formatted-border tab-ctrl-formatted-darker-border-hover'>" + "<span class='TypeInQuerySpan'>" + "<input aria-describedby='" + descriptionId + "' type='text' class='QueryBox' value='" + tab.EscapingUtil.escapeHtml(this.$pattern) + "'/>" + '</span>' + "<span class='goButton' style='display:none'></span>" + "<span class='sr-only' id='" + descriptionId + "'>" + tab.Strings.AccessibilityTypeInFieldPrompt + '</span>' + '</div>';
      this.outerDiv = ss.cast(this.div.firstChild, HTMLElement);
      this.querySpan = ss.cast(this.outerDiv.childNodes[0], HTMLElement);
      var $t1 = this.querySpan.childNodes[0];
      this.queryBox = ss.cast($t1, ss.isValue($t1) && (ss.isInstanceOfType($t1, Element) && $t1.tagName === 'INPUT'));
      this.goButton = ss.cast(this.outerDiv.childNodes[1], HTMLElement);
      var stopPropHandler = function(e) {
        e.stopPropagation();
      };
      var jqueryQueryBox = $(this.queryBox);
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'keydown', ss.mkdel(this, this.$onKeyDown)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'keyup', ss.mkdel(this, this.$onKeyUp)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'blur', ss.mkdel(this, this.onInputBlur)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'focus', ss.mkdel(this, this.onQueryBoxFocus)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'click', ss.mkdel(this, this.$onQueryBoxClick)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryQueryBox, 'mousemove', stopPropHandler));
      var jqueryGoButton = $(this.goButton);
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryGoButton, 'mousedown', ss.mkdel(this, this.$onButtonMouseDown)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryGoButton, 'click', ss.mkdel(this, this.$onButtonClick)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryGoButton, 'mouseenter', ss.mkdel(this, this.$onGoHover)));
      this.$disposables.add$1(spiff.EventUtil.bindWithDispose(jqueryGoButton, 'mouseleave', ss.mkdel(this, this.$onGoUnhover)));
      EventUtils.GlobalUIEvents.add_FirstTouch(ss.mkdel(this, this.$onFirstTouch));
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        EventUtils.GlobalUIEvents.remove_FirstTouch(ss.mkdel(this, this.$onFirstTouch));
      })));
      EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(this, this.$onDismissTemporaryElements));
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(this, this.$onDismissTemporaryElements));
      })));
      this.$isClickingOnActionButton = false;
      this.$resetPattern();
    },
    $onFirstTouch: function TypeIn$OnFirstTouch(e, cancelCallback) {
      if (!this.isInsideWidget(e)) {
        this.$commitQueryBoxValueAndMaybeOtherStuff();
      }
    },
    $onDismissTemporaryElements: function TypeIn$OnDismissTemporaryElements() {
      this.$commitQueryBoxValueAndMaybeOtherStuff();
    },
    $commitQueryBoxValueAndMaybeOtherStuff: function TypeIn$CommitQueryBoxValueAndMaybeOtherStuff() {
      if (this.$patternIsChanged()) {
        this.setNewPattern();
        this.queryBox.blur();
      }
    },
    isInsideWidget: function TypeIn$IsInsideWidget(e) {
      return tab.DomUtil.isEqualOrAncestorOf(this.outerDiv, e.target);
    },
    destroy: function TypeIn$Destroy() {
      this.dispose();
    },
    dispose: function TypeIn$Dispose() {
      this.div.classList.remove('tableauWidgetUiTypeIn');
      this.$disposables.dispose();
    },
    layout: function TypeIn$Layout() {
    },
    editableValue: function TypeIn$EditableValue() {
      return tableau.format.formatDataValue(tab.LegacyFilterModel.buildDataValueFromFilterValue(this.$dataValue), null, tableau.format.deriveNumberEditingFormat(this.$numberFormat), null, 2);
    },
    setNewState: function TypeIn$SetNewState(pattern, domainArg, dataValue, minValue, maxValue) {
      this.$pattern = pattern;
      this.queryBox.value = pattern;
      if (ss.isValue(dataValue)) {
        this.$dataValue = dataValue;
      }
      else if (ss.isValue(this.$dataValue)) {
        var oldValue = this.$dataValue;
        this.$dataValue = new Object();
        this.$dataValue.s = tableau.types.DataSpecial.DS_NULL;
        this.$dataValue.t = oldValue.t;
      }
      this.$setButtonInactive();
      this.$domain = domainArg || [];
      this.$cachedAutocomplete = '';
    },
    $shouldEditRawDataValue: function TypeIn$ShouldEditRawDataValue() {
      return tab.LegacyFilterModel.isNormalValue(this.$dataValue) && !this.$autocomplete;
    },
    $initializeAutocomplete: function TypeIn$InitializeAutocomplete(d, f) {
      this.$cachedAutocomplete = '';
      this.$autocomplete = true;
      this.$domain = d || [];
      this.$autocompleteFunc = f;
      if (tab.FeatureFlags.isEnabled('AccessibilityTypeInFilters')) {
        $(this.queryBox).attr('aria-autocomplete', 'inline');
      }
    },
    $setApplyTimer: function TypeIn$SetApplyTimer(func) {
      this.clearTimeout();
      this.$applyTimer = window.setTimeout(func, 500);
    },
    clearTimeout: function TypeIn$ClearTimeout() {
      this.$applyTimer = tab.MiscUtil.clearTimeout(this.$applyTimer);
    },
    $startAutocomplete: function TypeIn$StartAutocomplete() {
      if (!this.$autocomplete) {
        return;
      }
      if (tab.MiscUtil.isNullOrEmpty$1(this.queryBox.value)) {
        return;
      }
      if (this.$cachedAutocomplete.toLowerCase().indexOf(this.queryBox.value.toLowerCase()) === 0) {
        this.onAutocompleteDone(this.$cachedAutocomplete);
        return;
      }
      if (this.$domain.length > 0) {
        var current = this.queryBox.value.toLowerCase();
        var domainLength = this.$domain.length;
        for (var i = 0; i < domainLength; i++) {
          if (this.$domain[i].toLowerCase().indexOf(current) === 0) {
            this.onAutocompleteDone(this.$domain[i]);
            return;
          }
        }
      }
      else if (ss.isValue(this.$autocompleteFunc)) {
        this.$setApplyTimer(ss.mkdel(this, function() {
          this.$autocompleteFunc(this.queryBox.value, ss.mkdel(this, this.onAutocompleteDone), this.$fieldname);
        }));
      }
    },
    onAutocompleteDone: function TypeIn$OnAutocompleteDone(newObj) {
      var newValue = ss.cast(newObj, String);
      if (tab.MiscUtil.isNullOrEmpty$1(newValue)) {
        return;
      }
      this.$cachedAutocomplete = newValue;
      var current = this.queryBox.value;
      this.queryBox.value = newValue;
      $tab_TypeIn.selectText(this.queryBox, current.length, newValue.length);
    },
    onQueryBoxFocus: function TypeIn$OnQueryBoxFocus(e) {
      this.queryBox.isFocused = true;
      if (this.$shouldEditRawDataValue()) {
        this.queryBox.value = this.editableValue();
        this.$editingDataValue = true;
      }
    },
    $onQueryBoxClick: function TypeIn$OnQueryBoxClick(e) {
      if (this.queryBox.isFocused) {
        this.queryBox.select();
      }
      this.queryBox.isFocused = false;
    },
    $onGoHover: function TypeIn$OnGoHover(e) {
      $(this.goButton).addClass('Hover');
    },
    $onGoUnhover: function TypeIn$OnGoUnhover(e) {
      $(this.goButton).removeClass('Hover');
    },
    $patternIsChanged: function TypeIn$PatternIsChanged() {
      if (this.$editingDataValue && this.$shouldEditRawDataValue()) {
        return !ss.referenceEquals(this.editableValue(), this.queryBox.value);
      }
      else {
        return !ss.referenceEquals(this.$pattern, this.queryBox.value);
      }
    },
    $setButtonToProperState: function TypeIn$SetButtonToProperState() {
      var active = ((this.$style === 'TypeIn') ? this.$patternIsChanged() : !ss.isNullOrEmptyString(this.queryBox.value));
      if (active) {
        this.$setButtonActive();
      }
      else {
        this.$setButtonInactive();
      }
    },
    $setButtonActive: function TypeIn$SetButtonActive() {
      $(this.goButton).css('display', '');
      $(this.goButton).addClass(this.$style + 'Active');
      $(this.querySpan).addClass('ShortQuerySpan');
    },
    $setButtonInactive: function TypeIn$SetButtonInactive() {
      $(this.querySpan).removeClass('ShortQuerySpan');
      $(this.goButton).removeClass(this.$style + 'Active');
      $(this.goButton).css('display', 'none');
    },
    onInputBlur: function TypeIn$OnInputBlur(e) {
      this.queryBox.isFocused = false;
      if (!this.$isClickingOnActionButton && !this.$isHittingESC) {
        this.setNewPattern();
      }
      this.$isHittingESC = false;
    },
    $onButtonMouseDown: function TypeIn$OnButtonMouseDown(e) {
      this.$isClickingOnActionButton = true;
    },
    $onButtonClick: function TypeIn$OnButtonClick(e) {
      this.$doButtonAction();
      this.$isClickingOnActionButton = false;
    },
    $handleESC: function TypeIn$HandleESC(e) {
      this.$resetPattern();
      if (BrowserSupport.BrowserSupport.IsFF()) {
        window.setTimeout(ss.mkdel(this, this.$resetPattern), 10);
      }
      this.$setButtonToProperState();
      spiff.EventUtil.stopEvent$2(e);
    },
    $onKeyDown: function TypeIn$OnKeyDown(e) {
      switch (e.which) {
        case 27: {
          this.$handleESC(e);
          break;
        }
      }
      this.$keyCode = e.which;
    },
    enterKeyHandler: function TypeIn$EnterKeyHandler(e) {
      this.clearTimeout();
      this.setNewPattern();
      this.queryBox.blur();
      spiff.EventUtil.stopEvent$2(e);
    },
    $onKeyUp: function TypeIn$OnKeyUp(e) {
      switch (e.which) {
        case 13: {
          if (this.$keyCode === 13) {
            this.enterKeyHandler(e);
          }
          break;
        }
        case 27: {
          this.clearTimeout();
          this.$handleESC(e);
          this.$isHittingESC = true;
          if (!tab.FeatureFlags.isEnabled('AccessibilityTypeInFilters')) {
            this.queryBox.blur();
          }
          break;
        }
        case 8:
        case 46: {
          this.clearTimeout();
          this.$setButtonToProperState();
          break;
        }
        case 16: {
          this.$setButtonToProperState();
          break;
        }
        default: {
          if (this.$keyCode === e.which) {
            this.$startAutocomplete();
            this.$setButtonToProperState();
          }
          break;
        }
      }
    },
    setPattern: function TypeIn$SetPattern(newPattern) {
      this.queryBox.value = newPattern;
      this.clearTimeout();
      this.setNewPattern();
      this.queryBox.blur();
    },
    setNewPattern: function TypeIn$SetNewPattern() {
      if (this.$patternIsChanged()) {
        this.$doUpdate(this.queryBox.value);
        if (!this.$shouldEditRawDataValue()) {
          this.setNewState(this.queryBox.value);
        }
      }
      else if (this.$shouldEditRawDataValue()) {
        this.$resetPattern();
      }
      this.$editingDataValue = false;
    },
    $resetPattern: function TypeIn$ResetPattern() {
      this.queryBox.value = this.$pattern;
      this.$editingDataValue = false;
      this.$setButtonToProperState();
    },
    $doButtonAction: function TypeIn$DoButtonAction() {
      if (this.$style === 'TypeIn') {
        this.$resetPattern();
        this.queryBox.blur();
      }
      else {
        this.queryBox.value = '';
        this.setNewPattern();
      }
      this.$setButtonToProperState();
    }
  }, {
    selectText: function TypeIn$SelectText(field, start, end) {
      if (ss.isNullOrUndefined(field)) {
        return;
      }
      if (typeof(field['createTextRange']) === 'function') {
        var selRange = field.createTextRange();
        selRange.collapse(true);
        selRange.moveStart('character', start);
        selRange.moveEnd('character', end - start);
        selRange.select();
      }
      else if (typeof(field['setSelectionRange']) === 'function') {
        field.setSelectionRange(start, end);
      }
      else if (typeof(field['selectionStart']) === 'function') {
        field.selectionStart = start;
        field.selectionEnd = end;
      }
      field.focus();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TypeInCatmode
  var $tab_TypeInCatmode = global.tab.TypeInCatmode = ss.mkType($asm, 'tab.TypeInCatmode', function(parent, div, attrs) {
    this.isContainer = true;
    this.$contentsWidget = null;
    $tab_BaseMode.call(this, parent, div, attrs);
  }, {
    instantiate: function TypeInCatmode$Instantiate(newTuples, itemName, facet) {
      this.$contentsWidget = new tableau.base.widget.TypeInFilterContents(ss.mkdict(['parentFilter', this.parent, 'tuples', newTuples, 'itemName', itemName, 'role', this.parent.get_oFilter().role]));
      this.div.appendChild(this.$contentsWidget.domNode);
      this.$contentsWidget.startup();
      this.$setupDismissResultsHandlers();
    },
    $setupDismissResultsHandlers: function TypeInCatmode$SetupDismissResultsHandlers() {
      var globalClickHandler = ss.mkdel(this, function(evt) {
        var resultsDom = this.parent.get_searchWidget().domResults;
        if (tab.DomUtil.isEqualOrAncestorOf(resultsDom, evt.target)) {
          return;
        }
        if (ss.referenceEquals(evt.target, this.parent.get_searchWidget().get_domXButton())) {
          this.parent.get_searchWidget().clearSearch(false, false);
        }
        else {
          this.parent.get_searchWidget().clearSearch(true, true);
        }
      });
      this.disposables.add$1(spiff.EventUtil.bindWithDispose($(document.body), 'mousedown', globalClickHandler));
    },
    destroy: function TypeInCatmode$Destroy() {
      this.dispose();
      if (ss.isValue(this.$contentsWidget)) {
        this.$contentsWidget.destroyRecursive(false);
      }
      this.$contentsWidget = null;
    },
    layout: function TypeInCatmode$Layout(contentSize, horizontalLayout) {
      this.inherited(arguments);
      var filterSize = { w: contentSize.w - 6, h: contentSize.h };
      this.$contentsWidget.layout$1(filterSize, horizontalLayout);
    },
    fetchChildNodeByIndex: function TypeInCatmode$FetchChildNodeByIndex(index) {
      var children = this.$contentsWidget.domItemsList.childNodes;
      if (index < 0 || index >= children.length) {
        return null;
      }
      return ss.cast(children[index], HTMLElement);
    },
    applyChanges: function TypeInCatmode$ApplyChanges() {
      var serverState = this.$getServerState();
      var uiState = this.$contentsWidget.getUIState();
      var aliasesAdded = this.$getStateDifference(uiState, serverState);
      var aliasesRemoved = this.$getStateDifference(serverState, uiState);
      if (aliasesAdded.length > 0 || aliasesRemoved.length > 0) {
        this.parent.set_stateId(this.parent.get_stateId() + 1);
        tab.FilterClientCommands.modifyCategoricalFilterValues(this.parent.get_session().get_visualId(), this.parent.get_identifier(), aliasesAdded, aliasesRemoved, true);
      }
    },
    resetContent: function TypeInCatmode$ResetContent(tuples, itemName, facet) {
      if (ss.isValue(this.$contentsWidget)) {
        this.$contentsWidget.destroyRecursive(false);
      }
      this.$contentsWidget = null;
      this.instantiate(tuples, itemName, facet);
    },
    $getServerState: function TypeInCatmode$GetServerState() {
      var tuples = this.parent.get_oFilter().table.tuples;
      var state = {};
      var len = tuples.length;
      for (var i = 0; i < len; i++) {
        var tuple = tuples[i];
        state[this.$contentsWidget.getFormattedAlias(tuple)] = tuple.s;
      }
      return state;
    },
    $getStateDifference: function TypeInCatmode$GetStateDifference(state1, state2) {
      var diff = [];
      var $t1 = ss.getEnumerator(Object.keys(state1));
      try {
        while ($t1.moveNext()) {
          var alias = $t1.current();
          if (state1.hasOwnProperty(alias)) {
            if (state1[alias] && !state2[alias]) {
              diff.push(alias);
            }
          }
        }
      }
      finally {
        $t1.dispose();
      }
      return diff;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TypeInDateField
  var $tab_TypeInDateField = global.tab.TypeInDateField = ss.mkType($asm, 'tab.TypeInDateField', function(targetDiv, doUpdateFunc, style, createDatePickerFunc) {
    this.$createDatePickerFunc = null;
    this.$calendarControl = null;
    this.$dateFormat = null;
    this.$dateEditingFormat = null;
    this.$minVal = null;
    this.$maxVal = null;
    this.$firstDayOfWeekVal = null;
    this.$2$CustomCalendarDateSelectionActionField = null;
    $tab_TypeIn.call(this, targetDiv, doUpdateFunc, style);
    this.$createDatePickerFunc = createDatePickerFunc;
    if (ss.isNullOrUndefined(this.$createDatePickerFunc)) {
      this.$createDatePickerFunc = function(settings) {
        return new tab.DatePicker(settings);
      };
    }
  }, {
    get_calendarElement: function TypeInDateField$get_CalendarElement() {
      return (ss.isValue(this.$calendarControl) ? this.$calendarControl.element : null);
    },
    get_customCalendarDateSelectionAction: function TypeInDateField$get_CustomCalendarDateSelectionAction() {
      return this.$2$CustomCalendarDateSelectionActionField;
    },
    set_customCalendarDateSelectionAction: function TypeInDateField$set_CustomCalendarDateSelectionAction(value) {
      this.$2$CustomCalendarDateSelectionActionField = value;
    },
    dispose: function TypeInDateField$Dispose() {
      $tab_TypeIn.prototype.dispose.call(this);
      this.$calendarControl = tab.MiscUtil.dispose$1(this.$calendarControl);
    },
    instantiate: function TypeInDateField$Instantiate(pattern, fieldnameArg, dataValue, minValue, maxValue, numberFormatArg, dateFormatArg, dateEditingFormatArg, firstDayOfWeek) {
      $tab_TypeIn.prototype.instantiate.call(this, pattern, fieldnameArg, dataValue, this.$minVal, this.$maxVal, numberFormatArg, dateFormatArg, dateEditingFormatArg, firstDayOfWeek);
      this.$dateFormat = dateFormatArg;
      this.$dateEditingFormat = dateEditingFormatArg;
      this.$minVal = minValue;
      this.$maxVal = maxValue;
      this.$firstDayOfWeekVal = firstDayOfWeek;
      if (!$tab_TypeInDateField.lazilyCreateCalendar) {
        this.$createCalendarControl();
      }
    },
    editableValue: function TypeInDateField$EditableValue() {
      var dv = tab.LegacyFilterModel.buildDataValueFromFilterValue(this.$dataValue);
      return tableau.format.formatDataValue(dv, 'm', this.$dateEditingFormat, null, 2);
    },
    $dataType: function TypeInDateField$DataType() {
      if (ss.isValue(this.$dataValue) && ss.isValue(this.$dataValue.t)) {
        return this.$dataValue.t;
      }
      else {
        return 't';
      }
    },
    setNewState: function TypeInDateField$SetNewState(pattern, domainArg, dataValue, minValue, maxValue) {
      $tab_TypeIn.prototype.setNewState.call(this, pattern, domainArg, dataValue, minValue, maxValue);
      if (ss.isValue(this.$calendarControl)) {
        this.$calendarControl.setDateRange($tab_TypeInDateField.$makeDate(minValue), $tab_TypeInDateField.$makeDate(maxValue));
      }
    },
    isInsideWidget: function TypeInDateField$IsInsideWidget(e) {
      return $tab_TypeIn.prototype.isInsideWidget.call(this, e) || this.$isEventInsideCalendar(e);
    },
    $isEventInsideCalendar: function TypeInDateField$IsEventInsideCalendar(e) {
      if (ss.isNullOrUndefined(this.$calendarControl)) {
        return false;
      }
      ss.Debug.assert(ss.isValue(this.$calendarControl.element), 'assuming that widgets always have an Element');
      var calendarElement = this.$calendarControl.element.get(0);
      return tab.DomUtil.isEqualOrAncestorOf(calendarElement, e.target);
    },
    onQueryBoxFocus: function TypeInDateField$OnQueryBoxFocus(e) {
      $tab_TypeIn.prototype.onQueryBoxFocus.call(this, e);
      if (ss.isNullOrUndefined(this.$calendarControl) || this.$calendarControl.element.is(':hidden')) {
        this.$createCalendarControl();
        var selectedDate = $tab_TypeInDateField.$makeDate(this.$dataValue);
        this.$calendarControl.show(selectedDate);
        this.$calendarControl.positionCalendarByElement($(this.queryBox).closest('.TypeInDiv'));
      }
    },
    $createCalendarControl: function TypeInDateField$CreateCalendarControl() {
      if (ss.isValue(this.$calendarControl)) {
        return;
      }
      var fmt = this.$dateFormat.locale_formatting_strings;
      var narrowDayNames = fmt.narrowDay.filter(function(s) {
        return !ss.isNullOrEmptyString(s);
      });
      var selectedDate = $tab_TypeInDateField.$makeDate(this.$dataValue);
      var firstDay = this.$firstDayOfWeekVal;
      if (ss.isValue(firstDay)) {
        firstDay = ss.Nullable$1.sub(firstDay, 1);
      }
      var formattingInfo = {};
      formattingInfo.format = tableau.format.mapIcuToOleFormat(this.$dateFormat.yearMonthFormat);
      formattingInfo.locale_formatting_strings = fmt;
      var editingFormattingInfo = {};
      editingFormattingInfo.format = this.$dateEditingFormat.format;
      editingFormattingInfo.locale_formatting_strings = fmt;
      var settings = new tab.DatePickerSettings(selectedDate, selectedDate, $tab_TypeInDateField.$makeDate(this.$minVal), $tab_TypeInDateField.$makeDate(this.$maxVal), firstDay, narrowDayNames, fmt.todayFormatTemplate, function(dateUTC) {
        return tableau.format.formatCustomJsDateTime(dateUTC, formattingInfo, 0, 'd');
      }, function(dateUTC1) {
        return tableau.format.formatCustomJsDateTime(dateUTC1, editingFormattingInfo, 0, 'd');
      });
      this.$calendarControl = this.$createDatePickerFunc(settings);
      this.$calendarControl.element.on('dateSelected', ss.mkdel(this, this.$dateSelected)).appendTo(document.body);
    },
    $dateSelected: function TypeInDateField$DateSelected(evt, date) {
      if (ss.isValue(this.$calendarControl)) {
        this.$calendarControl.hide();
      }
      if (!ss.staticEquals(this.get_customCalendarDateSelectionAction(), null)) {
        date = this.get_customCalendarDateSelectionAction()(date);
      }
      this.setPattern(tableau.format.formatJsDateTime(date, this.$dateEditingFormat, 2, this.$dataType()));
    },
    onInputBlur: function TypeInDateField$OnInputBlur(e) {
      if (ss.isValue(this.$calendarControl)) {
        this.$calendarControl.hide();
      }
      $tab_TypeIn.prototype.onInputBlur.call(this, e);
    }
  }, {
    $makeDate: function TypeInDateField$MakeDate(filterValue) {
      return (tab.LegacyFilterModel.isNormalValue(filterValue) ? new Date(tableau.types.JsDateFromOleDate(ss.unbox(filterValue.v))) : null);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.TypeInFilterContents
  var $tab_TypeInFilterContents = global.tab.TypeInFilterContents = ss.mkType($asm, 'tab.TypeInFilterContents', function() {
    this.templateString = "<div class='TypeInFilter'>" + "<div class='TIFItemsList tab-ctrl-formatted-text' dojoAttachPoint='domItemsList'" + "dojoAttachEvent='onclick:_onItemsListClick,onmouseover:_onItemsListMouseOver,onmouseout:_onItemsListMouseOut,onkeydown:_onItemsKeyDown'>" + "<div class='wcIconSearchRemove' dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:_onXButtonClick,onmouseover:_onXButtonMouseOver,onmouseout:_onXButtonMouseOut'></div>" + '</div>' + "<div class='TIFButtonDiv' dojoAttachPoint='domClearListButtonDiv'>" + "<button class='TIFButton'" + "dojoAttachEvent='onclick:_onClearListButtonClick' dojoAttachPoint='buttonClearList'>Clear List</button>" + '</div>' + '</div>';
    this.isContainer = false;
    this.parentFilter = null;
    this.tuples = null;
    this.itemName = '';
    this.role = null;
    this.domItemsList = null;
    this.domXButton = null;
    this.domClearListButtonDiv = null;
    this.$lastHoveredItem = null;
    this.buttonClearList = null;
    Object.call(this);
  }, {
    postCreate: function TypeInFilterContents$PostCreate() {
      var formatter = $tab_FilterFormat.formatTupleDisplayName;
      var getter = ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.getTypeInHtml);
      var itemsHtml = [];
      var visibleCount = 0;
      for (var i = 0; i < this.tuples.length; i++) {
        var tuple = this.tuples[i];
        if (tuple.s) {
          var id = this.itemName + '_' + i;
          var itemHtml = getter(id, formatter(tuple, true, this.role));
          itemsHtml.push(itemHtml);
          visibleCount++;
        }
      }
      this.domItemsList.innerHTML = itemsHtml.join('');
      this.buttonClearList.innerHTML = tab.Strings.getString('ClearAllButtonText');
      this.domClearListButtonDiv.style.display = ((visibleCount > 3) ? 'block' : 'none');
    },
    _onItemsListClick: function TypeInFilterContents$OnItemsListClick(evt) {
      this.parentFilter.onListItemClick(evt);
    },
    _onItemsListMouseOver: function TypeInFilterContents$OnItemsListMouseOver(evt) {
      if (!ss.isValue(evt.target) || !$(evt.target).hasClass('FITypeInItem')) {
        return;
      }
      $(evt.target).addClass('Hover');
      var node = this.$lastHoveredItem = $tab_FilterItemUtil.filterItem.getNodeFromEvent(evt);
      node.appendChild(this.domXButton);
      $(this.domXButton).css('top', 'calc(50% - 7px)');
      $(this.domXButton).css('display', 'block');
    },
    _onItemsListMouseOut: function TypeInFilterContents$OnItemsListMouseOut(evt) {
      if (!ss.isValue(evt.relatedTarget) || !ss.referenceEquals(evt.relatedTarget, this.domXButton)) {
        if (ss.isValue(this.$lastHoveredItem)) {
          $(this.$lastHoveredItem).removeClass('Hover');
        }
        this.$lastHoveredItem = null;
        $(this.domXButton).css('display', 'none');
      }
    },
    _onItemsKeyDown: function TypeInFilterContents$OnItemsKeyDown(evt) {
      if (evt.keyCode === 46) {
        this._removeSelectedItemsFromFilter();
        spiff.EventUtil.stopEvent(evt);
      }
    },
    _onXButtonClick: function TypeInFilterContents$OnXButtonClick(evt) {
      var table = null;
      spiff.EventUtil.stopEvent$2(evt);
      var node = $tab_FilterItemUtil.filterItem.getNodeFromEvent(evt);
      if (!ss.isValue(node)) {
        return;
      }
      $tab_FilterItemUtil.filterItem.setChecked(node, false);
      if (ss.isValue(this.parentFilter.get_oFilter())) {
        table = this.parentFilter.get_oFilter().table;
      }
      if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
        if (ss.isValue(table) && table.actual_size === table.tuples.length) {
          var filterData = new tab.LegacyCategoricalQuickFilterData(this.parentFilter.get_oFilter().targetSheets, this.parentFilter.get_identifier(), this.parentFilter.get_oFilter().exclude, this.getCheckedAliases(this.getUIState()));
          tab.FilterClientCommands.updateCategoricalFilter(filterData);
        }
      }
      this.parentFilter.clearRangeAnchorAndSelection();
      this.parentFilter.notifyChange(ss.mkdel(this.parentFilter, this.parentFilter.applyChanges));
    },
    _onXButtonMouseOver: function TypeInFilterContents$OnXButtonMouseOver(evt) {
      $(this.domXButton).addClass('Hover');
    },
    _onXButtonMouseOut: function TypeInFilterContents$OnXButtonMouseOut(evt) {
      $(this.domXButton).removeClass('Hover');
    },
    _onClearListButtonClick: function TypeInFilterContents$OnClearListButtonClick(evt) {
      var node;
      var table = null;
      this.parentFilter.get_searchWidget().clearSearch(true, false);
      for (node = ss.cast(this.domItemsList.firstChild, HTMLElement); ss.isValue(node); node = ss.cast(node.nextSibling, HTMLElement)) {
        $tab_FilterItemUtil.filterItem.setChecked(node, false);
      }
      this.parentFilter.set_stateId(this.parentFilter.get_stateId() + 1);
      if (ss.isValue(this.parentFilter.get_oFilter())) {
        table = this.parentFilter.get_oFilter().table;
      }
      if (tab.ApplicationModel.get_instance().get_isLocalRenderMode()) {
        if (ss.isValue(table) && table.actual_size === table.tuples.length) {
          var filterData = new tab.LegacyCategoricalQuickFilterData(this.parentFilter.get_oFilter().targetSheets, this.parentFilter.get_identifier(), this.parentFilter.get_oFilter().exclude, this.getCheckedAliases(this.getUIState()));
          tab.FilterClientCommands.updateCategoricalFilter(filterData);
        }
      }
      this.parentFilter.clearRangeAnchorAndSelection();
      this.parentFilter.applyChanges();
      $(this.domClearListButtonDiv).css('display', 'none');
    },
    layout$1: function TypeInFilterContents$Layout(contentSize, horizontalLayout) {
      if (tableau.util.isElementVisible(this.domClearListButtonDiv)) {
        var clearListDivSize = dojo.marginBox(this.domClearListButtonDiv);
        contentSize.h = Math.max(0, contentSize.h - clearListDivSize.h);
      }
      dojo.marginBox(this.domItemsList, contentSize);
    },
    _removeSelectedItemsFromFilter: function TypeInFilterContents$RemoveSelectedItemsFromFilter() {
      this.parentFilter.forEachSelected(function(index, node) {
        $tab_FilterItemUtil.filterItem.setChecked(node, false);
      });
      this.parentFilter.clearRangeAnchorAndSelection();
      this.parentFilter.notifyChange(ss.mkdel(this.parentFilter, this.parentFilter.applyChanges));
    },
    getUIState: function TypeInFilterContents$GetUIState() {
      var firstItem = ss.cast(this.domItemsList.firstChild, HTMLElement), item;
      var state = {};
      for (item = firstItem; ss.isValue(item); item = ss.cast(item.nextSibling, HTMLElement)) {
        var alias = this.getFormattedAlias(this.tuples[$tab_FilterItemUtil.filterItem.getIndex(item)]);
        state[alias] = $tab_FilterItemUtil.filterItem.isChecked(item);
      }
      return state;
    },
    getCheckedAliases: function TypeInFilterContents$GetCheckedAliases(state) {
      var aliases = [];
      var $t1 = ss.getEnumerator(Object.keys(state));
      try {
        while ($t1.moveNext()) {
          var alias = $t1.current();
          if (state.hasOwnProperty(alias)) {
            if (state[alias]) {
              aliases.push(alias);
            }
          }
        }
      }
      finally {
        $t1.dispose();
      }
      return aliases;
    },
    getFormattedAlias: function TypeInFilterContents$GetFormattedAlias(tuple) {
      return $tab_FilterFormat.formatTupleDisplayName(tuple, true, this.role);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.UICheckedMenuItem
  var $tab_UICheckedMenuItem = global.tab.UICheckedMenuItem = ss.mkType($asm, 'tab.UICheckedMenuItem', function() {
    $tab_OnClickOverride.call(this);
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.UIMenuItem
  var $tab_UIMenuItem = global.tab.UIMenuItem = ss.mkType($asm, 'tab.UIMenuItem', function() {
    $tab_OnClickOverride.call(this);
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.LegacyDojoUI.WidgetStyle
  var $tab_WidgetStyle = global.tab.WidgetStyle = ss.mkType($asm, 'tab.WidgetStyle', null, null, {
    applyFormatting: function WidgetStyle$ApplyFormatting(domNode, textStyleModel, backgroundColor, lineHeight, styleBackground) {
      $tab_WidgetStyle.$applyFormattingImpl(domNode.id, textStyleModel, backgroundColor, lineHeight, $tab_WidgetStyle.$idSelector, styleBackground);
    },
    applyFormattingByClassName: function WidgetStyle$ApplyFormattingByClassName(className, style, styleBackground) {
      $tab_WidgetStyle.$applyFormattingImpl(className, style.get_textStyleModel(), style.get_backgroundColor(), style.get_lineHeight(), $tab_WidgetStyle.$classSelector, styleBackground);
    },
    $applyFormattingImpl: function WidgetStyle$ApplyFormattingImpl(identifier, textStyleModel, backgroundColor, lineHeight, selector, styleBackground) {
      var styleElementId = identifier + '-style';
      tab.StyleUtil.clearStyleSheet(styleElementId);
      var textStyle = tab.FormattingConverters.makeFormatStyleDict(textStyleModel, null);
      if (ss.isValue(lineHeight)) {
        textStyle['line-height'] = lineHeight + 'px';
      }
      if (ss.isNullOrUndefined(textStyle['font-style'])) {
        textStyle['font-style'] = 'normal';
      }
      if (ss.isNullOrUndefined(textStyle['font-weight'])) {
        textStyle['font-weight'] = 'normal';
      }
      if (ss.isNullOrUndefined(textStyle['text-decoration'])) {
        textStyle['text-decoration'] = 'none';
      }
      tab.StyleUtil.appendCSSRuleToStyleSheet$1(styleElementId, selector(identifier, 'tab-ctrl-formatted-text'), textStyle);
      textStyle['font-size'] = null;
      textStyle['line-height'] = null;
      tab.StyleUtil.appendCSSRuleToStyleSheet$1(styleElementId, selector(identifier, 'tab-ctrl-formatted-fixedsize'), textStyle);
      if (ss.isValue(textStyleModel.color)) {
        var textColor = { color: textStyleModel.color };
        tab.StyleUtil.appendCSSRuleToStyleSheet$1(styleElementId, selector(identifier, 'tab-ctrl-formatted-coloronly'), textColor);
      }
      var widgetStyle = {};
      if (ss.isValue(textStyleModel.color)) {
        widgetStyle['border-color'] = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.fromColorCode(textStyleModel.color), 200 / 255).toString();
        tab.StyleUtil.appendCSSRuleToStyleSheet$1(styleElementId, selector(identifier, 'tab-ctrl-formatted-darker-border-hover:hover'), widgetStyle);
        widgetStyle['border-color'] = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.fromColorCode(textStyleModel.color), 105 / 255).toString();
        tab.StyleUtil.appendCSSRuleToStyleSheet$1(styleElementId, selector(identifier, 'tab-ctrl-formatted-border'), widgetStyle);
        tab.StyleUtil.appendCSSRuleToStyleSheet$1(styleElementId, selector(identifier, 'tab-ctrl-formatted-border-hover:hover'), widgetStyle);
      }
      if (styleBackground && ss.isValue(backgroundColor)) {
        var baseBackground = tab.ColorModel.fromColorModelPlusAlpha(tab.ColorModel.fromColorCode(backgroundColor), 140 / 255);
        var widgetBackground = tab.ColorModel.alphaCompositeSolidDest(baseBackground, new tab.ColorModel(255, 255, 255, 1));
        widgetStyle['background-color'] = widgetBackground.toRgb();
        tab.StyleUtil.appendCSSRuleToStyleSheet$1(styleElementId, selector(identifier, 'tab-ctrl-formatted-widget'), widgetStyle);
        widgetStyle['border-color'] = null;
        tab.StyleUtil.appendCSSRuleToStyleSheet$1(styleElementId, selector(identifier, 'tab-ctrl-formatted-widget:hover'), widgetStyle);
      }
    },
    $idSelector: function WidgetStyle$IdSelector(id, styleClassName) {
      return '[id="' + id + '"].' + styleClassName + ',' + '[id="' + id + '"] .' + styleClassName;
    },
    $classSelector: function WidgetStyle$ClassSelector(identifyingClassName, styleClassName) {
      return '.' + identifyingClassName + '.' + styleClassName + ',' + '.' + identifyingClassName + ' .' + styleClassName;
    }
  });
  ss.initClass($tab_$ContinuousSliderTemplate, spiff.Template, [ss.IDisposable]);
  ss.initClass($tab_$TileInfo);
  ss.initClass($tab_BaseMode, Object, [ss.IDisposable]);
  ss.initClass($tab_BaseDropdown, $tab_BaseMode, [ss.IDisposable]);
  ss.initClass($tab_BaseLegacyDojoUIModule, null, [tab.ILegacyDojoUIModule]);
  ss.initClass($tab_CategoricalLegendColumnHtmlTemplate, spiff.Template, [ss.IDisposable]);
  ss.initClass($tab_CategoricalLegendItemHtmlTemplate, spiff.Template, [ss.IDisposable]);
  ss.initClass($tab_LegendTemplate, spiff.Template, [ss.IDisposable]);
  ss.initClass($tab_CategoricalLegendTemplate, $tab_LegendTemplate, [ss.IDisposable]);
  ss.initClass($tab_CategoricalLegendView, ss.makeGenericType($tab_BaseLegendView$1, [$tab_CategoricalLegendViewModel]), [tab.IWidget, ss.makeGenericType(tab.ICategoricalLegendView$1, [$tab_CategoricalLegendViewModel]), ss.makeGenericType(tab.IView$1, [$tab_CategoricalLegendViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($tab_LegendBaseViewModel, spiff.BaseViewModel, [tab.IViewModel, ss.IDisposable]);
  ss.initClass($tab_CategoricalLegendViewModel, $tab_LegendBaseViewModel, [tab.ICategoricalLegendViewModel, tab.IViewModel, ss.IDisposable]);
  ss.initClass($tab_CategoricalSelection);
  ss.initClass($tab_Changelist);
  ss.initClass($tab_CheckDropdown, $tab_BaseDropdown, [ss.IDisposable]);
  ss.initClass($tab_Checklist, $tab_BaseMode, [ss.IDisposable]);
  ss.initInterface($tab_IContentFormatter, { destroy: null, format: null, isValid: null });
  ss.initClass($tab_SimpleListContentFormatter, null, [$tab_IContentFormatter]);
  ss.initClass($tab_ChecklistContentFormatter, $tab_SimpleListContentFormatter, [$tab_IContentFormatter]);
  ss.initClass($tab_CompiledChecklistChangelist);
  ss.initClass($tab_CompiledRadiolistChangelist);
  ss.initClass($tab_ContentFetchedEventArgs, ss.EventArgs);
  ss.initClass($tab_ContinuousSlider, ss.makeGenericType(spiff.BaseView$1, [$tab_ContinuousSliderViewModel]), [tab.IWidget, ss.makeGenericType(tab.IView$1, [$tab_ContinuousSliderViewModel]), ss.IDisposable, tab.IAppendableView, tab.IContinuousSlider]);
  ss.initClass($tab_ContinuousSliderViewModel, spiff.BaseViewModel, [tab.IContinuousSliderViewModel, tab.IViewModel, ss.IDisposable, spiff.IHasEnabledState]);
  ss.initClass($tab_CurrentPagePanel, Object, [tab.ICurrentPagePanelWidgetShim, tab.ILegacyWidgetShim]);
  ss.initClass($tab_LegacyQuickFilterWidget, Object);
  ss.initClass($tab_DateFilterWidget, $tab_LegacyQuickFilterWidget);
  ss.initClass($tab_DojoUtils);
  ss.initClass($tab_DojoWidgets);
  ss.initClass($tab_FetchInfo);
  ss.initInterface($tab_IContentFetcher, { add_contentFetched: null, remove_contentFetched: null, destroy: null, fetch: null, isTilePending: null, getQueueLength: null });
  ss.initClass($tab_FilterContentFetcher, null, [$tab_IContentFetcher]);
  ss.initClass($tab_FilterFormat);
  ss.initClass($tab_SearchWidgetBase, Object);
  ss.initClass($tab_FilteringSearchWidget, $tab_SearchWidgetBase);
  ss.initClass($tab_FilterItemBase);
  ss.initClass($tab_FilterItemDesktop, $tab_FilterItemBase);
  ss.initClass($tab_FilterItemMobile, $tab_FilterItemBase);
  ss.initClass($tab_FilterItemUtil);
  ss.initInterface($tab_ITiledWidgetUI, { add_scrolled: null, remove_scrolled: null, get_lastScrollTop: null, destroy: null, setContent: null, getTileElement: null, getItemElement: null });
  ss.initClass($tab_FilterListUI, null, [$tab_ITiledWidgetUI]);
  ss.initClass($tab_FormattingStyleInfo);
  ss.initInterface($tab_ICategoricalSelectionWidget, { get_filterTable: null, get_quickFilter: null, shouldDeferChanges: null, updateStateIfNeeded: null, clearRangeAnchorAndSelection: null, forEachSelected: null, onListItemClick: null, fetchChildNodeByIndex: null, handleItemClick: null, handleClickIfPending: null });
  ss.initClass($tab_IDropDownSelect, Object);
  ss.initClass($tab_OnClickOverride, dijit.MenuItem);
  ss.initClass($tab_UIMenuItem, $tab_OnClickOverride);
  ss.initClass($tab_IMenuItem, $tab_UIMenuItem);
  ss.initInterface($tab_ITiledGridModel, { get_totalHeight: null, get_viewportHeight: null, get_itemHeight: null, get_tileCount: null, destroy: null, updateViewport: null, getTileStatus: null, updateTileStatus: null, getTilePosition: null, getTileRange: null, getTileRangeType: null, pixelToTileRange: null, itemToTileIndex: null, globalToLocalItemIndex: null });
  ss.initClass($tab_LegacyCategoricalQuickFilter, $tab_LegacyQuickFilterWidget, [$tab_ICategoricalSelectionWidget]);
  ss.initClass($tab_LegacyCategoricalQuickFilterViewModel, spiff.BaseViewModel, [tab.IViewModel, tab.IFilterTypeViewModel, ss.IDisposable]);
  ss.initClass($tab_LegacyFilterDropDownArrowTemplate);
  ss.initClass($tab_LegacyHierarchicalQuickFilter, $tab_LegacyQuickFilterWidget);
  ss.initClass($tab_LegacyHierarchicalQuickFilterViewModel, spiff.BaseViewModel, [tab.IViewModel, tab.IFilterTypeViewModel, ss.IDisposable]);
  ss.initClass($tab_LegacyLegendTemplate, $tab_LegendTemplate, [ss.IDisposable]);
  ss.initClass($tab_LegacyLegendView, ss.makeGenericType($tab_BaseLegendView$1, [$tab_LegacyLegendViewModel]), [tab.IWidget, ss.makeGenericType(tab.ILegacyLegendView$1, [$tab_LegacyLegendViewModel]), ss.makeGenericType(tab.IView$1, [$tab_LegacyLegendViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($tab_LegacyLegendViewModel, $tab_LegendBaseViewModel, [tab.ILegacyLegendViewModel, tab.IViewModel, ss.IDisposable]);
  ss.initClass($tab_LegacyQuantitativeQuickFilter, $tab_LegacyQuickFilterWidget);
  ss.initClass($tab_LegacyQuantitativeDateQuickFilter, $tab_LegacyQuantitativeQuickFilter);
  ss.initClass($tab_LegacyQuantitativeQuickFilterViewModel, spiff.BaseViewModel, [tab.IViewModel, tab.IFilterTypeViewModel, ss.IDisposable]);
  ss.initClass($tab_LegacyQuickFilterDisplayView, ss.makeGenericType(spiff.BaseView$1, [$tab_LegacyQuickFilterDisplayViewModel]), [tab.IWidget, ss.makeGenericType(tab.ILegacyQuickFilterDisplayView$1, [$tab_LegacyQuickFilterDisplayViewModel]), ss.makeGenericType(tab.IView$1, [$tab_LegacyQuickFilterDisplayViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($tab_LegacyQuickFilterDisplayViewModel, spiff.BaseViewModel, [tab.ILegacyQuickFilterDisplayViewModel, tab.IViewModel, ss.IDisposable]);
  ss.initClass($tab_LegacyRelativeDateQuickFilter, $tab_DateFilterWidget, [ss.IDisposable]);
  ss.initClass($tab_LegendSelectionState);
  ss.initClass($tab_LegendStateManager, null, [ss.IDisposable]);
  ss.initClass($tab_LegendStateManagerWithItemPresModel, $tab_LegendStateManager, [ss.IDisposable]);
  ss.initClass($tab_LegendStateManagerWithSelectionPresModel, $tab_LegendStateManager, [ss.IDisposable]);
  ss.initClass($tab_ListGridModel, null, [$tab_ITiledGridModel]);
  ss.initClass($tab_LocalSearch);
  ss.initClass($tab_PageTemplate, spiff.Template, [ss.IDisposable]);
  ss.initClass($tab_PageView, ss.makeGenericType(spiff.BaseView$1, [$tab_PageViewModel]), [tab.IWidget, ss.makeGenericType(tab.IPageView$1, [$tab_PageViewModel]), ss.makeGenericType(tab.IView$1, [$tab_PageViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($tab_PageViewModel, spiff.BaseViewModel, [tab.IPageViewModel, tab.IViewModel, ss.IDisposable]);
  ss.initClass($tab_ParameterControl, Object, [tab.IParameterControlWidgetShim, tab.ILegacyWidgetShim]);
  ss.initClass($tab_ParameterControlTemplate, spiff.Template, [ss.IDisposable]);
  ss.initClass($tab_ParameterControlView, ss.makeGenericType(spiff.BaseView$1, [$tab_ParameterControlViewModel]), [tab.IWidget, ss.makeGenericType(tab.IParameterControlView$1, [$tab_ParameterControlViewModel]), ss.makeGenericType(tab.IView$1, [$tab_ParameterControlViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($tab_ParameterControlViewModel, spiff.BaseViewModel, [tab.IParameterControlViewModel, tab.IViewModel, ss.IDisposable]);
  ss.initClass($tab_ParamUIBase, Object, [ss.IDisposable]);
  ss.initClass($tab_ParamUICompact, $tab_ParamUIBase, [ss.IDisposable]);
  ss.initClass($tab_ParamUIList, $tab_ParamUIBase, [ss.IDisposable]);
  ss.initClass($tab_ParamUISlider, $tab_ParamUIBase, [ss.IDisposable]);
  ss.initClass($tab_ParamUITypeIn, $tab_ParamUIBase, [ss.IDisposable]);
  ss.initClass($tab_ParamUITypeInDateField, $tab_ParamUITypeIn, [ss.IDisposable]);
  ss.initClass($tab_Pattern, $tab_BaseMode, [ss.IDisposable]);
  ss.initClass($tab_PendingChangesManager);
  ss.initClass($tab_QfButtonUtil);
  ss.initClass($tab_QuantitativeColorLegendTemplate, $tab_LegendTemplate, [ss.IDisposable]);
  ss.initClass($tab_QuantitativeColorLegendView, ss.makeGenericType($tab_BaseLegendView$1, [$tab_QuantitativeColorLegendViewModel]), [tab.IWidget, ss.makeGenericType(tab.IQuantitativeColorLegendView$1, [$tab_QuantitativeColorLegendViewModel]), ss.makeGenericType(tab.IView$1, [$tab_QuantitativeColorLegendViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($tab_QuantitativeColorLegendViewModel, $tab_LegendBaseViewModel, [tab.IQuantitativeColorLegendViewModel, tab.IViewModel, ss.IDisposable]);
  ss.initClass($tab_QuickFilterDisplayTemplate, spiff.Template, [ss.IDisposable]);
  ss.initClass($tab_QuickFilterPanel, Object, [tab.IFilterPanelWidgetShim, tab.ILegacyWidgetShim, ss.IDisposable]);
  ss.initClass($tab_Radiolist, $tab_BaseMode, [ss.IDisposable]);
  ss.initClass($tab_RadiolistContentFormatter, $tab_ChecklistContentFormatter, [$tab_IContentFormatter]);
  ss.initClass($tab_RawChange);
  ss.initClass($tab_RelativeDateFilterViewModel, spiff.BaseViewModel, [tab.IViewModel, tab.IFilterTypeViewModel, ss.IDisposable]);
  ss.initClass($tab_RelativeDatePickFilter, $tab_LegacyQuickFilterWidget, [ss.IDisposable]);
  ss.initClass($tab_ScrolledEventArgs, ss.EventArgs);
  ss.initClass($tab_SearchWidget, $tab_SearchWidgetBase, [$tab_ICategoricalSelectionWidget]);
  ss.initClass($tab_SimpleDropdown, $tab_BaseDropdown, [ss.IDisposable]);
  ss.initClass($tab_Slider, null, [tab.ISlider, ss.IDisposable]);
  ss.initClass($tab_SliderCatmode, $tab_BaseMode, [ss.IDisposable]);
  ss.initClass($tab_SliderConstants);
  ss.initClass($tab_SmallSearchWidget, $tab_SearchWidgetBase);
  ss.initClass($tab_TabbedNavigation, Object, [tab.ITabbedNavigation]);
  ss.initClass($tab_TiledWidget);
  ss.initClass($tab_TiledWidgetFactory);
  ss.initClass($tab_Tree, dijit.Tree);
  ss.initClass($tab_TreeNode, dijit._TreeNode, [ss.IDisposable]);
  ss.initClass($tab_TreeSupport);
  ss.initClass($tab_TypeIn, null, [ss.IDisposable]);
  ss.initClass($tab_TypeInCatmode, $tab_BaseMode, [ss.IDisposable]);
  ss.initClass($tab_TypeInDateField, $tab_TypeIn, [ss.IDisposable]);
  ss.initClass($tab_TypeInFilterContents, Object);
  ss.initClass($tab_UICheckedMenuItem, $tab_OnClickOverride);
  ss.initClass($tab_WidgetStyle);
  (function() {
    $tab_$ContinuousSliderTemplate.$template = "<div class='tabHorizontalSlider'>\n</div>'";
  })();
  (function() {
    $tab_FilterListUI.$scrollVelocityThreshold = 100;
  })();
  (function() {
    $tab_CategoricalSelection.$anchorClass = 'anchorSelection';
  })();
  (function() {
    $tab_LegacyCategoricalQuickFilter.$keyDownEventName = 'keydown.' + ss.getTypeName($tab_LegacyCategoricalQuickFilter);
  })();
  (function() {
    $tab_FilterItemUtil.unknownItemIndex = -2;
    $tab_FilterItemUtil.allItemIndex = -1;
    $tab_FilterItemUtil.$all = tab.Strings.QuickFilterAll;
    $tab_FilterItemUtil.filterItem = null;
    $tab_FilterItemUtil.filterItem = (tsConfig.is_mobile ? new $tab_FilterItemMobile() : new $tab_FilterItemDesktop());
  })();
  (function() {
    $tab_Checklist.getFilterItemHtml = ss.mkdel($tab_FilterItemUtil.filterItem, $tab_FilterItemUtil.filterItem.formatChecklistFilterItemHtml);
  })();
  (function() {
    $tab_SearchWidgetBase.noSearchPerformed = -1;
  })();
  (function() {
    $tab_FilteringSearchWidget.$defaultSearchDelay = 500;
    $tab_FilteringSearchWidget.minimumDomainSize = 5;
  })();
  (function() {
    $tab_BaseDropdown.$minRows = 3;
    $tab_BaseDropdown.$maxRows = 30;
    $tab_BaseDropdown.$keyDownEventName = 'keydown.' + ss.getTypeName($tab_BaseDropdown);
  })();
  (function() {
    $tab_LegendBaseViewModel.horizontalIteratorButtonSize = 12;
    $tab_LegendBaseViewModel.horizontalIteratorButtonHolderWidth = 2 * ($tab_LegendBaseViewModel.horizontalIteratorButtonSize + 2);
    $tab_LegendBaseViewModel.parentZoneSizeChangedKey = 'ParentZoneSizeChanged';
    $tab_LegendBaseViewModel.newZoneParentKey = 'newZoneParent';
  })();
  (function() {
    $tab_CategoricalLegendViewModel.$defaultBackgroundColor = new tab.ColorModel(0, 0, 0, 1);
    $tab_CategoricalLegendViewModel.$propertyItems = 'Items';
    $tab_CategoricalLegendViewModel.$customShapesLoaded = 'CustomShapesLoaded';
    $tab_CategoricalLegendViewModel.$focusIndexProperty = 'FocusIndex';
  })();
  (function() {
    $tab_QuantitativeColorLegendViewModel.modelChangedProperty = 'ModelChanged';
  })();
  (function() {
    $tab_LegacyLegendViewModel.$urlInfoCacheChangedIdentifier = 'urlCacheInfo';
  })();
  (function() {
    $tab_LegendTemplate.legendTitleControlsClass = 'tabLegendTitleControls';
    $tab_LegendTemplate.legendTitleControlsSelector = '.' + $tab_LegendTemplate.legendTitleControlsClass;
    $tab_LegendTemplate.legendHighlighterButtonClass = 'tabLegendHighlighterButton';
    $tab_LegendTemplate.legendHighlighterButtonSelector = '.' + $tab_LegendTemplate.legendHighlighterButtonClass;
    $tab_LegendTemplate.legendHighlighterButtonIconClass = 'tabLegendHighlighterButtonIcon';
    $tab_LegendTemplate.legendContextMenuButtonClass = 'tabLegendContextMenuButton';
    $tab_LegendTemplate.legendContextMenuButtonSelector = '.' + $tab_LegendTemplate.legendContextMenuButtonClass;
    $tab_LegendTemplate.legendContextMenuButtonIconClass = 'tabLegendContextMenuButtonIcon';
    $tab_LegendTemplate.legendTitleControlsButtonsClass = 'tabLegendTitleControlsButtons';
  })();
  (function() {
    $tab_QuantitativeColorLegendTemplate.$htmlTemplate = "\n            <div class='tabLegendPanel' style='position: relative; overflow: hidden'>\n                <div class='tabLegendTitleAndControls'>\n                    <h3 class='tabLegendTitle' style='position: absolute'></h3>\n                    <div class='tabLegendTitleControls'>\n                        <div class='tabLegendContextMenuButton'>\n                            <div class='tabLegendContextMenuButtonIcon'></div>\n                        </div>\n                    </div>\n                </div>\n                <canvas class='tabLegendRamp' style='position: absolute'></canvas>\n                <div class='tabLegendCenterMark' style='position: absolute'></div>\n                <div class='tabLegendMinLabel' style='position: absolute'></div>\n                <div class='tabLegendMaxLabel' style='position: absolute'></div>\n            </div>";
  })();
  (function() {
    $tab_QuantitativeColorLegendView.$htmlIdBase = 'tableau_qcolor_legend_';
    $tab_QuantitativeColorLegendView.$rampShrinkingTolerance = 0.15;
  })();
  (function() {
    $tab_ContinuousSliderViewModel.$rangeMultiplier = 1000;
    $tab_ContinuousSliderViewModel.$defaultWidth = 200;
  })();
  (function() {
    $tab_CategoricalLegendTemplate.$legendTitleControlsHTMLTemplate = "<div class='" + $tab_LegendTemplate.legendTitleControlsClass + "'>" + "<div class='" + $tab_LegendTemplate.legendHighlighterButtonClass + ' ' + $tab_LegendTemplate.legendTitleControlsButtonsClass + "'>" + "<div class='" + $tab_LegendTemplate.legendHighlighterButtonIconClass + "'></div>" + '</div>' + "<div class='" + $tab_LegendTemplate.legendContextMenuButtonClass + ' ' + $tab_LegendTemplate.legendTitleControlsButtonsClass + "'>" + "<div class='" + $tab_LegendTemplate.legendContextMenuButtonIconClass + "'></div>" + '</div>' + '</div>';
  })();
  (function() {
    $tab_CategoricalLegendView.$colorSwatchBorderWidth = 1;
    $tab_CategoricalLegendView.$keyLegendItem = 'tabLegendItem';
    $tab_CategoricalLegendView.$sizeSwatchBorderLineWidth = 2;
    $tab_CategoricalLegendView.$htmlIDBase = 'tableau_base_legend_';
    $tab_CategoricalLegendView.$sizeSwatchFillColor = new tab.ColorModel(216, 216, 216, 1);
    $tab_CategoricalLegendView.$sizeSwatchBorderColor = new tab.ColorModel(178, 178, 178, 1);
  })();
  (function() {
    $tab_CategoricalLegendItemHtmlTemplate.$divSwatchTemplate = "<span class='tabLegendItemSwatch'></span>";
    $tab_CategoricalLegendItemHtmlTemplate.$canvasSwatchTemplate = "<canvas class='tabLegendItemSwatch'></canvas>";
    $tab_CategoricalLegendItemHtmlTemplate.$htmlTemplate = "<div class='tabLegendItem'><span class='tabLegendItemSwatchHolder'></span><span class='tabLegendItemLabelHolder'><span class='tabLegendItemLabel'></span></span></div>";
  })();
  (function() {
    $tab_CategoricalLegendColumnHtmlTemplate.$htmlTemplate = "<span class='tabLegendItemColumn'></span>";
  })();
  (function() {
    tab.ObjectRegistry.registerType($tab_ContinuousSlider, $tab_ContinuousSlider).call(null);
  })();
  (function() {
    $tab_CurrentPagePanel.$startingPageOnClient = -1;
  })();
  (function() {
    $tab_LegacyRelativeDateQuickFilter.$anchoredDescriptions = null;
    $tab_LegacyRelativeDateQuickFilter.$nonAnchoredDescriptions = null;
  })();
  (function() {
    $tab_SliderConstants.showStepButtonsAttr = 'show-step-btns';
    $tab_SliderConstants.hideStepButtonsAttr = 'hide-buttons';
    $tab_SliderConstants.showTicksAttr = 'show-ticks';
    $tab_SliderConstants.hideTicksAttr = 'hide-ticks';
    $tab_SliderConstants.showReadoutAttr = 'show-readout';
    $tab_SliderConstants.hideReadoutAttr = 'hide-readout';
    $tab_SliderConstants.showSliderAttr = 'show-slider';
    $tab_SliderConstants.hideSliderAttr = 'hide-slider';
    $tab_SliderConstants.hideArrowClass = 'HideArrows';
    $tab_SliderConstants.hideSliderClass = 'HideSlider';
    $tab_SliderConstants.showArrowClass = 'ShowArrows';
  })();
  (function() {
    $tab_Slider.tableauSliderTemplate = "<div class='dijit dijitReset'>" + "<div class='dijitReset tableauSlider' dojoAttachPoint='tableauSlider'>" + "<table class='dijit dijitReset' cellspacing='0' cellpadding='0' border='0' rules='none' wairole='presentation'>" + "<tr class='dijitReset'>" + "<td class='dijitReset'></td>" + "<td dojoAttachPoint='containerNode,topDecoration' class='dijitReset' style='text-align:center;width:100%;'></td>" + "<td class='dijitReset'></td>" + '</tr>' + "<tr class='dijitReset'>" + "<td class='dijitReset'>" + "<div class='dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderLeftBumper dijitSliderLeftBumper' dojoAttachEvent='onclick:_onClkDecBumper'></div>" + '</td>' + "<td class='dijitReset'>" + "<input dojoAttachPoint='valueNode' type='hidden' name='${name}'>" + "<div class='dijitReset dijitSliderBarContainerH' waiRole='presentation' dojoAttachPoint='sliderBarContainer'>" + "<div waiRole='presentation' dojoAttachPoint='progressBar' class='dijitSliderBar dijitSliderBarH dijitSliderProgressBar dijitSliderProgressBarH' dojoAttachEvent='onclick:_onBarClick'>" + "<div class='dijitSliderMoveable dijitSliderMoveableH'>" + "<div dojoAttachPoint='sliderHandle,focusNode' class='dijitSliderImageHandle dijitSliderImageHandleH' dojoAttachEvent='onmousedown:_onHandleClick' waiRole='slider' valuemin='${minimum}' valuemax='${maximum}'></div>" + '</div>' + '</div>' + "<div waiRole='presentation' dojoAttachPoint='remainingBar' class='dijitSliderBar dijitSliderBarH dijitSliderRemainingBar dijitSliderRemainingBarH' dojoAttachEvent='onclick:_onBarClick'></div>" + '</div>' + '</td>' + "<td class='dijitReset'>" + "<div class='dijitSliderBar dijitSliderBumper dijitSliderBumperH dijitSliderRightBumper dijitSliderRightBumper' dojoAttachEvent='onclick:_onClkIncBumper'></div>" + '</td>' + '</tr>' + "<tr class='dijitReset'>" + "<td class='dijitReset'></td>" + "<td dojoAttachPoint='containerNode,bottomDecoration' class='dijitReset'></td>" + "<td class='dijitReset'></td>" + '</tr>' + '</table>' + '</div>' + "<div class='dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH tableauArrowDec' style='display:none' dojoAttachPoint='decrementButton'>" + "<div class='dijitSliderDecrementIconH' tabIndex='-1'>" + "<span class='dijitSliderButtonInner'>-</span>" + '</div>' + '</div>' + "<div class='dijitReset dijitSliderButtonContainer dijitSliderButtonContainerH tableauArrowInc' style='display:none' dojoAttachPoint='incrementButton'>" + "<div class='dijitSliderIncrementIconH' tabIndex='-1'>" + "<span class='dijitSliderButtonInner'>+</span>" + '</div>' + '</div>' + '</div>';
    $tab_Slider.$simpleTooltipTemplate = "<div class='dijitTooltip dijitTooltipLeft' id='dojoTooltip'>" + "<div class='dijitTooltipContainer' dojoAttachpoint='coreArea'>" + "<div class='dijitTooltipContents' dojoAttachPoint='containerNode' waiRole='alert'></div></div>" + "<div class='dijitTooltipConnector'></div>" + '</div>';
    $tab_Slider.$defaultArrowTop = 1;
    $tab_Slider.$defaultLargeSizeArrowTop = 20;
  })();
  (function() {
    $tab_TypeInDateField.lazilyCreateCalendar = true;
  })();
  (function() {
    $tab_OnClickOverride.$delay = 75;
  })();
  (function() {
    $tab_LegacyHierarchicalQuickFilter.$white = new tab.ColorModel(255, 255, 255, 1);
    $tab_LegacyHierarchicalQuickFilter.$borderColorAlpha = 60 / 255;
    $tab_LegacyHierarchicalQuickFilter.$borderColorLighterAlpha = 105 / 255;
    $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightestAlpha = 100 / 255;
    $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightAlpha = 140 / 255;
    $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightestThreshold = 95;
    $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightestOverride = new tab.ColorModel(234, 234, 234, 1);
    $tab_LegacyHierarchicalQuickFilter.$backgroundColorLightOverride = new tab.ColorModel(241, 241, 241, 1);
  })();
  (function() {
    $tab_RelativeDatePickFilter.pickerDurationsInteger = [1, 7, 30, 90, 365, 1825];
    $tab_RelativeDatePickFilter.pickerDurations = ['0d', '-7d', '-30d', '-90d', '-365d', '-1825d'];
    $tab_RelativeDatePickFilter.pickerStrings = [tab.Strings.RelDatePickerOneDayAbbrev, tab.Strings.RelDatePickerOneWeekAbbrev, tab.Strings.RelDatePickerOneMonthAbbrev, tab.Strings.RelDatePickerThreeMonthsAbbrev, tab.Strings.RelDatePickerOneYearAbbrev, tab.Strings.RelDatePickerFiveYearsAbbrev];
    $tab_RelativeDatePickFilter.$classButtonR1 = 'RDFButtonR1';
    $tab_RelativeDatePickFilter.$classButtonHide = 'RDFButtonHide';
  })();
  (function() {
    $tab_ParamUITypeIn.$parseWithUSLocale = false;
  })();
  (function() {
    $tab_ParamUISlider.$sizeOfPeriodInDays = ss.mkdict(['year', 365.25, 'quarter', 365.25 / 4, 'month', 365.25 / 12, 'week', 7, 'day', 1, 'hour', 1 / 24, 'minute', 1 / (24 * 60), 'second', 1 / (24 * 60 * 60)]);
  })();
  (function() {
    $tab_DojoWidgets.$categoricalFilterTemplate = "<div class='CategoricalFilter' role='application'>" + "<div class='CategoricalFilterBox' dojoAttachPoint='domBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<h3 class='FilterTitle' dojoAttachPoint='domTitleBar'></h3>" + "<div dojoType='dijit.form.Button' class='CFButton CFResetButton' showlabel='false'" + "dojoAttachPoint='resetButton'" + "iconClass='wcIconNonfiltered'>Showing all values</div>" + "<div dojoType='dijit.form.Button' class='CFButton CFSearchButton' showlabel='false'" + "dojoAttachPoint='searchButton'" + "iconClass='wcIconSearch'>Search</div>" + "<div dojoType='dijit.form.Button' class='CFButton CFDomainButton' showlabel='false'" + "dojoAttachPoint='domainButton'" + "iconClass='wcIconDomainAll'>Show Fewer Values</div>" + "<div dojoType='dijit.form.Button' iconClass='wcIconContextMenu'" + "class='CFButton CFMenuButton' dojoAttachPoint='menuButton' name='type'></div>" + '</div>' + "<div dojoAttachPoint='searchDiv'></div>" + "<div class='CFContent' dojoAttachPoint='domContent'></div>" + "<div class='CFHorizScroll' dojoAttachPoint='domHorizScroll' dojoAttachEvent='onscroll:doscrollHoriz'>" + "<div dojoAttachPoint='domHorizScrollContent'></div>" + '</div>' + '</div>';
    $tab_DojoWidgets.$parameterControlTemplate = "<div class='ParameterControl' role='form'>" + "<div class='ParameterControlBox' dojoAttachPoint='domBox'>" + "<div class='TitleAndControls' dojoAttachPoint='domControls'>" + "<h3 class='ParamTitle' dojoAttachPoint='domTitleBar'></h3>" + "<div class='PCMenuButton' dojoAttachPoint='paramMenuButton'></div>" + '</div>' + "<div class='PCContent' dojoAttachPoint='domContent'></div>" + '</div>' + '</div>';
    $tab_DojoWidgets.$searchWidgetTemplate = "<div class='Search' role='form'>" + "<div class='SearchBox' dojoAttachPoint='domQuerySection'>" + "<textarea rows='1' class='QueryBox' spellcheck='false'" + "dojoAttachPoint='domQueryBox'" + "dojoAttachEvent='onkeydown:onQueryBoxKeyDown,onpaste:onQueryBoxPaste'></textarea>" + "<span class='wcSearchX' title='${XBUTTON_CLOSE_TOOLTIP}'" + "dojoAttachPoint='domXButton'" + "dojoAttachEvent='onclick:onXButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<img class='searchBusyImg' title='${CANCEL_SEARCH_TOOLTIP}' src='${busy_gif_url}'" + "dojoAttachPoint='domSearchBusyImg'" + "dojoAttachEvent='onclick:onSearchBusyImgClick'></img>" + "<span class='wcIconSearch' title='${SEARCH_TOOLTIP}'" + "dojoAttachPoint='domSearchButton'" + "dojoAttachEvent='onclick:onSearchButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + "<span class='wcIconSearchAdd' title='${ADD_ITEM_CTRL_ENTER}'" + "dojoAttachPoint='domSearchAddButton'" + "dojoAttachEvent='onclick:onSearchAddButtonClick,onmouseover:onButtonHover,onmouseout:onButtonUnhover'></span>" + '</div>' + "<div class='SearchResults' dojoAttachPoint='domResults' dojoAttachEvent='onclick:onListItemClick'></div>" + '</div>';
    dojo.addOnLoad($tab_DojoWidgets.$registerWidgets);
  })();
  (function() {
    $tab_QuickFilterDisplayTemplate.$htmlTemplate = "<div class='tab-quick-filter'></div>";
  })();
  (function() {
    $tab_PageTemplate.$htmlTemplate = "<div class='tab-page'></div>";
  })();
  (function() {
    tab.ObjectRegistry.registerType($tab_PageView, $tab_PageView).call(null);
  })();
  (function() {
    $tab_ParameterControlTemplate.$htmlTemplate = "<div class='tab-parameter'></div>";
  })();
  (function() {
    tab.ObjectRegistry.registerType($tab_ParameterControlView, $tab_ParameterControlView).call(null);
  })();
})();
// END LegacyDojoUI
