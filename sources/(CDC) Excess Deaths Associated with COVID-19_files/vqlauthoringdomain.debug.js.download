/*! BEGIN AuthoringDomain */

(function() {
  'dont use strict';
  var $asm = {};
  global.tab = global.tab || {};
  ss.initAssembly($asm, 'vqlauthoringdomain');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ShelfDropClientCommand
  var $tab_$ShelfDropClientCommand = ss.mkType($asm, 'tab.$ShelfDropClientCommand', function(doLocal, remoteDropCommand, shelfType, isDroppingRelativeFilter) {
    this.$origDropCommand = null;
    this.$dropShelfType = null;
    this.$droppingRelativeFilter = true;
    this.$prepared = false;
    tab.ClientCommand.call(this, 'immediately', doLocal, null, null, null);
    this.$origDropCommand = remoteDropCommand;
    this.$dropShelfType = shelfType;
    this.$droppingRelativeFilter = isDroppingRelativeFilter;
    var cmdParams = this.$origDropCommand.commandParams;
    var prepareDropCmd = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-prepare' }, cmdParams);
    $tab_ShelfClientCommands.setCommandParams(prepareDropCmd, cmdParams);
    cmdParams['allowDuplicateFieldDropOnFilterShelf'] = false;
    this.enqueueCommand(prepareDropCmd);
  }, {
    handleRemoteCommandSuccess: function ShelfDropClientCommand$HandleRemoteCommandSuccess(cmd, pm) {
      tab.ClientCommand.prototype.handleRemoteCommandSuccess.call(this, cmd, pm);
      if (this.$prepared) {
        return;
      }
      var result = pm;
      if (ss.isNullOrUndefined(result) || ss.getKeyCount(result) === 0) {
        return;
      }
      this.$prepared = true;
      var command = this.$origDropCommand;
      var cmdParams = this.$origDropCommand.commandParams;
      if (ss.keyExists(result, 'dropCommandModel')) {
        var commands = result['dropCommandModel'];
        var dropCommand = tab.CommandSerializer.deserialize(tab.SimpleCommandsPresModelWrapper.create(commands).get_simpleCommand(), false);
        if (ss.isValue(dropCommand)) {
          command = dropCommand;
          cmdParams = dropCommand.commandParams;
        }
      }
      if (ss.keyExists(result, 'fieldEncodings')) {
        cmdParams['fieldEncodings'] = result['fieldEncodings'];
      }
      else if (ss.keyExists(result, 'fn')) {
        var fe = { fn: ss.cast(result['fn'], String) };
        cmdParams['fieldEncodings'] = JSON.stringify([fe]);
      }
      $tab_ShelfClientCommands.setCommandParams(command, cmdParams);
      this.enqueueCommand(command);
      if (ss.keyExists(result, 'doDropUiAction') && ss.unbox(ss.cast(result['doDropUiAction'], Boolean)) && this.$dropShelfType === 'filter-shelf') {
        var encoding = result['fieldEncoding'];
        var addQuickFilterCmd = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-default-quick-filter' }, null);
        var addQuickFilterParams = {};
        addQuickFilterParams['fn'] = encoding.fn;
        addQuickFilterParams['membershipTarget'] = 'filter';
        if (this.$droppingRelativeFilter) {
          addQuickFilterParams['quantitativeMode'] = 'rel-date';
        }
        $tab_ShelfClientCommands.setCommandParams(addQuickFilterCmd, addQuickFilterParams);
        this.enqueueCommand(addQuickFilterCmd);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.AssignCategoricalColorPaletteCmd
  var $tab_AssignCategoricalColorPaletteCmd = global.tab.AssignCategoricalColorPaletteCmd = ss.mkType($asm, 'tab.AssignCategoricalColorPaletteCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_AssignCategoricalColorPaletteCmd$Response]).call(this);
  }, {
    get_commandId: function AssignCategoricalColorPaletteCmd$get_CommandId() {
      return $tab_AssignCategoricalColorPaletteCmd.cmdId;
    },
    invoke: function AssignCategoricalColorPaletteCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'assign-categorical-color-palette' }, this.cmdParams));
    },
    validateInvokeParams: function AssignCategoricalColorPaletteCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'componentId')) {
        throw new ss.Exception('missing param DocParams.ComponentID');
      }
      if (!ss.keyExists(this.cmdParams, 'colorPaletteId')) {
        throw new ss.Exception('missing param DocParams.ColorPaletteId');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.AssignCategoricalColorPaletteCmd.Response
  var $tab_AssignCategoricalColorPaletteCmd$Response = global.tab.AssignCategoricalColorPaletteCmd$Response = ss.mkType($asm, 'tab.AssignCategoricalColorPaletteCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.AuthoringDomain.AuthoringLeftAreaExpansionModel
  var $tab_AuthoringLeftAreaExpansionModel = global.tab.AuthoringLeftAreaExpansionModel = ss.mkType($asm, 'tab.AuthoringLeftAreaExpansionModel', function(parent) {
    this.$2$SidePaneExpansionStateChangedField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('sidePaneExpansionState'.toString(), null));
    this.pm = { sidePaneExpansionState: 'expanded' };
  }, {
    add_sidePaneExpansionStateChanged: function AuthoringLeftAreaExpansionModel$add_SidePaneExpansionStateChanged(value) {
      this.$2$SidePaneExpansionStateChangedField = ss.delegateCombine(this.$2$SidePaneExpansionStateChangedField, value);
    },
    remove_sidePaneExpansionStateChanged: function AuthoringLeftAreaExpansionModel$remove_SidePaneExpansionStateChanged(value) {
      this.$2$SidePaneExpansionStateChangedField = ss.delegateRemove(this.$2$SidePaneExpansionStateChangedField, value);
    },
    get_notificationId: function AuthoringLeftAreaExpansionModel$get_NotificationId() {
      return 'doc:side-pane-expansion-state-changed-event';
    },
    get_sidePaneExpansionState: function AuthoringLeftAreaExpansionModel$get_SidePaneExpansionState() {
      return this.get_$statePM().sidePaneExpansionState;
    },
    get_$statePM: function AuthoringLeftAreaExpansionModel$get_StatePM() {
      return this.pm;
    },
    onNotify: function AuthoringLeftAreaExpansionModel$OnNotify(pm, context) {
      this.simpleSwapToUpdate(pm, this.$2$SidePaneExpansionStateChangedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.AutofitDevConfigurationCmd
  var $tab_AutofitDevConfigurationCmd = global.tab.AutofitDevConfigurationCmd = ss.mkType($asm, 'tab.AutofitDevConfigurationCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_AutofitDevConfigurationCmd$Response]).call(this);
  }, {
    get_commandId: function AutofitDevConfigurationCmd$get_CommandId() {
      return $tab_AutofitDevConfigurationCmd.cmdId;
    },
    validateInvokeParams: function AutofitDevConfigurationCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.AutofitDevConfigurationCmd.Response
  var $tab_AutofitDevConfigurationCmd$Response = global.tab.AutofitDevConfigurationCmd$Response = ss.mkType($asm, 'tab.AutofitDevConfigurationCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.AutofitWith1DContainersMultiRunUsingWebThresholdsCmd
  var $tab_AutofitWith1DContainersMultiRunUsingWebThresholdsCmd = global.tab.AutofitWith1DContainersMultiRunUsingWebThresholdsCmd = ss.mkType($asm, 'tab.AutofitWith1DContainersMultiRunUsingWebThresholdsCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_AutofitWith1DContainersMultiRunUsingWebThresholdsCmd$Response]).call(this);
  }, {
    get_commandId: function AutofitWith1DContainersMultiRunUsingWebThresholdsCmd$get_CommandId() {
      return $tab_AutofitWith1DContainersMultiRunUsingWebThresholdsCmd.cmdId;
    },
    validateInvokeParams: function AutofitWith1DContainersMultiRunUsingWebThresholdsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'zoneIds')) {
        throw new ss.Exception('missing param DocParams.ZoneIDs');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.AutofitWith1DContainersMultiRunUsingWebThresholdsCmd.Response
  var $tab_AutofitWith1DContainersMultiRunUsingWebThresholdsCmd$Response = global.tab.AutofitWith1DContainersMultiRunUsingWebThresholdsCmd$Response = ss.mkType($asm, 'tab.AutofitWith1DContainersMultiRunUsingWebThresholdsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.AutofitWith1DContainersUsingWebThresholdsCmd
  var $tab_AutofitWith1DContainersUsingWebThresholdsCmd = global.tab.AutofitWith1DContainersUsingWebThresholdsCmd = ss.mkType($asm, 'tab.AutofitWith1DContainersUsingWebThresholdsCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_AutofitWith1DContainersUsingWebThresholdsCmd$Response]).call(this);
  }, {
    get_commandId: function AutofitWith1DContainersUsingWebThresholdsCmd$get_CommandId() {
      return $tab_AutofitWith1DContainersUsingWebThresholdsCmd.cmdId;
    },
    validateInvokeParams: function AutofitWith1DContainersUsingWebThresholdsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'zoneIds')) {
        throw new ss.Exception('missing param DocParams.ZoneIDs');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.AutofitWith1DContainersUsingWebThresholdsCmd.Response
  var $tab_AutofitWith1DContainersUsingWebThresholdsCmd$Response = global.tab.AutofitWith1DContainersUsingWebThresholdsCmd$Response = ss.mkType($asm, 'tab.AutofitWith1DContainersUsingWebThresholdsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.BuildMainMenuCmd
  var $tab_BuildMainMenuCmd = global.tab.BuildMainMenuCmd = ss.mkType($asm, 'tab.BuildMainMenuCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_BuildMainMenuCmd$Response]).call(this);
  }, {
    get_commandId: function BuildMainMenuCmd$get_CommandId() {
      return $tab_BuildMainMenuCmd.cmdId;
    },
    invoke: function BuildMainMenuCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-main-menu' }, this.cmdParams));
    },
    validateInvokeParams: function BuildMainMenuCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'menuItemId')) {
        throw new ss.Exception('missing param DocParams.MenuItemId');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.BuildMainMenuCmd.Response
  var $tab_BuildMainMenuCmd$Response = global.tab.BuildMainMenuCmd$Response = ss.mkType($asm, 'tab.BuildMainMenuCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasCommands: function Response$HasCommands() {
      return true;
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
      if (!ss.keyExists(this.$$cmdParams, 'commands')) {
        throw new ss.Exception('missing param DocParams.Commands');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.BuildShelfItemContextMenuCmd
  var $tab_BuildShelfItemContextMenuCmd = global.tab.BuildShelfItemContextMenuCmd = ss.mkType($asm, 'tab.BuildShelfItemContextMenuCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_BuildShelfItemContextMenuCmd$Response]).call(this);
  }, {
    get_commandId: function BuildShelfItemContextMenuCmd$get_CommandId() {
      return $tab_BuildShelfItemContextMenuCmd.cmdId;
    },
    invoke: function BuildShelfItemContextMenuCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'build-shelf-item-context-menu' }, this.cmdParams));
    },
    validateInvokeParams: function BuildShelfItemContextMenuCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'shelfItemId')) {
        throw new ss.Exception('missing param DocParams.ShelfItemID');
      }
      if (!ss.keyExists(this.cmdParams, 'shelfType')) {
        throw new ss.Exception('missing param DocParams.ShelfType');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.BuildShelfItemContextMenuCmd.Response
  var $tab_BuildShelfItemContextMenuCmd$Response = global.tab.BuildShelfItemContextMenuCmd$Response = ss.mkType($asm, 'tab.BuildShelfItemContextMenuCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasCommands: function Response$HasCommands() {
      return true;
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
      if (!ss.keyExists(this.$$cmdParams, 'commands')) {
        throw new ss.Exception('missing param DocParams.Commands');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ClientCommands.CalcApplyResponse
  var $tab_CalcApplyResponse = global.tab.CalcApplyResponse = ss.mkType($asm, 'tab.CalcApplyResponse', function(resultType) {
    this.$resultType = null;
    this.$errorMessage = null;
    this.$resultType = resultType;
  }, {
    get_resultType: function CalcApplyResponse$get_ResultType() {
      return this.$resultType;
    },
    get_errorMessage: function CalcApplyResponse$get_ErrorMessage() {
      return this.$errorMessage;
    },
    set_errorMessage: function CalcApplyResponse$set_ErrorMessage(value) {
      this.$errorMessage = value;
    }
  }, {
    fromApplyCalculationResult: function CalcApplyResponse$FromApplyCalculationResult(result, model) {
      var resultType = (_.isString(result) ? ss.cast(result, String) : result['calculationApplyResult'.toString()]);
      var response = new $tab_CalcApplyResponse(resultType);
      switch (response.get_resultType()) {
        case 'invalid-formula': {
          response.set_errorMessage(model.get_errorSummary());
          break;
        }
        case 'invalid-caption-for-new-calc': {
          response.set_errorMessage(result['errorString'.toString()]);
          break;
        }
      }
      return response;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CalculationAutoCompleteItemModel
  var $tab_CalculationAutoCompleteItemModel = global.tab.CalculationAutoCompleteItemModel = ss.mkType($asm, 'tab.CalculationAutoCompleteItemModel', function(parent, pm) {
    tab.Model.call(this, parent, new tab.PresModelPathItem('autocompleteItem'.toString(), null));
    this.swapPresModel(pm);
  }, {
    get_$item: function CalculationAutoCompleteItemModel$get_Item() {
      return this.pm;
    },
    get_itemType: function CalculationAutoCompleteItemModel$get_ItemType() {
      return (ss.isValue(this.get_$item().autocompleteType) ? this.get_$item().autocompleteType : 'func');
    },
    get_label: function CalculationAutoCompleteItemModel$get_Label() {
      return this.get_$item().label;
    },
    get_styledLabel: function CalculationAutoCompleteItemModel$get_StyledLabel() {
      return this.get_$item().styledLabel;
    },
    get_iconResource: function CalculationAutoCompleteItemModel$get_IconResource() {
      return this.get_$item().fieldIconRes;
    },
    get_tooltip: function CalculationAutoCompleteItemModel$get_Tooltip() {
      return this.get_$item().tooltipText;
    },
    get_replaceText: function CalculationAutoCompleteItemModel$get_ReplaceText() {
      return this.get_$item().replaceText;
    },
    get_caretIndex: function CalculationAutoCompleteItemModel$get_CaretIndex() {
      return this.get_$item().caretIndex;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CalculationAutoCompleteModel
  var $tab_CalculationAutoCompleteModel = global.tab.CalculationAutoCompleteModel = ss.mkType($asm, 'tab.CalculationAutoCompleteModel', function(pm) {
    this.$itemModels = [];
    tab.Model.call(this, null, new tab.PresModelPathItem('calculationAutocompleteContextMenu'.toString(), null));
    this.swapPresModel(pm);
    var $t1 = pm.autocompleteItemList || [];
    for (var $t2 = 0; $t2 < $t1.length; $t2++) {
      var itemPm = $t1[$t2];
      this.$itemModels.push(new $tab_CalculationAutoCompleteItemModel(this, itemPm));
    }
  }, {
    get_functionTooltip: function CalculationAutoCompleteModel$get_FunctionTooltip() {
      return this.pm.functionHelp;
    },
    get_functionHelpPosition: function CalculationAutoCompleteModel$get_FunctionHelpPosition() {
      return this.pm.functionHelpIndex;
    },
    get_calculation: function CalculationAutoCompleteModel$get_Calculation() {
      return this.pm.acCalc;
    },
    get_startIndex: function CalculationAutoCompleteModel$get_StartIndex() {
      return this.pm.startIndex;
    },
    get_endIndex: function CalculationAutoCompleteModel$get_EndIndex() {
      return this.pm.endIndex;
    },
    get_items: function CalculationAutoCompleteModel$get_Items() {
      return this.$itemModels;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ClientCommands.CalculationCommands
  var $tab_CalculationCommands = global.tab.CalculationCommands = ss.mkType($asm, 'tab.CalculationCommands', null, null, {
    registerCommandInterceptors: function CalculationCommands$RegisterCommandInterceptors() {
      tab.ServerCommands.addCommandInterceptor($tab_CalculationCommands.$handleEditPillCommand, 'tabdoc', { ns: 'tabdoc', cmd: 'edit-pill' }.cmd);
      tab.ServerCommands.addCommandInterceptor($tab_CalculationCommands.$interceptCreateCalc, 'tabdoc', { ns: 'tabdoc', cmd: 'create-calc' }.cmd);
      tab.ServerCommands.addCommandInterceptor($tab_CalculationCommands.$interceptEditCalc, 'tabdoc', { ns: 'tabdoc', cmd: 'edit-calc' }.cmd);
      tab.ServerCommands.addCommandInterceptor($tab_CalculationCommands.$interceptEditCopyCalc, 'tabdoc', { ns: 'tabdoc', cmd: 'edit-copy-calc' }.cmd);
    },
    $interceptCreateCalc: function CalculationCommands$InterceptCreateCalc(c) {
      if (ss.keyExists(c.commandParams, 'fn')) {
        $tab_CalculationCommands.createCalculation(c.commandParams['datasource'], c.commandParams['fn']);
      }
      else {
        $tab_CalculationCommands.createCalculation(c.commandParams['datasource'], null);
      }
      return 1;
    },
    $interceptEditCalc: function CalculationCommands$InterceptEditCalc(c) {
      $tab_CalculationCommands.editCalculation(c.commandParams['fn'], { ns: 'tabdoc', cmd: 'edit-calc' });
      return 1;
    },
    $interceptEditCopyCalc: function CalculationCommands$InterceptEditCopyCalc(c) {
      $tab_CalculationCommands.editCalculation(c.commandParams['fn'], { ns: 'tabdoc', cmd: 'edit-copy-calc' });
      return 1;
    },
    $handleEditPillCommand: function CalculationCommands$HandleEditPillCommand(c) {
      var cmdParams = c.commandParams;
      $tab_CalculationCommands.editPill(ss.cast(cmdParams['fn'], String), ss.cast(cmdParams['shelfType'], String), parseInt(ss.cast(cmdParams['shelfPosIndex'], String)), parseInt(ss.cast(cmdParams['paneSpec'], String)));
      return 1;
    },
    createCalculation: function CalculationCommands$CreateCalculation(datasource, fn) {
      var cmdParams = {};
      cmdParams['datasource'] = datasource;
      if (ss.isValue(fn)) {
        cmdParams['fn'] = fn;
      }
      var cmd = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-calc' }, cmdParams);
      tab.CommandController.SendCommand(new tab.ClientCommand('immediately', ss.mkdel(this, function(t) {
        var pm = { datasource: datasource, pendingCalcName: '__temporary calc name__' };
        $tab_CalculationCommands.$addCalcPresModelNotificationToTransaction(t, pm, 'doc:calculation-dialog-event'.toString());
      }), cmd, null, null));
    },
    editCalculation: function CalculationCommands$EditCalculation(fn, cmdType) {
      var cmdParams = {};
      cmdParams['fn'] = fn;
      var cmd = tab.CommandUtils.newCommand(cmdType, cmdParams);
      var caption = '';
      var dataSourceName = '';
      var ds = tab.ApplicationModel.get_instance().get_workbook().get_dataSchema().findDataSourceFromGlobalFieldName(fn);
      ss.Debug.assert(ss.isValue(ds), 'DataSource should always be found');
      if (ss.isValue(ds)) {
        dataSourceName = ds.get_name();
        var f = ds.findField(fn);
        ss.Debug.assert(ss.isValue(f), 'Field should always be found');
        if (ss.isValue(f)) {
          caption = f.get_displayName();
        }
      }
      tab.CommandController.SendCommand(new tab.ClientCommand('immediately', ss.mkdel(this, function(t) {
        var pm = { fn: fn, calculationCaption: caption, datasource: dataSourceName, pendingCalcName: '__temporary calc name__' };
        $tab_CalculationCommands.$addCalcPresModelNotificationToTransaction(t, pm, 'doc:calculation-dialog-event'.toString());
      }), cmd, null, null));
    },
    editPill: function CalculationCommands$EditPill(fieldName, shelfType, shelfPosition, paneSpec) {
      var cmdParams = {};
      cmdParams['fn'] = fieldName;
      cmdParams['paneSpec'] = paneSpec;
      cmdParams['shelfType'] = shelfType;
      cmdParams['shelfPosIndex'] = shelfPosition;
      var cmd = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'edit-pill' }, cmdParams);
      return $tab_CalculationCommands.$sendShelfCalcCommand(shelfType, cmd, $tab_CalculationCommands.$createTypeInPillLocalCommand(shelfType, shelfPosition, paneSpec));
    },
    createAdHocCalculation: function CalculationCommands$CreateAdHocCalculation(activeDatasource, shelfType, shelfPosition, paneSpec) {
      if (ss.isNullOrEmptyString(activeDatasource)) {
        return $.Deferred();
      }
      var cmdParams = {};
      cmdParams['datasource'] = activeDatasource;
      cmdParams['paneSpec'] = paneSpec;
      cmdParams['shelfType'] = shelfType;
      cmdParams['shelfPosIndex'] = shelfPosition;
      var cmd = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'create-type-in-pill' }, cmdParams);
      return $tab_CalculationCommands.$sendShelfCalcCommand(shelfType, cmd, $tab_CalculationCommands.$createTypeInPillLocalCommand(shelfType, shelfPosition, paneSpec));
    },
    $createTypeInPillLocalCommand: function CalculationCommands$CreateTypeInPillLocalCommand(shelfType, shelfPosition, paneSpec) {
      return ss.mkdel(this, function(t) {
        var pm = { datasource: $tab_CalculationCommands.fakeDsName, pendingCalcName: '__temporary calc name__', shelfType: shelfType, shelfPosIndex: shelfPosition, paneSpec: paneSpec };
        $tab_CalculationCommands.$addCalcPresModelNotificationToTransaction(t, pm, 'doc:type-in-pill-event'.toString());
      });
    },
    $sendShelfCalcCommand: function CalculationCommands$SendShelfCalcCommand(shelfType, cmd, localCommand) {
      var deferred = $.Deferred();
      if (!$tab_CalculationCommands.isValidShelfForCalcs(shelfType)) {
        return deferred.reject();
      }
      tab.CommandController.SendCommand(new tab.ClientCommand('immediately', localCommand, cmd, function(pm) {
        var cmdPM = pm;
        deferred.resolve(ss.isValue(cmdPM) && (ss.isNullOrUndefined(cmdPM.valid) || cmdPM.valid));
      }, function(e) {
        deferred.reject();
      }));
      return deferred;
    },
    requestAutoCompleteInfo: function CalculationCommands$RequestAutoCompleteInfo(model, formula, position) {
      var deferred = $.Deferred();
      var $t1 = new tab.CalculationAutoCompleteCmd();
      $t1.cmdParams['acSubstring'] = formula;
      $t1.cmdParams['position'] = position | 0;
      $t1.cmdParams['calculation'] = { datasource: model.get_dataSourceName(), fn: model.get_fieldName(), calculationContext: model.get_calculationContext(), useParameters: model.get_useParameters(), joinOnCalcInfo: model.get_joinOnCalcInfoPresModel() };
      $t1.set_noExceptionDialog(true);
      $t1.invoke().done(function(response) {
        deferred.resolve(new $tab_CalculationAutoCompleteModel(response.$$cmdParams['calculationAutocompleteContextMenu']));
      }).fail(function(response1) {
        deferred.reject();
      });
      return deferred.promise();
    },
    applyCalculation: function CalculationCommands$ApplyCalculation(model, fieldCaption, calcText, skipValidation, isFinished) {
      var deferred = $.Deferred();
      var cmdParams = {};
      var docCmd;
      if (model.get_isAdhoc()) {
        docCmd = { ns: 'tabdoc', cmd: 'apply-type-in-pill' };
        cmdParams['datasource'] = model.get_dataSourceName();
        cmdParams['updatedCalculationFormula'] = calcText;
        cmdParams['isFullStyling'] = true;
        cmdParams['isTypeinFinished'] = isFinished;
      }
      else {
        docCmd = { ns: 'tabdoc', cmd: 'apply-calculation' };
        cmdParams['updatedCalculationCaption'] = fieldCaption;
        cmdParams['updatedCalculationFormula'] = calcText;
        cmdParams['isFullStyling'] = true;
      }
      var localTransaction = ss.mkdel(this, function(t) {
        if (model.get_isAdhoc() && isFinished) {
          var calcModel = { calculationCaption: null, pendingCalcName: null, datasource: null };
          $tab_CalculationCommands.$addCalcPresModelNotificationToTransaction(t, calcModel, 'doc:type-in-pill-event'.toString());
        }
      });
      tab.CommandController.SendCommand(new tab.ClientCommand('immediately', localTransaction, tab.CommandUtils.newCommand(docCmd, cmdParams), function(pm) {
        deferred.resolve($tab_CalcApplyResponse.fromApplyCalculationResult(pm, model));
      }, function(e) {
        tab.Logger.getLogger($tab_CalculationCommands, null).debug('Exception applying calculation: %s', [e.get_message()]);
        deferred.reject();
      }));
      return deferred;
    },
    cancelCalculation: function CalculationCommands$CancelCalculation(model) {
      var cmdParams = null;
      if (model.get_isAdhoc()) {
        cmdParams = {};
        cmdParams['isTypeInPill'] = true;
      }
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'clear-calculation-model' }, cmdParams);
      tab.CommandController.SendCommand(new tab.ClientCommand('none', ss.mkdel(this, function(t) {
        var pm = { calculationCaption: null, pendingCalcName: null, datasource: null };
        $tab_CalculationCommands.$addCalcPresModelNotificationToTransaction(t, pm, (model.get_isAdhoc() ? 'doc:type-in-pill-event'.toString() : 'doc:calculation-dialog-event'.toString()));
      }), c, null, null));
    },
    validateCalculation: function CalculationCommands$ValidateCalculation(model, fieldCaption, calcText) {
      var deferred = $.Deferred();
      var docCmd;
      var cmdParams = {};
      cmdParams['updatedCalculationFormula'] = calcText;
      cmdParams['isFullStyling'] = true;
      if (model.get_isAdhoc()) {
        docCmd = { ns: 'tabdoc', cmd: 'validate-type-in-pill' };
        cmdParams['datasource'] = model.get_dataSourceName();
      }
      else {
        docCmd = { ns: 'tabdoc', cmd: 'validate-formula' };
        cmdParams['updatedCalculationCaption'] = fieldCaption;
      }
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(tab.CommandUtils.newCommand(docCmd, cmdParams), 'none', function(_) {
        deferred.resolve();
      }, function(_1) {
        deferred.reject();
      }));
      return deferred.promise();
    },
    startDraggingText: function CalculationCommands$StartDraggingText(text) {
      var deferred = $.Deferred();
      var cmdParams = {};
      cmdParams['sheet'] = tsConfig.current_sheet_name;
      cmdParams['isRightDrag'] = false;
      cmdParams['text'] = text;
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-drag-pres-model-for-text' }, cmdParams), 'none', function(pm) {
        deferred.resolve(pm);
      }, function(e) {
        deferred.reject();
      }));
      return deferred;
    },
    dropOnCalcEditor: function CalculationCommands$DropOnCalcEditor(fieldNames, dropPosition, dragSource, textSelection, context, draggedText) {
      var deferred = $.Deferred();
      var cmdParams = {};
      cmdParams['fieldVector'] = fieldNames;
      cmdParams['calcEditorDropPos'] = dropPosition;
      cmdParams['dragSource'] = dragSource;
      if (ss.isValue(textSelection)) {
        cmdParams['calcEditorTextSelection'] = textSelection;
      }
      cmdParams['isFullStyling'] = true;
      cmdParams['calculationContext'] = context;
      if (ss.isValue(draggedText)) {
        cmdParams['text'] = draggedText;
      }
      var cmd = new tab.RemoteClientCommand(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-on-calc-editor' }, cmdParams), 'immediately', function(pm) {
        deferred.resolve(pm);
      }, function(e) {
        deferred.reject();
      });
      tab.CommandController.SendCommand(cmd);
      return deferred.promise();
    },
    insertFunctionInFormula: function CalculationCommands$InsertFunctionInFormula(funcModel, formula, selection) {
      var deferred = $.Deferred();
      if (ss.isNullOrUndefined(selection) || ss.isNullOrUndefined(funcModel)) {
        return deferred.reject();
      }
      var cmdParams = {};
      cmdParams['expressionFunc'] = funcModel;
      cmdParams['calculationFormula'] = formula;
      cmdParams['selectionStart'] = selection.calcEditorTextSelectionStartPos;
      cmdParams['selectionEnd'] = selection.calcEditorTextSelectionEndPos;
      var cmd = new tab.RemoteClientCommand(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'insert-function-in-formula' }, cmdParams), 'immediately', function(pm) {
        deferred.resolve(pm);
      }, function(e) {
        deferred.reject();
      });
      tab.CommandController.SendCommand(cmd);
      return deferred.promise();
    },
    isValidShelfForCalcs: function CalculationCommands$IsValidShelfForCalcs(type) {
      return type === 'columns-shelf' || type === 'rows-shelf' || type === 'encoding-shelf' || type === 'measures-shelf';
    },
    $addCalcPresModelNotificationToTransaction: function CalculationCommands$AddCalcPresModelNotificationToTransaction(t, calcPM, notificationId) {
      var $t1 = {};
      $t1['genCalculationPresModel'] = calcPM;
      var calcPresModelHolder = $t1;
      var notification = { keyId: notificationId, presModelHolder: calcPresModelHolder };
      var notifications = new Array(1);
      notifications[0] = notification;
      var pm = t.makeMutablePresModel(tab.ApplicationModel.get_instance(), false);
      pm.presentationLayerNotification = notifications;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CategoricalColorEditorDialogModel
  var $tab_CategoricalColorEditorDialogModel = global.tab.CategoricalColorEditorDialogModel = ss.mkType($asm, 'tab.CategoricalColorEditorDialogModel', function(parent) {
    this.$2$ShowOrUpdateDialogField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('doc:web-categorical-color-dialog-event'.toString(), null));
  }, {
    add_showOrUpdateDialog: function CategoricalColorEditorDialogModel$add_ShowOrUpdateDialog(value) {
      this.$2$ShowOrUpdateDialogField = ss.delegateCombine(this.$2$ShowOrUpdateDialogField, value);
    },
    remove_showOrUpdateDialog: function CategoricalColorEditorDialogModel$remove_ShowOrUpdateDialog(value) {
      this.$2$ShowOrUpdateDialogField = ss.delegateRemove(this.$2$ShowOrUpdateDialogField, value);
    },
    get_notificationId: function CategoricalColorEditorDialogModel$get_NotificationId() {
      return 'doc:web-categorical-color-dialog-event';
    },
    get_fieldDisplayNames: function CategoricalColorEditorDialogModel$get_FieldDisplayNames() {
      return this.get_$dialogPresModel().categoricalColorDialog.fieldDisplayNames;
    },
    get_itemColors: function CategoricalColorEditorDialogModel$get_ItemColors() {
      return this.get_$dialogPresModel().categoricalColorDialog.colorLegend.colorLegendItems;
    },
    get_availablePalettes: function CategoricalColorEditorDialogModel$get_AvailablePalettes() {
      return this.get_$dialogPresModel().categoricalColorDialog.categoricalColorEncoding.colorPalettes;
    },
    get_currentPaletteIndex: function CategoricalColorEditorDialogModel$get_CurrentPaletteIndex() {
      return this.get_$dialogPresModel().categoricalColorDialog.paletteIndex;
    },
    get_selectedLegendItemIndexes: function CategoricalColorEditorDialogModel$get_SelectedLegendItemIndexes() {
      return this.get_$dialogPresModel().categoricalColorDialog.itemIndices;
    },
    get_controllerId: function CategoricalColorEditorDialogModel$get_ControllerId() {
      return this.get_$dialogPresModel().categoricalColorDialog.componentId;
    },
    get_$dialogPresModel: function CategoricalColorEditorDialogModel$get_DialogPresModel() {
      return this.pm;
    },
    onNotify: function CategoricalColorEditorDialogModel$OnNotify(pm, context) {
      this.swapPresModel(pm);
      this.raiseEvent(this.$2$ShowOrUpdateDialogField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ChangeLineInterpolationCmd
  var $tab_ChangeLineInterpolationCmd = global.tab.ChangeLineInterpolationCmd = ss.mkType($asm, 'tab.ChangeLineInterpolationCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ChangeLineInterpolationCmd$Response]).call(this);
  }, {
    get_commandId: function ChangeLineInterpolationCmd$get_CommandId() {
      return $tab_ChangeLineInterpolationCmd.cmdId;
    },
    invoke: function ChangeLineInterpolationCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'change-line-interpolation' }, this.cmdParams));
    },
    validateInvokeParams: function ChangeLineInterpolationCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'lineInterpolationMode')) {
        throw new ss.Exception('missing param DocParams.LineInterpolationMode');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ChangeLineInterpolationCmd.Response
  var $tab_ChangeLineInterpolationCmd$Response = global.tab.ChangeLineInterpolationCmd$Response = ss.mkType($asm, 'tab.ChangeLineInterpolationCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CloseAuthoringCmd
  var $tab_CloseAuthoringCmd = global.tab.CloseAuthoringCmd = ss.mkType($asm, 'tab.CloseAuthoringCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_CloseAuthoringCmd$Response]).call(this);
  }, {
    get_commandId: function CloseAuthoringCmd$get_CommandId() {
      return $tab_CloseAuthoringCmd.cmdId;
    },
    validateInvokeParams: function CloseAuthoringCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CloseAuthoringCmd.Response
  var $tab_CloseAuthoringCmd$Response = global.tab.CloseAuthoringCmd$Response = ss.mkType($asm, 'tab.CloseAuthoringCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CloseDataSourceErrorDialogModel
  var $tab_CloseDataSourceErrorDialogModel = global.tab.CloseDataSourceErrorDialogModel = ss.mkType($asm, 'tab.CloseDataSourceErrorDialogModel', function(parent) {
    this.$2$NewErrorField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('doc:close-data-source-error-dialog-event'.toString(), null));
  }, {
    add_newError: function CloseDataSourceErrorDialogModel$add_NewError(value) {
      this.$2$NewErrorField = ss.delegateCombine(this.$2$NewErrorField, value);
    },
    remove_newError: function CloseDataSourceErrorDialogModel$remove_NewError(value) {
      this.$2$NewErrorField = ss.delegateRemove(this.$2$NewErrorField, value);
    },
    get_sheetNames: function CloseDataSourceErrorDialogModel$get_SheetNames() {
      return this.get_$errorPresModel().sheetNames;
    },
    get_dataSourceName: function CloseDataSourceErrorDialogModel$get_DataSourceName() {
      return this.get_$errorPresModel().datasource;
    },
    get_notificationId: function CloseDataSourceErrorDialogModel$get_NotificationId() {
      return 'doc:close-data-source-error-dialog-event';
    },
    get_$errorPresModel: function CloseDataSourceErrorDialogModel$get_ErrorPresModel() {
      return this.pm;
    },
    onNotify: function CloseDataSourceErrorDialogModel$OnNotify(pm, context) {
      this.swapPresModel(pm);
      if (this.get_$errorPresModel().needsCloseDsErrorPrompt) {
        this.raiseEvent(this.$2$NewErrorField, context);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CloseMapLayersPaneCmd
  var $tab_CloseMapLayersPaneCmd = global.tab.CloseMapLayersPaneCmd = ss.mkType($asm, 'tab.CloseMapLayersPaneCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_CloseMapLayersPaneCmd$Response]).call(this);
  }, {
    get_commandId: function CloseMapLayersPaneCmd$get_CommandId() {
      return $tab_CloseMapLayersPaneCmd.cmdId;
    },
    invoke: function CloseMapLayersPaneCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'close-map-layers-pane' }, this.cmdParams));
    },
    validateInvokeParams: function CloseMapLayersPaneCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CloseMapLayersPaneCmd.Response
  var $tab_CloseMapLayersPaneCmd$Response = global.tab.CloseMapLayersPaneCmd$Response = ss.mkType($asm, 'tab.CloseMapLayersPaneCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CloseRefLineEditorCmd
  var $tab_CloseRefLineEditorCmd = global.tab.CloseRefLineEditorCmd = ss.mkType($asm, 'tab.CloseRefLineEditorCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_CloseRefLineEditorCmd$Response]).call(this);
  }, {
    get_commandId: function CloseRefLineEditorCmd$get_CommandId() {
      return $tab_CloseRefLineEditorCmd.cmdId;
    },
    invoke: function CloseRefLineEditorCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'close-ref-line-editor' }, this.cmdParams));
    },
    validateInvokeParams: function CloseRefLineEditorCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CloseRefLineEditorCmd.Response
  var $tab_CloseRefLineEditorCmd$Response = global.tab.CloseRefLineEditorCmd$Response = ss.mkType($asm, 'tab.CloseRefLineEditorCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.CommandBuilder
  var $tab_CommandBuilder = global.tab.CommandBuilder = ss.mkType($asm, 'tab.CommandBuilder', function(command) {
    this.$1$CommandField = null;
    this.set_command(command);
  }, {
    get_command: function CommandBuilder$get_Command() {
      return this.$1$CommandField;
    },
    set_command: function CommandBuilder$set_Command(value) {
      this.$1$CommandField = value;
    },
    addParameter: function CommandBuilder$AddParameter(param, value) {
      if (ss.isNullOrUndefined(this.get_command().commandParams)) {
        this.get_command().commandParams = ss.mkdict([param, value]);
      }
      else {
        this.get_command().commandParams[param] = value;
      }
    },
    toCommandAction$2: function(T) {
      return function CommandBuilder$ToCommandAction(param, extractData, blockingState, successCallback) {
        return ss.mkdel(this, function(sender) {
          var value = extractData(sender);
          this.addParameter(param, value);
          tab.ServerCommands.executeServerCommand(this.get_command(), blockingState, successCallback, null);
        });
      };
    },
    toCommandAction$1: function CommandBuilder$ToCommandAction(blockingState) {
      return ss.mkdel(this, function() {
        tab.ServerCommands.executeServerCommand(this.get_command(), blockingState, null, null);
      });
    },
    toCommandAction: function CommandBuilder$ToCommandAction() {
      return this.toCommandAction$1('immediately');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DashboardZoneCommands
  var $tab_DashboardZoneCommands = global.tab.DashboardZoneCommands = ss.mkType($asm, 'tab.DashboardZoneCommands', null, null, {
    moveZone: function DashboardZoneCommands$MoveZone(zoneId, dropPos, grabPoint, floating) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'move-zone' }, null);
      c.commandParams = {};
      c.commandParams['zoneId'] = zoneId;
      c.commandParams['addAsFloating'] = floating;
      c.commandParams['dashboard'] = tsConfig.current_sheet_name;
      c.commandParams['dropLocation'] = { x: dropPos.x | 0, y: dropPos.y | 0 };
      c.commandParams['grabLocation'] = { x: grabPoint.x | 0, y: grabPoint.y | 0 };
      return tab.CommandController.SendCommandWithDeferredReturn(c, 'immediately');
    },
    $getMoveZonesBaseParams: function DashboardZoneCommands$GetMoveZonesBaseParams(zones, floating) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'move-zone' }, null);
      c.commandParams = {};
      c.commandParams['dashboard'] = tsConfig.current_sheet_name;
      c.commandParams['addAsFloating'] = floating;
      var zoneIds = new Array(zones.length);
      for (var i = 0; i < zones.length; i++) {
        zoneIds[i] = zones[i].get_zoneId();
      }
      c.commandParams['zoneIds'] = zoneIds;
      c.commandParams['zoneId'] = zoneIds[0];
      return c;
    },
    moveZones: function DashboardZoneCommands$MoveZones(zones, moveOffset, floating) {
      var c = $tab_DashboardZoneCommands.$getMoveZonesBaseParams(zones, floating);
      c.commandParams['moveOffset'] = { x: moveOffset.x | 0, y: moveOffset.y | 0 };
      var deferredResult = tab.CommandController.SendCommandWithDeferredReturn(c, 'immediately');
      deferredResult.always(function() {
        for (var $t1 = 0; $t1 < zones.length; $t1++) {
          var zone = zones[$t1];
          zone.set_blockLocalReset(false);
          tab.Model.nonWorldUpdate(ss.mkdel(zone, zone.resetZoneAndChildrenLocalChanges));
        }
      });
      return deferredResult;
    },
    moveZones$1: function DashboardZoneCommands$MoveZones(zones, grabPoint, dropPoint, floating) {
      var c = $tab_DashboardZoneCommands.$getMoveZonesBaseParams(zones, floating);
      c.commandParams['grabLocation'] = { x: grabPoint.x | 0, y: grabPoint.y | 0 };
      c.commandParams['dropLocation'] = { x: dropPoint.x | 0, y: dropPoint.y | 0 };
      var deferredResult = tab.CommandController.SendCommandWithDeferredReturn(c, 'immediately');
      deferredResult.always(function() {
        for (var $t1 = 0; $t1 < zones.length; $t1++) {
          var zone = zones[$t1];
          tab.Model.nonWorldUpdate(ss.mkdel(zone, zone.resetZoneAndChildrenLocalChanges));
        }
      });
      return deferredResult;
    },
    hideZone: function DashboardZoneCommands$HideZone(zoneId) {
      return $tab_DashboardZoneCommands.hideZones([zoneId]);
    },
    hideZones: function DashboardZoneCommands$HideZones(zoneIds) {
      var $t1 = new $tab_HideZoneCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneIds'] = zoneIds;
      $t1.cmdParams['zoneId'] = zoneIds[0] | 0;
      $t1.cmdParams['deleteOrphans'] = false;
      $t1.set_uiBlocking('immediately');
      return $t1.invoke();
    },
    replaceZone: function DashboardZoneCommands$ReplaceZone(zoneId, newWorksheet) {
      var $t1 = new $tab_ReplaceZoneCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['worksheet'] = newWorksheet;
      $t1.set_uiBlocking('immediately');
      return $t1.invoke();
    },
    selectZoneParent: function DashboardZoneCommands$SelectZoneParent(zoneId) {
      var $t1 = new $tab_SelectZoneParentCmd();
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.invoke();
    },
    getZoneResizeInfo: function DashboardZoneCommands$GetZoneResizeInfo(dashboardX, dashboardY) {
      var $t1 = new $tab_GetDragZoneResizeCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['x'] = dashboardX | 0;
      $t1.cmdParams['y'] = dashboardY | 0;
      var cmd = $t1;
      return cmd.invoke();
    },
    resizeTiledZone: function DashboardZoneCommands$ResizeTiledZone(edge, containerId, destPix, dragHorz, moveType) {
      var $t1 = new $tab_MoveDashboardEdgeCmd();
      $t1.cmdParams['zoneEdgePp'] = edge;
      $t1.cmdParams['zoneId'] = containerId | 0;
      $t1.cmdParams['destPix'] = destPix | 0;
      $t1.cmdParams['dragHorz'] = dragHorz;
      $t1.cmdParams['zoneEdgeMoveType'] = moveType;
      $t1.set_uiBlocking('immediately');
      $t1.invoke();
    },
    resizeFreeFormZone: function DashboardZoneCommands$ResizeFreeFormZone(zone, x, y, width, height) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'move-free-form-zone' }, null);
      c.commandParams = {};
      c.commandParams['dashboard'] = tsConfig.current_sheet_name;
      var zoneId = (ss.isNullOrUndefined(zone) ? tab.ZoneModel.rootZoneID : zone.get_zoneId());
      c.commandParams['zoneId'] = zoneId;
      c.commandParams['x'] = x | 0;
      c.commandParams['y'] = y | 0;
      c.commandParams['w'] = width | 0;
      c.commandParams['h'] = height | 0;
      var deferredResult = tab.CommandController.SendCommandWithDeferredReturn(c, 'immediately');
      deferredResult.always(function() {
        tab.Model.nonWorldUpdate(ss.mkdel(zone, zone.resetZoneAndChildrenLocalChanges));
      });
      return deferredResult;
    },
    setZoneStyle: function DashboardZoneCommands$SetZoneStyle(zoneId, zoneStyle, dashboard) {
      var $t1 = new $tab_SetZoneStyleCmd();
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['styledBox'] = zoneStyle;
      $t1.cmdParams['dashboard'] = dashboard;
      $t1.set_uiBlocking('immediately');
      return $t1.invoke();
    },
    toggleZoneTitle: function DashboardZoneCommands$ToggleZoneTitle(zoneId) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'toggle-zone-title' }, null);
      c.commandParams = {};
      c.commandParams['zoneId'] = zoneId;
      c.commandParams['dashboard'] = tsConfig.current_sheet_name;
      tab.CommandController.SendCommand(tab.RemoteClientCommand.create(c, 'immediately', null, null));
    },
    toggleFreeFormZone: function DashboardZoneCommands$ToggleFreeFormZone(zoneId) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'toggle-freeform-zone' }, null);
      c.commandParams = {};
      c.commandParams['zoneId'] = zoneId;
      c.commandParams['dashboard'] = tsConfig.current_sheet_name;
      tab.CommandController.SendCommand(tab.RemoteClientCommand.create(c, 'immediately', null, null));
    },
    editWebZoneUrl: function DashboardZoneCommands$EditWebZoneUrl(zoneId, url) {
      var $t1 = new $tab_EditWebZoneUrlCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['urlString'] = url;
      $t1.set_uiBlocking('immediately');
      var cmd = $t1;
      cmd.invoke();
    },
    modifyZoneZOrder: function DashboardZoneCommands$ModifyZoneZOrder(zoneId, type, delta) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'modify-zone-z-order' }, null);
      c.commandParams = {};
      c.commandParams['zoneId'] = zoneId;
      c.commandParams['modifyZoneZOrderType'] = type;
      if (ss.isValue(delta)) {
        c.commandParams['position'] = delta;
      }
      tab.CommandController.SendCommand(tab.RemoteClientCommand.create(c, 'immediately', null, null));
    },
    groupZones: function DashboardZoneCommands$GroupZones(zoneIds) {
      var $t1 = new tab.GroupAllSelectedZonesCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneIds'] = zoneIds;
      $t1.invoke();
    },
    ungroupZones: function DashboardZoneCommands$UngroupZones(zoneId) {
      var $t1 = new tab.UngroupGroupContainerCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.invoke();
    },
    removeZoneFromGroup: function DashboardZoneCommands$RemoveZoneFromGroup(zoneIds) {
      var $t1 = new tab.RemoveZoneFromGroupCmd();
      $t1.cmdParams['zoneId'] = zoneIds[0] | 0;
      $t1.cmdParams['zoneIds'] = zoneIds;
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.invoke();
    },
    setZoneCustomFriendlyName: function DashboardZoneCommands$SetZoneCustomFriendlyName(zoneID, sheetName, customFriendlyName) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-zone-custom-friendly-name' }, null);
      c.commandParams = {};
      c.commandParams['zoneId'] = zoneID;
      c.commandParams['dashboard'] = sheetName;
      c.commandParams['zoneFriendlyName'] = customFriendlyName;
      tab.CommandController.SendCommand(tab.RemoteClientCommand.create(c, 'immediately', null, null));
    },
    setZoneIsFixedSize: function DashboardZoneCommands$SetZoneIsFixedSize(zoneId, isFixedSize) {
      var $t1 = new $tab_SetZoneIsFixedSizeCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['state'] = isFixedSize;
      $t1.invoke();
    },
    setStackZoneChildSize: function DashboardZoneCommands$SetStackZoneChildSize(stackZoneId, childZoneId, size) {
      var $t1 = new $tab_SetStackZoneChildSizeCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['parentZoneId'] = stackZoneId | 0;
      $t1.cmdParams['zoneId'] = childZoneId | 0;
      $t1.cmdParams['size'] = size | 0;
      $t1.invoke();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DashboardZoneStyleCommands
  var $tab_DashboardZoneStyleCommands = global.tab.DashboardZoneStyleCommands = ss.mkType($asm, 'tab.DashboardZoneStyleCommands', null, null, {
    modifyZoneBorder: function DashboardZoneStyleCommands$ModifyZoneBorder(zoneId, borderColor, borderWidth, borderStyle) {
      var $t1 = new $tab_ModifyBorderCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['color'] = borderColor;
      $t1.cmdParams['w'] = borderWidth | 0;
      $t1.cmdParams['borderStyle'] = borderStyle;
      $t1.invoke();
    },
    modifyBackgroundShading: function DashboardZoneStyleCommands$ModifyBackgroundShading(zoneId, backgroundColor) {
      var $t1 = new $tab_ModifyBackgroundShadingCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['color'] = backgroundColor;
      $t1.invoke();
    },
    modifyMargins: function DashboardZoneStyleCommands$ModifyMargins(zoneId, zoneStyle, areLockedEqual) {
      var $t1 = new $tab_ModifyMarginCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['areSidesLockedToBeEqual'] = areLockedEqual;
      $t1.cmdParams['margin'] = zoneStyle.margin | 0;
      $t1.cmdParams['marginLeft'] = zoneStyle.marginLeft | 0;
      $t1.cmdParams['marginRight'] = zoneStyle.marginRight | 0;
      $t1.cmdParams['marginTop'] = zoneStyle.marginTop | 0;
      $t1.cmdParams['marginBottom'] = zoneStyle.marginBottom | 0;
      $t1.invoke();
    },
    modifyPadding: function DashboardZoneStyleCommands$ModifyPadding(zoneId, zoneStyle, areLockedEqual) {
      var $t1 = new $tab_ModifyPaddingCmd();
      $t1.cmdParams['dashboard'] = tsConfig.current_sheet_name;
      $t1.cmdParams['zoneId'] = zoneId | 0;
      $t1.cmdParams['areSidesLockedToBeEqual'] = areLockedEqual;
      $t1.cmdParams['padding'] = zoneStyle.padding | 0;
      $t1.cmdParams['paddingLeft'] = zoneStyle.paddingLeft | 0;
      $t1.cmdParams['paddingRight'] = zoneStyle.paddingRight | 0;
      $t1.cmdParams['paddingTop'] = zoneStyle.paddingTop | 0;
      $t1.cmdParams['paddingBottom'] = zoneStyle.paddingBottom | 0;
      $t1.invoke();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.AuthoringDomain.DesktopExpandedSidePaneWidthSynchronizer
  var $tab_DesktopExpandedSidePaneWidthSynchronizer = global.tab.DesktopExpandedSidePaneWidthSynchronizer = ss.mkType($asm, 'tab.DesktopExpandedSidePaneWidthSynchronizer', null, null, {
    connect: function DesktopExpandedSidePaneWidthSynchronizer$Connect(expandedSidePaneWidthModel) {
      var service = tabBootstrap.WorkbookSessionService.get_instance();
      if (ss.isValue(service)) {
        service.registerSidePaneResizedHandler(function(newWidth) {
          expandedSidePaneWidthModel.set_width(newWidth);
        });
        expandedSidePaneWidthModel.add_resizingEnded($tab_DesktopExpandedSidePaneWidthSynchronizer.$informDesktopOfNewSize);
        return new tab.CallOnDispose(function() {
          expandedSidePaneWidthModel.remove_resizingEnded($tab_DesktopExpandedSidePaneWidthSynchronizer.$informDesktopOfNewSize);
        });
      }
      return new tab.CallOnDispose(function() {
      });
    },
    $informDesktopOfNewSize: function DesktopExpandedSidePaneWidthSynchronizer$InformDesktopOfNewSize(newWidth) {
      tabBootstrap.WorkbookSessionService.get_instance().resizeSidePane(newWidth);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DistributionModel
  var $tab_DistributionModel = global.tab.DistributionModel = ss.mkType($asm, 'tab.DistributionModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    this.$2$ValidLabelTypesField = null;
    this.$2$ValidTooltipTypesField = null;
    this.$2$ValidCustomLabelTagsField = null;
    this.$2$DistributionPercentagesModelField = null;
    this.$2$DistributionPercentilesModelField = null;
    this.$2$DistributionQuantilesModelField = null;
    this.$2$DistributionStandardDeviationModelField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('referenceLine'.toString(), null));
    this.pm = {};
    this.set_distributionPercentagesModel(new $tab_DistributionPercentagesModel(this));
    this.set_distributionPercentilesModel(new $tab_DistributionPercentilesModel(this));
    this.set_distributionQuantilesModel(new $tab_DistributionQuantilesModel(this));
    this.set_distributionStandardDeviationModel(new $tab_DistributionStandardDeviationModel(this));
  }, {
    add_modelUpdated: function DistributionModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function DistributionModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_distributionPresModel: function DistributionModel$get_DistributionPresModel() {
      return this.pm;
    },
    get_isValid: function DistributionModel$get_IsValid() {
      return this.get_distributionPresModel().valid;
    },
    get_distributionType: function DistributionModel$get_DistributionType() {
      return this.get_distributionPresModel().distributionType;
    },
    get_refLineId: function DistributionModel$get_RefLineId() {
      return this.get_distributionPresModel().refLineId || '';
    },
    get_visualId: function DistributionModel$get_VisualId() {
      return this.get_distributionPresModel().visualIdPresModel;
    },
    get_scopeType: function DistributionModel$get_ScopeType() {
      return ss.coalesce(this.get_distributionPresModel().referenceLineScopeType, 'per-pane');
    },
    get_labelType: function DistributionModel$get_LabelType() {
      return ss.coalesce(this.get_distributionPresModel().referenceLineLabelType, 'automatic');
    },
    get_tooltipType: function DistributionModel$get_TooltipType() {
      return ss.coalesce(this.get_distributionPresModel().referenceLineTooltipType, 'automatic');
    },
    get_validLabelTypes: function DistributionModel$get_ValidLabelTypes() {
      return this.$2$ValidLabelTypesField;
    },
    set_validLabelTypes: function DistributionModel$set_ValidLabelTypes(value) {
      this.$2$ValidLabelTypesField = value;
    },
    get_validTooltipTypes: function DistributionModel$get_ValidTooltipTypes() {
      return this.$2$ValidTooltipTypesField;
    },
    set_validTooltipTypes: function DistributionModel$set_ValidTooltipTypes(value) {
      this.$2$ValidTooltipTypesField = value;
    },
    get_customLabel: function DistributionModel$get_CustomLabel() {
      return this.get_distributionPresModel().label || '';
    },
    get_customTooltip: function DistributionModel$get_CustomTooltip() {
      return this.get_distributionPresModel().tooltipText || '';
    },
    get_validCustomLabelTags: function DistributionModel$get_ValidCustomLabelTags() {
      return this.$2$ValidCustomLabelTagsField;
    },
    set_validCustomLabelTags: function DistributionModel$set_ValidCustomLabelTags(value) {
      this.$2$ValidCustomLabelTagsField = value;
    },
    get_formulaGroup: function DistributionModel$get_FormulaGroup() {
      return ss.coalesce(this.get_distributionPresModel().reflineFormulaGroup, 'distribution');
    },
    get_instantAnalyticsEnabled: function DistributionModel$get_InstantAnalyticsEnabled() {
      return this.get_distributionPresModel().enableInstantAnalytics;
    },
    get_isInstantAnalyticsAllowed: function DistributionModel$get_IsInstantAnalyticsAllowed() {
      return this.get_distributionPresModel().instantAnalyticsAllowed;
    },
    get_isPercentilesAllowed: function DistributionModel$get_IsPercentilesAllowed() {
      return this.get_distributionPresModel().percentilesAllowed;
    },
    get_isQuantilesAllowed: function DistributionModel$get_IsQuantilesAllowed() {
      return this.get_distributionPresModel().quantilesAllowed;
    },
    get_isStandardDeviationAllowed: function DistributionModel$get_IsStandardDeviationAllowed() {
      return this.get_distributionPresModel().standardDeviationAllowed;
    },
    get_selectedText: function DistributionModel$get_SelectedText() {
      return this.get_distributionPresModel().distributionValueString;
    },
    get_distributionPercentagesModel: function DistributionModel$get_DistributionPercentagesModel() {
      return this.$2$DistributionPercentagesModelField;
    },
    set_distributionPercentagesModel: function DistributionModel$set_DistributionPercentagesModel(value) {
      this.$2$DistributionPercentagesModelField = value;
    },
    get_distributionPercentilesModel: function DistributionModel$get_DistributionPercentilesModel() {
      return this.$2$DistributionPercentilesModelField;
    },
    set_distributionPercentilesModel: function DistributionModel$set_DistributionPercentilesModel(value) {
      this.$2$DistributionPercentilesModelField = value;
    },
    get_distributionQuantilesModel: function DistributionModel$get_DistributionQuantilesModel() {
      return this.$2$DistributionQuantilesModelField;
    },
    set_distributionQuantilesModel: function DistributionModel$set_DistributionQuantilesModel(value) {
      this.$2$DistributionQuantilesModelField = value;
    },
    get_distributionStandardDeviationModel: function DistributionModel$get_DistributionStandardDeviationModel() {
      return this.$2$DistributionStandardDeviationModelField;
    },
    set_distributionStandardDeviationModel: function DistributionModel$set_DistributionStandardDeviationModel(value) {
      this.$2$DistributionStandardDeviationModelField = value;
    },
    $updateValidCustomLabelTags: function DistributionModel$UpdateValidCustomLabelTags(tags) {
      this.set_validCustomLabelTags(_.map(tags, function(tag) {
        return tag;
      }));
    },
    $updateValidLabelTypes: function DistributionModel$UpdateValidLabelTypes(validLabelTypes) {
      this.set_validLabelTypes(_.map(validLabelTypes, function(label) {
        return { key: label.referenceLineLabelType, value: label.displayText };
      }));
    },
    $updateValidTooltipTypes: function DistributionModel$UpdateValidTooltipTypes(validTooltipTypes) {
      this.set_validTooltipTypes(_.map(validTooltipTypes, function(tooltip) {
        return { key: tooltip.referenceLineTooltipType, value: tooltip.displayText };
      }));
    },
    update: function DistributionModel$Update(distributionPresModel, context) {
      this.$updateValidLabelTypes(distributionPresModel.validReferenceLineLabelTypes);
      this.$updateValidTooltipTypes(distributionPresModel.validReferenceLineTooltipTypes);
      this.$updateValidCustomLabelTags(distributionPresModel.validReferenceLineCustomLabelTags);
      this.get_distributionPercentagesModel().update(distributionPresModel.distributionPercentages, distributionPresModel.visualIdPresModel, distributionPresModel.refLineId, context);
      this.get_distributionPercentilesModel().update(distributionPresModel.distributionPercentiles, distributionPresModel.visualIdPresModel, distributionPresModel.refLineId, context);
      this.get_distributionQuantilesModel().update(distributionPresModel.distributionQuantiles, distributionPresModel.visualIdPresModel, distributionPresModel.refLineId, context);
      this.get_distributionStandardDeviationModel().update(distributionPresModel.distributionStddev, distributionPresModel.visualIdPresModel, distributionPresModel.refLineId, context);
      this.simpleSwapToUpdate(distributionPresModel, this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DistributionPercentagesModel
  var $tab_DistributionPercentagesModel = global.tab.DistributionPercentagesModel = ss.mkType($asm, 'tab.DistributionPercentagesModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    this.$2$VisualIDField = null;
    this.$2$RefLineIDField = null;
    this.$2$ValidFormulaTypesField = null;
    this.$2$FieldPickerComboField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('distributionPercentages'.toString(), null));
    this.pm = {};
    this.set_fieldPickerCombo(new $tab_FieldPickerComboModel(this));
    this.set_validFormulaTypes([]);
  }, {
    add_modelUpdated: function DistributionPercentagesModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function DistributionPercentagesModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_visualID: function DistributionPercentagesModel$get_VisualID() {
      return this.$2$VisualIDField;
    },
    set_visualID: function DistributionPercentagesModel$set_VisualID(value) {
      this.$2$VisualIDField = value;
    },
    get_refLineID: function DistributionPercentagesModel$get_RefLineID() {
      return this.$2$RefLineIDField;
    },
    set_refLineID: function DistributionPercentagesModel$set_RefLineID(value) {
      this.$2$RefLineIDField = value;
    },
    get_distributionPercentagesPresModel: function DistributionPercentagesModel$get_DistributionPercentagesPresModel() {
      return this.pm;
    },
    get_percentages: function DistributionPercentagesModel$get_Percentages() {
      return this.get_distributionPercentagesPresModel().percentagesStr;
    },
    get_validFormulaTypes: function DistributionPercentagesModel$get_ValidFormulaTypes() {
      return this.$2$ValidFormulaTypesField;
    },
    set_validFormulaTypes: function DistributionPercentagesModel$set_ValidFormulaTypes(value) {
      this.$2$ValidFormulaTypesField = value;
    },
    get_formulaType: function DistributionPercentagesModel$get_FormulaType() {
      return ss.coalesce(this.get_distributionPercentagesPresModel().referenceLineFormulaType, 'average');
    },
    get_formattedConstantValue: function DistributionPercentagesModel$get_FormattedConstantValue() {
      return this.get_distributionPercentagesPresModel().formattedValue || '';
    },
    get_fieldPickerCombo: function DistributionPercentagesModel$get_FieldPickerCombo() {
      return this.$2$FieldPickerComboField;
    },
    set_fieldPickerCombo: function DistributionPercentagesModel$set_FieldPickerCombo(value) {
      this.$2$FieldPickerComboField = value;
    },
    get_isParameterSelected: function DistributionPercentagesModel$get_IsParameterSelected() {
      return this.get_distributionPercentagesPresModel().isParameterSelected;
    },
    $formulaPresModelToArray: function DistributionPercentagesModel$FormulaPresModelToArray(pm) {
      var emptyFormulas = [];
      if (ss.isNullOrUndefined(pm)) {
        return emptyFormulas;
      }
      return emptyFormulas.concat.apply(emptyFormulas, pm);
    },
    update: function DistributionPercentagesModel$Update(distributionPercentagesModel, visualId, refLineID, context) {
      this.set_visualID(visualId);
      this.set_refLineID(refLineID);
      if (ss.isValue(distributionPercentagesModel)) {
        this.get_fieldPickerCombo().update(distributionPercentagesModel.fieldPickerCombo, context);
        this.set_validFormulaTypes(this.$formulaPresModelToArray(distributionPercentagesModel.validReferenceLineFormulaTypes));
      }
      this.simpleSwapToUpdate(distributionPercentagesModel, this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DistributionPercentilesModel
  var $tab_DistributionPercentilesModel = global.tab.DistributionPercentilesModel = ss.mkType($asm, 'tab.DistributionPercentilesModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    this.$2$VisualIDField = null;
    this.$2$RefLineIDField = null;
    this.$2$PercentileComboModelField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('distributionPercentiles'.toString(), null));
    this.pm = {};
    this.set_percentileComboModel(new tab.EditValueWidgetModel(this, 'distributionPercentilesLevelCombo'));
  }, {
    add_modelUpdated: function DistributionPercentilesModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function DistributionPercentilesModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_visualID: function DistributionPercentilesModel$get_VisualID() {
      return this.$2$VisualIDField;
    },
    set_visualID: function DistributionPercentilesModel$set_VisualID(value) {
      this.$2$VisualIDField = value;
    },
    get_refLineID: function DistributionPercentilesModel$get_RefLineID() {
      return this.$2$RefLineIDField;
    },
    set_refLineID: function DistributionPercentilesModel$set_RefLineID(value) {
      this.$2$RefLineIDField = value;
    },
    get_percentileComboModel: function DistributionPercentilesModel$get_PercentileComboModel() {
      return this.$2$PercentileComboModelField;
    },
    set_percentileComboModel: function DistributionPercentilesModel$set_PercentileComboModel(value) {
      this.$2$PercentileComboModelField = value;
    },
    get_distributionPercentilesPresModel: function DistributionPercentilesModel$get_DistributionPercentilesPresModel() {
      return this.pm;
    },
    update: function DistributionPercentilesModel$Update(distributionPercentilesModel, visualId, refLineID, context) {
      this.set_visualID(visualId);
      this.set_refLineID(refLineID);
      if (ss.isValue(distributionPercentilesModel)) {
        this.get_percentileComboModel().update(distributionPercentilesModel.distributionPercentilesLevelCombo, context);
      }
      this.simpleSwapToUpdate(distributionPercentilesModel, this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DistributionQuantilesModel
  var $tab_DistributionQuantilesModel = global.tab.DistributionQuantilesModel = ss.mkType($asm, 'tab.DistributionQuantilesModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    this.$2$VisualIDField = null;
    this.$2$DistributionQuantilesComboField = null;
    this.$2$RefLineIDField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('distributionQuantiles'.toString(), null));
    this.pm = {};
    this.set_distributionQuantilesCombo(new tab.EditValueWidgetModel(this, 'distributionQuantilesLevelCombo'));
  }, {
    add_modelUpdated: function DistributionQuantilesModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function DistributionQuantilesModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_visualID: function DistributionQuantilesModel$get_VisualID() {
      return this.$2$VisualIDField;
    },
    set_visualID: function DistributionQuantilesModel$set_VisualID(value) {
      this.$2$VisualIDField = value;
    },
    get_distributionQuantilesCombo: function DistributionQuantilesModel$get_DistributionQuantilesCombo() {
      return this.$2$DistributionQuantilesComboField;
    },
    set_distributionQuantilesCombo: function DistributionQuantilesModel$set_DistributionQuantilesCombo(value) {
      this.$2$DistributionQuantilesComboField = value;
    },
    get_refLineID: function DistributionQuantilesModel$get_RefLineID() {
      return this.$2$RefLineIDField;
    },
    set_refLineID: function DistributionQuantilesModel$set_RefLineID(value) {
      this.$2$RefLineIDField = value;
    },
    get_distributionQuantilesPresModel: function DistributionQuantilesModel$get_DistributionQuantilesPresModel() {
      return this.pm;
    },
    update: function DistributionQuantilesModel$Update(quantilesPresModel, visualId, refLineID, context) {
      this.set_visualID(visualId);
      this.set_refLineID(refLineID);
      if (ss.isValue(quantilesPresModel)) {
        this.get_distributionQuantilesCombo().update(quantilesPresModel.distributionQuantilesLevelCombo, context);
      }
      this.simpleSwapToUpdate(quantilesPresModel, this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DistributionStandardDeviationModel
  var $tab_DistributionStandardDeviationModel = global.tab.DistributionStandardDeviationModel = ss.mkType($asm, 'tab.DistributionStandardDeviationModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    this.$2$VisualIDField = null;
    this.$2$RefLineIDField = null;
    this.$2$ValidStDevTypesField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('distributionStddev'.toString(), null));
    this.pm = {};
  }, {
    add_modelUpdated: function DistributionStandardDeviationModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function DistributionStandardDeviationModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_visualID: function DistributionStandardDeviationModel$get_VisualID() {
      return this.$2$VisualIDField;
    },
    set_visualID: function DistributionStandardDeviationModel$set_VisualID(value) {
      this.$2$VisualIDField = value;
    },
    get_refLineID: function DistributionStandardDeviationModel$get_RefLineID() {
      return this.$2$RefLineIDField;
    },
    set_refLineID: function DistributionStandardDeviationModel$set_RefLineID(value) {
      this.$2$RefLineIDField = value;
    },
    get_distributionStandardDeviationPresModel: function DistributionStandardDeviationModel$get_DistributionStandardDeviationPresModel() {
      return this.pm;
    },
    get_stDevType: function DistributionStandardDeviationModel$get_StDevType() {
      return this.get_distributionStandardDeviationPresModel().stdevType;
    },
    get_factors: function DistributionStandardDeviationModel$get_Factors() {
      return this.get_distributionStandardDeviationPresModel().factorsStr;
    },
    get_validStDevTypes: function DistributionStandardDeviationModel$get_ValidStDevTypes() {
      return this.$2$ValidStDevTypesField;
    },
    set_validStDevTypes: function DistributionStandardDeviationModel$set_ValidStDevTypes(value) {
      this.$2$ValidStDevTypesField = value;
    },
    update: function DistributionStandardDeviationModel$Update(distributionStandardDeviationModel, visualId, refLineID, context) {
      this.set_visualID(visualId);
      this.set_refLineID(refLineID);
      this.set_validStDevTypes(_.map(distributionStandardDeviationModel.translatedStdevTypes, function(type) {
        return { key: type.stdevType, value: type.displayText };
      }));
      this.simpleSwapToUpdate(distributionStandardDeviationModel, this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.Utility.DragToShowMeInfo
  var $tab_DragToShowMeInfo = global.tab.DragToShowMeInfo = ss.mkType($asm, 'tab.DragToShowMeInfo', function(fieldModel, encodingType) {
    this.fieldModel = null;
    this.encodingType = null;
    this.fieldModel = fieldModel;
    this.encodingType = encodingType;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.Utility.DragToShowMeInfoWrapper
  var $tab_DragToShowMeInfoWrapper = global.tab.DragToShowMeInfoWrapper = ss.mkType($asm, 'tab.DragToShowMeInfoWrapper', function(isFromDataSchemaPane, isCopyDrag, isShiftDrag) {
    this.infoList = [];
    this.isFromDataSchemaPane = false;
    this.isCopyDrag = false;
    this.isShiftDrag = false;
    this.isFromDataSchemaPane = isFromDataSchemaPane;
    this.isCopyDrag = isCopyDrag;
    this.isShiftDrag = isShiftDrag;
  }, {
    get_allFieldModels: function DragToShowMeInfoWrapper$get_AllFieldModels() {
      var fieldModels = [];
      for (var $t1 = 0; $t1 < this.infoList.length; $t1++) {
        var info = this.infoList[$t1];
        fieldModels.push(info.fieldModel);
      }
      return fieldModels;
    },
    add: function DragToShowMeInfoWrapper$Add(info) {
      this.infoList.push(info);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DropReferenceLineOnFilterShelfCmd
  var $tab_DropReferenceLineOnFilterShelfCmd = global.tab.DropReferenceLineOnFilterShelfCmd = ss.mkType($asm, 'tab.DropReferenceLineOnFilterShelfCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_DropReferenceLineOnFilterShelfCmd$Response]).call(this);
  }, {
    get_commandId: function DropReferenceLineOnFilterShelfCmd$get_CommandId() {
      return $tab_DropReferenceLineOnFilterShelfCmd.cmdId;
    },
    invoke: function DropReferenceLineOnFilterShelfCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-ref-line-on-filter-shelf' }, this.cmdParams));
    },
    validateInvokeParams: function DropReferenceLineOnFilterShelfCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fn')) {
        throw new ss.Exception('missing param DocParams.FieldName');
      }
      if (!ss.keyExists(this.cmdParams, 'shelfDropTargetPosition')) {
        throw new ss.Exception('missing param DocParams.DropTargetPosition');
      }
      if (!ss.keyExists(this.cmdParams, 'refLineId')) {
        throw new ss.Exception('missing param DocParams.ReferenceLineId');
      }
      if (!ss.keyExists(this.cmdParams, 'paneId')) {
        throw new ss.Exception('missing param DocParams.PaneId');
      }
      if (!ss.keyExists(this.cmdParams, 'simpleCommandModel')) {
        throw new ss.Exception('missing param DocParams.Command');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DropReferenceLineOnFilterShelfCmd.Response
  var $tab_DropReferenceLineOnFilterShelfCmd$Response = global.tab.DropReferenceLineOnFilterShelfCmd$Response = ss.mkType($asm, 'tab.DropReferenceLineOnFilterShelfCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DropReferenceLineOnSchemaViewerCmd
  var $tab_DropReferenceLineOnSchemaViewerCmd = global.tab.DropReferenceLineOnSchemaViewerCmd = ss.mkType($asm, 'tab.DropReferenceLineOnSchemaViewerCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_DropReferenceLineOnSchemaViewerCmd$Response]).call(this);
  }, {
    get_commandId: function DropReferenceLineOnSchemaViewerCmd$get_CommandId() {
      return $tab_DropReferenceLineOnSchemaViewerCmd.cmdId;
    },
    invoke: function DropReferenceLineOnSchemaViewerCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-ref-line-on-schema-viewer' }, this.cmdParams));
    },
    validateInvokeParams: function DropReferenceLineOnSchemaViewerCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fn')) {
        throw new ss.Exception('missing param DocParams.FieldName');
      }
      if (!ss.keyExists(this.cmdParams, 'refLineId')) {
        throw new ss.Exception('missing param DocParams.ReferenceLineId');
      }
      if (!ss.keyExists(this.cmdParams, 'paneId')) {
        throw new ss.Exception('missing param DocParams.PaneId');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DropReferenceLineOnSchemaViewerCmd.Response
  var $tab_DropReferenceLineOnSchemaViewerCmd$Response = global.tab.DropReferenceLineOnSchemaViewerCmd$Response = ss.mkType($asm, 'tab.DropReferenceLineOnSchemaViewerCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DropReferenceLineOnShelfCmd
  var $tab_DropReferenceLineOnShelfCmd = global.tab.DropReferenceLineOnShelfCmd = ss.mkType($asm, 'tab.DropReferenceLineOnShelfCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_DropReferenceLineOnShelfCmd$Response]).call(this);
  }, {
    get_commandId: function DropReferenceLineOnShelfCmd$get_CommandId() {
      return $tab_DropReferenceLineOnShelfCmd.cmdId;
    },
    invoke: function DropReferenceLineOnShelfCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-ref-line-on-shelf' }, this.cmdParams));
    },
    validateInvokeParams: function DropReferenceLineOnShelfCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fn')) {
        throw new ss.Exception('missing param DocParams.FieldName');
      }
      if (!ss.keyExists(this.cmdParams, 'shelfDropTargetPosition')) {
        throw new ss.Exception('missing param DocParams.DropTargetPosition');
      }
      if (!ss.keyExists(this.cmdParams, 'refLineId')) {
        throw new ss.Exception('missing param DocParams.ReferenceLineId');
      }
      if (!ss.keyExists(this.cmdParams, 'paneId')) {
        throw new ss.Exception('missing param DocParams.PaneId');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.DropReferenceLineOnShelfCmd.Response
  var $tab_DropReferenceLineOnShelfCmd$Response = global.tab.DropReferenceLineOnShelfCmd$Response = ss.mkType($asm, 'tab.DropReferenceLineOnShelfCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.AuthoringDomain.DialogCommands.EditAxisDialogCommands
  var $tab_EditAxisDialogCommands = global.tab.EditAxisDialogCommands = ss.mkType($asm, 'tab.EditAxisDialogCommands', null, null, {
    getServerAxisContextMenu: function EditAxisDialogCommands$GetServerAxisContextMenu(visualId, pt, imageRegion, callback) {
      var $t1 = new tab.BuildServerAxisContextMenuCmd();
      $t1.cmdParams['visualIdPresModel'] = visualId;
      $t1.cmdParams['regionPoint'] = tab.PointUtil.toPresModel(pt);
      $t1.cmdParams['r'] = imageRegion;
      var cmd = $t1;
      cmd.invoke().then(callback);
    },
    showEditAxisDialogInBrowserRenderedMode: function EditAxisDialogCommands$ShowEditAxisDialogInBrowserRenderedMode(node) {
      var $t1 = new tab.ShowEditAxisDialogCmd();
      $t1.cmdParams['fn'] = node.fn;
      $t1.cmdParams['axisOrientation'] = node.axisOrientation;
      $t1.cmdParams['duplicateIndex'] = node.duplicateIndex | 0;
      $t1.invoke();
    },
    showEditAxisDialogInServerRenderedMode: function EditAxisDialogCommands$ShowEditAxisDialogInServerRenderedMode(visualId, pt, imageRegion) {
      var $t1 = new tab.DoubleClickRegionNoReturnServerCmd();
      $t1.cmdParams['visualIdPresModel'] = visualId;
      $t1.cmdParams['regionPoint'] = tab.PointUtil.toPresModel(pt);
      $t1.cmdParams['r'] = imageRegion;
      $t1.invoke();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.EditWebZoneUrlCmd
  var $tab_EditWebZoneUrlCmd = global.tab.EditWebZoneUrlCmd = ss.mkType($asm, 'tab.EditWebZoneUrlCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_EditWebZoneUrlCmd$Response]).call(this);
  }, {
    get_commandId: function EditWebZoneUrlCmd$get_CommandId() {
      return $tab_EditWebZoneUrlCmd.cmdId;
    },
    invoke: function EditWebZoneUrlCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'edit-web-zone-url' }, this.cmdParams));
    },
    validateInvokeParams: function EditWebZoneUrlCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.EditWebZoneUrlCmd.Response
  var $tab_EditWebZoneUrlCmd$Response = global.tab.EditWebZoneUrlCmd$Response = ss.mkType($asm, 'tab.EditWebZoneUrlCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasCurrentUrl: function Response$HasCurrentUrl() {
      return ss.keyExists(this.$$cmdParams, 'urlString');
    },
    hasZoneID: function Response$HasZoneID() {
      return ss.keyExists(this.$$cmdParams, 'zoneId');
    },
    hasCommandRedirectType: function Response$HasCommandRedirectType() {
      return ss.keyExists(this.$$cmdParams, 'commandRedirectType');
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.AuthoringDomain.ExpandedSidePaneWidthModel
  var $tab_ExpandedSidePaneWidthModel = global.tab.ExpandedSidePaneWidthModel = ss.mkType($asm, 'tab.ExpandedSidePaneWidthModel', function() {
    this.$width = 0;
    this.$2$ResizedField = null;
    this.$2$ResizingEndedField = null;
    tab.Model.call(this, null, null);
    this.$width = ((tabBootstrap.ViewerBootstrap.get_initialAuthoringLeftAreaWidth() > 0) ? tabBootstrap.ViewerBootstrap.get_initialAuthoringLeftAreaWidth() : 200);
  }, {
    add_resized: function ExpandedSidePaneWidthModel$add_Resized(value) {
      this.$2$ResizedField = ss.delegateCombine(this.$2$ResizedField, value);
    },
    remove_resized: function ExpandedSidePaneWidthModel$remove_Resized(value) {
      this.$2$ResizedField = ss.delegateRemove(this.$2$ResizedField, value);
    },
    add_resizingEnded: function ExpandedSidePaneWidthModel$add_ResizingEnded(value) {
      this.$2$ResizingEndedField = ss.delegateCombine(this.$2$ResizingEndedField, value);
    },
    remove_resizingEnded: function ExpandedSidePaneWidthModel$remove_ResizingEnded(value) {
      this.$2$ResizingEndedField = ss.delegateRemove(this.$2$ResizingEndedField, value);
    },
    get_width: function ExpandedSidePaneWidthModel$get_Width() {
      return this.$width;
    },
    set_width: function ExpandedSidePaneWidthModel$set_Width(value) {
      if (value === this.get_width()) {
        return;
      }
      this.$width = value;
      this.$raiseResized();
    },
    resizeEnded: function ExpandedSidePaneWidthModel$ResizeEnded() {
      if (!ss.staticEquals(this.$2$ResizingEndedField, null)) {
        this.$2$ResizingEndedField(this.get_width());
      }
    },
    $raiseResized: function ExpandedSidePaneWidthModel$RaiseResized() {
      if (!ss.staticEquals(this.$2$ResizedField, null)) {
        this.$2$ResizedField(this.get_width());
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.Models.FieldPickerComboModel
  var $tab_FieldPickerComboModel = global.tab.FieldPickerComboModel = ss.mkType($asm, 'tab.FieldPickerComboModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('fieldPickerCombo'.toString(), null));
  }, {
    add_modelUpdated: function FieldPickerComboModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function FieldPickerComboModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_fieldPickerComboPresModel: function FieldPickerComboModel$get_FieldPickerComboPresModel() {
      return this.pm;
    },
    get_selectedField: function FieldPickerComboModel$get_SelectedField() {
      return this.get_fieldPickerComboPresModel().fn;
    },
    get_fields: function FieldPickerComboModel$get_Fields() {
      return _.map(this.get_fieldPickerComboPresModel().fieldPickerFields, function(field) {
        return new $tab_FieldPickerFieldModel(field);
      });
    },
    update: function FieldPickerComboModel$Update(fieldPickerPresModel, context) {
      this.simpleSwapToUpdate(fieldPickerPresModel, this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.Models.FieldPickerFieldModel
  var $tab_FieldPickerFieldModel = global.tab.FieldPickerFieldModel = ss.mkType($asm, 'tab.FieldPickerFieldModel', function(presModel) {
    this.fieldName = null;
    this.fieldCaption = null;
    this.fieldSummary = null;
    this.isInPrimaryDataSource = false;
    this.isFieldParameter = false;
    this.isTableCalc = false;
    this.fieldName = presModel.fn;
    this.fieldCaption = presModel.fieldCaption;
    this.fieldSummary = presModel.fieldSummary;
    this.isInPrimaryDataSource = presModel.isInPrimaryDataSource;
    this.isFieldParameter = presModel.isFieldParameter;
    this.isTableCalc = presModel.isTableCalc;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.FormatCommands
  var $tab_FormatCommands = global.tab.FormatCommands = ss.mkType($asm, 'tab.FormatCommands', null, null, {
    showFormatPane: function FormatCommands$ShowFormatPane() {
      tab.FormatContainerModel.get_formatPaneModel().set_isVisible(true);
    },
    hideFormatPane: function FormatCommands$HideFormatPane() {
      tab.FormatContainerModel.get_formatPaneModel().set_isVisible(false);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetDensityColorPalettesCmd
  var $tab_GetDensityColorPalettesCmd = global.tab.GetDensityColorPalettesCmd = ss.mkType($asm, 'tab.GetDensityColorPalettesCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetDensityColorPalettesCmd$Response]).call(this);
  }, {
    get_commandId: function GetDensityColorPalettesCmd$get_CommandId() {
      return $tab_GetDensityColorPalettesCmd.cmdId;
    },
    invoke: function GetDensityColorPalettesCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-density-color-palettes' }, this.cmdParams));
    },
    validateInvokeParams: function GetDensityColorPalettesCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetDensityColorPalettesCmd.Response
  var $tab_GetDensityColorPalettesCmd$Response = global.tab.GetDensityColorPalettesCmd$Response = ss.mkType($asm, 'tab.GetDensityColorPalettesCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasColorPalettes: function Response$HasColorPalettes() {
      return true;
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
      if (!ss.keyExists(this.$$cmdParams, 'colorPalettes')) {
        throw new ss.Exception('missing param DocParams.ColorPalettes');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetDragZoneResizeCmd
  var $tab_GetDragZoneResizeCmd = global.tab.GetDragZoneResizeCmd = ss.mkType($asm, 'tab.GetDragZoneResizeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetDragZoneResizeCmd$Response]).call(this);
  }, {
    get_commandId: function GetDragZoneResizeCmd$get_CommandId() {
      return $tab_GetDragZoneResizeCmd.cmdId;
    },
    invoke: function GetDragZoneResizeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-drag-zone-resize' }, this.cmdParams));
    },
    validateInvokeParams: function GetDragZoneResizeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'x')) {
        throw new ss.Exception('missing param DocParams.X');
      }
      if (!ss.keyExists(this.cmdParams, 'y')) {
        throw new ss.Exception('missing param DocParams.Y');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetDragZoneResizeCmd.Response
  var $tab_GetDragZoneResizeCmd$Response = global.tab.GetDragZoneResizeCmd$Response = ss.mkType($asm, 'tab.GetDragZoneResizeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasResizeInfo: function Response$HasResizeInfo() {
      return ss.keyExists(this.$$cmdParams, 'zoneResize');
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetRefLineDragInfoCmd
  var $tab_GetRefLineDragInfoCmd = global.tab.GetRefLineDragInfoCmd = ss.mkType($asm, 'tab.GetRefLineDragInfoCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetRefLineDragInfoCmd$Response]).call(this);
  }, {
    get_commandId: function GetRefLineDragInfoCmd$get_CommandId() {
      return $tab_GetRefLineDragInfoCmd.cmdId;
    },
    invoke: function GetRefLineDragInfoCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-ref-line-drag-info' }, this.cmdParams));
    },
    validateInvokeParams: function GetRefLineDragInfoCmd$ValidateInvokeParams() {
      if (ss.keyExists(this.cmdParams, 'objectId') === ss.keyExists(this.cmdParams, 'referenceLineId')) {
        throw new ss.Exception('must have one and only one of params DocParams.ObjectID and DocParams.ReferenceLineSpecificationId');
      }
      if (!ss.keyExists(this.cmdParams, 'paneId')) {
        throw new ss.Exception('missing param DocParams.PaneId');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetRefLineDragInfoCmd.Response
  var $tab_GetRefLineDragInfoCmd$Response = global.tab.GetRefLineDragInfoCmd$Response = ss.mkType($asm, 'tab.GetRefLineDragInfoCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasPresModel: function Response$HasPresModel() {
      return true;
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
      if (!ss.keyExists(this.$$cmdParams, 'analyticsObjectDragInfo')) {
        throw new ss.Exception('missing param DocParams.AnalyticsObjectDragInfo');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetRefLineFormulaCmd
  var $tab_GetRefLineFormulaCmd = global.tab.GetRefLineFormulaCmd = ss.mkType($asm, 'tab.GetRefLineFormulaCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetRefLineFormulaCmd$Response]).call(this);
  }, {
    get_commandId: function GetRefLineFormulaCmd$get_CommandId() {
      return $tab_GetRefLineFormulaCmd.cmdId;
    },
    invoke: function GetRefLineFormulaCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-ref-line-formula' }, this.cmdParams));
    },
    validateInvokeParams: function GetRefLineFormulaCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'referenceLineId')) {
        throw new ss.Exception('missing param DocParams.ReferenceLineSpecificationId');
      }
      if (!ss.keyExists(this.cmdParams, 'referenceLineLodCalcType')) {
        throw new ss.Exception('missing param DocParams.ReferenceLineLODCalcType');
      }
      if (!ss.keyExists(this.cmdParams, 'paneId')) {
        throw new ss.Exception('missing param DocParams.PaneId');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetRefLineFormulaCmd.Response
  var $tab_GetRefLineFormulaCmd$Response = global.tab.GetRefLineFormulaCmd$Response = ss.mkType($asm, 'tab.GetRefLineFormulaCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasFormula: function Response$HasFormula() {
      return true;
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
      if (!ss.keyExists(this.$$cmdParams, 'formula')) {
        throw new ss.Exception('missing param DocParams.Formula');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetTrendLineDragInfoCmd
  var $tab_GetTrendLineDragInfoCmd = global.tab.GetTrendLineDragInfoCmd = ss.mkType($asm, 'tab.GetTrendLineDragInfoCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetTrendLineDragInfoCmd$Response]).call(this);
  }, {
    get_commandId: function GetTrendLineDragInfoCmd$get_CommandId() {
      return $tab_GetTrendLineDragInfoCmd.cmdId;
    },
    invoke: function GetTrendLineDragInfoCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-trend-line-drag-info' }, this.cmdParams));
    },
    validateInvokeParams: function GetTrendLineDragInfoCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'paneId')) {
        throw new ss.Exception('missing param DocParams.PaneId');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.GetTrendLineDragInfoCmd.Response
  var $tab_GetTrendLineDragInfoCmd$Response = global.tab.GetTrendLineDragInfoCmd$Response = ss.mkType($asm, 'tab.GetTrendLineDragInfoCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasPresModel: function Response$HasPresModel() {
      return true;
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
      if (!ss.keyExists(this.$$cmdParams, 'analyticsObjectDragInfo')) {
        throw new ss.Exception('missing param DocParams.AnalyticsObjectDragInfo');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.HideZoneCmd
  var $tab_HideZoneCmd = global.tab.HideZoneCmd = ss.mkType($asm, 'tab.HideZoneCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_HideZoneCmd$Response]).call(this);
  }, {
    get_commandId: function HideZoneCmd$get_CommandId() {
      return $tab_HideZoneCmd.cmdId;
    },
    invoke: function HideZoneCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'hide-zone' }, this.cmdParams));
    },
    validateInvokeParams: function HideZoneCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.HideZoneCmd.Response
  var $tab_HideZoneCmd$Response = global.tab.HideZoneCmd$Response = ss.mkType($asm, 'tab.HideZoneCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.LaunchFilterDialogCmd
  var $tab_LaunchFilterDialogCmd = global.tab.LaunchFilterDialogCmd = ss.mkType($asm, 'tab.LaunchFilterDialogCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_LaunchFilterDialogCmd$Response]).call(this);
  }, {
    get_commandId: function LaunchFilterDialogCmd$get_CommandId() {
      return $tab_LaunchFilterDialogCmd.cmdId;
    },
    invoke: function LaunchFilterDialogCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'launch-filter-dialog' }, this.cmdParams));
    },
    validateInvokeParams: function LaunchFilterDialogCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fn')) {
        throw new ss.Exception('missing param DocParams.FieldName');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.LaunchFilterDialogCmd.Response
  var $tab_LaunchFilterDialogCmd$Response = global.tab.LaunchFilterDialogCmd$Response = ss.mkType($asm, 'tab.LaunchFilterDialogCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.MenuBarClientCommands
  var $tab_MenuBarClientCommands = global.tab.MenuBarClientCommands = ss.mkType($asm, 'tab.MenuBarClientCommands', null, null, {
    getMainMenu: function MenuBarClientCommands$GetMainMenu(item, callback) {
      switch (item) {
        case 'file':
        case 'data':
        case 'worksheet':
        case 'dashboard':
        case 'map':
        case 'format':
        case 'window': {
          var cmd = new $tab_BuildMainMenuCmd();
          cmd.cmdParams['isMobile'] = tsConfig.is_mobile;
          cmd.cmdParams['menuItemId'] = item;
          cmd.cmdParams['hasAllowAddNewDatasourceCapability'] = tsConfig.allow_add_new_datasource;
          cmd.invoke().then(callback);
          break;
        }
        default: {
          ss.Debug.assert(false, 'Calling general menu helper for non-general menu');
          break;
        }
      }
    },
    getAnalysisMainMenu: function MenuBarClientCommands$GetAnalysisMainMenu(callback, dataSource) {
      var cmd = new $tab_BuildMainMenuCmd();
      cmd.cmdParams['menuItemId'] = 'analysis';
      if (!ss.isNullOrEmptyString(dataSource)) {
        cmd.cmdParams['datasource'] = dataSource;
      }
      cmd.invoke().then(callback);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ModifyBackgroundShadingCmd
  var $tab_ModifyBackgroundShadingCmd = global.tab.ModifyBackgroundShadingCmd = ss.mkType($asm, 'tab.ModifyBackgroundShadingCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ModifyBackgroundShadingCmd$Response]).call(this);
  }, {
    get_commandId: function ModifyBackgroundShadingCmd$get_CommandId() {
      return $tab_ModifyBackgroundShadingCmd.cmdId;
    },
    invoke: function ModifyBackgroundShadingCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'modify-background-shading' }, this.cmdParams));
    },
    validateInvokeParams: function ModifyBackgroundShadingCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'color')) {
        throw new ss.Exception('missing param DocParams.Color');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ModifyBackgroundShadingCmd.Response
  var $tab_ModifyBackgroundShadingCmd$Response = global.tab.ModifyBackgroundShadingCmd$Response = ss.mkType($asm, 'tab.ModifyBackgroundShadingCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ModifyBorderCmd
  var $tab_ModifyBorderCmd = global.tab.ModifyBorderCmd = ss.mkType($asm, 'tab.ModifyBorderCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ModifyBorderCmd$Response]).call(this);
  }, {
    get_commandId: function ModifyBorderCmd$get_CommandId() {
      return $tab_ModifyBorderCmd.cmdId;
    },
    invoke: function ModifyBorderCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'modify-border' }, this.cmdParams));
    },
    validateInvokeParams: function ModifyBorderCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'w')) {
        throw new ss.Exception('missing param DocParams.Width');
      }
      if (!ss.keyExists(this.cmdParams, 'borderStyle')) {
        throw new ss.Exception('missing param DocParams.BorderStyle');
      }
      if (!ss.keyExists(this.cmdParams, 'color')) {
        throw new ss.Exception('missing param DocParams.Color');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ModifyBorderCmd.Response
  var $tab_ModifyBorderCmd$Response = global.tab.ModifyBorderCmd$Response = ss.mkType($asm, 'tab.ModifyBorderCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ModifyMarginCmd
  var $tab_ModifyMarginCmd = global.tab.ModifyMarginCmd = ss.mkType($asm, 'tab.ModifyMarginCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ModifyMarginCmd$Response]).call(this);
  }, {
    get_commandId: function ModifyMarginCmd$get_CommandId() {
      return $tab_ModifyMarginCmd.cmdId;
    },
    invoke: function ModifyMarginCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'modify-margin' }, this.cmdParams));
    },
    validateInvokeParams: function ModifyMarginCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'areSidesLockedToBeEqual')) {
        throw new ss.Exception('missing param DocParams.AreSidesLockedToBeEqual');
      }
      if (!ss.keyExists(this.cmdParams, 'margin')) {
        throw new ss.Exception('missing param DocParams.Margin');
      }
      if (!ss.keyExists(this.cmdParams, 'marginLeft')) {
        throw new ss.Exception('missing param DocParams.MarginLeft');
      }
      if (!ss.keyExists(this.cmdParams, 'marginRight')) {
        throw new ss.Exception('missing param DocParams.MarginRight');
      }
      if (!ss.keyExists(this.cmdParams, 'marginTop')) {
        throw new ss.Exception('missing param DocParams.MarginTop');
      }
      if (!ss.keyExists(this.cmdParams, 'marginBottom')) {
        throw new ss.Exception('missing param DocParams.MarginBottom');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ModifyMarginCmd.Response
  var $tab_ModifyMarginCmd$Response = global.tab.ModifyMarginCmd$Response = ss.mkType($asm, 'tab.ModifyMarginCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ModifyPaddingCmd
  var $tab_ModifyPaddingCmd = global.tab.ModifyPaddingCmd = ss.mkType($asm, 'tab.ModifyPaddingCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ModifyPaddingCmd$Response]).call(this);
  }, {
    get_commandId: function ModifyPaddingCmd$get_CommandId() {
      return $tab_ModifyPaddingCmd.cmdId;
    },
    invoke: function ModifyPaddingCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'modify-padding' }, this.cmdParams));
    },
    validateInvokeParams: function ModifyPaddingCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'areSidesLockedToBeEqual')) {
        throw new ss.Exception('missing param DocParams.AreSidesLockedToBeEqual');
      }
      if (!ss.keyExists(this.cmdParams, 'padding')) {
        throw new ss.Exception('missing param DocParams.Padding');
      }
      if (!ss.keyExists(this.cmdParams, 'paddingLeft')) {
        throw new ss.Exception('missing param DocParams.PaddingLeft');
      }
      if (!ss.keyExists(this.cmdParams, 'paddingRight')) {
        throw new ss.Exception('missing param DocParams.PaddingRight');
      }
      if (!ss.keyExists(this.cmdParams, 'paddingTop')) {
        throw new ss.Exception('missing param DocParams.PaddingTop');
      }
      if (!ss.keyExists(this.cmdParams, 'paddingBottom')) {
        throw new ss.Exception('missing param DocParams.PaddingBottom');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ModifyPaddingCmd.Response
  var $tab_ModifyPaddingCmd$Response = global.tab.ModifyPaddingCmd$Response = ss.mkType($asm, 'tab.ModifyPaddingCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.MoveDashboardEdgeCmd
  var $tab_MoveDashboardEdgeCmd = global.tab.MoveDashboardEdgeCmd = ss.mkType($asm, 'tab.MoveDashboardEdgeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_MoveDashboardEdgeCmd$Response]).call(this);
  }, {
    get_commandId: function MoveDashboardEdgeCmd$get_CommandId() {
      return $tab_MoveDashboardEdgeCmd.cmdId;
    },
    invoke: function MoveDashboardEdgeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'move-dashboard-edge' }, this.cmdParams));
    },
    validateInvokeParams: function MoveDashboardEdgeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'zoneEdgePp')) {
        throw new ss.Exception('missing param DocParams.ZoneEdgeRectPp');
      }
      if (!ss.keyExists(this.cmdParams, 'destPix')) {
        throw new ss.Exception('missing param DocParams.DestPix');
      }
      if (!ss.keyExists(this.cmdParams, 'dragHorz')) {
        throw new ss.Exception('missing param DocParams.DragHorz');
      }
      if (!ss.keyExists(this.cmdParams, 'zoneEdgeMoveType')) {
        throw new ss.Exception('missing param DocParams.ZoneEdgeMoveType');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.MoveDashboardEdgeCmd.Response
  var $tab_MoveDashboardEdgeCmd$Response = global.tab.MoveDashboardEdgeCmd$Response = ss.mkType($asm, 'tab.MoveDashboardEdgeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.AuthoringDomain.Utility.NavigationUtil
  var $tab_NavigationUtil = global.tab.NavigationUtil = ss.mkType($asm, 'tab.NavigationUtil', null, null, {
    closeWindowIfOpenedByTableau: function NavigationUtil$CloseWindowIfOpenedByTableau(logger) {
      var window = tab.WindowHelper.get_windowSelf();
      var opener = tab.WindowHelper.getOpener(window);
      if (ss.isValue(opener)) {
        try {
          var openerLocation = tab.WindowHelper.getLocation(opener);
          var isNlpExplorationPageUri = tab.VizUriModel.createForCurrentWindowLocation(opener).get_isNlpExplorationPageUri();
          if (ss.isValue(openerLocation.href) && !isNlpExplorationPageUri) {
            tab.WindowHelper.close(window);
          }
        }
        catch ($t1) {
          logger.debug("The authoring session's new window is not from embedded view.", []);
        }
      }
    },
    redirectToDataSources: function NavigationUtil$RedirectToDataSources(queryParams) {
      var newUrl = tsConfig.site_root + '/datasources';
      tab.WindowHelper.setLocationHref(tab.WindowHelper.get_windowSelf(), tab.MiscUtil.replaceUriQueryParameters(newUrl, queryParams));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.NotificationForwarder
  var $tab_NotificationForwarder = global.tab.NotificationForwarder = ss.mkType($asm, 'tab.NotificationForwarder', function(id) {
    this.$queuedNotifications = [];
    this.$receiver = null;
    this.$notificationId = null;
    this.$notificationId = id;
    tab.ApplicationModel.get_instance().registerNotificationHandler(id, ss.mkdel(this, this.$handler));
  }, {
    dispose: function NotificationForwarder$Dispose() {
      tab.ApplicationModel.get_instance().unRegisterNotificationHandler(this.$notificationId, ss.mkdel(this, this.$handler));
    },
    setReceiver: function NotificationForwarder$SetReceiver(updatedReceiver) {
      tab.Param.verifyValue(updatedReceiver, 'updatedReceiver');
      this.$receiver = updatedReceiver;
      tab.Model.nonWorldUpdate(ss.mkdel(this, function(ctx) {
        for (var $t1 = 0; $t1 < this.$queuedNotifications.length; $t1++) {
          var notification = this.$queuedNotifications[$t1];
          this.$receiver.onNotify(notification, ctx);
        }
        this.$queuedNotifications.length = 0;
      }));
    },
    $handler: function NotificationForwarder$Handler(presmodel, context) {
      if (ss.isNullOrUndefined(this.$receiver)) {
        this.$queuedNotifications.push(presmodel);
      }
      else {
        this.$receiver.onNotify(presmodel, context);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.PaneClientCommands
  var $tab_PaneClientCommands = global.tab.PaneClientCommands = ss.mkType($asm, 'tab.PaneClientCommands', null, null, {
    setPanePrimitive: function PaneClientCommands$SetPanePrimitive(model, type) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-primitive' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(model);
      c.commandParams['primitiveType'] = type.toString();
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    getDefaultShapeType: function PaneClientCommands$GetDefaultShapeType(marksCardTab, callback) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-default-shape' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'none', function(pm) {
        callback((_.isString(pm) ? tab.ShapeModel.fromString(pm.toString()) : null));
      }, function() {
        callback(null);
      }));
    },
    setDefaultShapeType: function PaneClientCommands$SetDefaultShapeType(marksCardTab, shape) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-default-shape' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['shapeName'] = $tab_PaneClientCommands.$shapeModelToString(shape);
      if (tab.FeatureFlags.isEnabled('RuntimeWebAuthoringIU')) {
        var clientCommand = new tab.ClientCommand(((tab.ApplicationModel.get_instance().get_renderMode() === 'render-mode-client') ? 'none' : 'immediately'), function(t) {
          $tab_PaneClientCommands.$setDefaultShapeTypeLocal(t, shape);
        }, c, null, null);
        tab.CommandController.SendCommand(clientCommand);
      }
      else {
        tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
      }
    },
    $setDefaultShapeTypeLocal: function PaneClientCommands$SetDefaultShapeTypeLocal(t, shape) {
      if (ss.isValue(shape.get_palette()) && ss.unbox(shape.get_palette()) !== 'filled') {
        return;
      }
      var encoded = tab.SceneDataUtil.convertShapeToNumber(shape);
      var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name);
      visualModel.updateRuntimeHandles(t, 3, $tab_PaneClientCommands.$updatePaneStylesLocal(function(paneStyles) {
        paneStyles.DefaultShape = [encoded];
      }));
    },
    toggleMarkLabels: function PaneClientCommands$ToggleMarkLabels(currentTextDropdownItemPresModel, markLabelsVisible, paneId) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.markLabelsVisibilityChanged = true;
      var visibility = (markLabelsVisible ? 'mlv-visible' : 'mlv-hidden');
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, visibility);
    },
    $updateMarkLabelsPresModel: function PaneClientCommands$UpdateMarkLabelsPresModel(pres, paneId, visibility) {
      pres.markLabelsVisibility = visibility;
      var $t1 = new $tab_UpdateMarkLabelsSettingsCmd();
      $t1.cmdParams['worksheet'] = tsConfig.current_sheet_name;
      $t1.cmdParams['markLabelsSpecification'] = pres;
      $t1.cmdParams['paneSpec'] = paneId | 0;
      $t1.invoke();
    },
    updateMarkLabelsMode: function PaneClientCommands$UpdateMarkLabelsMode(currentTextDropdownItemPresModel, paneId, newMode) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.markLabelsMode = newMode;
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, 'mlv-use-current');
    },
    updateMarkLabelsScope: function PaneClientCommands$UpdateMarkLabelsScope(currentTextDropdownItemPresModel, paneId, newScope) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.markLabelsScope = newScope;
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, 'mlv-use-current');
    },
    updateMarkLabelsMinMaxFieldChanged: function PaneClientCommands$UpdateMarkLabelsMinMaxFieldChanged(currentTextDropdownItemPresModel, paneId, newFieldName) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.fn = newFieldName;
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, 'mlv-use-current');
    },
    updateMarkLabelsMinMaxStartCheckboxChanged: function PaneClientCommands$UpdateMarkLabelsMinMaxStartCheckboxChanged(currentTextDropdownItemPresModel, paneId, newMinMaxStart) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.labelMarkMin = newMinMaxStart;
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, 'mlv-use-current');
    },
    updateMarkLabelsMinMaxEndCheckboxChanged: function PaneClientCommands$UpdateMarkLabelsMinMaxEndCheckboxChanged(currentTextDropdownItemPresModel, paneId, newMinMaxEnd) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.labelMarkMax = newMinMaxEnd;
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, 'mlv-use-current');
    },
    updateMarkLabelsLineEndFirstCheckboxChanged: function PaneClientCommands$UpdateMarkLabelsLineEndFirstCheckboxChanged(currentTextDropdownItemPresModel, paneId, newLineEndFirst) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.labelLineEndFirst = newLineEndFirst;
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, 'mlv-use-current');
    },
    updateMarkLabelsLineEndLastCheckboxChanged: function PaneClientCommands$UpdateMarkLabelsLineEndLastCheckboxChanged(currentTextDropdownItemPresModel, paneId, newLineEndLast) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.labelLineEndLast = newLineEndLast;
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, 'mlv-use-current');
    },
    updateMarkLabelsAllowLabelOverlapCheckboxChanged: function PaneClientCommands$UpdateMarkLabelsAllowLabelOverlapCheckboxChanged(currentTextDropdownItemPresModel, paneId, newValue) {
      var currentMarkLabelsSpecPM = $tab_PaneClientCommands.$convertTextDropdownItemToMarkLabelsSpecPresModel(currentTextDropdownItemPresModel);
      currentMarkLabelsSpecPM.cullLabels = !newValue;
      $tab_PaneClientCommands.$updateMarkLabelsPresModel(currentMarkLabelsSpecPM, paneId, 'mlv-use-current');
    },
    $convertTextDropdownItemToMarkLabelsSpecPresModel: function PaneClientCommands$ConvertTextDropdownItemToMarkLabelsSpecPresModel(textDropdownPresModel) {
      var existingPresModelValues = { markLabelsMode: textDropdownPresModel.markLabelsMode, markLabelsScope: textDropdownPresModel.markLabelsScope, fn: textDropdownPresModel.fieldPickerCombo.fn, labelMarkMin: textDropdownPresModel.labelMinimumValueIsChecked, labelMarkMax: textDropdownPresModel.labelMaximumValueIsChecked, labelLineEndFirst: textDropdownPresModel.labelStartOfLineIsChecked, labelLineEndLast: textDropdownPresModel.labelEndOfLineIsChecked, cullLabels: !textDropdownPresModel.allowMarksLabelsIsEnabled };
      return existingPresModelValues;
    },
    setMarkSize: function PaneClientCommands$SetMarkSize(marksCardTab, newSize) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-mark-size' }, null);
      c.commandParams = {};
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['markScale'] = newSize.toString();
      if (tab.FeatureFlags.isEnabled('RuntimeWebAuthoringIU')) {
        var clientCommand = new tab.ClientCommand(((tab.ApplicationModel.get_instance().get_renderMode() === 'render-mode-client') ? 'none' : 'immediately'), function(t) {
          $tab_PaneClientCommands.$setMarkSizeLocal(t, newSize);
        }, c, null, null);
        tab.CommandController.SendCommand(clientCommand);
      }
      else {
        tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
      }
    },
    $setMarkSizeLocal: function PaneClientCommands$SetMarkSizeLocal(t, newSize) {
      var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name);
      visualModel.updateRuntimeHandles(t, 4, $tab_PaneClientCommands.$updatePaneStylesLocal(function(paneStyles) {
        paneStyles.DefaultSize = [newSize];
      }));
    },
    resetTooltip: function PaneClientCommands$ResetTooltip(marksCardTab) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'reset-tooltip' }, null);
      c.commandParams = {};
      c.commandParams['worksheet'] = tsConfig.current_sheet_name;
      if (ss.isValue(marksCardTab) && marksCardTab.get_id() > 0) {
        c.commandParams['paneSpec'] = marksCardTab.get_id().toString();
      }
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    getDefaultColor: function PaneClientCommands$GetDefaultColor(marksCardTab, callback) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-default-color' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'none', function(pm) {
        callback((_.isString(pm) ? tab.ColorModel.fromColorCode(pm.toString()) : null));
      }, function() {
        callback(null);
      }));
    },
    setDefaultColor: function PaneClientCommands$SetDefaultColor(marksCardTab, color) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-default-color' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['defaultColor'] = color.toRgba255();
      if (tab.FeatureFlags.isEnabled('RuntimeWebAuthoringIU')) {
        var clientCommand = new tab.ClientCommand(((tab.ApplicationModel.get_instance().get_renderMode() === 'render-mode-client') ? 'none' : 'immediately'), function(t) {
          $tab_PaneClientCommands.$setDefaultColorLocal(t, color);
        }, c, null, null);
        tab.CommandController.SendCommand(clientCommand);
      }
      else {
        tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
      }
    },
    $setDefaultColorLocal: function PaneClientCommands$SetDefaultColorLocal(t, color) {
      var encoded = color.toArgbInt();
      var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name);
      visualModel.updateRuntimeHandles(t, 2, $tab_PaneClientCommands.$updatePaneStylesLocal(function(paneStyles) {
        paneStyles.DefaultMarkColor = [encoded];
      }));
    },
    setSteppedColor: function PaneClientCommands$SetSteppedColor(marksCardTab, stepCount) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-quantitative-color' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['steps'] = stepCount.toString();
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    reverseColor: function PaneClientCommands$ReverseColor(marksCardTab, newValue) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-quantitative-color' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['isReversed'] = newValue.toString();
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    setTotalsInEncoding: function PaneClientCommands$SetTotalsInEncoding(marksCardTab, totalsInclusion) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-quantitative-color' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['totalsInclusionValue'] = totalsInclusion.toString();
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    setQuantColorPalette: function PaneClientCommands$SetQuantColorPalette(marksCardTab, newPaletteId) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-quantitative-color' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['colorPaletteId'] = newPaletteId;
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    setCatColorPalette: function PaneClientCommands$SetCatColorPalette(marksCardTab, newPaletteId) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-categorical-color' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['colorPaletteId'] = newPaletteId;
      var isInstance = true;
      c.commandParams['isInstance'] = isInstance.toString();
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    setColorAlphaLevel: function PaneClientCommands$SetColorAlphaLevel(marksCardTab, newAlphaLevel) {
      if (isNaN(newAlphaLevel)) {
        return;
      }
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'change-alpha-level' }, null);
      c.commandParams = $tab_PaneClientCommands.$createCommonPaneClientCommandParams(marksCardTab);
      c.commandParams['alphaLevel'] = newAlphaLevel.toString();
      if (tab.FeatureFlags.isEnabled('RuntimeWebAuthoringIU')) {
        var clientCommand = new tab.ClientCommand(((tab.ApplicationModel.get_instance().get_renderMode() === 'render-mode-client') ? 'none' : 'immediately'), function(t) {
          $tab_PaneClientCommands.$setColorAlphaLevelLocal(t, newAlphaLevel, marksCardTab.get_paneDescriptorKeys());
        }, c, null, null);
        tab.CommandController.SendCommand(clientCommand);
      }
      else {
        tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
      }
    },
    $setColorAlphaLevelLocal: function PaneClientCommands$SetColorAlphaLevelLocal(t, newAlphaLevel, paneDescriptors) {
      var visualModel = tab.ModelUtils.getVisualModel(tab.ApplicationModel.get_instance(), tsConfig.current_sheet_name);
      var encoded = ss.trunc(newAlphaLevel);
      var localWork = function(handles) {
        var newDataStoreHandle = $.Deferred();
        var rp = new tab.RuePacker();
        for (var $t1 = 0; $t1 < paneDescriptors.length; $t1++) {
          var paneDescriptor = paneDescriptors[$t1];
          rp.addInt32((new tab.LayoutInputStoreKeys()).pdMarksData(paneDescriptor).parameters().alpha().toString(), encoded);
        }
        tab.RuntimeWebModule.proxy.rueUpdateCommandHex(handles.get_VM(), tab.HexEncoder.encodeBufferToHex(rp.pack())).done(function(dataStoreHandle) {
          newDataStoreHandle.resolve(dataStoreHandle);
        }).fail(function(dataStoreHandle1) {
          newDataStoreHandle.reject();
        });
        return newDataStoreHandle;
      };
      visualModel.updateRuntimeHandles(t, 0, localWork);
    },
    setMarksBorderColor: function PaneClientCommands$SetMarksBorderColor(marksCardTab, color, isAuto, isNone) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'change-border' }, null);
      c.commandParams = {};
      c.commandParams['worksheet'] = tsConfig.current_sheet_name;
      c.commandParams['paneSpec'] = marksCardTab.get_id().toString();
      c.commandParams['color'] = color.toString();
      c.commandParams['isAuto'] = isAuto.toString();
      c.commandParams['isNone'] = isNone.toString();
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    setMarksHaloColor: function PaneClientCommands$SetMarksHaloColor(marksCardTab, color, isAuto, isNone) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'change-halo' }, null);
      c.commandParams = {};
      c.commandParams['worksheet'] = tsConfig.current_sheet_name;
      c.commandParams['paneSpec'] = marksCardTab.get_id().toString();
      c.commandParams['color'] = color.toString();
      c.commandParams['isAuto'] = isAuto.toString();
      c.commandParams['isNone'] = isNone.toString();
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    setReferenceLineConstantValue: function PaneClientCommands$SetReferenceLineConstantValue(constantValue, refLineId) {
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-reference-line-constant-value' }, null);
      c.commandParams = {};
      c.commandParams['constantValue'] = constantValue;
      c.commandParams['referenceLineId'] = refLineId;
      tab.CommandController.SendCommand(new tab.RemoteClientCommand(c, 'immediately', null, null));
    },
    setDensityColorEncoding: function PaneClientCommands$SetDensityColorEncoding(marksCardTab, paletteId) {
      var $t1 = new $tab_SetDensityColorEncodingCmd();
      $t1.cmdParams['worksheet'] = tsConfig.current_sheet_name;
      $t1.cmdParams['paneSpec'] = marksCardTab.get_id() | 0;
      $t1.cmdParams['densityColorPalette'] = paletteId;
      $t1.invoke();
    },
    setDensityKernelSize: function PaneClientCommands$SetDensityKernelSize(marksCardTab, kernelSize) {
      var $t1 = new $tab_SetDensityKernelSizeCmd();
      $t1.cmdParams['worksheet'] = tsConfig.current_sheet_name;
      $t1.cmdParams['paneSpec'] = marksCardTab.get_id() | 0;
      $t1.cmdParams['densityKernelSize'] = kernelSize;
      $t1.invoke();
    },
    setDensityIntensity: function PaneClientCommands$SetDensityIntensity(marksCardTab, intensityPercentage) {
      var $t1 = new $tab_SetDensityIntensityCmd();
      $t1.cmdParams['worksheet'] = tsConfig.current_sheet_name;
      $t1.cmdParams['paneSpec'] = marksCardTab.get_id() | 0;
      $t1.cmdParams['densityIntensityPercentage'] = intensityPercentage;
      $t1.invoke();
    },
    getHeatmapColorPalettes: function PaneClientCommands$GetHeatmapColorPalettes(marksCardTab, callback) {
      var onSuccess = function(response) {
        callback(response.$$cmdParams['colorPalettes']);
      };
      var onFail = function(response1) {
        callback([]);
      };
      var $t1 = new $tab_GetDensityColorPalettesCmd();
      $t1.cmdParams['worksheet'] = tsConfig.current_sheet_name;
      $t1.cmdParams['paneSpec'] = marksCardTab.get_id() | 0;
      $t1.invoke().then(onSuccess, onFail);
    },
    $createCommonPaneClientCommandParams: function PaneClientCommands$CreateCommonPaneClientCommandParams(marksCardTab) {
      var commandParams = {};
      commandParams['worksheet'] = tsConfig.current_sheet_name;
      commandParams['paneSpec'] = marksCardTab.get_id().toString();
      return commandParams;
    },
    $shapeModelToString: function PaneClientCommands$ShapeModelToString(shape) {
      if (ss.isNullOrUndefined(shape)) {
        return null;
      }
      return shape.toString();
    },
    $getPaneStylesStringDict: function PaneClientCommands$GetPaneStylesStringDict(paneStyles) {
      return paneStyles['PaneStyles'];
    },
    $updatePaneStylesLocal: function PaneClientCommands$UpdatePaneStylesLocal(updatePaneStyles) {
      return function(handles) {
        var newDataStoreHandle = $.Deferred();
        tab.RuntimeWebModule.proxy.marshallDatastoreSubKeyHex(handles.get_finalStore(), tab.HexEncoder.encodeBufferToHex(tab.Utf8TextEncoder.encode('PaneStyles'))).done(function(paneStyles) {
          var newPaneStyles = $tab_PaneClientCommands.$getPaneStylesStringDict(paneStyles);
          updatePaneStyles(newPaneStyles);
          var packedStyles = tab.PaneStylesTableUtils.toRuePacker('PaneStylesData', newPaneStyles);
          tab.RuntimeWebModule.proxy.rueUpdateCommandHex(handles.get_VM(), tab.HexEncoder.encodeBufferToHex(packedStyles.pack())).done(function(dataStoreHandle) {
            newDataStoreHandle.resolve(dataStoreHandle);
          }).fail(function(dataStoreHandle1) {
            newDataStoreHandle.reject();
          });
        }).fail(function(paneStyles1) {
          newDataStoreHandle.reject();
        });
        return newDataStoreHandle;
      };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.AuthoringDomain.PresMode.PresentationModeAffordanceSet
  var $tab_PresentationModeAffordanceSet = global.tab.PresentationModeAffordanceSet = ss.mkType($asm, 'tab.PresentationModeAffordanceSet', function() {
    this.$model = null;
    tabBootstrap.DisableAffordanceSet.call(this, $tab_PresentationModeAffordanceSet.$disabledAffordances);
    var $t1 = tab.ApplicationModel.get_instance();
    this.$model = $t1.modelInstance($tab_PresentationModeModel).call($t1);
    this.$model.add_changed(ss.mkdel(this, this.raiseAffordanceSetChanged));
  }, {
    get_isSetEnabled: function PresentationModeAffordanceSet$get_IsSetEnabled() {
      return this.$model.get_isPresentationMode();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.AuthoringDomain.PresMode.PresentationModeModel
  var $tab_PresentationModeModel = global.tab.PresentationModeModel = ss.mkType($asm, 'tab.PresentationModeModel', function(parent) {
    this.$2$ChangedField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('', null));
    this.pm = { isPresentationModeDoc: false };
  }, {
    add_changed: function PresentationModeModel$add_Changed(value) {
      this.$2$ChangedField = ss.delegateCombine(this.$2$ChangedField, value);
    },
    remove_changed: function PresentationModeModel$remove_Changed(value) {
      this.$2$ChangedField = ss.delegateRemove(this.$2$ChangedField, value);
    },
    get_isPresentationMode: function PresentationModeModel$get_IsPresentationMode() {
      return tsConfig.is_desktop && this.pm.isPresentationModeDoc;
    },
    get_notificationId: function PresentationModeModel$get_NotificationId() {
      return 'doc:presentation-mode-changed-event';
    },
    onNotify: function PresentationModeModel$OnNotify(pm, context) {
      this.simpleSwapToUpdate(pm, this.$2$ChangedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.QuantitativeColorEditorDialogModel
  var $tab_QuantitativeColorEditorDialogModel = global.tab.QuantitativeColorEditorDialogModel = ss.mkType($asm, 'tab.QuantitativeColorEditorDialogModel', function() {
    this.$2$ModelUpdatedField = null;
    this.$2$StopNotifyingField = null;
    tab.Model.call(this, null, new tab.PresModelPathItem('doc:web-quantitative-color-dialog-event'.toString(), null));
  }, {
    add_modelUpdated: function QuantitativeColorEditorDialogModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function QuantitativeColorEditorDialogModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    add_stopNotifying: function QuantitativeColorEditorDialogModel$add_StopNotifying(value) {
      this.$2$StopNotifyingField = ss.delegateCombine(this.$2$StopNotifyingField, value);
    },
    remove_stopNotifying: function QuantitativeColorEditorDialogModel$remove_StopNotifying(value) {
      this.$2$StopNotifyingField = ss.delegateRemove(this.$2$StopNotifyingField, value);
    },
    get_notificationId: function QuantitativeColorEditorDialogModel$get_NotificationId() {
      return 'doc:web-quantitative-color-dialog-event';
    },
    get_componentID: function QuantitativeColorEditorDialogModel$get_ComponentID() {
      return this.get_$dialogPresModel().componentId;
    },
    get_encodingFields: function QuantitativeColorEditorDialogModel$get_EncodingFields() {
      return ss.arrayClone(this.get_$dialogPresModel().encodingFieldVector);
    },
    get_title: function QuantitativeColorEditorDialogModel$get_Title() {
      return this.get_$dialogPresModel().fieldDisplayNames.join(' ');
    },
    get_selectedColorPalette: function QuantitativeColorEditorDialogModel$get_SelectedColorPalette() {
      return this.get_$dialogPresModel().selectedColorPalette;
    },
    get_colorPalettes: function QuantitativeColorEditorDialogModel$get_ColorPalettes() {
      return ss.arrayClone(this.get_$dialogPresModel().colorPalettes);
    },
    get_minColor: function QuantitativeColorEditorDialogModel$get_MinColor() {
      return this.get_$dialogPresModel().color1;
    },
    get_maxColor: function QuantitativeColorEditorDialogModel$get_MaxColor() {
      return this.get_$dialogPresModel().color2;
    },
    get_rampColors: function QuantitativeColorEditorDialogModel$get_RampColors() {
      return this.get_$dialogPresModel().colorMap;
    },
    get_isDiverging: function QuantitativeColorEditorDialogModel$get_IsDiverging() {
      return this.get_$dialogPresModel().isColorDiverging;
    },
    get_minValue: function QuantitativeColorEditorDialogModel$get_MinValue() {
      return this.get_$dialogPresModel().minLabel;
    },
    get_maxValue: function QuantitativeColorEditorDialogModel$get_MaxValue() {
      return this.get_$dialogPresModel().maxLabel;
    },
    get_reverse: function QuantitativeColorEditorDialogModel$get_Reverse() {
      return this.get_$dialogPresModel().isReversed;
    },
    get_stepsEnabled: function QuantitativeColorEditorDialogModel$get_StepsEnabled() {
      return this.get_$dialogPresModel().isColorStepped;
    },
    get_stepsValue: function QuantitativeColorEditorDialogModel$get_StepsValue() {
      return this.get_$dialogPresModel().steps;
    },
    get_canUseFullColorRange: function QuantitativeColorEditorDialogModel$get_CanUseFullColorRange() {
      return this.get_$dialogPresModel().canUseFullColorRange;
    },
    get_useFullColorRange: function QuantitativeColorEditorDialogModel$get_UseFullColorRange() {
      return this.get_$dialogPresModel().useFullColorRange;
    },
    get_includeTotalsOptionEnabled: function QuantitativeColorEditorDialogModel$get_IncludeTotalsOptionEnabled() {
      return this.get_$dialogPresModel().areTotalsUsed;
    },
    get_includeTotals: function QuantitativeColorEditorDialogModel$get_IncludeTotals() {
      return this.get_$dialogPresModel().totalsInclusionValue === 'include-totals';
    },
    get_startChecked: function QuantitativeColorEditorDialogModel$get_StartChecked() {
      return this.get_$dialogPresModel().useStartValue;
    },
    get_startValue: function QuantitativeColorEditorDialogModel$get_StartValue() {
      return this.get_$dialogPresModel().formattedStart;
    },
    get_centerChecked: function QuantitativeColorEditorDialogModel$get_CenterChecked() {
      return this.get_$dialogPresModel().useCenterValue;
    },
    get_centerValue: function QuantitativeColorEditorDialogModel$get_CenterValue() {
      return this.get_$dialogPresModel().formattedCenter;
    },
    get_canEnableCenter: function QuantitativeColorEditorDialogModel$get_CanEnableCenter() {
      return this.get_$dialogPresModel().canEnableCenter;
    },
    get_endChecked: function QuantitativeColorEditorDialogModel$get_EndChecked() {
      return this.get_$dialogPresModel().useEndValue;
    },
    get_endValue: function QuantitativeColorEditorDialogModel$get_EndValue() {
      return this.get_$dialogPresModel().formattedEnd;
    },
    get_canShowAdvancedSettings: function QuantitativeColorEditorDialogModel$get_CanShowAdvancedSettings() {
      return this.get_$dialogPresModel().canShowAdvancedSettings;
    },
    get_$dialogPresModel: function QuantitativeColorEditorDialogModel$get_DialogPresModel() {
      return this.pm.quantitativeColorDialog;
    },
    detachNotifications: function QuantitativeColorEditorDialogModel$DetachNotifications() {
      if (!ss.staticEquals(this.$2$StopNotifyingField, null)) {
        this.$2$StopNotifyingField();
      }
    },
    onNotify: function QuantitativeColorEditorDialogModel$OnNotify(pm, context) {
      this.swapPresModel(pm);
      this.raiseEvent(this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.QuickSortAscendingCmd
  var $tab_QuickSortAscendingCmd = global.tab.QuickSortAscendingCmd = ss.mkType($asm, 'tab.QuickSortAscendingCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_QuickSortAscendingCmd$Response]).call(this);
  }, {
    get_commandId: function QuickSortAscendingCmd$get_CommandId() {
      return $tab_QuickSortAscendingCmd.cmdId;
    },
    validateInvokeParams: function QuickSortAscendingCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.QuickSortAscendingCmd.Response
  var $tab_QuickSortAscendingCmd$Response = global.tab.QuickSortAscendingCmd$Response = ss.mkType($asm, 'tab.QuickSortAscendingCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.QuickSortDescendingCmd
  var $tab_QuickSortDescendingCmd = global.tab.QuickSortDescendingCmd = ss.mkType($asm, 'tab.QuickSortDescendingCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_QuickSortDescendingCmd$Response]).call(this);
  }, {
    get_commandId: function QuickSortDescendingCmd$get_CommandId() {
      return $tab_QuickSortDescendingCmd.cmdId;
    },
    validateInvokeParams: function QuickSortDescendingCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.QuickSortDescendingCmd.Response
  var $tab_QuickSortDescendingCmd$Response = global.tab.QuickSortDescendingCmd$Response = ss.mkType($asm, 'tab.QuickSortDescendingCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReferenceBandModel
  var $tab_ReferenceBandModel = global.tab.ReferenceBandModel = ss.mkType($asm, 'tab.ReferenceBandModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    this.$2$ValidFormulaTypesField = null;
    this.$2$ValidPairedFormulaTypesField = null;
    this.$2$FromFieldPickerComboField = null;
    this.$2$ToFieldPickerComboField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('referenceLine'.toString(), null));
    this.pm = {};
    this.set_fromFieldPickerCombo(new $tab_FieldPickerComboModel(this));
    this.set_toFieldPickerCombo(new $tab_FieldPickerComboModel(this));
    this.set_validFormulaTypes([]);
    this.set_validPairedFormulaTypes([]);
  }, {
    add_modelUpdated: function ReferenceBandModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function ReferenceBandModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_refBandPresModel: function ReferenceBandModel$get_RefBandPresModel() {
      return this.pm;
    },
    get_refLineId: function ReferenceBandModel$get_RefLineId() {
      return this.get_refBandPresModel().refLineId || '';
    },
    get_pairedId: function ReferenceBandModel$get_PairedId() {
      return this.get_refBandPresModel().refLinePairedId || '';
    },
    get_visualId: function ReferenceBandModel$get_VisualId() {
      return this.get_refBandPresModel().visualIdPresModel;
    },
    get_referenceParam: function ReferenceBandModel$get_ReferenceParam() {
      return this.get_refBandPresModel().referenceParam || '';
    },
    get_instantAnalyticsEnabled: function ReferenceBandModel$get_InstantAnalyticsEnabled() {
      return this.get_refBandPresModel().enableInstantAnalytics;
    },
    get_isInstantAnalyticsAllowed: function ReferenceBandModel$get_IsInstantAnalyticsAllowed() {
      return this.get_refBandPresModel().instantAnalyticsAllowed;
    },
    get_scopeType: function ReferenceBandModel$get_ScopeType() {
      return ss.coalesce(this.get_refBandPresModel().referenceLineScopeType, 'per-pane');
    },
    get_fromLabelType: function ReferenceBandModel$get_FromLabelType() {
      return ss.coalesce(this.get_refBandPresModel().referenceLineLabelType, 'automatic');
    },
    get_fromTooltipType: function ReferenceBandModel$get_FromTooltipType() {
      return ss.coalesce(this.get_refBandPresModel().referenceLineTooltipType, 'automatic');
    },
    get_toLabelType: function ReferenceBandModel$get_ToLabelType() {
      return ss.coalesce(this.get_refBandPresModel().pairedReferenceLineLabelType, 'automatic');
    },
    get_toTooltipType: function ReferenceBandModel$get_ToTooltipType() {
      return ss.coalesce(this.get_refBandPresModel().pairedReferenceLineTooltipType, 'automatic');
    },
    get_fromCustomLabel: function ReferenceBandModel$get_FromCustomLabel() {
      return this.get_refBandPresModel().label || '';
    },
    get_fromCustomTooltip: function ReferenceBandModel$get_FromCustomTooltip() {
      return this.get_refBandPresModel().tooltipText || '';
    },
    get_toCustomLabel: function ReferenceBandModel$get_ToCustomLabel() {
      return this.get_refBandPresModel().pairedLabel || '';
    },
    get_toCustomTooltip: function ReferenceBandModel$get_ToCustomTooltip() {
      return this.get_refBandPresModel().pairedTooltipText || '';
    },
    get_validFormulaTypes: function ReferenceBandModel$get_ValidFormulaTypes() {
      return this.$2$ValidFormulaTypesField;
    },
    set_validFormulaTypes: function ReferenceBandModel$set_ValidFormulaTypes(value) {
      this.$2$ValidFormulaTypesField = value;
    },
    get_validPairedFormulaTypes: function ReferenceBandModel$get_ValidPairedFormulaTypes() {
      return this.$2$ValidPairedFormulaTypesField;
    },
    set_validPairedFormulaTypes: function ReferenceBandModel$set_ValidPairedFormulaTypes(value) {
      this.$2$ValidPairedFormulaTypesField = value;
    },
    get_validLabelTypes: function ReferenceBandModel$get_ValidLabelTypes() {
      var retValue = [];
      if (ss.isNullOrUndefined(this.get_refBandPresModel().validReferenceLineLabelTypes)) {
        return retValue;
      }
      var $t1 = this.get_refBandPresModel().validReferenceLineLabelTypes;
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var label = $t1[$t2];
        retValue.push({ key: label.referenceLineLabelType, value: label.displayText });
      }
      return retValue;
    },
    get_validTooltipTypes: function ReferenceBandModel$get_ValidTooltipTypes() {
      var retValue = [];
      if (ss.isNullOrUndefined(this.get_refBandPresModel().validReferenceLineTooltipTypes)) {
        return retValue;
      }
      var $t1 = this.get_refBandPresModel().validReferenceLineTooltipTypes;
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var tooltip = $t1[$t2];
        retValue.push({ key: tooltip.referenceLineTooltipType, value: tooltip.displayText });
      }
      return retValue;
    },
    get_validCustomLabelTags: function ReferenceBandModel$get_ValidCustomLabelTags() {
      var retValue = [];
      if (ss.isNullOrUndefined(this.get_refBandPresModel().validReferenceLineCustomLabelTags)) {
        return retValue;
      }
      var $t1 = this.get_refBandPresModel().validReferenceLineCustomLabelTags;
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var tag = $t1[$t2];
        retValue.push(tag);
      }
      return retValue;
    },
    get_fromFormulaType: function ReferenceBandModel$get_FromFormulaType() {
      return ss.coalesce(this.get_refBandPresModel().referenceLineFormulaType, 'min');
    },
    get_toFormulaType: function ReferenceBandModel$get_ToFormulaType() {
      return ss.coalesce(this.get_refBandPresModel().pairedReferenceLineFormulaType, 'max');
    },
    get_fromFieldPickerCombo: function ReferenceBandModel$get_FromFieldPickerCombo() {
      return this.$2$FromFieldPickerComboField;
    },
    set_fromFieldPickerCombo: function ReferenceBandModel$set_FromFieldPickerCombo(value) {
      this.$2$FromFieldPickerComboField = value;
    },
    get_toFieldPickerCombo: function ReferenceBandModel$get_ToFieldPickerCombo() {
      return this.$2$ToFieldPickerComboField;
    },
    set_toFieldPickerCombo: function ReferenceBandModel$set_ToFieldPickerCombo(value) {
      this.$2$ToFieldPickerComboField = value;
    },
    get_fromConstantValue: function ReferenceBandModel$get_FromConstantValue() {
      return this.get_refBandPresModel().constantValue || '';
    },
    get_toConstantValue: function ReferenceBandModel$get_ToConstantValue() {
      return this.get_refBandPresModel().pairedConstantValue || '';
    },
    get_fromFormattedConstantValue: function ReferenceBandModel$get_FromFormattedConstantValue() {
      return this.get_refBandPresModel().formattedValue || '';
    },
    get_toFormattedConstantValue: function ReferenceBandModel$get_ToFormattedConstantValue() {
      return this.get_refBandPresModel().pairedFormattedValue || '';
    },
    get_isParameterSelectedOnTo: function ReferenceBandModel$get_IsParameterSelectedOnTo() {
      return this.get_refBandPresModel().isParameterSelectedOnTo;
    },
    get_isParameterSelectedOnFrom: function ReferenceBandModel$get_IsParameterSelectedOnFrom() {
      return this.get_refBandPresModel().isParameterSelectedOnFrom;
    },
    $formulaPresModelToArray: function ReferenceBandModel$FormulaPresModelToArray(pm) {
      var emptyFormulas = [];
      if (ss.isNullOrUndefined(pm)) {
        return emptyFormulas;
      }
      return emptyFormulas.concat.apply(emptyFormulas, pm);
    },
    update: function ReferenceBandModel$Update(bandPresModel, context) {
      if (ss.isValue(bandPresModel)) {
        this.get_fromFieldPickerCombo().update(bandPresModel.fieldPickerCombo, context);
        this.get_toFieldPickerCombo().update(bandPresModel.pairedFieldPickerCombo, context);
        this.set_validFormulaTypes(this.$formulaPresModelToArray(bandPresModel.validReferenceLineFormulaTypes));
        this.set_validPairedFormulaTypes(this.$formulaPresModelToArray(bandPresModel.validReferenceLinePairedFormulaTypes));
      }
      this.simpleSwapToUpdate(bandPresModel, this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReferenceLineEditorModel
  var $tab_ReferenceLineEditorModel = global.tab.ReferenceLineEditorModel = ss.mkType($asm, 'tab.ReferenceLineEditorModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    this.$2$ActivePaneField = null;
    this.$2$ActiveModelField = null;
    this.$2$LineModelField = null;
    this.$2$BandModelField = null;
    this.$2$DistributionModelField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('referenceLineEditor'.toString(), null));
    this.pm = {};
    this.set_activeModel(null);
    this.set_activePane('line');
    this.set_lineModel(new $tab_ReferenceLineModel(this));
    this.set_bandModel(new $tab_ReferenceBandModel(this));
    this.set_distributionModel(new $tab_DistributionModel(this));
  }, {
    add_modelUpdated: function ReferenceLineEditorModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function ReferenceLineEditorModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_activePane: function ReferenceLineEditorModel$get_ActivePane() {
      return this.$2$ActivePaneField;
    },
    set_activePane: function ReferenceLineEditorModel$set_ActivePane(value) {
      this.$2$ActivePaneField = value;
    },
    get_activeModel: function ReferenceLineEditorModel$get_ActiveModel() {
      return this.$2$ActiveModelField;
    },
    set_activeModel: function ReferenceLineEditorModel$set_ActiveModel(value) {
      this.$2$ActiveModelField = value;
    },
    get_lineModel: function ReferenceLineEditorModel$get_LineModel() {
      return this.$2$LineModelField;
    },
    set_lineModel: function ReferenceLineEditorModel$set_LineModel(value) {
      this.$2$LineModelField = value;
    },
    get_bandModel: function ReferenceLineEditorModel$get_BandModel() {
      return this.$2$BandModelField;
    },
    set_bandModel: function ReferenceLineEditorModel$set_BandModel(value) {
      this.$2$BandModelField = value;
    },
    get_distributionModel: function ReferenceLineEditorModel$get_DistributionModel() {
      return this.$2$DistributionModelField;
    },
    set_distributionModel: function ReferenceLineEditorModel$set_DistributionModel(value) {
      this.$2$DistributionModelField = value;
    },
    get_editorPresModel: function ReferenceLineEditorModel$get_EditorPresModel() {
      return this.pm;
    },
    get_isEditing: function ReferenceLineEditorModel$get_IsEditing() {
      return ss.isValue(this.get_activeModel());
    },
    get_notificationId: function ReferenceLineEditorModel$get_NotificationId() {
      return 'doc:update-ref-line-dialog-event';
    },
    onNotify: function ReferenceLineEditorModel$OnNotify(pm, context) {
      this.update(pm, context);
    },
    update: function ReferenceLineEditorModel$Update(newPresModel, context) {
      this.swapAndCopyPresModel(newPresModel);
      this.set_activePane(ss.coalesce(newPresModel.reflineFormulaGroup, this.get_activePane()));
      switch (this.get_activePane()) {
        case 'none': {
          this.set_activeModel(null);
          break;
        }
        case 'line': {
          this.set_activeModel(this.get_lineModel());
          break;
        }
        case 'band': {
          this.set_activeModel(this.get_bandModel());
          break;
        }
        case 'distribution': {
          this.set_activeModel(this.get_distributionModel());
          break;
        }
        default: {
          break;
        }
      }
      this.get_lineModel().update(newPresModel.editReferenceLine, context);
      this.get_bandModel().update(newPresModel.editReferenceBand, context);
      this.get_distributionModel().update(newPresModel.editDistribution, context);
      this.raiseEvent(this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReferenceLineModel
  var $tab_ReferenceLineModel = global.tab.ReferenceLineModel = ss.mkType($asm, 'tab.ReferenceLineModel', function(parent) {
    this.$2$ModelUpdatedField = null;
    this.$2$ValidFormulaTypesField = null;
    this.$2$FieldPickerComboField = null;
    this.$2$ConfidenceLevelComboField = null;
    tab.Model.call(this, parent, new tab.PresModelPathItem('referenceLine'.toString(), null));
    this.pm = {};
    this.set_fieldPickerCombo(new $tab_FieldPickerComboModel(this));
    this.set_confidenceLevelCombo(new tab.EditValueWidgetModel(this, 'confidenceLevelCombo'));
  }, {
    add_modelUpdated: function ReferenceLineModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function ReferenceLineModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    get_refLinePresModel: function ReferenceLineModel$get_RefLinePresModel() {
      return this.pm;
    },
    get_refLineId: function ReferenceLineModel$get_RefLineId() {
      return this.get_refLinePresModel().refLineId || '';
    },
    get_visualId: function ReferenceLineModel$get_VisualId() {
      return this.get_refLinePresModel().visualIdPresModel;
    },
    get_scopeType: function ReferenceLineModel$get_ScopeType() {
      return ss.coalesce(this.get_refLinePresModel().referenceLineScopeType, 'per-pane');
    },
    get_labelType: function ReferenceLineModel$get_LabelType() {
      return ss.coalesce(this.get_refLinePresModel().referenceLineLabelType, 'automatic');
    },
    get_tooltipType: function ReferenceLineModel$get_TooltipType() {
      return ss.coalesce(this.get_refLinePresModel().referenceLineTooltipType, 'automatic');
    },
    get_customLabel: function ReferenceLineModel$get_CustomLabel() {
      return this.get_refLinePresModel().label || '';
    },
    get_customTooltip: function ReferenceLineModel$get_CustomTooltip() {
      return this.get_refLinePresModel().tooltipText || '';
    },
    get_formulaType: function ReferenceLineModel$get_FormulaType() {
      return ss.coalesce(this.get_refLinePresModel().referenceLineFormulaType, 'average');
    },
    get_validFormulaTypes: function ReferenceLineModel$get_ValidFormulaTypes() {
      return this.$2$ValidFormulaTypesField;
    },
    set_validFormulaTypes: function ReferenceLineModel$set_ValidFormulaTypes(value) {
      this.$2$ValidFormulaTypesField = value;
    },
    get_validLabelTypes: function ReferenceLineModel$get_ValidLabelTypes() {
      var retValue = [];
      if (ss.isNullOrUndefined(this.get_refLinePresModel().validReferenceLineLabelTypes)) {
        return retValue;
      }
      var $t1 = this.get_refLinePresModel().validReferenceLineLabelTypes;
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var label = $t1[$t2];
        retValue.push({ key: label.referenceLineLabelType, value: label.displayText });
      }
      return retValue;
    },
    get_validTooltipTypes: function ReferenceLineModel$get_ValidTooltipTypes() {
      var retValue = [];
      if (ss.isNullOrUndefined(this.get_refLinePresModel().validReferenceLineTooltipTypes)) {
        return retValue;
      }
      var $t1 = this.get_refLinePresModel().validReferenceLineTooltipTypes;
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var tooltip = $t1[$t2];
        retValue.push({ key: tooltip.referenceLineTooltipType, value: tooltip.displayText });
      }
      return retValue;
    },
    get_validCustomLabelTags: function ReferenceLineModel$get_ValidCustomLabelTags() {
      var retValue = [];
      if (ss.isNullOrUndefined(this.get_refLinePresModel().validReferenceLineCustomLabelTags)) {
        return retValue;
      }
      var $t1 = this.get_refLinePresModel().validReferenceLineCustomLabelTags;
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var tag = $t1[$t2];
        retValue.push(tag);
      }
      return retValue;
    },
    get_fieldPickerCombo: function ReferenceLineModel$get_FieldPickerCombo() {
      return this.$2$FieldPickerComboField;
    },
    set_fieldPickerCombo: function ReferenceLineModel$set_FieldPickerCombo(value) {
      this.$2$FieldPickerComboField = value;
    },
    get_confidenceLevelCombo: function ReferenceLineModel$get_ConfidenceLevelCombo() {
      return this.$2$ConfidenceLevelComboField;
    },
    set_confidenceLevelCombo: function ReferenceLineModel$set_ConfidenceLevelCombo(value) {
      this.$2$ConfidenceLevelComboField = value;
    },
    get_formattedConstantValue: function ReferenceLineModel$get_FormattedConstantValue() {
      return this.get_refLinePresModel().formattedValue || '';
    },
    get_isConfidenceIntervalAllowed: function ReferenceLineModel$get_IsConfidenceIntervalAllowed() {
      return this.get_refLinePresModel().confidenceIntervalAllowed;
    },
    get_isInstantAnalyticsAllowed: function ReferenceLineModel$get_IsInstantAnalyticsAllowed() {
      return this.get_refLinePresModel().instantAnalyticsAllowed;
    },
    get_confidenceIntervalSelectedState: function ReferenceLineModel$get_ConfidenceIntervalSelectedState() {
      return this.get_refLinePresModel().confidenceIntervalSelectedState;
    },
    get_confidenceIntervalStates: function ReferenceLineModel$get_ConfidenceIntervalStates() {
      var states = [];
      if (ss.isNullOrUndefined(this.get_refLinePresModel().translatedConfidenceIntervalStates)) {
        return states;
      }
      var $t1 = this.get_refLinePresModel().translatedConfidenceIntervalStates;
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var state = $t1[$t2];
        states.push({ key: state.confidenceIntervalState, value: state.displayText });
      }
      return states;
    },
    get_instantAnalyticsEnabled: function ReferenceLineModel$get_InstantAnalyticsEnabled() {
      return this.get_refLinePresModel().enableInstantAnalytics;
    },
    get_isParameterSelected: function ReferenceLineModel$get_IsParameterSelected() {
      return this.get_refLinePresModel().isParameterSelected;
    },
    $formulaPresModelToArray: function ReferenceLineModel$FormulaPresModelToArray(pm) {
      var emptyFormulas = [];
      if (ss.isNullOrUndefined(pm)) {
        return emptyFormulas;
      }
      return emptyFormulas.concat.apply(emptyFormulas, pm);
    },
    update: function ReferenceLineModel$Update(refLinePresModel, context) {
      if (ss.isValue(refLinePresModel)) {
        this.get_fieldPickerCombo().update(refLinePresModel.fieldPickerCombo, context);
        this.get_confidenceLevelCombo().update(refLinePresModel.confidenceLevelCombo, context);
        this.set_validFormulaTypes(this.$formulaPresModelToArray(refLinePresModel.validReferenceLineFormulaTypes));
      }
      this.simpleSwapToUpdate(refLinePresModel, this.$2$ModelUpdatedField, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReleaseComponentCmd
  var $tab_ReleaseComponentCmd = global.tab.ReleaseComponentCmd = ss.mkType($asm, 'tab.ReleaseComponentCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ReleaseComponentCmd$Response]).call(this);
  }, {
    get_commandId: function ReleaseComponentCmd$get_CommandId() {
      return $tab_ReleaseComponentCmd.cmdId;
    },
    invoke: function ReleaseComponentCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'release-component' }, this.cmdParams));
    },
    validateInvokeParams: function ReleaseComponentCmd$ValidateInvokeParams() {
      if (ss.keyExists(this.cmdParams, 'componentId') === ss.keyExists(this.cmdParams, 'uuid')) {
        throw new ss.Exception('must have one and only one of params DocParams.ComponentID and DocParams.UUID');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReleaseComponentCmd.Response
  var $tab_ReleaseComponentCmd$Response = global.tab.ReleaseComponentCmd$Response = ss.mkType($asm, 'tab.ReleaseComponentCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReorderSheetsCmd
  var $tab_ReorderSheetsCmd = global.tab.ReorderSheetsCmd = ss.mkType($asm, 'tab.ReorderSheetsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ReorderSheetsCmd$Response]).call(this);
  }, {
    get_commandId: function ReorderSheetsCmd$get_CommandId() {
      return $tab_ReorderSheetsCmd.cmdId;
    },
    invoke: function ReorderSheetsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'reorder-sheets' }, this.cmdParams));
    },
    validateInvokeParams: function ReorderSheetsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'sheetTabPositions')) {
        throw new ss.Exception('missing param DocParams.SheetTabPositions');
      }
      if (!ss.keyExists(this.cmdParams, 'positionToInsertTabsAt')) {
        throw new ss.Exception('missing param DocParams.PositionToInsertTabsAt');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReorderSheetsCmd.Response
  var $tab_ReorderSheetsCmd$Response = global.tab.ReorderSheetsCmd$Response = ss.mkType($asm, 'tab.ReorderSheetsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReplaceDataSourceWithDataServerDataSourceServerCmd
  var $tab_ReplaceDataSourceWithDataServerDataSourceServerCmd = global.tab.ReplaceDataSourceWithDataServerDataSourceServerCmd = ss.mkType($asm, 'tab.ReplaceDataSourceWithDataServerDataSourceServerCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ReplaceDataSourceWithDataServerDataSourceServerCmd$Response]).call(this);
  }, {
    get_commandId: function ReplaceDataSourceWithDataServerDataSourceServerCmd$get_CommandId() {
      return $tab_ReplaceDataSourceWithDataServerDataSourceServerCmd.cmdId;
    },
    invoke: function ReplaceDataSourceWithDataServerDataSourceServerCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabsrv', cmd: 'replace-data-source-with-data-server-data-source-server' }, this.cmdParams));
    },
    validateInvokeParams: function ReplaceDataSourceWithDataServerDataSourceServerCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'repositoryUrl')) {
        throw new ss.Exception('missing param DocParams.RepositoryUrl');
      }
      if (!ss.keyExists(this.cmdParams, 'datasourceDatabaseName')) {
        throw new ss.Exception('missing param DocParams.DatabaseName');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReplaceDataSourceWithDataServerDataSourceServerCmd.Response
  var $tab_ReplaceDataSourceWithDataServerDataSourceServerCmd$Response = global.tab.ReplaceDataSourceWithDataServerDataSourceServerCmd$Response = ss.mkType($asm, 'tab.ReplaceDataSourceWithDataServerDataSourceServerCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReplaceZoneCmd
  var $tab_ReplaceZoneCmd = global.tab.ReplaceZoneCmd = ss.mkType($asm, 'tab.ReplaceZoneCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ReplaceZoneCmd$Response]).call(this);
  }, {
    get_commandId: function ReplaceZoneCmd$get_CommandId() {
      return $tab_ReplaceZoneCmd.cmdId;
    },
    invoke: function ReplaceZoneCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'replace-zone' }, this.cmdParams));
    },
    validateInvokeParams: function ReplaceZoneCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ReplaceZoneCmd.Response
  var $tab_ReplaceZoneCmd$Response = global.tab.ReplaceZoneCmd$Response = ss.mkType($asm, 'tab.ReplaceZoneCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    hasNewZoneID: function Response$HasNewZoneID() {
      return true;
    },
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ResetCategoricalColorMapCmd
  var $tab_ResetCategoricalColorMapCmd = global.tab.ResetCategoricalColorMapCmd = ss.mkType($asm, 'tab.ResetCategoricalColorMapCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ResetCategoricalColorMapCmd$Response]).call(this);
  }, {
    get_commandId: function ResetCategoricalColorMapCmd$get_CommandId() {
      return $tab_ResetCategoricalColorMapCmd.cmdId;
    },
    invoke: function ResetCategoricalColorMapCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'reset-categorical-color-map' }, this.cmdParams));
    },
    validateInvokeParams: function ResetCategoricalColorMapCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'componentId')) {
        throw new ss.Exception('missing param DocParams.ComponentID');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ResetCategoricalColorMapCmd.Response
  var $tab_ResetCategoricalColorMapCmd$Response = global.tab.ResetCategoricalColorMapCmd$Response = ss.mkType($asm, 'tab.ResetCategoricalColorMapCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SaveAsCmd
  var $tab_SaveAsCmd = global.tab.SaveAsCmd = ss.mkType($asm, 'tab.SaveAsCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_SaveAsCmd$Response]).call(this);
  }, {
    get_commandId: function SaveAsCmd$get_CommandId() {
      return $tab_SaveAsCmd.cmdId;
    },
    validateInvokeParams: function SaveAsCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SaveAsCmd.Response
  var $tab_SaveAsCmd$Response = global.tab.SaveAsCmd$Response = ss.mkType($asm, 'tab.SaveAsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SaveCmd
  var $tab_SaveCmd = global.tab.SaveCmd = ss.mkType($asm, 'tab.SaveCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_SaveCmd$Response]).call(this);
  }, {
    get_commandId: function SaveCmd$get_CommandId() {
      return $tab_SaveCmd.cmdId;
    },
    validateInvokeParams: function SaveCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SaveCmd.Response
  var $tab_SaveCmd$Response = global.tab.SaveCmd$Response = ss.mkType($asm, 'tab.SaveCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SaveDatasourceDialogModel
  var $tab_SaveDatasourceDialogModel = global.tab.SaveDatasourceDialogModel = ss.mkType($asm, 'tab.SaveDatasourceDialogModel', function() {
    this.$2$ModelUpdatedField = null;
    this.$2$StopNotifyingField = null;
    tab.Model.call(this, null, new tab.PresModelPathItem('doc:web-save-datasource-dialog-event'.toString(), null));
    this.pm = { saveDatasourceDialog: {} };
  }, {
    add_modelUpdated: function SaveDatasourceDialogModel$add_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateCombine(this.$2$ModelUpdatedField, value);
    },
    remove_modelUpdated: function SaveDatasourceDialogModel$remove_ModelUpdated(value) {
      this.$2$ModelUpdatedField = ss.delegateRemove(this.$2$ModelUpdatedField, value);
    },
    add_stopNotifying: function SaveDatasourceDialogModel$add_StopNotifying(value) {
      this.$2$StopNotifyingField = ss.delegateCombine(this.$2$StopNotifyingField, value);
    },
    remove_stopNotifying: function SaveDatasourceDialogModel$remove_StopNotifying(value) {
      this.$2$StopNotifyingField = ss.delegateRemove(this.$2$StopNotifyingField, value);
    },
    get_notificationId: function SaveDatasourceDialogModel$get_NotificationId() {
      return 'doc:web-save-datasource-dialog-event';
    },
    get_dialogPresModel: function SaveDatasourceDialogModel$get_DialogPresModel() {
      return this.pm.saveDatasourceDialog;
    },
    get_datasourceId: function SaveDatasourceDialogModel$get_DatasourceId() {
      return this.get_dialogPresModel().datasource || '';
    },
    get_datasourceCaption: function SaveDatasourceDialogModel$get_DatasourceCaption() {
      return this.get_dialogPresModel().datasourceCaption || '';
    },
    onNotify: function SaveDatasourceDialogModel$OnNotify(pm, context) {
      this.simpleSwapToUpdate(pm, this.$2$ModelUpdatedField, context);
    },
    detachNotifications: function SaveDatasourceDialogModel$DetachNotifications() {
      if (!ss.staticEquals(this.$2$StopNotifyingField, null)) {
        this.$2$StopNotifyingField();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SaveOrSaveAsCmd
  var $tab_SaveOrSaveAsCmd = global.tab.SaveOrSaveAsCmd = ss.mkType($asm, 'tab.SaveOrSaveAsCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_SaveOrSaveAsCmd$Response]).call(this);
  }, {
    get_commandId: function SaveOrSaveAsCmd$get_CommandId() {
      return $tab_SaveOrSaveAsCmd.cmdId;
    },
    validateInvokeParams: function SaveOrSaveAsCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SaveOrSaveAsCmd.Response
  var $tab_SaveOrSaveAsCmd$Response = global.tab.SaveOrSaveAsCmd$Response = ss.mkType($asm, 'tab.SaveOrSaveAsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SelectZoneParentCmd
  var $tab_SelectZoneParentCmd = global.tab.SelectZoneParentCmd = ss.mkType($asm, 'tab.SelectZoneParentCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SelectZoneParentCmd$Response]).call(this);
  }, {
    get_commandId: function SelectZoneParentCmd$get_CommandId() {
      return $tab_SelectZoneParentCmd.cmdId;
    },
    invoke: function SelectZoneParentCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'select-zone-parent' }, this.cmdParams));
    },
    validateInvokeParams: function SelectZoneParentCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SelectZoneParentCmd.Response
  var $tab_SelectZoneParentCmd$Response = global.tab.SelectZoneParentCmd$Response = ss.mkType($asm, 'tab.SelectZoneParentCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetCategoricalLegendItemColorCmd
  var $tab_SetCategoricalLegendItemColorCmd = global.tab.SetCategoricalLegendItemColorCmd = ss.mkType($asm, 'tab.SetCategoricalLegendItemColorCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetCategoricalLegendItemColorCmd$Response]).call(this);
  }, {
    get_commandId: function SetCategoricalLegendItemColorCmd$get_CommandId() {
      return $tab_SetCategoricalLegendItemColorCmd.cmdId;
    },
    invoke: function SetCategoricalLegendItemColorCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-categorical-legend-item-color' }, this.cmdParams));
    },
    validateInvokeParams: function SetCategoricalLegendItemColorCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'componentId')) {
        throw new ss.Exception('missing param DocParams.ComponentID');
      }
      if (!ss.keyExists(this.cmdParams, 'color')) {
        throw new ss.Exception('missing param DocParams.Color');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetCategoricalLegendItemColorCmd.Response
  var $tab_SetCategoricalLegendItemColorCmd$Response = global.tab.SetCategoricalLegendItemColorCmd$Response = ss.mkType($asm, 'tab.SetCategoricalLegendItemColorCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetDensityColorEncodingCmd
  var $tab_SetDensityColorEncodingCmd = global.tab.SetDensityColorEncodingCmd = ss.mkType($asm, 'tab.SetDensityColorEncodingCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetDensityColorEncodingCmd$Response]).call(this);
  }, {
    get_commandId: function SetDensityColorEncodingCmd$get_CommandId() {
      return $tab_SetDensityColorEncodingCmd.cmdId;
    },
    invoke: function SetDensityColorEncodingCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-density-color-encoding' }, this.cmdParams));
    },
    validateInvokeParams: function SetDensityColorEncodingCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'densityColorPalette')) {
        throw new ss.Exception('missing param DocParams.DensityColorPalette');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetDensityColorEncodingCmd.Response
  var $tab_SetDensityColorEncodingCmd$Response = global.tab.SetDensityColorEncodingCmd$Response = ss.mkType($asm, 'tab.SetDensityColorEncodingCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetDensityIntensityCmd
  var $tab_SetDensityIntensityCmd = global.tab.SetDensityIntensityCmd = ss.mkType($asm, 'tab.SetDensityIntensityCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetDensityIntensityCmd$Response]).call(this);
  }, {
    get_commandId: function SetDensityIntensityCmd$get_CommandId() {
      return $tab_SetDensityIntensityCmd.cmdId;
    },
    invoke: function SetDensityIntensityCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-density-intensity' }, this.cmdParams));
    },
    validateInvokeParams: function SetDensityIntensityCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'densityIntensityPercentage')) {
        throw new ss.Exception('missing param DocParams.DensityIntensityPercentage');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetDensityIntensityCmd.Response
  var $tab_SetDensityIntensityCmd$Response = global.tab.SetDensityIntensityCmd$Response = ss.mkType($asm, 'tab.SetDensityIntensityCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetDensityKernelSizeCmd
  var $tab_SetDensityKernelSizeCmd = global.tab.SetDensityKernelSizeCmd = ss.mkType($asm, 'tab.SetDensityKernelSizeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetDensityKernelSizeCmd$Response]).call(this);
  }, {
    get_commandId: function SetDensityKernelSizeCmd$get_CommandId() {
      return $tab_SetDensityKernelSizeCmd.cmdId;
    },
    invoke: function SetDensityKernelSizeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-density-kernel-size' }, this.cmdParams));
    },
    validateInvokeParams: function SetDensityKernelSizeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'densityKernelSize')) {
        throw new ss.Exception('missing param DocParams.DensityKernelSize');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetDensityKernelSizeCmd.Response
  var $tab_SetDensityKernelSizeCmd$Response = global.tab.SetDensityKernelSizeCmd$Response = ss.mkType($asm, 'tab.SetDensityKernelSizeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetSelectedLegendItemsCmd
  var $tab_SetSelectedLegendItemsCmd = global.tab.SetSelectedLegendItemsCmd = ss.mkType($asm, 'tab.SetSelectedLegendItemsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetSelectedLegendItemsCmd$Response]).call(this);
  }, {
    get_commandId: function SetSelectedLegendItemsCmd$get_CommandId() {
      return $tab_SetSelectedLegendItemsCmd.cmdId;
    },
    invoke: function SetSelectedLegendItemsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-selected-legend-items' }, this.cmdParams));
    },
    validateInvokeParams: function SetSelectedLegendItemsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'componentId')) {
        throw new ss.Exception('missing param DocParams.ComponentID');
      }
      if (!ss.keyExists(this.cmdParams, 'itemIndices')) {
        throw new ss.Exception('missing param DocParams.ItemIndices');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetSelectedLegendItemsCmd.Response
  var $tab_SetSelectedLegendItemsCmd$Response = global.tab.SetSelectedLegendItemsCmd$Response = ss.mkType($asm, 'tab.SetSelectedLegendItemsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetSidePaneExpansionStateCmd
  var $tab_SetSidePaneExpansionStateCmd = global.tab.SetSidePaneExpansionStateCmd = ss.mkType($asm, 'tab.SetSidePaneExpansionStateCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetSidePaneExpansionStateCmd$Response]).call(this);
  }, {
    get_commandId: function SetSidePaneExpansionStateCmd$get_CommandId() {
      return $tab_SetSidePaneExpansionStateCmd.cmdId;
    },
    invoke: function SetSidePaneExpansionStateCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-side-pane-expansion-state' }, this.cmdParams));
    },
    validateInvokeParams: function SetSidePaneExpansionStateCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'sidePaneExpansionState')) {
        throw new ss.Exception('missing param DocParams.SidePaneExpansionState');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetSidePaneExpansionStateCmd.Response
  var $tab_SetSidePaneExpansionStateCmd$Response = global.tab.SetSidePaneExpansionStateCmd$Response = ss.mkType($asm, 'tab.SetSidePaneExpansionStateCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetStackZoneChildSizeCmd
  var $tab_SetStackZoneChildSizeCmd = global.tab.SetStackZoneChildSizeCmd = ss.mkType($asm, 'tab.SetStackZoneChildSizeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetStackZoneChildSizeCmd$Response]).call(this);
  }, {
    get_commandId: function SetStackZoneChildSizeCmd$get_CommandId() {
      return $tab_SetStackZoneChildSizeCmd.cmdId;
    },
    invoke: function SetStackZoneChildSizeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-stack-zone-child-size' }, this.cmdParams));
    },
    validateInvokeParams: function SetStackZoneChildSizeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'size')) {
        throw new ss.Exception('missing param DocParams.Size');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetStackZoneChildSizeCmd.Response
  var $tab_SetStackZoneChildSizeCmd$Response = global.tab.SetStackZoneChildSizeCmd$Response = ss.mkType($asm, 'tab.SetStackZoneChildSizeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetZoneIsFixedSizeCmd
  var $tab_SetZoneIsFixedSizeCmd = global.tab.SetZoneIsFixedSizeCmd = ss.mkType($asm, 'tab.SetZoneIsFixedSizeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetZoneIsFixedSizeCmd$Response]).call(this);
  }, {
    get_commandId: function SetZoneIsFixedSizeCmd$get_CommandId() {
      return $tab_SetZoneIsFixedSizeCmd.cmdId;
    },
    invoke: function SetZoneIsFixedSizeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-zone-is-fixed-size' }, this.cmdParams));
    },
    validateInvokeParams: function SetZoneIsFixedSizeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'state')) {
        throw new ss.Exception('missing param DocParams.State');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetZoneIsFixedSizeCmd.Response
  var $tab_SetZoneIsFixedSizeCmd$Response = global.tab.SetZoneIsFixedSizeCmd$Response = ss.mkType($asm, 'tab.SetZoneIsFixedSizeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetZoneStyleCmd
  var $tab_SetZoneStyleCmd = global.tab.SetZoneStyleCmd = ss.mkType($asm, 'tab.SetZoneStyleCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetZoneStyleCmd$Response]).call(this);
  }, {
    get_commandId: function SetZoneStyleCmd$get_CommandId() {
      return $tab_SetZoneStyleCmd.cmdId;
    },
    invoke: function SetZoneStyleCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-zone-style' }, this.cmdParams));
    },
    validateInvokeParams: function SetZoneStyleCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'styledBox')) {
        throw new ss.Exception('missing param DocParams.StyledBox');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SetZoneStyleCmd.Response
  var $tab_SetZoneStyleCmd$Response = global.tab.SetZoneStyleCmd$Response = ss.mkType($asm, 'tab.SetZoneStyleCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.Utility.SheetThumbnailCache
  var $tab_SheetThumbnailCache = global.tab.SheetThumbnailCache = ss.mkType($asm, 'tab.SheetThumbnailCache', function() {
    this.$thumbnailCache = null;
    this.$thumbnailCache = new (ss.makeGenericType(tab.LruCache$2, [String, String]))($tab_SheetThumbnailCache.$maxCacheEntries);
  }, {
    hasThumbnail: function SheetThumbnailCache$HasThumbnail(sheetName) {
      return this.$thumbnailCache.has(sheetName);
    },
    getThumbnail: function SheetThumbnailCache$GetThumbnail(sheetName) {
      var thumbnailResult = $.Deferred();
      if (this.hasThumbnail(sheetName)) {
        return thumbnailResult.resolve(this.$thumbnailCache.get(sheetName));
      }
      tab.DashboardClientCommands.getThumbnailImage(sheetName).done(ss.mkdel(this, function(r) {
        this.$handleNewThumbnailImage(r, sheetName, thumbnailResult);
      })).fail(function() {
        thumbnailResult.reject();
      });
      return thumbnailResult.promise();
    },
    delete$1: function SheetThumbnailCache$Delete(sheetName) {
      if (this.hasThumbnail(sheetName)) {
        this.$thumbnailCache.delete$1(sheetName);
      }
    },
    $handleNewThumbnailImage: function SheetThumbnailCache$HandleNewThumbnailImage(r, sheetName, thumbnailResult) {
      var thumbnailValue = ss.coalesce(r.$$cmdParams['image'], '');
      this.$thumbnailCache.add(sheetName, thumbnailValue);
      thumbnailResult.resolve(thumbnailValue);
    },
    clear: function SheetThumbnailCache$Clear() {
      if (ss.isValue(this.$thumbnailCache)) {
        this.$thumbnailCache.clear();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.ShelfClientCommands
  var $tab_ShelfClientCommands = global.tab.ShelfClientCommands = ss.mkType($asm, 'tab.ShelfClientCommands', null, null, {
    get_$log: function ShelfClientCommands$get_Log() {
      return tab.Logger.getLoggerWithName(ss.getTypeName($tab_ShelfClientCommands) + tsConfig.layoutid);
    },
    setItemEncodingType: function ShelfClientCommands$SetItemEncodingType(sm, pm, et) {
      var cmdParams = {};
      tab.CommandUtils.addVisualIdToCommand(cmdParams, $tab_ShelfClientCommands.$getVisualIdForCurrentContext());
      cmdParams['paneSpec'] = sm.get_paneId().toString();
      cmdParams['position'] = ss.indexOf(sm.get_pills(), pm).toString();
      cmdParams['encodingType'] = et.toString();
      cmdParams['shelfType'] = sm.get_shelfType().toString();
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'set-item-encoding-type' }, cmdParams);
      tab.ServerCommands.executeServerCommand(c, 'immediately', null, null);
    },
    startDrag: function ShelfClientCommands$StartDrag(f, t, activePaneSpecId, isRightDrag) {
      var deferred = $.Deferred();
      var cmdParams = {};
      cmdParams['worksheet'] = tsConfig.current_sheet_name;
      cmdParams['isRightDrag'] = JSON.stringify(isRightDrag);
      if (ss.isValue(activePaneSpecId)) {
        cmdParams['paneSpec'] = JSON.stringify(activePaneSpecId);
      }
      $tab_ShelfClientCommands.$createFieldEncodingPM(cmdParams, f, t);
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'get-drag-pres-model' }, cmdParams);
      tab.ServerCommands.executeServerCommand(c, 'none', function(pm) {
        deferred.resolve(pm);
      }, function(e) {
        deferred.reject();
      });
      return deferred;
    },
    executeDragToShowMe: function ShelfClientCommands$ExecuteDragToShowMe(visualId, infoWrapper, activePaneSpecId) {
      ss.Debug.assert(ss.isValue(visualId), 'ShelfClientCommands.ExecuteDragToShowMe: must provide a visualIDPresModel');
      ss.Debug.assert(ss.isValue(infoWrapper), 'ShelfClientCommands.ExecuteDragToShowMe: must provide a DragToShowMeInfoWrapper');
      ss.Debug.assert(ss.isValue(infoWrapper.infoList) && infoWrapper.infoList.length > 0, 'ShelfClientCommands.ExecuteDragToShowMe: the DragToShowMeInfoWraper cannot be empty');
      var deferred = $.Deferred();
      var c = { commandNamespace: { ns: 'tabdoc', cmd: 'drop-on-showme' }.ns, commandName: { ns: 'tabdoc', cmd: 'drop-on-showme' }.cmd, commandParams: {} };
      $tab_ShelfClientCommands.$createFieldEncodingPM(c.commandParams, infoWrapper.get_allFieldModels(), 'invalid-encoding');
      c.commandParams['visualIdPresModel'] = JSON.stringify(visualId);
      c.commandParams['shelfDropContext'] = 'none';
      c.commandParams['isCopy'] = infoWrapper.isCopyDrag;
      c.commandParams['isDeadDrop'] = false;
      c.commandParams['dragSource'] = (infoWrapper.isFromDataSchemaPane ? 'drag-drop-schema' : 'drag-drop-shelf');
      c.commandParams['dropTarget'] = 'drag-drop-viz';
      c.commandParams['dragDescription'] = '';
      c.commandParams['shelfDragSourcePosition'] = $tab_ShelfClientCommands.$createDragSourcePositionForShowMe(infoWrapper);
      c.commandParams['shelfDropTargetPosition'] = $tab_ShelfClientCommands.$createDropTargetPositionForShowMe();
      c.commandParams['isShiftDrag'] = infoWrapper.isShiftDrag;
      c.commandParams['worksheet'] = tsConfig.current_sheet_name;
      c.commandParams['dashboard'] = tab.ModelUtils.findContentDashboard(null).pm.sheetPath;
      c.commandParams['isRightDrag'] = false;
      if (ss.isValue(activePaneSpecId)) {
        c.commandParams['paneSpec'] = ss.unbox(activePaneSpecId);
      }
      var prepareDropCmd = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-prepare' }, c.commandParams);
      tab.ServerCommands.executeServerCommand(prepareDropCmd, 'immediately', function(model) {
        tab.ServerCommands.executeServerCommand(c, 'immediately', function(pm) {
          deferred.resolve(pm);
        }, function(arg) {
          deferred.reject();
        });
      }, function(exception) {
        $tab_ShelfClientCommands.get_$log().error(exception.get_message(), []);
      });
    },
    $createDropTargetPositionForShowMe: function ShelfClientCommands$CreateDropTargetPositionForShowMe() {
      return { shelfType: 'show-me-shelf', shelfPosIndex: 0, shelfDropAction: 'replace', isFolded: false, isOverlay: true };
    },
    $createDragSourcePositionForShowMe: function ShelfClientCommands$CreateDragSourcePositionForShowMe(infoWrapper) {
      var sourcePos = { shelfPosIndex: (infoWrapper.isFromDataSchemaPane ? -1 : 0), shelfDropAction: (infoWrapper.isFromDataSchemaPane ? 'insert' : 'replace') };
      if (infoWrapper.isFromDataSchemaPane) {
        sourcePos.shelfType = 'none-shelf';
      }
      return sourcePos;
    },
    getShelfItemContextMenu: function ShelfClientCommands$GetShelfItemContextMenu(shelfItemId, shelfType, paneId) {
      var $t1 = new $tab_BuildShelfItemContextMenuCmd();
      $t1.cmdParams['shelfItemId'] = shelfItemId | 0;
      $t1.cmdParams['shelfType'] = shelfType;
      $t1.cmdParams['paneSpec'] = paneId | 0;
      $t1.cmdParams['isMobile'] = tsConfig.is_mobile;
      return $t1.invoke();
    },
    drillOnPill: function ShelfClientCommands$DrillOnPill(shelf, p, index) {
      var cmdParams = {};
      cmdParams['worksheet'] = tsConfig.current_sheet_name;
      cmdParams['shelfType'] = shelf.get_shelfType().toString();
      cmdParams['position'] = index.toString();
      cmdParams['drillDown'] = JSON.stringify(p.get_shouldDrill());
      if (shelf.get_shelfType() === 'encoding-shelf') {
        cmdParams['paneSpec'] = shelf.get_paneId().toString();
      }
      var c = tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'level-drill-up-down' }, cmdParams);
      tab.CommandController.SendCommand(tab.RemoteClientCommand.create(c, 'immediately', null, null));
    },
    removeShelfPill: function ShelfClientCommands$RemoveShelfPill(shelf, p) {
      var command = $tab_ShelfClientCommands.$createDropOnShelfCommand();
      command.commandName = { ns: 'tabdoc', cmd: 'drop-nowhere' }.cmd;
      var cmdParams = command.commandParams;
      cmdParams['paneSpec'] = shelf.get_paneId();
      cmdParams['dragDescription'] = shelf.get_shelfType().toString();
      $tab_ShelfClientCommands.$setFieldEncoding(cmdParams, p.get_column(), p.get_encodingType());
      cmdParams['shelfSelection'] = [p.pm.shelfItemId];
      cmdParams['dragSource'] = 'drag-drop-shelf';
      var dragPos = cmdParams['shelfDragSourcePosition'];
      dragPos.shelfType = shelf.get_shelfType();
      dragPos.shelfPosIndex = ss.indexOf(shelf.get_pills(), p);
      dragPos.shelfDropAction = 'replace';
      var cc = new tab.ClientCommand('immediately', function(t) {
        $tab_ShelfClientCommands.$removeShelfItem(t.makeMutablePresModel(shelf, false), p.pm);
      }, command, null, null);
      tab.CommandController.SendCommand(cc);
    },
    replaceShelfPill: function ShelfClientCommands$ReplaceShelfPill(srcShelf, src, targetShelf, target, dropPos, isRightDrop) {
      var srcIndex = ss.indexOf(srcShelf.get_pills(), src);
      var targetIndex = dropPos.shelfPosIndex;
      var command = $tab_ShelfClientCommands.$createDropOnShelfCommand();
      var cmdParams = command.commandParams;
      $tab_ShelfClientCommands.$setFieldEncoding(cmdParams, src.get_column(), src.get_encodingType());
      cmdParams['shelfSelection'] = [src.pm.shelfItemId];
      cmdParams['dragSource'] = 'drag-drop-shelf';
      var dragPos = cmdParams['shelfDragSourcePosition'];
      dragPos.shelfType = srcShelf.get_shelfType();
      dragPos.shelfPosIndex = srcIndex;
      dragPos.shelfDropAction = 'replace';
      cmdParams['paneSpec'] = targetShelf.get_paneId();
      cmdParams['dropTarget'] = 'drag-drop-shelf';
      if (ss.isNullOrUndefined(dropPos)) {
        dropPos = cmdParams['shelfDropTargetPosition'];
        dropPos.shelfType = targetShelf.get_shelfType();
        dropPos.shelfPosIndex = targetIndex;
        dropPos.encodingType = target.get_encodingType();
        dropPos.shelfDropAction = 'replace';
      }
      else {
        cmdParams['shelfDropTargetPosition'] = dropPos;
      }
      if (isRightDrop) {
        cmdParams['isCopy'] = $tab_ShelfClientCommands.$jsonTrueStr;
      }
      var cc = new $tab_$ShelfDropClientCommand(ss.mkdel(this, function(t) {
        if (!isRightDrop) {
          var shelfPm = t.makeMutablePresModel(srcShelf, false);
          $tab_ShelfClientCommands.$removeShelfItem(shelfPm, src.pm);
        }
        var targetShelfPm = t.makeMutablePresModel(targetShelf, false);
        $tab_ShelfClientCommands.$removeShelfItem(targetShelfPm, target.pm);
        var newItem = { displayText: src.pm.displayText, fn: src.pm.fn, encodingType: target.get_encodingType(), encodingUiItems: target.pm.encodingUiItems };
        $tab_ShelfClientCommands.$addShelfItem(targetShelfPm, newItem, dropPos, 0);
      }), command, targetShelf.get_shelfType(), false);
      tab.CommandController.SendCommand(cc);
    },
    moveShelfPill: function ShelfClientCommands$MoveShelfPill(srcShelf, targetShelf, p, dropPos, isRightDrop) {
      var command = $tab_ShelfClientCommands.$createDropOnShelfCommand();
      var cmdParams = command.commandParams;
      cmdParams['shelfSelection'] = [p.pm.shelfItemId];
      $tab_ShelfClientCommands.$setFieldEncoding(cmdParams, p.get_column(), p.get_encodingType());
      if (isRightDrop) {
        cmdParams['isCopy'] = $tab_ShelfClientCommands.$jsonTrueStr;
      }
      cmdParams['dragSource'] = 'drag-drop-shelf';
      var dragPos = cmdParams['shelfDragSourcePosition'];
      dragPos.shelfType = srcShelf.get_shelfType();
      dragPos.shelfPosIndex = ss.indexOf(srcShelf.get_pills(), p);
      dragPos.shelfDropAction = 'replace';
      if (ss.isNullOrUndefined(dropPos)) {
        dropPos = cmdParams['shelfDropTargetPosition'];
        dropPos.shelfType = targetShelf.get_shelfType();
        dropPos.shelfPosIndex = 0;
        dropPos.shelfDropAction = (ss.referenceEquals(srcShelf, targetShelf) ? 'swap' : 'insert');
      }
      cmdParams['dropTarget'] = 'drag-drop-shelf';
      cmdParams['paneSpec'] = targetShelf.get_paneId();
      cmdParams['shelfDropTargetPosition'] = dropPos;
      var cc = new $tab_$ShelfDropClientCommand(ss.mkdel(this, function(t) {
        var newItem = { displayText: p.pm.displayText, fn: p.pm.fn, encodingType: dropPos.encodingType };
        var targetPm = t.makeMutablePresModel(targetShelf, false);
        $tab_ShelfClientCommands.$addShelfItem(targetPm, newItem, dropPos, 0);
        if (!isRightDrop) {
          var srcPm = t.makeMutablePresModel(srcShelf, false);
          $tab_ShelfClientCommands.$removeShelfItem(srcPm, p.pm);
        }
      }), command, targetShelf.get_shelfType(), false);
      tab.CommandController.SendCommand(cc);
    },
    movePillToEncoding: function ShelfClientCommands$MovePillToEncoding(srcShelf, encodingShelf, type, p, isCopyDrop, dropPos) {
      var command = $tab_ShelfClientCommands.$createDropOnShelfCommand();
      var cmdParams = command.commandParams;
      cmdParams['shelfSelection'] = [p.pm.shelfItemId];
      cmdParams['dragSource'] = 'drag-drop-shelf';
      var dragPos = cmdParams['shelfDragSourcePosition'];
      dragPos.shelfType = srcShelf.get_shelfType();
      dragPos.shelfPosIndex = ss.indexOf(srcShelf.get_pills(), p);
      dragPos.encodingType = p.get_encodingType();
      dragPos.shelfDropAction = 'replace';
      dragPos.isOverride = false;
      $tab_ShelfClientCommands.$setFieldEncoding(cmdParams, p.get_column(), p.get_encodingType());
      if (isCopyDrop) {
        cmdParams['isCopy'] = $tab_ShelfClientCommands.$jsonTrueStr;
      }
      if (ss.isNullOrUndefined(dropPos)) {
        dropPos = cmdParams['shelfDropTargetPosition'];
        dropPos.shelfType = 'encoding-shelf';
        dropPos.shelfPosIndex = 0;
        dropPos.shelfDropAction = 'insert';
        dropPos.encodingType = type;
        dropPos.isOverride = true;
      }
      cmdParams['dropTarget'] = 'drag-drop-shelf';
      cmdParams['paneSpec'] = encodingShelf.get_paneId();
      cmdParams['shelfDropTargetPosition'] = JSON.stringify(dropPos);
      var cc = new $tab_$ShelfDropClientCommand(ss.mkdel(this, function(t) {
        if (!isCopyDrop) {
          var srcPm = t.makeMutablePresModel(srcShelf, false);
          $tab_ShelfClientCommands.$removeShelfItem(srcPm, p.pm);
        }
        var newItem = { displayText: p.get_column().get_description(), fn: p.get_column().get_globalName(), encodingType: type, encodingUiItems: p.pm.encodingUiItems };
        var targetPm = t.makeMutablePresModel(encodingShelf, false);
        $tab_ShelfClientCommands.$addShelfItem(targetPm, newItem, dropPos, 0);
      }), command, encodingShelf.get_shelfType(), false);
      tab.CommandController.SendCommand(cc);
    },
    addEncodingFields: function ShelfClientCommands$AddEncodingFields(encodingShelf, fieldColumns, type, dropPos, isShiftDrop, isRightDrag, isDroppingRelativeFilter) {
      var command = $tab_ShelfClientCommands.$createDropOnShelfCommand();
      var cmdParams = command.commandParams;
      if (ss.isNullOrUndefined(dropPos)) {
        dropPos = cmdParams['shelfDropTargetPosition'];
        dropPos.shelfType = 'encoding-shelf';
        dropPos.shelfPosIndex = 0;
        dropPos.shelfDropAction = 'insert';
        dropPos.encodingType = type;
      }
      if (isShiftDrop) {
        cmdParams['isShiftDrag'] = $tab_ShelfClientCommands.$jsonTrueStr;
      }
      if (isRightDrag) {
        cmdParams['isRightDrag'] = $tab_ShelfClientCommands.$jsonTrueStr;
      }
      $tab_ShelfClientCommands.$createFieldEncodingPM(cmdParams, fieldColumns, 'invalid-encoding');
      cmdParams['paneSpec'] = encodingShelf.get_paneId();
      cmdParams['dragSource'] = 'drag-drop-schema';
      cmdParams['dropTarget'] = 'drag-drop-shelf';
      cmdParams['shelfDropTargetPosition'] = JSON.stringify(dropPos);
      var cc = new $tab_$ShelfDropClientCommand(ss.mkdel(this, function(t) {
        var shelfPm = t.makeMutablePresModel(encodingShelf, false);
        for (var $t1 = 0; $t1 < fieldColumns.length; $t1++) {
          var fieldColumn = fieldColumns[$t1];
          var newItem = { displayText: fieldColumn.get_description(), fn: fieldColumn.get_globalName(), encodingType: type, encodingUiItems: [{}] };
          newItem.encodingUiItems[0].isVisible = true;
          newItem.encodingUiItems[0].isEnabled = true;
          newItem.encodingUiItems[0].encodingType = newItem.encodingType;
          $tab_ShelfClientCommands.$addShelfItem(shelfPm, newItem, dropPos, 0);
        }
      }), command, encodingShelf.get_shelfType(), isDroppingRelativeFilter);
      tab.CommandController.SendCommand(cc);
    },
    getFieldAggregationsForDrop: function ShelfClientCommands$GetFieldAggregationsForDrop(fieldName, shelf, success, failure) {
      var $t1 = new tab.GetDropFieldAggregationsCmd();
      $t1.cmdParams['shelfType'] = shelf;
      $t1.cmdParams['fn'] = fieldName;
      $t1.set_uiBlocking('immediately');
      var aggregationCommand = $t1;
      aggregationCommand.invoke().done(function(response) {
        if (response.hasFilterMeasureSelection()) {
          success(response.$$cmdParams['filterSelectMeasure']);
        }
        else {
          failure();
        }
      }).fail(failure);
    },
    launchFilterDialog: function ShelfClientCommands$LaunchFilterDialog(fieldName, dragSource, dropPosition, sourcePosition, forceMenu, isCopy) {
      var $t1 = new $tab_LaunchFilterDialogCmd();
      $t1.cmdParams['fn'] = fieldName;
      $t1.cmdParams['forceUserToChoose'] = forceMenu;
      $t1.set_uiBlocking('immediately');
      $t1.cmdParams['dragSource'] = dragSource;
      $t1.cmdParams['shelfDropTargetPosition'] = dropPosition;
      $t1.cmdParams['isCopy'] = isCopy;
      var filterCommand = $t1;
      if (ss.isValue(sourcePosition)) {
        filterCommand.cmdParams['shelfDragSourcePosition'] = sourcePosition;
      }
      filterCommand.invoke();
    },
    addShelfField: function ShelfClientCommands$AddShelfField(svm, fieldColumns, encoding, dropPos, isRightDrag, isDroppingRelativeFilter) {
      var command = $tab_ShelfClientCommands.$createDropOnShelfCommand();
      var cmdParams = command.commandParams;
      if (ss.isNullOrUndefined(dropPos)) {
        dropPos = cmdParams['shelfDropTargetPosition'];
        dropPos.shelfType = svm.get_shelfType();
        dropPos.shelfPosIndex = 0;
        dropPos.shelfDropAction = 'insert';
        dropPos.encodingType = encoding;
      }
      if (isRightDrag) {
        cmdParams['isRightDrag'] = $tab_ShelfClientCommands.$jsonTrueStr;
      }
      $tab_ShelfClientCommands.$createFieldEncodingPM(cmdParams, fieldColumns, 'invalid-encoding');
      cmdParams['paneSpec'] = svm.get_paneId();
      cmdParams['dragSource'] = 'drag-drop-schema';
      cmdParams['dropTarget'] = 'drag-drop-shelf';
      cmdParams['shelfDropTargetPosition'] = dropPos;
      if (encoding !== 'invalid-encoding') {
        cmdParams['encodingType'] = encoding.toString();
      }
      var cc = new $tab_$ShelfDropClientCommand(ss.mkdel(this, function(t) {
        var offset = 0;
        for (var $t1 = 0; $t1 < fieldColumns.length; $t1++) {
          var fieldColumn = fieldColumns[$t1];
          var newItem = { displayText: fieldColumn.get_description(), fn: fieldColumn.get_globalName(), encodingType: ((svm.get_shelfType() === 'encoding-shelf' && encoding === 'invalid-encoding') ? 'level-of-detail-encoding' : encoding) };
          var shelfPm = t.makeMutablePresModel(svm, false);
          $tab_ShelfClientCommands.$addShelfItem(shelfPm, newItem, dropPos, offset);
          offset++;
        }
      }), command, svm.get_shelfType(), isDroppingRelativeFilter);
      tab.CommandController.SendCommand(cc);
    },
    replaceShelfPillWithField: function ShelfClientCommands$ReplaceShelfPillWithField(targetShelf, target, src, dropPos, isDroppingRelativeFilter) {
      var command = $tab_ShelfClientCommands.$createDropOnShelfCommand();
      var cmdParams = command.commandParams;
      if (ss.isNullOrUndefined(dropPos)) {
        dropPos = cmdParams['shelfDropTargetPosition'];
        dropPos.shelfType = targetShelf.get_shelfType();
        dropPos.shelfPosIndex = ss.indexOf(targetShelf.get_pills(), target);
        dropPos.shelfDropAction = 'replace';
        dropPos.encodingType = target.get_encodingType();
      }
      $tab_ShelfClientCommands.$createFieldEncodingPM(cmdParams, src, 'invalid-encoding');
      cmdParams['paneSpec'] = targetShelf.get_paneId();
      cmdParams['shelfSelection'] = [];
      cmdParams['dragSource'] = 'drag-drop-schema';
      cmdParams['dropTarget'] = 'drag-drop-shelf';
      cmdParams['shelfDropTargetPosition'] = dropPos;
      var cc = new $tab_$ShelfDropClientCommand(ss.mkdel(this, function(t) {
        var targetShelfPm = t.makeMutablePresModel(targetShelf, false);
        var offset = 0;
        for (var $t1 = 0; $t1 < src.length; $t1++) {
          var fieldModel = src[$t1];
          var newItem = { displayText: fieldModel.get_description(), fn: fieldModel.get_globalName(), encodingType: target.get_encodingType(), encodingUiItems: target.pm.encodingUiItems };
          $tab_ShelfClientCommands.$addShelfItem(targetShelfPm, newItem, dropPos, offset);
          offset++;
        }
      }), command, targetShelf.get_shelfType(), isDroppingRelativeFilter);
      tab.CommandController.SendCommand(cc);
    },
    setCommandParams: function ShelfClientCommands$SetCommandParams(c, cmdParams) {
      tab.CommandUtils.addVisualIdToCommand(cmdParams, $tab_ShelfClientCommands.$getVisualIdForCurrentContext());
      var $t1 = new ss.ObjectEnumerator(cmdParams);
      try {
        while ($t1.moveNext()) {
          var pair = $t1.current();
          var value = pair.value;
          if (ss.isNullOrUndefined(value) || _.isString(value) || _.isBoolean(value) || _.isNumber(value)) {
          }
          else if (_.isObject(value) || _.isArray(value)) {
            cmdParams[pair.key] = JSON.stringify(value);
          }
        }
      }
      finally {
        $t1.dispose();
      }
      c.commandParams = cmdParams;
    },
    $createDropOnShelfCommand: function ShelfClientCommands$CreateDropOnShelfCommand() {
      var cmdParams = {};
      cmdParams['dragSource'] = 'drag-drop-none';
      cmdParams['dropTarget'] = 'drag-drop-none';
      cmdParams['dragDescription'] = '';
      cmdParams['isCopy'] = false;
      cmdParams['isDeadDrop'] = false;
      cmdParams['isRightDrag'] = false;
      cmdParams['shelfDropContext'] = 'none';
      cmdParams['shelfDragSourcePosition'] = {};
      cmdParams['shelfDropTargetPosition'] = {};
      return tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'drop-on-shelf' }, cmdParams);
    },
    $getFieldEncodingPresModel: function ShelfClientCommands$GetFieldEncodingPresModel(f, type) {
      var fe = { fn: f.get_globalName() };
      if (ss.isValue(type) && type !== 'invalid-encoding') {
        fe.encodingType = type;
      }
      return fe;
    },
    $setFieldEncoding: function ShelfClientCommands$SetFieldEncoding(cmdParams, f, type) {
      cmdParams['fieldEncodings'] = JSON.stringify([$tab_ShelfClientCommands.$getFieldEncodingPresModel(f, type)]);
    },
    $createFieldEncodingPM: function ShelfClientCommands$CreateFieldEncodingPM(cmdParams, f, type) {
      var fieldEncodingPresModels = _.map(f, function(fieldModel) {
        return $tab_ShelfClientCommands.$getFieldEncodingPresModel(fieldModel, type);
      });
      cmdParams['fieldEncodings'] = JSON.stringify(fieldEncodingPresModels);
    },
    $addShelfItem: function ShelfClientCommands$AddShelfItem(shelfPm, newItem, dropPos, offset) {
      var action = ((offset > 0) ? 'insert' : (dropPos.shelfDropAction || 'insert'));
      switch (action) {
        case 'insert': {
          ss.insert($tab_ShelfClientCommands.$shelfItemsAsList(shelfPm.shelfItems), dropPos.shelfPosIndex + offset, newItem);
          break;
        }
        case 'replace': {
          shelfPm.shelfItems[dropPos.shelfPosIndex] = newItem;
          break;
        }
        case 'replace-all': {
          shelfPm.shelfItems[dropPos.shelfPosIndex] = newItem;
          shelfPm.shelfItems = _.filter(shelfPm.shelfItems, function(pm) {
            return pm.encodingType !== dropPos.encodingType || ss.referenceEquals(pm, newItem);
          });
          break;
        }
      }
    },
    $removeShelfItem: function ShelfClientCommands$RemoveShelfItem(shelfPm, item) {
      shelfPm.shelfItems = _.filter(shelfPm.shelfItems, function(model) {
        return !_.isEqual(model, item);
      });
    },
    $shelfItemsAsList: function ShelfClientCommands$ShelfItemsAsList(items) {
      return ss.cast(items, Array);
    },
    $getVisualIdForCurrentContext: function ShelfClientCommands$GetVisualIdForCurrentContext() {
      return tab.ModelUtils.getVisualId(tsConfig.current_sheet_name);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SortNestedCmd
  var $tab_SortNestedCmd = global.tab.SortNestedCmd = ss.mkType($asm, 'tab.SortNestedCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SortNestedCmd$Response]).call(this);
  }, {
    get_commandId: function SortNestedCmd$get_CommandId() {
      return $tab_SortNestedCmd.cmdId;
    },
    invoke: function SortNestedCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'sort-nested' }, this.cmdParams));
    },
    validateInvokeParams: function SortNestedCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'dimensionToSort')) {
        throw new ss.Exception('missing param DocParams.DimensionToSort');
      }
      if (!ss.keyExists(this.cmdParams, 'sortMeasureName')) {
        throw new ss.Exception('missing param DocParams.SortMeasureName');
      }
      if (!ss.keyExists(this.cmdParams, 'shelfType')) {
        throw new ss.Exception('missing param DocParams.ShelfType');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.SortNestedCmd.Response
  var $tab_SortNestedCmd$Response = global.tab.SortNestedCmd$Response = ss.mkType($asm, 'tab.SortNestedCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcAddCmd
  var $tab_TableCalcAddCmd = global.tab.TableCalcAddCmd = ss.mkType($asm, 'tab.TableCalcAddCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcAddCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcAddCmd$get_CommandId() {
      return $tab_TableCalcAddCmd.cmdId;
    },
    invoke: function TableCalcAddCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-add' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcAddCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcAddCmd.Response
  var $tab_TableCalcAddCmd$Response = global.tab.TableCalcAddCmd$Response = ss.mkType($asm, 'tab.TableCalcAddCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcChangeTypeCmd
  var $tab_TableCalcChangeTypeCmd = global.tab.TableCalcChangeTypeCmd = ss.mkType($asm, 'tab.TableCalcChangeTypeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcChangeTypeCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcChangeTypeCmd$get_CommandId() {
      return $tab_TableCalcChangeTypeCmd.cmdId;
    },
    invoke: function TableCalcChangeTypeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-change-type' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcChangeTypeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'tableCalcType')) {
        throw new ss.Exception('missing param DocParams.TableCalcType');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcChangeTypeCmd.Response
  var $tab_TableCalcChangeTypeCmd$Response = global.tab.TableCalcChangeTypeCmd$Response = ss.mkType($asm, 'tab.TableCalcChangeTypeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcCloseCmd
  var $tab_TableCalcCloseCmd = global.tab.TableCalcCloseCmd = ss.mkType($asm, 'tab.TableCalcCloseCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcCloseCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcCloseCmd$get_CommandId() {
      return $tab_TableCalcCloseCmd.cmdId;
    },
    invoke: function TableCalcCloseCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-close' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcCloseCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcCloseCmd.Response
  var $tab_TableCalcCloseCmd$Response = global.tab.TableCalcCloseCmd$Response = ss.mkType($asm, 'tab.TableCalcCloseCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcDialogActivatedCmd
  var $tab_TableCalcDialogActivatedCmd = global.tab.TableCalcDialogActivatedCmd = ss.mkType($asm, 'tab.TableCalcDialogActivatedCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcDialogActivatedCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcDialogActivatedCmd$get_CommandId() {
      return $tab_TableCalcDialogActivatedCmd.cmdId;
    },
    invoke: function TableCalcDialogActivatedCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-dialog-activated' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcDialogActivatedCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcDialogActivatedCmd.Response
  var $tab_TableCalcDialogActivatedCmd$Response = global.tab.TableCalcDialogActivatedCmd$Response = ss.mkType($asm, 'tab.TableCalcDialogActivatedCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcEditCmd
  var $tab_TableCalcEditCmd = global.tab.TableCalcEditCmd = ss.mkType($asm, 'tab.TableCalcEditCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcEditCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcEditCmd$get_CommandId() {
      return $tab_TableCalcEditCmd.cmdId;
    },
    invoke: function TableCalcEditCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-edit' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcEditCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcEditCmd.Response
  var $tab_TableCalcEditCmd$Response = global.tab.TableCalcEditCmd$Response = ss.mkType($asm, 'tab.TableCalcEditCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcEditDefaultsCmd
  var $tab_TableCalcEditDefaultsCmd = global.tab.TableCalcEditDefaultsCmd = ss.mkType($asm, 'tab.TableCalcEditDefaultsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcEditDefaultsCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcEditDefaultsCmd$get_CommandId() {
      return $tab_TableCalcEditDefaultsCmd.cmdId;
    },
    invoke: function TableCalcEditDefaultsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-edit-defaults' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcEditDefaultsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fn')) {
        throw new ss.Exception('missing param DocParams.FieldName');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcEditDefaultsCmd.Response
  var $tab_TableCalcEditDefaultsCmd$Response = global.tab.TableCalcEditDefaultsCmd$Response = ss.mkType($asm, 'tab.TableCalcEditDefaultsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcEditNestedTableCalcCmd
  var $tab_TableCalcEditNestedTableCalcCmd = global.tab.TableCalcEditNestedTableCalcCmd = ss.mkType($asm, 'tab.TableCalcEditNestedTableCalcCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcEditNestedTableCalcCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcEditNestedTableCalcCmd$get_CommandId() {
      return $tab_TableCalcEditNestedTableCalcCmd.cmdId;
    },
    invoke: function TableCalcEditNestedTableCalcCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-edit-nested' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcEditNestedTableCalcCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'calcNestingLevel')) {
        throw new ss.Exception('missing param DocParams.CalcNestingLevel');
      }
      if (!ss.keyExists(this.cmdParams, 'nestedCalcFn')) {
        throw new ss.Exception('missing param DocParams.NestedCalcField');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcEditNestedTableCalcCmd.Response
  var $tab_TableCalcEditNestedTableCalcCmd$Response = global.tab.TableCalcEditNestedTableCalcCmd$Response = ss.mkType($asm, 'tab.TableCalcEditNestedTableCalcCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetAddressingFieldsCmd
  var $tab_TableCalcSetAddressingFieldsCmd = global.tab.TableCalcSetAddressingFieldsCmd = ss.mkType($asm, 'tab.TableCalcSetAddressingFieldsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetAddressingFieldsCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetAddressingFieldsCmd$get_CommandId() {
      return $tab_TableCalcSetAddressingFieldsCmd.cmdId;
    },
    invoke: function TableCalcSetAddressingFieldsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-addressing-fields' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetAddressingFieldsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
        throw new ss.Exception('missing param DocParams.FieldVector');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetAddressingFieldsCmd.Response
  var $tab_TableCalcSetAddressingFieldsCmd$Response = global.tab.TableCalcSetAddressingFieldsCmd$Response = ss.mkType($asm, 'tab.TableCalcSetAddressingFieldsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetAddressingFieldsOrderCmd
  var $tab_TableCalcSetAddressingFieldsOrderCmd = global.tab.TableCalcSetAddressingFieldsOrderCmd = ss.mkType($asm, 'tab.TableCalcSetAddressingFieldsOrderCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetAddressingFieldsOrderCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetAddressingFieldsOrderCmd$get_CommandId() {
      return $tab_TableCalcSetAddressingFieldsOrderCmd.cmdId;
    },
    invoke: function TableCalcSetAddressingFieldsOrderCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-addressing-fields-order' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetAddressingFieldsOrderCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fieldVector')) {
        throw new ss.Exception('missing param DocParams.FieldVector');
      }
      if (!ss.keyExists(this.cmdParams, 'addressingValues')) {
        throw new ss.Exception('missing param DocParams.AddressingValues');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetAddressingFieldsOrderCmd.Response
  var $tab_TableCalcSetAddressingFieldsOrderCmd$Response = global.tab.TableCalcSetAddressingFieldsOrderCmd$Response = ss.mkType($asm, 'tab.TableCalcSetAddressingFieldsOrderCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetAtTheLevelFieldCmd
  var $tab_TableCalcSetAtTheLevelFieldCmd = global.tab.TableCalcSetAtTheLevelFieldCmd = ss.mkType($asm, 'tab.TableCalcSetAtTheLevelFieldCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetAtTheLevelFieldCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetAtTheLevelFieldCmd$get_CommandId() {
      return $tab_TableCalcSetAtTheLevelFieldCmd.cmdId;
    },
    invoke: function TableCalcSetAtTheLevelFieldCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-at-the-level-field' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetAtTheLevelFieldCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fieldNameAllowEmpty')) {
        throw new ss.Exception('missing param DocParams.FieldNameAllowEmpty');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetAtTheLevelFieldCmd.Response
  var $tab_TableCalcSetAtTheLevelFieldCmd$Response = global.tab.TableCalcSetAtTheLevelFieldCmd$Response = ss.mkType($asm, 'tab.TableCalcSetAtTheLevelFieldCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetCompoundRateCmd
  var $tab_TableCalcSetCompoundRateCmd = global.tab.TableCalcSetCompoundRateCmd = ss.mkType($asm, 'tab.TableCalcSetCompoundRateCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetCompoundRateCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetCompoundRateCmd$get_CommandId() {
      return $tab_TableCalcSetCompoundRateCmd.cmdId;
    },
    invoke: function TableCalcSetCompoundRateCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-compound-rate' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetCompoundRateCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetCompoundRateCmd.Response
  var $tab_TableCalcSetCompoundRateCmd$Response = global.tab.TableCalcSetCompoundRateCmd$Response = ss.mkType($asm, 'tab.TableCalcSetCompoundRateCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetCumulativeOptionsCmd
  var $tab_TableCalcSetCumulativeOptionsCmd = global.tab.TableCalcSetCumulativeOptionsCmd = ss.mkType($asm, 'tab.TableCalcSetCumulativeOptionsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetCumulativeOptionsCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetCumulativeOptionsCmd$get_CommandId() {
      return $tab_TableCalcSetCumulativeOptionsCmd.cmdId;
    },
    invoke: function TableCalcSetCumulativeOptionsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-cumulative-options' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetCumulativeOptionsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'aggregation')) {
        throw new ss.Exception('missing param DocParams.AggType');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetCumulativeOptionsCmd.Response
  var $tab_TableCalcSetCumulativeOptionsCmd$Response = global.tab.TableCalcSetCumulativeOptionsCmd$Response = ss.mkType($asm, 'tab.TableCalcSetCumulativeOptionsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetNullIfIncompleteCmd
  var $tab_TableCalcSetNullIfIncompleteCmd = global.tab.TableCalcSetNullIfIncompleteCmd = ss.mkType($asm, 'tab.TableCalcSetNullIfIncompleteCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetNullIfIncompleteCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetNullIfIncompleteCmd$get_CommandId() {
      return $tab_TableCalcSetNullIfIncompleteCmd.cmdId;
    },
    invoke: function TableCalcSetNullIfIncompleteCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-null-if-incomplete' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetNullIfIncompleteCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'nullIfIncomplete')) {
        throw new ss.Exception('missing param DocParams.NullIfIncomplete');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetNullIfIncompleteCmd.Response
  var $tab_TableCalcSetNullIfIncompleteCmd$Response = global.tab.TableCalcSetNullIfIncompleteCmd$Response = ss.mkType($asm, 'tab.TableCalcSetNullIfIncompleteCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetOrderingTypeCmd
  var $tab_TableCalcSetOrderingTypeCmd = global.tab.TableCalcSetOrderingTypeCmd = ss.mkType($asm, 'tab.TableCalcSetOrderingTypeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetOrderingTypeCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetOrderingTypeCmd$get_CommandId() {
      return $tab_TableCalcSetOrderingTypeCmd.cmdId;
    },
    invoke: function TableCalcSetOrderingTypeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-ordering-type' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetOrderingTypeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'orderingType')) {
        throw new ss.Exception('missing param DocParams.OrderingType');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetOrderingTypeCmd.Response
  var $tab_TableCalcSetOrderingTypeCmd$Response = global.tab.TableCalcSetOrderingTypeCmd$Response = ss.mkType($asm, 'tab.TableCalcSetOrderingTypeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetPercentTotalOptionsCmd
  var $tab_TableCalcSetPercentTotalOptionsCmd = global.tab.TableCalcSetPercentTotalOptionsCmd = ss.mkType($asm, 'tab.TableCalcSetPercentTotalOptionsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetPercentTotalOptionsCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetPercentTotalOptionsCmd$get_CommandId() {
      return $tab_TableCalcSetPercentTotalOptionsCmd.cmdId;
    },
    invoke: function TableCalcSetPercentTotalOptionsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-percent-total-options' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetPercentTotalOptionsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'includeAllPages')) {
        throw new ss.Exception('missing param DocParams.AllPages');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetPercentTotalOptionsCmd.Response
  var $tab_TableCalcSetPercentTotalOptionsCmd$Response = global.tab.TableCalcSetPercentTotalOptionsCmd$Response = ss.mkType($asm, 'tab.TableCalcSetPercentTotalOptionsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetRankSortDirectionCmd
  var $tab_TableCalcSetRankSortDirectionCmd = global.tab.TableCalcSetRankSortDirectionCmd = ss.mkType($asm, 'tab.TableCalcSetRankSortDirectionCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetRankSortDirectionCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetRankSortDirectionCmd$get_CommandId() {
      return $tab_TableCalcSetRankSortDirectionCmd.cmdId;
    },
    invoke: function TableCalcSetRankSortDirectionCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-rank-sort-direction' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetRankSortDirectionCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'sortOrder')) {
        throw new ss.Exception('missing param DocParams.SortDirection');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetRankSortDirectionCmd.Response
  var $tab_TableCalcSetRankSortDirectionCmd$Response = global.tab.TableCalcSetRankSortDirectionCmd$Response = ss.mkType($asm, 'tab.TableCalcSetRankSortDirectionCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetRankTypeCmd
  var $tab_TableCalcSetRankTypeCmd = global.tab.TableCalcSetRankTypeCmd = ss.mkType($asm, 'tab.TableCalcSetRankTypeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetRankTypeCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetRankTypeCmd$get_CommandId() {
      return $tab_TableCalcSetRankTypeCmd.cmdId;
    },
    invoke: function TableCalcSetRankTypeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-rank-type' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetRankTypeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'rankType')) {
        throw new ss.Exception('missing param DocParams.RankType');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetRankTypeCmd.Response
  var $tab_TableCalcSetRankTypeCmd$Response = global.tab.TableCalcSetRankTypeCmd$Response = ss.mkType($asm, 'tab.TableCalcSetRankTypeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetReferenceOptionsCmd
  var $tab_TableCalcSetReferenceOptionsCmd = global.tab.TableCalcSetReferenceOptionsCmd = ss.mkType($asm, 'tab.TableCalcSetReferenceOptionsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetReferenceOptionsCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetReferenceOptionsCmd$get_CommandId() {
      return $tab_TableCalcSetReferenceOptionsCmd.cmdId;
    },
    invoke: function TableCalcSetReferenceOptionsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-reference-options' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetReferenceOptionsCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetReferenceOptionsCmd.Response
  var $tab_TableCalcSetReferenceOptionsCmd$Response = global.tab.TableCalcSetReferenceOptionsCmd$Response = ss.mkType($asm, 'tab.TableCalcSetReferenceOptionsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetRestartEveryFieldCmd
  var $tab_TableCalcSetRestartEveryFieldCmd = global.tab.TableCalcSetRestartEveryFieldCmd = ss.mkType($asm, 'tab.TableCalcSetRestartEveryFieldCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetRestartEveryFieldCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetRestartEveryFieldCmd$get_CommandId() {
      return $tab_TableCalcSetRestartEveryFieldCmd.cmdId;
    },
    invoke: function TableCalcSetRestartEveryFieldCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-restart-every-field' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetRestartEveryFieldCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fieldNameAllowEmpty')) {
        throw new ss.Exception('missing param DocParams.FieldNameAllowEmpty');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetRestartEveryFieldCmd.Response
  var $tab_TableCalcSetRestartEveryFieldCmd$Response = global.tab.TableCalcSetRestartEveryFieldCmd$Response = ss.mkType($asm, 'tab.TableCalcSetRestartEveryFieldCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetSortAggregationCmd
  var $tab_TableCalcSetSortAggregationCmd = global.tab.TableCalcSetSortAggregationCmd = ss.mkType($asm, 'tab.TableCalcSetSortAggregationCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetSortAggregationCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetSortAggregationCmd$get_CommandId() {
      return $tab_TableCalcSetSortAggregationCmd.cmdId;
    },
    invoke: function TableCalcSetSortAggregationCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-sort-aggregation' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetSortAggregationCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'aggregation')) {
        throw new ss.Exception('missing param DocParams.AggType');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetSortAggregationCmd.Response
  var $tab_TableCalcSetSortAggregationCmd$Response = global.tab.TableCalcSetSortAggregationCmd$Response = ss.mkType($asm, 'tab.TableCalcSetSortAggregationCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetSortDirectionCmd
  var $tab_TableCalcSetSortDirectionCmd = global.tab.TableCalcSetSortDirectionCmd = ss.mkType($asm, 'tab.TableCalcSetSortDirectionCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetSortDirectionCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetSortDirectionCmd$get_CommandId() {
      return $tab_TableCalcSetSortDirectionCmd.cmdId;
    },
    invoke: function TableCalcSetSortDirectionCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-sort-direction' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetSortDirectionCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'sortOrder')) {
        throw new ss.Exception('missing param DocParams.SortDirection');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetSortDirectionCmd.Response
  var $tab_TableCalcSetSortDirectionCmd$Response = global.tab.TableCalcSetSortDirectionCmd$Response = ss.mkType($asm, 'tab.TableCalcSetSortDirectionCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetSortFieldCmd
  var $tab_TableCalcSetSortFieldCmd = global.tab.TableCalcSetSortFieldCmd = ss.mkType($asm, 'tab.TableCalcSetSortFieldCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetSortFieldCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetSortFieldCmd$get_CommandId() {
      return $tab_TableCalcSetSortFieldCmd.cmdId;
    },
    invoke: function TableCalcSetSortFieldCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-sort-field' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetSortFieldCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'fn')) {
        throw new ss.Exception('missing param DocParams.FieldName');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetSortFieldCmd.Response
  var $tab_TableCalcSetSortFieldCmd$Response = global.tab.TableCalcSetSortFieldCmd$Response = ss.mkType($asm, 'tab.TableCalcSetSortFieldCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetSortModeCmd
  var $tab_TableCalcSetSortModeCmd = global.tab.TableCalcSetSortModeCmd = ss.mkType($asm, 'tab.TableCalcSetSortModeCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetSortModeCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetSortModeCmd$get_CommandId() {
      return $tab_TableCalcSetSortModeCmd.cmdId;
    },
    invoke: function TableCalcSetSortModeCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-sort-mode' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetSortModeCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'sortModeIsAuto')) {
        throw new ss.Exception('missing param DocParams.SortModeIsAuto');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetSortModeCmd.Response
  var $tab_TableCalcSetSortModeCmd$Response = global.tab.TableCalcSetSortModeCmd$Response = ss.mkType($asm, 'tab.TableCalcSetSortModeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetWindowOptionsCmd
  var $tab_TableCalcSetWindowOptionsCmd = global.tab.TableCalcSetWindowOptionsCmd = ss.mkType($asm, 'tab.TableCalcSetWindowOptionsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetWindowOptionsCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcSetWindowOptionsCmd$get_CommandId() {
      return $tab_TableCalcSetWindowOptionsCmd.cmdId;
    },
    invoke: function TableCalcSetWindowOptionsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-set-window-options' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcSetWindowOptionsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'aggregation')) {
        throw new ss.Exception('missing param DocParams.AggType');
      }
      if (!ss.keyExists(this.cmdParams, 'includeCurrent')) {
        throw new ss.Exception('missing param DocParams.IncludeCurrent');
      }
      if (!ss.keyExists(this.cmdParams, 'nullIfIncomplete')) {
        throw new ss.Exception('missing param DocParams.NullIfIncomplete');
      }
      if (!ss.keyExists(this.cmdParams, 'numberOfPrevValues')) {
        throw new ss.Exception('missing param DocParams.NumberOfPrevValues');
      }
      if (!ss.keyExists(this.cmdParams, 'numberOfNextValues')) {
        throw new ss.Exception('missing param DocParams.NumberOfNextValues');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcSetWindowOptionsCmd.Response
  var $tab_TableCalcSetWindowOptionsCmd$Response = global.tab.TableCalcSetWindowOptionsCmd$Response = ss.mkType($asm, 'tab.TableCalcSetWindowOptionsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcToggleSecondaryCalcCmd
  var $tab_TableCalcToggleSecondaryCalcCmd = global.tab.TableCalcToggleSecondaryCalcCmd = ss.mkType($asm, 'tab.TableCalcToggleSecondaryCalcCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcToggleSecondaryCalcCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcToggleSecondaryCalcCmd$get_CommandId() {
      return $tab_TableCalcToggleSecondaryCalcCmd.cmdId;
    },
    invoke: function TableCalcToggleSecondaryCalcCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-toggle-secondary-calc' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcToggleSecondaryCalcCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'useSecondaryCalc')) {
        throw new ss.Exception('missing param DocParams.UseSecondaryCalc');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcToggleSecondaryCalcCmd.Response
  var $tab_TableCalcToggleSecondaryCalcCmd$Response = global.tab.TableCalcToggleSecondaryCalcCmd$Response = ss.mkType($asm, 'tab.TableCalcToggleSecondaryCalcCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcToggleShowCalcAssistanceCmd
  var $tab_TableCalcToggleShowCalcAssistanceCmd = global.tab.TableCalcToggleShowCalcAssistanceCmd = ss.mkType($asm, 'tab.TableCalcToggleShowCalcAssistanceCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcToggleShowCalcAssistanceCmd$Response]).call(this);
  }, {
    get_commandId: function TableCalcToggleShowCalcAssistanceCmd$get_CommandId() {
      return $tab_TableCalcToggleShowCalcAssistanceCmd.cmdId;
    },
    invoke: function TableCalcToggleShowCalcAssistanceCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'table-calc-toggle-show-calc-assistance' }, this.cmdParams));
    },
    validateInvokeParams: function TableCalcToggleShowCalcAssistanceCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'isCalcAssistanceEnabled')) {
        throw new ss.Exception('missing param DocParams.IsCalcAssistanceEnabled');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.TableCalcToggleShowCalcAssistanceCmd.Response
  var $tab_TableCalcToggleShowCalcAssistanceCmd$Response = global.tab.TableCalcToggleShowCalcAssistanceCmd$Response = ss.mkType($asm, 'tab.TableCalcToggleShowCalcAssistanceCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.UpdateMarkLabelsSettingsCmd
  var $tab_UpdateMarkLabelsSettingsCmd = global.tab.UpdateMarkLabelsSettingsCmd = ss.mkType($asm, 'tab.UpdateMarkLabelsSettingsCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_UpdateMarkLabelsSettingsCmd$Response]).call(this);
  }, {
    get_commandId: function UpdateMarkLabelsSettingsCmd$get_CommandId() {
      return $tab_UpdateMarkLabelsSettingsCmd.cmdId;
    },
    invoke: function UpdateMarkLabelsSettingsCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'update-mark-labels-settings' }, this.cmdParams));
    },
    validateInvokeParams: function UpdateMarkLabelsSettingsCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'markLabelsSpecification')) {
        throw new ss.Exception('missing param DocParams.MarkLabelsSpecification');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.UpdateMarkLabelsSettingsCmd.Response
  var $tab_UpdateMarkLabelsSettingsCmd$Response = global.tab.UpdateMarkLabelsSettingsCmd$Response = ss.mkType($asm, 'tab.UpdateMarkLabelsSettingsCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.UpdateReferenceLineCmd
  var $tab_UpdateReferenceLineCmd = global.tab.UpdateReferenceLineCmd = ss.mkType($asm, 'tab.UpdateReferenceLineCmd', function() {
    ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_UpdateReferenceLineCmd$Response]).call(this);
  }, {
    get_commandId: function UpdateReferenceLineCmd$get_CommandId() {
      return $tab_UpdateReferenceLineCmd.cmdId;
    },
    invoke: function UpdateReferenceLineCmd$Invoke() {
      return this.invoke$1(tab.CommandUtils.newCommand({ ns: 'tabdoc', cmd: 'update-reference-line' }, this.cmdParams));
    },
    validateInvokeParams: function UpdateReferenceLineCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'referenceLineId')) {
        throw new ss.Exception('missing param DocParams.ReferenceLineSpecificationId');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.UpdateReferenceLineCmd.Response
  var $tab_UpdateReferenceLineCmd$Response = global.tab.UpdateReferenceLineCmd$Response = ss.mkType($asm, 'tab.UpdateReferenceLineCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebConnectDataCmd
  var $tab_WebConnectDataCmd = global.tab.WebConnectDataCmd = ss.mkType($asm, 'tab.WebConnectDataCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebConnectDataCmd$Response]).call(this);
  }, {
    get_commandId: function WebConnectDataCmd$get_CommandId() {
      return $tab_WebConnectDataCmd.cmdId;
    },
    validateInvokeParams: function WebConnectDataCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebConnectDataCmd.Response
  var $tab_WebConnectDataCmd$Response = global.tab.WebConnectDataCmd$Response = ss.mkType($asm, 'tab.WebConnectDataCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebDashboardDesignCmd
  var $tab_WebDashboardDesignCmd = global.tab.WebDashboardDesignCmd = ss.mkType($asm, 'tab.WebDashboardDesignCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebDashboardDesignCmd$Response]).call(this);
  }, {
    get_commandId: function WebDashboardDesignCmd$get_CommandId() {
      return $tab_WebDashboardDesignCmd.cmdId;
    },
    validateInvokeParams: function WebDashboardDesignCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebDashboardDesignCmd.Response
  var $tab_WebDashboardDesignCmd$Response = global.tab.WebDashboardDesignCmd$Response = ss.mkType($asm, 'tab.WebDashboardDesignCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebEditDataSourceCmd
  var $tab_WebEditDataSourceCmd = global.tab.WebEditDataSourceCmd = ss.mkType($asm, 'tab.WebEditDataSourceCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebEditDataSourceCmd$Response]).call(this);
  }, {
    get_commandId: function WebEditDataSourceCmd$get_CommandId() {
      return $tab_WebEditDataSourceCmd.cmdId;
    },
    validateInvokeParams: function WebEditDataSourceCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebEditDataSourceCmd.Response
  var $tab_WebEditDataSourceCmd$Response = global.tab.WebEditDataSourceCmd$Response = ss.mkType($asm, 'tab.WebEditDataSourceCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebEditObjectCaptionCmd
  var $tab_WebEditObjectCaptionCmd = global.tab.WebEditObjectCaptionCmd = ss.mkType($asm, 'tab.WebEditObjectCaptionCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebEditObjectCaptionCmd$Response]).call(this);
  }, {
    get_commandId: function WebEditObjectCaptionCmd$get_CommandId() {
      return $tab_WebEditObjectCaptionCmd.cmdId;
    },
    validateInvokeParams: function WebEditObjectCaptionCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'dataObjectModelObjectId')) {
        throw new ss.Exception('missing param DocParams.DataObjectModelObjectId');
      }
      if (!ss.keyExists(this.cmdParams, 'uniqueName')) {
        throw new ss.Exception('missing param DocParams.UniqueName');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebEditObjectCaptionCmd.Response
  var $tab_WebEditObjectCaptionCmd$Response = global.tab.WebEditObjectCaptionCmd$Response = ss.mkType($asm, 'tab.WebEditObjectCaptionCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportCrossTabCmd
  var $tab_WebExportCrossTabCmd = global.tab.WebExportCrossTabCmd = ss.mkType($asm, 'tab.WebExportCrossTabCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportCrossTabCmd$Response]).call(this);
  }, {
    get_commandId: function WebExportCrossTabCmd$get_CommandId() {
      return $tab_WebExportCrossTabCmd.cmdId;
    },
    validateInvokeParams: function WebExportCrossTabCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportCrossTabCmd.Response
  var $tab_WebExportCrossTabCmd$Response = global.tab.WebExportCrossTabCmd$Response = ss.mkType($asm, 'tab.WebExportCrossTabCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportDataCmd
  var $tab_WebExportDataCmd = global.tab.WebExportDataCmd = ss.mkType($asm, 'tab.WebExportDataCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportDataCmd$Response]).call(this);
  }, {
    get_commandId: function WebExportDataCmd$get_CommandId() {
      return $tab_WebExportDataCmd.cmdId;
    },
    validateInvokeParams: function WebExportDataCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportDataCmd.Response
  var $tab_WebExportDataCmd$Response = global.tab.WebExportDataCmd$Response = ss.mkType($asm, 'tab.WebExportDataCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportPdfCmd
  var $tab_WebExportPdfCmd = global.tab.WebExportPdfCmd = ss.mkType($asm, 'tab.WebExportPdfCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportPdfCmd$Response]).call(this);
  }, {
    get_commandId: function WebExportPdfCmd$get_CommandId() {
      return $tab_WebExportPdfCmd.cmdId;
    },
    validateInvokeParams: function WebExportPdfCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportPdfCmd.Response
  var $tab_WebExportPdfCmd$Response = global.tab.WebExportPdfCmd$Response = ss.mkType($asm, 'tab.WebExportPdfCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportPngCmd
  var $tab_WebExportPngCmd = global.tab.WebExportPngCmd = ss.mkType($asm, 'tab.WebExportPngCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportPngCmd$Response]).call(this);
  }, {
    get_commandId: function WebExportPngCmd$get_CommandId() {
      return $tab_WebExportPngCmd.cmdId;
    },
    validateInvokeParams: function WebExportPngCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportPngCmd.Response
  var $tab_WebExportPngCmd$Response = global.tab.WebExportPngCmd$Response = ss.mkType($asm, 'tab.WebExportPngCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportPowerPointCmd
  var $tab_WebExportPowerPointCmd = global.tab.WebExportPowerPointCmd = ss.mkType($asm, 'tab.WebExportPowerPointCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportPowerPointCmd$Response]).call(this);
  }, {
    get_commandId: function WebExportPowerPointCmd$get_CommandId() {
      return $tab_WebExportPowerPointCmd.cmdId;
    },
    validateInvokeParams: function WebExportPowerPointCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebExportPowerPointCmd.Response
  var $tab_WebExportPowerPointCmd$Response = global.tab.WebExportPowerPointCmd$Response = ss.mkType($asm, 'tab.WebExportPowerPointCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebFilterDialogDomainCancelCmd
  var $tab_WebFilterDialogDomainCancelCmd = global.tab.WebFilterDialogDomainCancelCmd = ss.mkType($asm, 'tab.WebFilterDialogDomainCancelCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebFilterDialogDomainCancelCmd$Response]).call(this);
  }, {
    get_commandId: function WebFilterDialogDomainCancelCmd$get_CommandId() {
      return $tab_WebFilterDialogDomainCancelCmd.cmdId;
    },
    validateInvokeParams: function WebFilterDialogDomainCancelCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebFilterDialogDomainCancelCmd.Response
  var $tab_WebFilterDialogDomainCancelCmd$Response = global.tab.WebFilterDialogDomainCancelCmd$Response = ss.mkType($asm, 'tab.WebFilterDialogDomainCancelCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebFormatWorkbookCmd
  var $tab_WebFormatWorkbookCmd = global.tab.WebFormatWorkbookCmd = ss.mkType($asm, 'tab.WebFormatWorkbookCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebFormatWorkbookCmd$Response]).call(this);
  }, {
    get_commandId: function WebFormatWorkbookCmd$get_CommandId() {
      return $tab_WebFormatWorkbookCmd.cmdId;
    },
    validateInvokeParams: function WebFormatWorkbookCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebFormatWorkbookCmd.Response
  var $tab_WebFormatWorkbookCmd$Response = global.tab.WebFormatWorkbookCmd$Response = ss.mkType($asm, 'tab.WebFormatWorkbookCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebRemoveShelfPillCmd
  var $tab_WebRemoveShelfPillCmd = global.tab.WebRemoveShelfPillCmd = ss.mkType($asm, 'tab.WebRemoveShelfPillCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebRemoveShelfPillCmd$Response]).call(this);
  }, {
    get_commandId: function WebRemoveShelfPillCmd$get_CommandId() {
      return $tab_WebRemoveShelfPillCmd.cmdId;
    },
    validateInvokeParams: function WebRemoveShelfPillCmd$ValidateInvokeParams() {
      if (!ss.keyExists(this.cmdParams, 'shelfType')) {
        throw new ss.Exception('missing param DocParams.ShelfType');
      }
      if (!ss.keyExists(this.cmdParams, 'shelfItemId')) {
        throw new ss.Exception('missing param DocParams.ShelfItemID');
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebRemoveShelfPillCmd.Response
  var $tab_WebRemoveShelfPillCmd$Response = global.tab.WebRemoveShelfPillCmd$Response = ss.mkType($asm, 'tab.WebRemoveShelfPillCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebRenameDatasourceDialogCmd
  var $tab_WebRenameDatasourceDialogCmd = global.tab.WebRenameDatasourceDialogCmd = ss.mkType($asm, 'tab.WebRenameDatasourceDialogCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebRenameDatasourceDialogCmd$Response]).call(this);
  }, {
    get_commandId: function WebRenameDatasourceDialogCmd$get_CommandId() {
      return $tab_WebRenameDatasourceDialogCmd.cmdId;
    },
    validateInvokeParams: function WebRenameDatasourceDialogCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebRenameDatasourceDialogCmd.Response
  var $tab_WebRenameDatasourceDialogCmd$Response = global.tab.WebRenameDatasourceDialogCmd$Response = ss.mkType($asm, 'tab.WebRenameDatasourceDialogCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebShowMeCmd
  var $tab_WebShowMeCmd = global.tab.WebShowMeCmd = ss.mkType($asm, 'tab.WebShowMeCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebShowMeCmd$Response]).call(this);
  }, {
    get_commandId: function WebShowMeCmd$get_CommandId() {
      return $tab_WebShowMeCmd.cmdId;
    },
    validateInvokeParams: function WebShowMeCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebShowMeCmd.Response
  var $tab_WebShowMeCmd$Response = global.tab.WebShowMeCmd$Response = ss.mkType($asm, 'tab.WebShowMeCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebToolbarMoreCmd
  var $tab_WebToolbarMoreCmd = global.tab.WebToolbarMoreCmd = ss.mkType($asm, 'tab.WebToolbarMoreCmd', function() {
    ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebToolbarMoreCmd$Response]).call(this);
  }, {
    get_commandId: function WebToolbarMoreCmd$get_CommandId() {
      return $tab_WebToolbarMoreCmd.cmdId;
    },
    validateInvokeParams: function WebToolbarMoreCmd$ValidateInvokeParams() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Domain.WebToolbarMoreCmd.Response
  var $tab_WebToolbarMoreCmd$Response = global.tab.WebToolbarMoreCmd$Response = ss.mkType($asm, 'tab.WebToolbarMoreCmd$Response', function(responseParams) {
    this.$$cmdParams = null;
    this.$$cmdParams = responseParams;
    this.$validateResponseParams();
  }, {
    $validateResponseParams: function Response$ValidateResponseParams() {
    }
  });
  ss.initClass($tab_$ShelfDropClientCommand, tab.ClientCommand);
  ss.initClass($tab_AssignCategoricalColorPaletteCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_AssignCategoricalColorPaletteCmd$Response]));
  ss.initClass($tab_AssignCategoricalColorPaletteCmd$Response);
  ss.initClass($tab_AuthoringLeftAreaExpansionModel, tab.Model, [tab.IHandleNotifications]);
  ss.initClass($tab_AutofitDevConfigurationCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_AutofitDevConfigurationCmd$Response]));
  ss.initClass($tab_AutofitDevConfigurationCmd$Response);
  ss.initClass($tab_AutofitWith1DContainersMultiRunUsingWebThresholdsCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_AutofitWith1DContainersMultiRunUsingWebThresholdsCmd$Response]));
  ss.initClass($tab_AutofitWith1DContainersMultiRunUsingWebThresholdsCmd$Response);
  ss.initClass($tab_AutofitWith1DContainersUsingWebThresholdsCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_AutofitWith1DContainersUsingWebThresholdsCmd$Response]));
  ss.initClass($tab_AutofitWith1DContainersUsingWebThresholdsCmd$Response);
  ss.initClass($tab_BuildMainMenuCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_BuildMainMenuCmd$Response]));
  ss.initClass($tab_BuildMainMenuCmd$Response);
  ss.initClass($tab_BuildShelfItemContextMenuCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_BuildShelfItemContextMenuCmd$Response]));
  ss.initClass($tab_BuildShelfItemContextMenuCmd$Response);
  ss.initClass($tab_CalcApplyResponse);
  ss.initClass($tab_CalculationAutoCompleteItemModel, tab.Model);
  ss.initClass($tab_CalculationAutoCompleteModel, tab.Model);
  ss.initClass($tab_CalculationCommands);
  ss.initClass($tab_CategoricalColorEditorDialogModel, tab.Model, [tab.IHandleNotifications]);
  ss.initClass($tab_ChangeLineInterpolationCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ChangeLineInterpolationCmd$Response]));
  ss.initClass($tab_ChangeLineInterpolationCmd$Response);
  ss.initClass($tab_CloseAuthoringCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_CloseAuthoringCmd$Response]));
  ss.initClass($tab_CloseAuthoringCmd$Response);
  ss.initClass($tab_CloseDataSourceErrorDialogModel, tab.Model, [tab.IHandleNotifications]);
  ss.initClass($tab_CloseMapLayersPaneCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_CloseMapLayersPaneCmd$Response]));
  ss.initClass($tab_CloseMapLayersPaneCmd$Response);
  ss.initClass($tab_CloseRefLineEditorCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_CloseRefLineEditorCmd$Response]));
  ss.initClass($tab_CloseRefLineEditorCmd$Response);
  ss.initClass($tab_CommandBuilder);
  ss.initClass($tab_DashboardZoneCommands);
  ss.initClass($tab_DashboardZoneStyleCommands);
  ss.initClass($tab_DesktopExpandedSidePaneWidthSynchronizer);
  ss.initClass($tab_DistributionModel, tab.Model);
  ss.initClass($tab_DistributionPercentagesModel, tab.Model);
  ss.initClass($tab_DistributionPercentilesModel, tab.Model);
  ss.initClass($tab_DistributionQuantilesModel, tab.Model);
  ss.initClass($tab_DistributionStandardDeviationModel, tab.Model);
  ss.initClass($tab_DragToShowMeInfo);
  ss.initClass($tab_DragToShowMeInfoWrapper);
  ss.initClass($tab_DropReferenceLineOnFilterShelfCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_DropReferenceLineOnFilterShelfCmd$Response]));
  ss.initClass($tab_DropReferenceLineOnFilterShelfCmd$Response);
  ss.initClass($tab_DropReferenceLineOnSchemaViewerCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_DropReferenceLineOnSchemaViewerCmd$Response]));
  ss.initClass($tab_DropReferenceLineOnSchemaViewerCmd$Response);
  ss.initClass($tab_DropReferenceLineOnShelfCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_DropReferenceLineOnShelfCmd$Response]));
  ss.initClass($tab_DropReferenceLineOnShelfCmd$Response);
  ss.initClass($tab_EditAxisDialogCommands);
  ss.initClass($tab_EditWebZoneUrlCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_EditWebZoneUrlCmd$Response]));
  ss.initClass($tab_EditWebZoneUrlCmd$Response);
  ss.initClass($tab_ExpandedSidePaneWidthModel, tab.Model);
  ss.initClass($tab_FieldPickerComboModel, tab.Model);
  ss.initClass($tab_FieldPickerFieldModel);
  ss.initClass($tab_FormatCommands);
  ss.initClass($tab_GetDensityColorPalettesCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetDensityColorPalettesCmd$Response]));
  ss.initClass($tab_GetDensityColorPalettesCmd$Response);
  ss.initClass($tab_GetDragZoneResizeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetDragZoneResizeCmd$Response]));
  ss.initClass($tab_GetDragZoneResizeCmd$Response);
  ss.initClass($tab_GetRefLineDragInfoCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetRefLineDragInfoCmd$Response]));
  ss.initClass($tab_GetRefLineDragInfoCmd$Response);
  ss.initClass($tab_GetRefLineFormulaCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetRefLineFormulaCmd$Response]));
  ss.initClass($tab_GetRefLineFormulaCmd$Response);
  ss.initClass($tab_GetTrendLineDragInfoCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_GetTrendLineDragInfoCmd$Response]));
  ss.initClass($tab_GetTrendLineDragInfoCmd$Response);
  ss.initClass($tab_HideZoneCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_HideZoneCmd$Response]));
  ss.initClass($tab_HideZoneCmd$Response);
  ss.initClass($tab_LaunchFilterDialogCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_LaunchFilterDialogCmd$Response]));
  ss.initClass($tab_LaunchFilterDialogCmd$Response);
  ss.initClass($tab_MenuBarClientCommands);
  ss.initClass($tab_ModifyBackgroundShadingCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ModifyBackgroundShadingCmd$Response]));
  ss.initClass($tab_ModifyBackgroundShadingCmd$Response);
  ss.initClass($tab_ModifyBorderCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ModifyBorderCmd$Response]));
  ss.initClass($tab_ModifyBorderCmd$Response);
  ss.initClass($tab_ModifyMarginCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ModifyMarginCmd$Response]));
  ss.initClass($tab_ModifyMarginCmd$Response);
  ss.initClass($tab_ModifyPaddingCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ModifyPaddingCmd$Response]));
  ss.initClass($tab_ModifyPaddingCmd$Response);
  ss.initClass($tab_MoveDashboardEdgeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_MoveDashboardEdgeCmd$Response]));
  ss.initClass($tab_MoveDashboardEdgeCmd$Response);
  ss.initClass($tab_NavigationUtil);
  ss.initClass($tab_NotificationForwarder, null, [ss.IDisposable]);
  ss.initClass($tab_PaneClientCommands);
  ss.initClass($tab_PresentationModeAffordanceSet, tabBootstrap.DisableAffordanceSet);
  ss.initClass($tab_PresentationModeModel, tab.Model, [tab.IHandleNotifications]);
  ss.initClass($tab_QuantitativeColorEditorDialogModel, tab.Model, [tab.IDetachableNotificationHandler, tab.IHandleNotifications]);
  ss.initClass($tab_QuickSortAscendingCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_QuickSortAscendingCmd$Response]));
  ss.initClass($tab_QuickSortAscendingCmd$Response);
  ss.initClass($tab_QuickSortDescendingCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_QuickSortDescendingCmd$Response]));
  ss.initClass($tab_QuickSortDescendingCmd$Response);
  ss.initClass($tab_ReferenceBandModel, tab.Model);
  ss.initClass($tab_ReferenceLineEditorModel, tab.Model, [tab.IHandleNotifications]);
  ss.initClass($tab_ReferenceLineModel, tab.Model);
  ss.initClass($tab_ReleaseComponentCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ReleaseComponentCmd$Response]));
  ss.initClass($tab_ReleaseComponentCmd$Response);
  ss.initClass($tab_ReorderSheetsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ReorderSheetsCmd$Response]));
  ss.initClass($tab_ReorderSheetsCmd$Response);
  ss.initClass($tab_ReplaceDataSourceWithDataServerDataSourceServerCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ReplaceDataSourceWithDataServerDataSourceServerCmd$Response]));
  ss.initClass($tab_ReplaceDataSourceWithDataServerDataSourceServerCmd$Response);
  ss.initClass($tab_ReplaceZoneCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ReplaceZoneCmd$Response]));
  ss.initClass($tab_ReplaceZoneCmd$Response);
  ss.initClass($tab_ResetCategoricalColorMapCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_ResetCategoricalColorMapCmd$Response]));
  ss.initClass($tab_ResetCategoricalColorMapCmd$Response);
  ss.initClass($tab_SaveAsCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_SaveAsCmd$Response]));
  ss.initClass($tab_SaveAsCmd$Response);
  ss.initClass($tab_SaveCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_SaveCmd$Response]));
  ss.initClass($tab_SaveCmd$Response);
  ss.initClass($tab_SaveDatasourceDialogModel, tab.Model, [tab.IDetachableNotificationHandler, tab.IHandleNotifications]);
  ss.initClass($tab_SaveOrSaveAsCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_SaveOrSaveAsCmd$Response]));
  ss.initClass($tab_SaveOrSaveAsCmd$Response);
  ss.initClass($tab_SelectZoneParentCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SelectZoneParentCmd$Response]));
  ss.initClass($tab_SelectZoneParentCmd$Response);
  ss.initClass($tab_SetCategoricalLegendItemColorCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetCategoricalLegendItemColorCmd$Response]));
  ss.initClass($tab_SetCategoricalLegendItemColorCmd$Response);
  ss.initClass($tab_SetDensityColorEncodingCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetDensityColorEncodingCmd$Response]));
  ss.initClass($tab_SetDensityColorEncodingCmd$Response);
  ss.initClass($tab_SetDensityIntensityCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetDensityIntensityCmd$Response]));
  ss.initClass($tab_SetDensityIntensityCmd$Response);
  ss.initClass($tab_SetDensityKernelSizeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetDensityKernelSizeCmd$Response]));
  ss.initClass($tab_SetDensityKernelSizeCmd$Response);
  ss.initClass($tab_SetSelectedLegendItemsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetSelectedLegendItemsCmd$Response]));
  ss.initClass($tab_SetSelectedLegendItemsCmd$Response);
  ss.initClass($tab_SetSidePaneExpansionStateCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetSidePaneExpansionStateCmd$Response]));
  ss.initClass($tab_SetSidePaneExpansionStateCmd$Response);
  ss.initClass($tab_SetStackZoneChildSizeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetStackZoneChildSizeCmd$Response]));
  ss.initClass($tab_SetStackZoneChildSizeCmd$Response);
  ss.initClass($tab_SetZoneIsFixedSizeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetZoneIsFixedSizeCmd$Response]));
  ss.initClass($tab_SetZoneIsFixedSizeCmd$Response);
  ss.initClass($tab_SetZoneStyleCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SetZoneStyleCmd$Response]));
  ss.initClass($tab_SetZoneStyleCmd$Response);
  ss.initClass($tab_SheetThumbnailCache);
  ss.initClass($tab_ShelfClientCommands);
  ss.initClass($tab_SortNestedCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_SortNestedCmd$Response]));
  ss.initClass($tab_SortNestedCmd$Response);
  ss.initClass($tab_TableCalcAddCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcAddCmd$Response]));
  ss.initClass($tab_TableCalcAddCmd$Response);
  ss.initClass($tab_TableCalcChangeTypeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcChangeTypeCmd$Response]));
  ss.initClass($tab_TableCalcChangeTypeCmd$Response);
  ss.initClass($tab_TableCalcCloseCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcCloseCmd$Response]));
  ss.initClass($tab_TableCalcCloseCmd$Response);
  ss.initClass($tab_TableCalcDialogActivatedCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcDialogActivatedCmd$Response]));
  ss.initClass($tab_TableCalcDialogActivatedCmd$Response);
  ss.initClass($tab_TableCalcEditCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcEditCmd$Response]));
  ss.initClass($tab_TableCalcEditCmd$Response);
  ss.initClass($tab_TableCalcEditDefaultsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcEditDefaultsCmd$Response]));
  ss.initClass($tab_TableCalcEditDefaultsCmd$Response);
  ss.initClass($tab_TableCalcEditNestedTableCalcCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcEditNestedTableCalcCmd$Response]));
  ss.initClass($tab_TableCalcEditNestedTableCalcCmd$Response);
  ss.initClass($tab_TableCalcSetAddressingFieldsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetAddressingFieldsCmd$Response]));
  ss.initClass($tab_TableCalcSetAddressingFieldsCmd$Response);
  ss.initClass($tab_TableCalcSetAddressingFieldsOrderCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetAddressingFieldsOrderCmd$Response]));
  ss.initClass($tab_TableCalcSetAddressingFieldsOrderCmd$Response);
  ss.initClass($tab_TableCalcSetAtTheLevelFieldCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetAtTheLevelFieldCmd$Response]));
  ss.initClass($tab_TableCalcSetAtTheLevelFieldCmd$Response);
  ss.initClass($tab_TableCalcSetCompoundRateCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetCompoundRateCmd$Response]));
  ss.initClass($tab_TableCalcSetCompoundRateCmd$Response);
  ss.initClass($tab_TableCalcSetCumulativeOptionsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetCumulativeOptionsCmd$Response]));
  ss.initClass($tab_TableCalcSetCumulativeOptionsCmd$Response);
  ss.initClass($tab_TableCalcSetNullIfIncompleteCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetNullIfIncompleteCmd$Response]));
  ss.initClass($tab_TableCalcSetNullIfIncompleteCmd$Response);
  ss.initClass($tab_TableCalcSetOrderingTypeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetOrderingTypeCmd$Response]));
  ss.initClass($tab_TableCalcSetOrderingTypeCmd$Response);
  ss.initClass($tab_TableCalcSetPercentTotalOptionsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetPercentTotalOptionsCmd$Response]));
  ss.initClass($tab_TableCalcSetPercentTotalOptionsCmd$Response);
  ss.initClass($tab_TableCalcSetRankSortDirectionCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetRankSortDirectionCmd$Response]));
  ss.initClass($tab_TableCalcSetRankSortDirectionCmd$Response);
  ss.initClass($tab_TableCalcSetRankTypeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetRankTypeCmd$Response]));
  ss.initClass($tab_TableCalcSetRankTypeCmd$Response);
  ss.initClass($tab_TableCalcSetReferenceOptionsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetReferenceOptionsCmd$Response]));
  ss.initClass($tab_TableCalcSetReferenceOptionsCmd$Response);
  ss.initClass($tab_TableCalcSetRestartEveryFieldCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetRestartEveryFieldCmd$Response]));
  ss.initClass($tab_TableCalcSetRestartEveryFieldCmd$Response);
  ss.initClass($tab_TableCalcSetSortAggregationCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetSortAggregationCmd$Response]));
  ss.initClass($tab_TableCalcSetSortAggregationCmd$Response);
  ss.initClass($tab_TableCalcSetSortDirectionCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetSortDirectionCmd$Response]));
  ss.initClass($tab_TableCalcSetSortDirectionCmd$Response);
  ss.initClass($tab_TableCalcSetSortFieldCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetSortFieldCmd$Response]));
  ss.initClass($tab_TableCalcSetSortFieldCmd$Response);
  ss.initClass($tab_TableCalcSetSortModeCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetSortModeCmd$Response]));
  ss.initClass($tab_TableCalcSetSortModeCmd$Response);
  ss.initClass($tab_TableCalcSetWindowOptionsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcSetWindowOptionsCmd$Response]));
  ss.initClass($tab_TableCalcSetWindowOptionsCmd$Response);
  ss.initClass($tab_TableCalcToggleSecondaryCalcCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcToggleSecondaryCalcCmd$Response]));
  ss.initClass($tab_TableCalcToggleSecondaryCalcCmd$Response);
  ss.initClass($tab_TableCalcToggleShowCalcAssistanceCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_TableCalcToggleShowCalcAssistanceCmd$Response]));
  ss.initClass($tab_TableCalcToggleShowCalcAssistanceCmd$Response);
  ss.initClass($tab_UpdateMarkLabelsSettingsCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_UpdateMarkLabelsSettingsCmd$Response]));
  ss.initClass($tab_UpdateMarkLabelsSettingsCmd$Response);
  ss.initClass($tab_UpdateReferenceLineCmd, ss.makeGenericType(tab.BaseCmd$2, [Object, $tab_UpdateReferenceLineCmd$Response]));
  ss.initClass($tab_UpdateReferenceLineCmd$Response);
  ss.initClass($tab_WebConnectDataCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebConnectDataCmd$Response]));
  ss.initClass($tab_WebConnectDataCmd$Response);
  ss.initClass($tab_WebDashboardDesignCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebDashboardDesignCmd$Response]));
  ss.initClass($tab_WebDashboardDesignCmd$Response);
  ss.initClass($tab_WebEditDataSourceCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebEditDataSourceCmd$Response]));
  ss.initClass($tab_WebEditDataSourceCmd$Response);
  ss.initClass($tab_WebEditObjectCaptionCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebEditObjectCaptionCmd$Response]));
  ss.initClass($tab_WebEditObjectCaptionCmd$Response);
  ss.initClass($tab_WebExportCrossTabCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportCrossTabCmd$Response]));
  ss.initClass($tab_WebExportCrossTabCmd$Response);
  ss.initClass($tab_WebExportDataCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportDataCmd$Response]));
  ss.initClass($tab_WebExportDataCmd$Response);
  ss.initClass($tab_WebExportPdfCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportPdfCmd$Response]));
  ss.initClass($tab_WebExportPdfCmd$Response);
  ss.initClass($tab_WebExportPngCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportPngCmd$Response]));
  ss.initClass($tab_WebExportPngCmd$Response);
  ss.initClass($tab_WebExportPowerPointCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebExportPowerPointCmd$Response]));
  ss.initClass($tab_WebExportPowerPointCmd$Response);
  ss.initClass($tab_WebFilterDialogDomainCancelCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebFilterDialogDomainCancelCmd$Response]));
  ss.initClass($tab_WebFilterDialogDomainCancelCmd$Response);
  ss.initClass($tab_WebFormatWorkbookCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebFormatWorkbookCmd$Response]));
  ss.initClass($tab_WebFormatWorkbookCmd$Response);
  ss.initClass($tab_WebRemoveShelfPillCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebRemoveShelfPillCmd$Response]));
  ss.initClass($tab_WebRemoveShelfPillCmd$Response);
  ss.initClass($tab_WebRenameDatasourceDialogCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebRenameDatasourceDialogCmd$Response]));
  ss.initClass($tab_WebRenameDatasourceDialogCmd$Response);
  ss.initClass($tab_WebShowMeCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebShowMeCmd$Response]));
  ss.initClass($tab_WebShowMeCmd$Response);
  ss.initClass($tab_WebToolbarMoreCmd, ss.makeGenericType(tab.WebBaseCmd$2, [Object, $tab_WebToolbarMoreCmd$Response]));
  ss.initClass($tab_WebToolbarMoreCmd$Response);
  (function() {
    $tab_BuildShelfItemContextMenuCmd.cmdId = { ns: 'tabdoc', cmd: 'build-shelf-item-context-menu' };
  })();
  (function() {
    $tab_LaunchFilterDialogCmd.cmdId = { ns: 'tabdoc', cmd: 'launch-filter-dialog' };
  })();
  (function() {
    $tab_ShelfClientCommands.$jsonTrueStr = JSON.stringify(true);
  })();
  (function() {
    $tab_AssignCategoricalColorPaletteCmd.cmdId = { ns: 'tabdoc', cmd: 'assign-categorical-color-palette' };
  })();
  (function() {
    var $t1 = tab.ApplicationModel.get_instance();
    $t1.modelInstance($tab_AuthoringLeftAreaExpansionModel).call($t1);
  })();
  (function() {
    $tab_AutofitDevConfigurationCmd.cmdId = { ns: 'tabdoc', cmd: 'autofit-dev-configuration' };
  })();
  (function() {
    $tab_AutofitWith1DContainersMultiRunUsingWebThresholdsCmd.cmdId = { ns: 'tabdoc', cmd: 'autofit-with1-dcontainers-multi-run-using-web-thresholds' };
  })();
  (function() {
    $tab_AutofitWith1DContainersUsingWebThresholdsCmd.cmdId = { ns: 'tabdoc', cmd: 'autofit-with1-dcontainers-using-web-thresholds' };
  })();
  (function() {
    $tab_BuildMainMenuCmd.cmdId = { ns: 'tabdoc', cmd: 'build-main-menu' };
  })();
  (function() {
    $tab_CalculationCommands.fakeDsName = '__fake ds name__';
    $tab_CalculationCommands.registerCommandInterceptors();
  })();
  (function() {
    var $t1 = tab.ApplicationModel.get_instance();
    $t1.addModel($tab_CategoricalColorEditorDialogModel).call($t1);
  })();
  (function() {
    $tab_ChangeLineInterpolationCmd.cmdId = { ns: 'tabdoc', cmd: 'change-line-interpolation' };
  })();
  (function() {
    $tab_CloseAuthoringCmd.cmdId = { ns: 'tabdoc', cmd: 'close-authoring' };
  })();
  (function() {
    var $t1 = tab.ApplicationModel.get_instance();
    $t1.addModel($tab_CloseDataSourceErrorDialogModel).call($t1);
  })();
  (function() {
    $tab_CloseMapLayersPaneCmd.cmdId = { ns: 'tabdoc', cmd: 'close-map-layers-pane' };
  })();
  (function() {
    $tab_CloseRefLineEditorCmd.cmdId = { ns: 'tabdoc', cmd: 'close-ref-line-editor' };
  })();
  (function() {
    $tab_HideZoneCmd.cmdId = { ns: 'tabdoc', cmd: 'hide-zone' };
  })();
  (function() {
    $tab_ReplaceZoneCmd.cmdId = { ns: 'tabdoc', cmd: 'replace-zone' };
  })();
  (function() {
    $tab_SelectZoneParentCmd.cmdId = { ns: 'tabdoc', cmd: 'select-zone-parent' };
  })();
  (function() {
    $tab_GetDragZoneResizeCmd.cmdId = { ns: 'tabdoc', cmd: 'get-drag-zone-resize' };
  })();
  (function() {
    $tab_MoveDashboardEdgeCmd.cmdId = { ns: 'tabdoc', cmd: 'move-dashboard-edge' };
  })();
  (function() {
    $tab_SetZoneStyleCmd.cmdId = { ns: 'tabdoc', cmd: 'set-zone-style' };
  })();
  (function() {
    $tab_EditWebZoneUrlCmd.cmdId = { ns: 'tabdoc', cmd: 'edit-web-zone-url' };
  })();
  (function() {
    $tab_SetZoneIsFixedSizeCmd.cmdId = { ns: 'tabdoc', cmd: 'set-zone-is-fixed-size' };
  })();
  (function() {
    $tab_SetStackZoneChildSizeCmd.cmdId = { ns: 'tabdoc', cmd: 'set-stack-zone-child-size' };
  })();
  (function() {
    $tab_ModifyBorderCmd.cmdId = { ns: 'tabdoc', cmd: 'modify-border' };
  })();
  (function() {
    $tab_ModifyBackgroundShadingCmd.cmdId = { ns: 'tabdoc', cmd: 'modify-background-shading' };
  })();
  (function() {
    $tab_ModifyMarginCmd.cmdId = { ns: 'tabdoc', cmd: 'modify-margin' };
  })();
  (function() {
    $tab_ModifyPaddingCmd.cmdId = { ns: 'tabdoc', cmd: 'modify-padding' };
  })();
  (function() {
    $tab_DropReferenceLineOnFilterShelfCmd.cmdId = { ns: 'tabdoc', cmd: 'drop-ref-line-on-filter-shelf' };
  })();
  (function() {
    $tab_DropReferenceLineOnSchemaViewerCmd.cmdId = { ns: 'tabdoc', cmd: 'drop-ref-line-on-schema-viewer' };
  })();
  (function() {
    $tab_DropReferenceLineOnShelfCmd.cmdId = { ns: 'tabdoc', cmd: 'drop-ref-line-on-shelf' };
  })();
  (function() {
    var $t1 = tab.ApplicationModel.get_instance();
    $t1.modelInstance($tab_ExpandedSidePaneWidthModel).call($t1);
  })();
  (function() {
    $tab_GetDensityColorPalettesCmd.cmdId = { ns: 'tabdoc', cmd: 'get-density-color-palettes' };
  })();
  (function() {
    $tab_GetRefLineDragInfoCmd.cmdId = { ns: 'tabdoc', cmd: 'get-ref-line-drag-info' };
  })();
  (function() {
    $tab_GetRefLineFormulaCmd.cmdId = { ns: 'tabdoc', cmd: 'get-ref-line-formula' };
  })();
  (function() {
    $tab_GetTrendLineDragInfoCmd.cmdId = { ns: 'tabdoc', cmd: 'get-trend-line-drag-info' };
  })();
  (function() {
    $tab_UpdateMarkLabelsSettingsCmd.cmdId = { ns: 'tabdoc', cmd: 'update-mark-labels-settings' };
  })();
  (function() {
    $tab_SetDensityColorEncodingCmd.cmdId = { ns: 'tabdoc', cmd: 'set-density-color-encoding' };
  })();
  (function() {
    $tab_SetDensityKernelSizeCmd.cmdId = { ns: 'tabdoc', cmd: 'set-density-kernel-size' };
  })();
  (function() {
    $tab_SetDensityIntensityCmd.cmdId = { ns: 'tabdoc', cmd: 'set-density-intensity' };
  })();
  (function() {
    $tab_PresentationModeAffordanceSet.$disabledAffordances = ['zoneWidgetry', 'sidePane'];
    if (tsConfig.is_desktop) {
      tabBootstrap.ViewerBootstrap.get_instance().get_affordances().register(new $tab_PresentationModeAffordanceSet());
    }
  })();
  (function() {
    $tab_QuickSortAscendingCmd.cmdId = { ns: 'tabdoc', cmd: 'quick-sort-ascending' };
  })();
  (function() {
    $tab_QuickSortDescendingCmd.cmdId = { ns: 'tabdoc', cmd: 'quick-sort-descending' };
  })();
  (function() {
    var $t1 = tab.ApplicationModel.get_instance();
    $t1.addModel($tab_ReferenceLineEditorModel).call($t1);
  })();
  (function() {
    $tab_ReleaseComponentCmd.cmdId = { ns: 'tabdoc', cmd: 'release-component' };
  })();
  (function() {
    $tab_ReorderSheetsCmd.cmdId = { ns: 'tabdoc', cmd: 'reorder-sheets' };
  })();
  (function() {
    $tab_ReplaceDataSourceWithDataServerDataSourceServerCmd.cmdId = { ns: 'tabsrv', cmd: 'replace-data-source-with-data-server-data-source-server' };
  })();
  (function() {
    $tab_ResetCategoricalColorMapCmd.cmdId = { ns: 'tabdoc', cmd: 'reset-categorical-color-map' };
  })();
  (function() {
    $tab_SaveAsCmd.cmdId = { ns: 'tabdoc', cmd: 'save-as' };
  })();
  (function() {
    $tab_SaveCmd.cmdId = { ns: 'tabdoc', cmd: 'save' };
  })();
  (function() {
    $tab_SaveOrSaveAsCmd.cmdId = { ns: 'tabdoc', cmd: 'save-or-save-as' };
  })();
  (function() {
    $tab_SetCategoricalLegendItemColorCmd.cmdId = { ns: 'tabdoc', cmd: 'set-categorical-legend-item-color' };
  })();
  (function() {
    $tab_SetSelectedLegendItemsCmd.cmdId = { ns: 'tabdoc', cmd: 'set-selected-legend-items' };
  })();
  (function() {
    $tab_SetSidePaneExpansionStateCmd.cmdId = { ns: 'tabdoc', cmd: 'set-side-pane-expansion-state' };
  })();
  (function() {
    $tab_SheetThumbnailCache.$maxCacheEntries = 75;
  })();
  (function() {
    $tab_SortNestedCmd.cmdId = { ns: 'tabdoc', cmd: 'sort-nested' };
  })();
  (function() {
    $tab_TableCalcAddCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-add' };
  })();
  (function() {
    $tab_TableCalcChangeTypeCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-change-type' };
  })();
  (function() {
    $tab_TableCalcCloseCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-close' };
  })();
  (function() {
    $tab_TableCalcDialogActivatedCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-dialog-activated' };
  })();
  (function() {
    $tab_TableCalcEditCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-edit' };
  })();
  (function() {
    $tab_TableCalcEditDefaultsCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-edit-defaults' };
  })();
  (function() {
    $tab_TableCalcEditNestedTableCalcCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-edit-nested' };
  })();
  (function() {
    $tab_TableCalcSetAddressingFieldsCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-addressing-fields' };
  })();
  (function() {
    $tab_TableCalcSetAddressingFieldsOrderCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-addressing-fields-order' };
  })();
  (function() {
    $tab_TableCalcSetAtTheLevelFieldCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-at-the-level-field' };
  })();
  (function() {
    $tab_TableCalcSetCompoundRateCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-compound-rate' };
  })();
  (function() {
    $tab_TableCalcSetCumulativeOptionsCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-cumulative-options' };
  })();
  (function() {
    $tab_TableCalcSetNullIfIncompleteCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-null-if-incomplete' };
  })();
  (function() {
    $tab_TableCalcSetOrderingTypeCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-ordering-type' };
  })();
  (function() {
    $tab_TableCalcSetPercentTotalOptionsCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-percent-total-options' };
  })();
  (function() {
    $tab_TableCalcSetRankSortDirectionCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-rank-sort-direction' };
  })();
  (function() {
    $tab_TableCalcSetRankTypeCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-rank-type' };
  })();
  (function() {
    $tab_TableCalcSetReferenceOptionsCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-reference-options' };
  })();
  (function() {
    $tab_TableCalcSetRestartEveryFieldCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-restart-every-field' };
  })();
  (function() {
    $tab_TableCalcSetSortAggregationCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-sort-aggregation' };
  })();
  (function() {
    $tab_TableCalcSetSortDirectionCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-sort-direction' };
  })();
  (function() {
    $tab_TableCalcSetSortFieldCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-sort-field' };
  })();
  (function() {
    $tab_TableCalcSetSortModeCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-sort-mode' };
  })();
  (function() {
    $tab_TableCalcSetWindowOptionsCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-set-window-options' };
  })();
  (function() {
    $tab_TableCalcToggleSecondaryCalcCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-toggle-secondary-calc' };
  })();
  (function() {
    $tab_TableCalcToggleShowCalcAssistanceCmd.cmdId = { ns: 'tabdoc', cmd: 'table-calc-toggle-show-calc-assistance' };
  })();
  (function() {
    $tab_UpdateReferenceLineCmd.cmdId = { ns: 'tabdoc', cmd: 'update-reference-line' };
  })();
  (function() {
    $tab_WebConnectDataCmd.cmdId = { ns: 'tabdoc', cmd: 'web-connect-data' };
  })();
  (function() {
    $tab_WebDashboardDesignCmd.cmdId = { ns: 'tabdoc', cmd: 'web-dashboard-design' };
  })();
  (function() {
    $tab_WebEditDataSourceCmd.cmdId = { ns: 'tabdoc', cmd: 'web-edit-data-source' };
  })();
  (function() {
    $tab_WebEditObjectCaptionCmd.cmdId = { ns: 'tabdoc', cmd: 'web-edit-object-caption' };
  })();
  (function() {
    $tab_WebExportCrossTabCmd.cmdId = { ns: 'tabdoc', cmd: 'web-export-cross-tab' };
  })();
  (function() {
    $tab_WebExportDataCmd.cmdId = { ns: 'tabdoc', cmd: 'web-export-data' };
  })();
  (function() {
    $tab_WebExportPdfCmd.cmdId = { ns: 'tabdoc', cmd: 'web-export-pdf' };
  })();
  (function() {
    $tab_WebExportPngCmd.cmdId = { ns: 'tabdoc', cmd: 'web-export-png' };
  })();
  (function() {
    $tab_WebExportPowerPointCmd.cmdId = { ns: 'tabdoc', cmd: 'web-export-power-point' };
  })();
  (function() {
    $tab_WebFilterDialogDomainCancelCmd.cmdId = { ns: 'tabdoc', cmd: 'web-filter-dialog-domain-cancel' };
  })();
  (function() {
    $tab_WebFormatWorkbookCmd.cmdId = { ns: 'tabdoc', cmd: 'web-format-workbook' };
  })();
  (function() {
    $tab_WebRemoveShelfPillCmd.cmdId = { ns: 'tabdoc', cmd: 'web-remove-shelf-pill' };
  })();
  (function() {
    $tab_WebRenameDatasourceDialogCmd.cmdId = { ns: 'tabdoc', cmd: 'web-rename-datasource-dialog' };
  })();
  (function() {
    $tab_WebShowMeCmd.cmdId = { ns: 'tabdoc', cmd: 'web-show-me' };
  })();
  (function() {
    $tab_WebToolbarMoreCmd.cmdId = { ns: 'tabdoc', cmd: 'web-toolbar-more' };
  })();
})();
// END AuthoringDomain
