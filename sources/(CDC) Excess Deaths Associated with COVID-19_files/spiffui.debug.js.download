/*! BEGIN SpiffUI */

(function() {
  'dont use strict';
  var $asm = {};
  global.spiff = global.spiff || {};
  ss.initAssembly($asm, 'spiffui');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.AugmentedIScroll
  var $spiff_$AugmentedIScroll = ss.mkType($asm, 'spiff.$AugmentedIScroll', function(wrapper, scrollProps) {
    this.$wrapper = null;
    this.$augmentedScrollX = true;
    this.$augmentedScrollY = true;
    IScroll.call(this, wrapper, scrollProps.iScrollOptions);
    this.$wrapper = wrapper;
    this.$augmentedScrollX = scrollProps.augmentedScrollX;
    this.$augmentedScrollY = scrollProps.augmentedScrollY;
  }, {
    refresh: function AugmentedIScroll$Refresh() {
      IScroll.prototype.refresh.call(this);
      if (this.$augmentedScrollX) {
        var horizontalScrollBar = $(this.$wrapper).find('.' + 'iScrollHorizontalScrollbar');
        horizontalScrollBar.toggleClass('noScroll', !this.hasHorizontalScroll);
      }
      if (this.$augmentedScrollY) {
        var verticalScrollBar = $(this.$wrapper).find('.' + 'iScrollVerticalScrollbar');
        verticalScrollBar.toggleClass('noScroll', !this.hasVerticalScroll);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DefaultListViewScrollHandler
  var $spiff_$DefaultListViewScrollHandler = ss.mkType($asm, 'spiff.$DefaultListViewScrollHandler', function(listRoot) {
    this.$listRoot = null;
    this.$listRoot = listRoot;
  }, {
    get_scrollViewPagePosition: function DefaultListViewScrollHandler$get_ScrollViewPagePosition() {
      return tab.DomUtil.getElementPosition(this.$listRoot);
    },
    get_scrollViewSize: function DefaultListViewScrollHandler$get_ScrollViewSize() {
      return { w: this.$listRoot[0].offsetWidth, h: this.$listRoot[0].offsetHeight };
    },
    scrollToElement: function DefaultListViewScrollHandler$ScrollToElement(item, listTopOffset) {
      var itemTop = item.offsetTop;
      var itemBottom = itemTop + item.offsetHeight;
      var scrollViewTop = tab.DoubleUtil.roundToInt(this.$listRoot.scrollTop());
      var scrollViewBottom = scrollViewTop + this.$listRoot[0].offsetHeight;
      if (itemTop < scrollViewTop) {
        var y = ((itemTop <= listTopOffset) ? 0 : itemTop);
        this.$listRoot.scrollTop(y);
      }
      else if (itemBottom > scrollViewBottom) {
        this.$listRoot.scrollTop(scrollViewTop + itemBottom - scrollViewBottom);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.EditableTextViewTemplate
  var $spiff_$EditableTextViewTemplate = ss.mkType($asm, 'spiff.$EditableTextViewTemplate', function() {
    this.$textElement = null;
    this.$inputElement = null;
    this.$textSpan = null;
    $spiff_Template.call(this, $($spiff_$EditableTextViewTemplate.$htmlTemplate));
    this.$textElement = this.getElementBySelector('.view-mode');
    this.$inputElement = this.getElementBySelector('.edit-mode');
    this.$textSpan = this.$textElement.find('.text-span');
  }, {
    get_domRootElement: function EditableTextViewTemplate$get_DomRootElement() {
      return this.domRoot;
    },
    get_$textElement: function EditableTextViewTemplate$get_TextElement() {
      return this.$textElement;
    },
    get_inputElement: function EditableTextViewTemplate$get_InputElement() {
      return this.$inputElement;
    },
    get_$textSpan: function EditableTextViewTemplate$get_TextSpan() {
      return this.$textSpan;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.FocusManager.InputType
  var $spiff_$FocusManager$InputType = ss.mkEnum($asm, 'spiff.$FocusManager$InputType', { $pointer: 0, $keyboard: 1, $unknown: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.FocusManager.NavigationKeyState
  var $spiff_$FocusManager$NavigationKeyState = ss.mkType($asm, 'spiff.$FocusManager$NavigationKeyState', function() {
  }, null, {
    $set: function NavigationKeyState$Set(keyCode, state) {
      if (keyCode === 9) {
        $spiff_$FocusManager$NavigationKeyState.$navKeysDown[0] = state;
      }
      else if (keyCode === 27) {
        $spiff_$FocusManager$NavigationKeyState.$navKeysDown[1] = state;
      }
      else if (keyCode >= 33 && keyCode <= 40) {
        $spiff_$FocusManager$NavigationKeyState.$navKeysDown[keyCode - 31] = state;
      }
    },
    $clear: function NavigationKeyState$Clear() {
      $spiff_$FocusManager$NavigationKeyState.$navKeysDown = new Array(10);
    },
    $isAnyDown: function NavigationKeyState$IsAnyDown() {
      for (var i = 0; i < $spiff_$FocusManager$NavigationKeyState.$navKeysDown.length; i++) {
        if ($spiff_$FocusManager$NavigationKeyState.$navKeysDown[i]) {
          return true;
        }
      }
      return false;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScrollScrollingComponent
  var $spiff_$IScrollScrollingComponent = ss.mkType($asm, 'spiff.$IScrollScrollingComponent', function(props, context) {
    $spiff_ScrollingComponent.call(this, props, context);
  }, {
    get_scrollingControl: function IScrollScrollingComponent$get_ScrollingControl() {
      var scrollComponent = this.refs['iscroll-component'];
      if (ss.isValue(scrollComponent) && ss.isValue(scrollComponent.iScroll)) {
        return new $spiff_$IScrollScrollingComponent$IScrollScrollingControl(scrollComponent.iScroll);
      }
      return null;
    },
    componentDidMount: function IScrollScrollingComponent$ComponentDidMount() {
      if (!ss.staticEquals(this.props.onScrollingControlRefUpdated, null)) {
        this.props.onScrollingControlRefUpdated(this.get_scrollingControl());
      }
    },
    componentWillUnmount: function IScrollScrollingComponent$ComponentWillUnmount() {
      if (!ss.staticEquals(this.props.onScrollingControlRefUpdated, null)) {
        this.props.onScrollingControlRefUpdated(null);
      }
    },
    render: function IScrollScrollingComponent$Render() {
      var iscrollProps = $spiff_$IScrollScrollingComponent.$convertProps(this.props);
      return React.createElement($spiff_IScrollComponent, iscrollProps, this.props.children);
    }
  }, {
    get_$defaultProps: function IScrollScrollingComponent$get_DefaultProps() {
      var $t1 = new $spiff_IScrollProps();
      $t1.iScrollOptions = { preventDefaultException: ss.mkdict(['tagName', new RegExp('^(INPUT|TEXTAREA|BUTTON|SELECT|A)$')]), disableMouse: true, interactiveScrollbars: true, mouseWheel: true };
      $t1.ref = 'iscroll-component';
      return $t1;
    },
    $convertProps: function IScrollScrollingComponent$ConvertProps(props) {
      var result = $spiff_$IScrollScrollingComponent.get_$defaultProps();
      result.augmentedScrollX = props.augmentedScrollX;
      result.augmentedScrollY = props.augmentedScrollY;
      result.extraCssClass = props.extraCssClass;
      result.iScrollOptions.scrollX = props.scrollX;
      result.iScrollOptions.scrollY = props.scrollY;
      result.scrollStopCallback = props.onScrollStop;
      result.scrollCallback = props.onScroll;
      result.alwaysShowScrollbarsIfScrollable = props.alwaysShowScrollbarsIfScrollable;
      result.startingY = ss.Nullable$1.neg(props.startingY);
      result.customStyle = props.customStyle;
      if (props.scrollbars) {
        result.iScrollOptions.scrollbars = 'custom';
      }
      return result;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScrollScrollingComponent.IScrollScrollingControl
  var $spiff_$IScrollScrollingComponent$IScrollScrollingControl = ss.mkType($asm, 'spiff.$IScrollScrollingComponent$IScrollScrollingControl', function(control) {
    this.$control = null;
    this.$control = control;
  }, {
    get_x: function IScrollScrollingControl$get_X() {
      return this.$control.x;
    },
    get_y: function IScrollScrollingControl$get_Y() {
      return -this.$control.y;
    },
    get_maxScrollX: function IScrollScrollingControl$get_MaxScrollX() {
      return this.$control.maxScrollX;
    },
    get_maxScrollY: function IScrollScrollingControl$get_MaxScrollY() {
      return -this.$control.maxScrollY;
    },
    get_canScroll: function IScrollScrollingControl$get_CanScroll() {
      return this.$control.hasHorizontalScroll || this.$control.hasVerticalScroll;
    },
    scrollBy: function IScrollScrollingControl$ScrollBy(deltaX, deltaY) {
      this.$doScroll(ss.mkdel(this, function() {
        this.$control.scrollBy(-deltaX, -deltaY, 0, null);
      }));
    },
    scrollTo: function IScrollScrollingControl$ScrollTo(x, y) {
      this.$doScroll(ss.mkdel(this, function() {
        this.$control.scrollTo(-x, -y, 0, null);
      }));
    },
    $scrollToElement: function IScrollScrollingControl$ScrollToElement(element) {
      this.$doScroll(ss.mkdel(this, function() {
        this.$control.scrollToElement(element);
      }));
    },
    scrollToElement: function IScrollScrollingControl$ScrollToElement(element, offsetX, offsetY) {
      this.$doScroll(ss.mkdel(this, function() {
        this.$control.scrollToElement(element, 0, offsetX, offsetY);
      }));
    },
    destroy: function IScrollScrollingControl$Destroy() {
      this.$control.destroy();
    },
    resetPosition: function IScrollScrollingControl$ResetPosition() {
      this.$control.resetPosition();
    },
    refresh: function IScrollScrollingControl$Refresh() {
      this.$control.refresh();
    },
    handleEvent: function IScrollScrollingControl$HandleEvent(e) {
      this.$control.handleEvent(e);
    },
    $doScroll: function IScrollScrollingControl$DoScroll(scrollAction) {
      window.setTimeout(ss.mkdel(this, function() {
        this.$control.refresh();
        scrollAction();
      }), 0);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuItemTemplate
  var $spiff_$MenuItemTemplate = ss.mkType($asm, 'spiff.$MenuItemTemplate', function() {
    this.$nameArea = null;
    this.$name = null;
    this.$icon = null;
    this.$iconTwo = null;
    this.$description = null;
    this.$subMenu = null;
    this.$hasDescription = false;
    this.$hasIcon = false;
    this.$hasIconTwo = false;
    $spiff_Template.call(this, $($spiff_$MenuItemTemplate.$html));
  }, {
    get_$nameArea: function MenuItemTemplate$get_NameArea() {
      return this.$nameArea || (this.$nameArea = this.getElementBySelector('.tabMenuItemNameArea'));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuItemTemplate.MenuTemplateBuilder
  var $spiff_$MenuItemTemplate$MenuTemplateBuilder = ss.mkType($asm, 'spiff.$MenuItemTemplate$MenuTemplateBuilder', function(name, isEnabled) {
    this.$templ = new $spiff_$MenuItemTemplate();
    this.$templ.$name = this.$templ.getElementBySelector('.tabMenuItemName');
    this.$templ.$name.text(name);
    if (!isEnabled) {
      this.$templ.domRoot.addClass('tabDisabled').attr('aria-disabled', 'true');
    }
  }, {
    $icon: function MenuTemplateBuilder$Icon(state, iconClass) {
      switch (state) {
        case 1: {
          this.$templ.$icon = $("<div class='tabMenuItemIcon tabMenuItemCheckIcon'></div>");
          this.$templ.domRoot.attr('role', 'menuitemcheckbox').attr('aria-checked', 'true').prepend(this.$templ.$icon);
          this.$templ.$hasIcon = true;
          break;
        }
        case 2: {
          this.$templ.$icon = $("<div class='tabMenuItemIcon tabMenuItemRadioIcon'></div>");
          this.$templ.domRoot.attr('role', 'menuitemcheckbox').attr('aria-checked', 'true').prepend(this.$templ.$icon);
          this.$templ.$hasIcon = true;
          break;
        }
        default: {
          if (state === 0 && !ss.isNullOrEmptyString(iconClass)) {
            this.$templ.$icon = $(ss.formatString("<div class='tabMenuItemIcon {0}'></div>", iconClass));
            this.$templ.domRoot.prepend(this.$templ.$icon);
            this.$templ.$hasIcon = true;
          }
          break;
        }
      }
      return this;
    },
    $iconTwo: function MenuTemplateBuilder$IconTwo(iconTwoClass) {
      if (ss.isNullOrEmptyString(iconTwoClass)) {
        return this;
      }
      this.$templ.$iconTwo = $(ss.formatString("<span class='tabMenuItemIconTwo {0}'></span>", iconTwoClass));
      this.$templ.get_$nameArea().append(this.$templ.$iconTwo);
      this.$templ.$hasIconTwo = true;
      return this;
    },
    $description: function MenuTemplateBuilder$Description(desc) {
      if (ss.isNullOrEmptyString(desc)) {
        return this;
      }
      this.$templ.$description = $("<div class='tabMenuItemDesc'></div>");
      this.$templ.$description.text(desc);
      this.$templ.get_$nameArea().append(this.$templ.$description);
      this.$templ.$hasDescription = true;
      return this;
    },
    $title: function MenuTemplateBuilder$Title(title) {
      if (ss.isNullOrEmptyString(title)) {
        return this;
      }
      this.$templ.domRoot.attr('title', title);
      return this;
    },
    $subMenu: function MenuTemplateBuilder$SubMenu(sub) {
      if (ss.isNullOrUndefined(sub)) {
        return this;
      }
      this.$templ.$subMenu = $("<div class='tabMenuItemSubMenuIcon'></div>");
      this.$templ.domRoot.append(this.$templ.$subMenu);
      return this;
    },
    $theme: function MenuTemplateBuilder$Theme(itemClasses) {
      for (var $t1 = 0; $t1 < itemClasses.length; $t1++) {
        var itemClass = itemClasses[$t1];
        if (ss.isValue(itemClass)) {
          this.$templ.domRoot.addClass(itemClass);
        }
      }
      return this;
    },
    $build: function MenuTemplateBuilder$Build() {
      var ret = this.$templ;
      this.$templ = null;
      return ret;
    },
    dispose: function MenuTemplateBuilder$Dispose() {
      this.$templ.dispose();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ScrollableViewListViewScrollHandler
  var $spiff_$ScrollableViewListViewScrollHandler = ss.mkType($asm, 'spiff.$ScrollableViewListViewScrollHandler', function(scrollableView) {
    this.$scrollableView = null;
    this.$scrollableView = scrollableView;
  }, {
    get_scrollViewPagePosition: function ScrollableViewListViewScrollHandler$get_ScrollViewPagePosition() {
      return tab.DomUtil.getElementPosition(this.$scrollableView.element);
    },
    get_scrollViewSize: function ScrollableViewListViewScrollHandler$get_ScrollViewSize() {
      return { w: tab.DoubleUtil.roundToInt(this.$scrollableView.element.outerWidth()), h: tab.DoubleUtil.roundToInt(this.$scrollableView.element.outerHeight()) };
    },
    scrollToElement: function ScrollableViewListViewScrollHandler$ScrollToElement(item, listTopOffset) {
      var itemTop = item.offsetTop;
      var itemBottom = itemTop + item.offsetHeight;
      var scrollViewTop = this.$scrollableView.get_scrollerY();
      var scrollViewBottom = scrollViewTop + tab.DoubleUtil.roundToInt(this.$scrollableView.element.height());
      if (itemTop < scrollViewTop) {
        var y = ((itemTop <= listTopOffset) ? 0 : itemTop);
        this.$scrollableView.scrollTo(this.$scrollableView.get_scrollerX(), y, 0, null);
      }
      else if (itemBottom > scrollViewBottom) {
        this.$scrollableView.scrollTo(this.$scrollableView.get_scrollerX(), scrollViewTop + itemBottom - scrollViewBottom, 0, null);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.SelectableButtonComponent
  var $spiff_$SelectableButtonComponent = ss.mkType($asm, 'spiff.$SelectableButtonComponent', function(props) {
    ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]).call(this, props);
  }, {
    get_className: function SelectableButtonComponent$get_ClassName() {
      var classNames = [ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]).prototype.get_className.call(this)];
      classNames.push($spiff_UnificationClassNames.selectable);
      if (this.props.isSelected) {
        classNames.push($spiff_UnificationClassNames.selected);
        if (this.props.isButtonTextMarkedAsExcluded) {
          classNames.push($spiff_UnificationClassNames.excluded);
        }
      }
      else {
        classNames.push($spiff_UnificationClassNames.unselected);
        classNames.push($spiff_UnificationClassNames.designTint);
      }
      return classNames.join(' ');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.TabControlLabelTemplate
  var $spiff_$TabControlLabelTemplate = ss.mkType($asm, 'spiff.$TabControlLabelTemplate', function() {
    $spiff_Template.call(this, $($spiff_$TabControlLabelTemplate.$html));
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.TabControlTemplate
  var $spiff_$TabControlTemplate = ss.mkType($asm, 'spiff.$TabControlTemplate', function() {
    this.$tabs = null;
    this.$contentArea = null;
    $spiff_Template.call(this, $($spiff_$TabControlTemplate.$html));
    this.$tabs = this.getElementBySelector('.tabTabLabels');
    this.$contentArea = this.getElementBySelector('.tabTabContentArea');
  }, {
    get_root: function TabControlTemplate$get_Root() {
      return this.domRoot;
    },
    get_tabs: function TabControlTemplate$get_Tabs() {
      return this.$tabs;
    },
    get_contentArea: function TabControlTemplate$get_ContentArea() {
      return this.$contentArea;
    },
    createTabLabel: function TabControlTemplate$CreateTabLabel(id, label) {
      return new $spiff_$TabControlLabelTemplate();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.TextInputViewTemplate
  var $spiff_$TextInputViewTemplate = ss.mkType($asm, 'spiff.$TextInputViewTemplate', function() {
    this.$inputElement = null;
    $spiff_Template.call(this, $($spiff_$TextInputViewTemplate.$html));
    this.$inputElement = this.getElementBySelector('.tabTextInputViewInputElement');
  }, {
    get_domRootElement: function TextInputViewTemplate$get_DomRootElement() {
      return this.domRoot;
    },
    get_inputElement: function TextInputViewTemplate$get_InputElement() {
      return this.$inputElement;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.AriaAttrName
  var $spiff_AriaAttrName = global.spiff.AriaAttrName = ss.mkType($asm, 'spiff.AriaAttrName');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.AriaRole
  var $spiff_AriaRole = global.spiff.AriaRole = ss.mkType($asm, 'spiff.AriaRole');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ArrowDropdownButtonComponent
  var $spiff_ArrowDropdownButtonComponent = global.spiff.ArrowDropdownButtonComponent = ss.mkType($asm, 'spiff.ArrowDropdownButtonComponent', function(props) {
    $spiff_PureRenderComponent.call(this, props);
  }, {
    render: function ArrowDropdownButtonComponent$Render() {
      return $spiff_DOMElements.div({ className: 'tab-ArrowDropdownButton' }, $spiff_DOMElements.div({ className: 'arrow down' }));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.BaseComponentViewModel<TProps>
  var $spiff_BaseComponentViewModel$1 = global.spiff.BaseComponentViewModel$1 = ss.mkType($asm, 'spiff.BaseComponentViewModel$1', function(TProps) {
    var $type = ss.registerGenericClassInstance($spiff_BaseComponentViewModel$1, [TProps], function() {
      this.$2$PropsUpdatedField = null;
      this.$2$PropsField = ss.getDefaultValue(TProps);
      $spiff_BaseViewModel.call(this);
    }, {
      add_propsUpdated: function BaseComponentViewModel$add_PropsUpdated(value) {
        this.$2$PropsUpdatedField = ss.delegateCombine(this.$2$PropsUpdatedField, value);
      },
      remove_propsUpdated: function BaseComponentViewModel$remove_PropsUpdated(value) {
        this.$2$PropsUpdatedField = ss.delegateRemove(this.$2$PropsUpdatedField, value);
      },
      get_props: function BaseComponentViewModel$get_Props() {
        return this.$2$PropsField;
      },
      set_Props: function BaseComponentViewModel$set_Props(value) {
        this.$2$PropsField = value;
      },
      updateProps$1: function BaseComponentViewModel$UpdateProps(p) {
        this.set_Props(p);
        this.raiseActionEvent(this.$2$PropsUpdatedField);
      },
      updateProps: function BaseComponentViewModel$UpdateProps() {
        this.raiseActionEvent(this.$2$PropsUpdatedField);
      }
    }, null, function() {
      return $spiff_BaseViewModel;
    }, function() {
      return [tab.IViewModel, ss.IDisposable, ss.makeGenericType($spiff_IPropsProvider$1, [TProps])];
    });
    return $type;
  });
  ss.initGenericClass($spiff_BaseComponentViewModel$1, 1);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.BaseMenuView<T>
  var $spiff_BaseMenuView$1 = global.spiff.BaseMenuView$1 = ss.mkType($asm, 'spiff.BaseMenuView$1', function(T) {
    var $type = ss.registerGenericClassInstance($spiff_BaseMenuView$1, [T], function(viewModel, template) {
      ss.makeGenericType($spiff_BaseView$1, [T]).call(this, viewModel, template);
    }, {
      positionMenu: function BaseMenuView$PositionMenu(spiffBrowserViewport, options, menu) {
        var maxWidth = Math.min(document.documentElement.clientWidth, tab.WindowHelper.get_windowSelf().innerWidth) - $type.$menuPadding * 2;
        menu.domRoot.css('max-width', maxWidth + 'px');
        var viewportWidth = (tsConfig.is_mobile ? tab.WindowHelper.get_windowSelf().innerWidth : document.documentElement.clientWidth);
        var minMenuLeft = $(window).scrollLeft() + $type.$menuPadding;
        var maxMenuRight = minMenuLeft + viewportWidth - 2 * $type.$menuPadding;
        var menuHeight = menu.domRoot.outerHeight(false);
        var menuWidth = Math.min(menu.domRoot.outerWidth(false), maxWidth);
        var menuVerticalPaddingBorder = menuHeight - menu.domRoot.height();
        var offset = tab.PointUtil.fromPosition(tab.DomUtil.getPageOffset$1(options.relativeDom));
        var relativeObjWidth = options.relativeDom.outerWidth(false);
        var relativeObjHeight = options.relativeDom.outerHeight(false);
        if (ss.isValue(options.cursorPosition)) {
          offset = tab.PointUtil.fromPosition(options.cursorPosition);
          relativeObjWidth = 0;
          relativeObjHeight = 0;
        }
        var left, top;
        var room = spiffBrowserViewport.getVisibleRoom(offset);
        var maxHeight = null;
        if (!options.preferUp && room.roomBelow >= menuHeight + relativeObjHeight) {
          top = offset.y + relativeObjHeight;
        }
        else if (room.roomAbove > menuHeight) {
          top = offset.y - menuHeight;
        }
        else if (room.roomBelow - relativeObjHeight >= room.roomAbove) {
          top = offset.y + relativeObjHeight;
          maxHeight = room.roomBelow - relativeObjHeight - menuVerticalPaddingBorder - $type.$menuPadding;
        }
        else {
          top = offset.y - room.roomAbove + $type.$menuPadding;
          maxHeight = room.roomAbove - menuVerticalPaddingBorder - $type.$menuPadding;
        }
        if (options.preferLeft) {
          left = offset.x + relativeObjWidth - menuWidth;
        }
        else {
          left = offset.x;
        }
        left = Math.max(left, minMenuLeft);
        if (left + menuWidth > maxMenuRight) {
          left = maxMenuRight - menuWidth;
        }
        left = Math.max($type.$menuPadding, left);
        top -= $spiff_FullscreenUtil.centeringContainerOffset();
        var position = {};
        position['top'] = top + 'px';
        position['left'] = left + 'px';
        position['max-height'] = (ss.isValue(maxHeight) ? (maxHeight + 'px') : '');
        menu.domRoot.css(position);
      }
    }, null, function() {
      return ss.makeGenericType($spiff_BaseView$1, [T]);
    }, function() {
      return [tab.IWidget, ss.makeGenericType(tab.IView$1, [T]), ss.IDisposable, tab.IAppendableView];
    });
    $type.$menuPadding = 5;
    return $type;
  });
  ss.initGenericClass($spiff_BaseMenuView$1, 1);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.BaseReactViewModel<TProps>
  var $spiff_BaseReactViewModel$1 = global.spiff.BaseReactViewModel$1 = ss.mkType($asm, 'spiff.BaseReactViewModel$1', function(TProps) {
    var $type = ss.registerGenericClassInstance($spiff_BaseReactViewModel$1, [TProps], function() {
      this.$props = null;
      this.$2$PropsUpdatedField = null;
      $spiff_BaseViewModel.call(this);
    }, {
      add_propsUpdated: function BaseReactViewModel$add_PropsUpdated(value) {
        this.$2$PropsUpdatedField = ss.delegateCombine(this.$2$PropsUpdatedField, value);
      },
      remove_propsUpdated: function BaseReactViewModel$remove_PropsUpdated(value) {
        this.$2$PropsUpdatedField = ss.delegateRemove(this.$2$PropsUpdatedField, value);
      },
      get_props: function BaseReactViewModel$get_Props() {
        if (ss.isNullOrUndefined(this.$props)) {
          this.$initProps();
        }
        return this.$props;
      },
      $set_Props: function BaseReactViewModel$set_Props(value) {
        this.$props = value;
      },
      incrementProps: function BaseReactViewModel$IncrementProps() {
        var updatedProps = this.createUpdatedProps();
        var newProps = $.extend(false, new Object(), this.get_props(), updatedProps);
        this.$set_Props(newProps);
        if (ss.isNullOrUndefined(updatedProps)) {
          tab.Log.get(this).debug('No updated props, skipping...', []);
        }
        else {
          this.raiseActionEvent(this.$2$PropsUpdatedField);
        }
      },
      addChildViewModel: function BaseReactViewModel$AddChildViewModel(child) {
        var onPropsUpdated = ss.mkdel(this, this.incrementProps);
        child.add_propsUpdated(onPropsUpdated);
        return new tab.CallOnDispose(function() {
          child.remove_propsUpdated(onPropsUpdated);
        });
      },
      $initProps: function BaseReactViewModel$InitProps() {
        ss.Debug.assert(ss.isNullOrUndefined(this.$props), 'Props already initialized');
        this.$set_Props(this.createInitialProps());
        this.incrementProps();
      },
      createInitialProps: function BaseReactViewModel$CreateInitialProps() {
        return new Object();
      },
      createUpdatedProps: function BaseReactViewModel$CreateUpdatedProps() {
        return null;
      }
    }, null, function() {
      return $spiff_BaseViewModel;
    }, function() {
      return [tab.IViewModel, ss.IDisposable, ss.makeGenericType($spiff_IPropsProvider$1, [TProps])];
    });
    return $type;
  });
  ss.initGenericClass($spiff_BaseReactViewModel$1, 1);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.BaseView<TViewModel>
  var $spiff_BaseView$1 = global.spiff.BaseView$1 = ss.mkType($asm, 'spiff.BaseView$1', function(TViewModel) {
    var $type = ss.registerGenericClassInstance($spiff_BaseView$1, [TViewModel], function(viewModel, template) {
      this.$template = null;
      this.$viewModel = ss.getDefaultValue(TViewModel);
      $spiff_Widget.call(this, template.domRoot);
      tab.Param.verifyValue(viewModel, 'viewModel');
      tab.Param.verifyValue(template, 't');
      this.$template = template;
      this.$viewModel = viewModel;
      this.$viewModel.add_disposed(ss.mkdel(this, this.$onViewModelDispose));
      this.$viewModel.add_propertyChanged(ss.mkdel(this, this.onViewModelPropertyChanged));
    }, {
      get_template: function BaseView$get_Template() {
        return this.$template;
      },
      get_rootElement: function BaseView$get_RootElement() {
        return this.element;
      },
      get_viewModel: function BaseView$get_ViewModel() {
        return this.$viewModel;
      },
      dispose: function BaseView$Dispose() {
        tab.Log.get(this).debug('Dispose', []);
        this.$viewModel.remove_propertyChanged(ss.mkdel(this, this.onViewModelPropertyChanged));
        this.$viewModel.remove_disposed(ss.mkdel(this, this.$onViewModelDispose));
        this.$template.dispose();
        $spiff_Widget.prototype.dispose.call(this);
      },
      onViewModelPropertyChanged: function BaseView$OnViewModelPropertyChanged(sender, e) {
      },
      $onViewModelDispose: function BaseView$OnViewModelDispose(vm) {
        this.dispose();
      }
    }, null, function() {
      return $spiff_Widget;
    }, function() {
      return [tab.IWidget, ss.makeGenericType(tab.IView$1, [TViewModel]), ss.IDisposable, tab.IAppendableView];
    });
    return $type;
  });
  ss.initGenericClass($spiff_BaseView$1, 1);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.BaseViewModel
  var $spiff_BaseViewModel = global.spiff.BaseViewModel = ss.mkType($asm, 'spiff.BaseViewModel', function() {
    this.disposables = new tab.DisposableHolder();
    this.$1$DisposedField = null;
    this.$1$PropertyChangedField = null;
  }, {
    add_disposed: function BaseViewModel$add_Disposed(value) {
      this.$1$DisposedField = ss.delegateCombine(this.$1$DisposedField, value);
    },
    remove_disposed: function BaseViewModel$remove_Disposed(value) {
      this.$1$DisposedField = ss.delegateRemove(this.$1$DisposedField, value);
    },
    add_propertyChanged: function BaseViewModel$add_PropertyChanged(value) {
      this.$1$PropertyChangedField = ss.delegateCombine(this.$1$PropertyChangedField, value);
    },
    remove_propertyChanged: function BaseViewModel$remove_PropertyChanged(value) {
      this.$1$PropertyChangedField = ss.delegateRemove(this.$1$PropertyChangedField, value);
    },
    dispose: function BaseViewModel$Dispose() {
      tab.Log.get(this).debug('Dispose', []);
      if (ss.isValue(this.$1$DisposedField)) {
        this.$1$DisposedField(this);
        this.$1$DisposedField = null;
      }
      this.$1$PropertyChangedField = null;
      this.disposables.dispose();
    },
    notifyPropertyChanged: function BaseViewModel$NotifyPropertyChanged(propertyName) {
      if (!ss.staticEquals(this.$1$PropertyChangedField, null)) {
        this.$1$PropertyChangedField(this, new tab.PropertyChangedEventArgs(propertyName));
      }
    },
    raiseEvent: function BaseViewModel$RaiseEvent(handler, e) {
      if (ss.isValue(handler)) {
        handler(this, e || ss.EventArgs.Empty);
      }
    },
    raiseActionEvent$1: function(T) {
      return function BaseViewModel$RaiseActionEvent(handler, arg) {
        if (ss.isValue(handler)) {
          handler(arg);
        }
      };
    },
    raiseActionEvent: function BaseViewModel$RaiseActionEvent(handler) {
      if (ss.isValue(handler)) {
        handler();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Button
  var $spiff_Button = global.spiff.Button = ss.mkType($asm, 'spiff.Button', function(element) {
    this.$hoverClass = 'hover';
    this.$focusClass = 'focus';
    this.$disabledClass = 'disabled';
    this.$context = null;
    this.$tableauClickHandler = null;
    this.$2$PressField = null;
    this.$2$ClickField = null;
    this.$2$ShiftClickField = null;
    this.$2$CtrlClickField = null;
    this.$2$HoverField = null;
    this.$2$MouseEnterField = null;
    this.$2$MouseLeaveField = null;
    this.$2$DoubleClickField = null;
    $spiff_Widget.call(this, element);
    this.$bindEvents();
  }, {
    add_press: function Button$add_Press(value) {
      this.$2$PressField = ss.delegateCombine(this.$2$PressField, value);
    },
    remove_press: function Button$remove_Press(value) {
      this.$2$PressField = ss.delegateRemove(this.$2$PressField, value);
    },
    add_click: function Button$add_Click(value) {
      this.$2$ClickField = ss.delegateCombine(this.$2$ClickField, value);
    },
    remove_click: function Button$remove_Click(value) {
      this.$2$ClickField = ss.delegateRemove(this.$2$ClickField, value);
    },
    add_shiftClick: function Button$add_ShiftClick(value) {
      this.$2$ShiftClickField = ss.delegateCombine(this.$2$ShiftClickField, value);
    },
    remove_shiftClick: function Button$remove_ShiftClick(value) {
      this.$2$ShiftClickField = ss.delegateRemove(this.$2$ShiftClickField, value);
    },
    add_ctrlClick: function Button$add_CtrlClick(value) {
      this.$2$CtrlClickField = ss.delegateCombine(this.$2$CtrlClickField, value);
    },
    remove_ctrlClick: function Button$remove_CtrlClick(value) {
      this.$2$CtrlClickField = ss.delegateRemove(this.$2$CtrlClickField, value);
    },
    add_hover: function Button$add_Hover(value) {
      this.$2$HoverField = ss.delegateCombine(this.$2$HoverField, value);
    },
    remove_hover: function Button$remove_Hover(value) {
      this.$2$HoverField = ss.delegateRemove(this.$2$HoverField, value);
    },
    add_mouseEnter: function Button$add_MouseEnter(value) {
      this.$2$MouseEnterField = ss.delegateCombine(this.$2$MouseEnterField, value);
    },
    remove_mouseEnter: function Button$remove_MouseEnter(value) {
      this.$2$MouseEnterField = ss.delegateRemove(this.$2$MouseEnterField, value);
    },
    add_mouseLeave: function Button$add_MouseLeave(value) {
      this.$2$MouseLeaveField = ss.delegateCombine(this.$2$MouseLeaveField, value);
    },
    remove_mouseLeave: function Button$remove_MouseLeave(value) {
      this.$2$MouseLeaveField = ss.delegateRemove(this.$2$MouseLeaveField, value);
    },
    add_$doubleClick: function Button$add_DoubleClick(value) {
      this.$2$DoubleClickField = ss.delegateCombine(this.$2$DoubleClickField, value);
    },
    remove_$doubleClick: function Button$remove_DoubleClick(value) {
      this.$2$DoubleClickField = ss.delegateRemove(this.$2$DoubleClickField, value);
    },
    get_disabled: function Button$get_Disabled() {
      return this.element.prop('disabled');
    },
    set_disabled: function Button$set_Disabled(value) {
      this.element.prop('disabled', value);
      this.element.toggleClass(this.$disabledClass, value);
      if (value) {
        this.element.removeClass(this.$hoverClass);
      }
    },
    get_hoverClass: function Button$get_HoverClass() {
      return this.$hoverClass;
    },
    set_hoverClass: function Button$set_HoverClass(value) {
      this.$hoverClass = value;
    },
    get_focusClass: function Button$get_FocusClass() {
      return this.$focusClass;
    },
    set_focusClass: function Button$set_FocusClass(value) {
      this.$focusClass = value;
    },
    get_disabledClass: function Button$get_DisabledClass() {
      return this.$disabledClass;
    },
    set_disabledClass: function Button$set_DisabledClass(value) {
      this.$disabledClass = value;
    },
    get_context: function Button$get_Context() {
      return this.$context;
    },
    set_context: function Button$set_Context(value) {
      this.$context = value;
    },
    get_tableauClickHandler: function Button$get_TableauClickHandler() {
      return this.$tableauClickHandler;
    },
    tabIndex: function Button$TabIndex(index) {
      this.element.attr('tabindex', index.toString());
      return this;
    },
    onClick: function Button$OnClick(callback) {
      var handler = ss.mkdel(this, function() {
        callback(this);
      });
      this.add_click(handler);
      return new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_click(handler);
      }));
    },
    onDoubleClick: function Button$OnDoubleClick(callback) {
      this.$tableauClickHandler.onDoubleClick(ss.mkdel(this, this.handleDoubleClick));
      var handler = ss.mkdel(this, function() {
        callback(this);
      });
      this.add_$doubleClick(handler);
      return new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_$doubleClick(handler);
      }));
    },
    onShiftClick: function Button$OnShiftClick(callback) {
      var handler = ss.mkdel(this, function() {
        callback(this);
      });
      this.add_shiftClick(handler);
      return new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_shiftClick(handler);
      }));
    },
    onMouseEnter: function Button$OnMouseEnter(callback) {
      var handler = ss.mkdel(this, function() {
        callback(this);
      });
      this.add_mouseEnter(handler);
      return new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_mouseEnter(handler);
      }));
    },
    onMouseMove: function Button$OnMouseMove(callback) {
      var handler = ss.mkdel(this, function() {
        callback(this);
      });
      this.add_hover(handler);
      return new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_hover(handler);
      }));
    },
    onMouseLeave: function Button$OnMouseLeave(callback) {
      var handler = ss.mkdel(this, function() {
        callback(this);
      });
      this.add_mouseLeave(handler);
      return new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_mouseLeave(handler);
      }));
    },
    $bindEvents: function Button$BindEvents() {
      this.element.focusin(ss.mkdel(this, this.handleFocusIn)).focusout(ss.mkdel(this, this.handleFocusOut)).keypress(ss.mkdel(this, this.$handleKeyPress));
      this.disposables.add$1($spiff_EventUtil.bindWithDispose(this.element, 'mouseenter', ss.mkdel(this, this.handleMouseEnter)));
      var config = new EventUtils.EventHandleSpec();
      config.hoverDelay = 0;
      config.SetHandler('mouseleave', ss.mkdel(this, this.handleMouseLeave));
      config.SetHandler('hover', ss.mkdel(this, this.handleHover));
      this.$tableauClickHandler = $spiff_TableauClickHandler.targetAndConfig(this.element.get(0), config).onClick(ss.mkdel(this, this.handleClick)).onPress(ss.mkdel(this, this.handlePress));
      this.disposables.add$1(this.$tableauClickHandler);
    },
    raiseEvent: function Button$RaiseEvent(callback) {
      if (ss.isValue(callback)) {
        callback();
      }
    },
    $handleKeyPress: function Button$HandleKeyPress(e) {
      if (e.which === 13) {
        $spiff_EventUtil.stopEvent$2(e);
        this.handleClick(null);
      }
      if (e.which === 32) {
        $spiff_EventUtil.stopEvent$2(e);
        this.handleClick(null);
      }
    },
    handleFocusOut: function Button$HandleFocusOut(e) {
      this.element.removeClass(this.$focusClass);
    },
    handleFocusIn: function Button$HandleFocusIn(e) {
      this.element.addClass(this.$focusClass);
    },
    handleHover: function Button$HandleHover() {
      if (!this.get_disabled()) {
        this.element.addClass(this.$hoverClass);
      }
      this.raiseEvent(this.$2$HoverField);
    },
    handleMouseEnter: function Button$HandleMouseEnter(e) {
      this.raiseEvent(this.$2$MouseEnterField);
    },
    handleMouseLeave: function Button$HandleMouseLeave() {
      this.element.removeClass(this.$hoverClass);
      this.raiseEvent(this.$2$MouseLeaveField);
    },
    handleClick: function Button$HandleClick(e) {
      if (this.get_disabled()) {
        return;
      }
      if (ss.isValue(this.$2$ShiftClickField) && ss.isValue(e) && e.shiftKey) {
        this.raiseEvent(this.$2$ShiftClickField);
      }
      else if (ss.isValue(this.$2$CtrlClickField) && $spiff_EventUtil.isCtrlKey(e)) {
        this.raiseEvent(this.$2$CtrlClickField);
      }
      else {
        this.raiseEvent(this.$2$ClickField);
      }
    },
    handleDoubleClick: function Button$HandleDoubleClick(e) {
      if (this.get_disabled()) {
        return;
      }
      this.raiseEvent(this.$2$DoubleClickField);
    },
    handlePress: function Button$HandlePress() {
      if (this.get_disabled()) {
        return;
      }
      this.raiseEvent(this.$2$PressField);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ButtonBaseComponent<P>
  var $spiff_ButtonBaseComponent$1 = global.spiff.ButtonBaseComponent$1 = ss.mkType($asm, 'spiff.ButtonBaseComponent$1', function(P) {
    var $type = ss.registerGenericClassInstance($spiff_ButtonBaseComponent$1, [P], function(props) {
      React.Component.call(this, props);
    }, {
      get_className: function ButtonBaseComponent$get_ClassName() {
        var classNames = [$spiff_UnificationClassNames.button];
        if (ss.isValue(this.props.customClassName)) {
          classNames.push(this.props.customClassName);
        }
        if (this.props.border) {
          classNames.push($spiff_UnificationClassNames.bordered);
        }
        if (this.props.disabled) {
          classNames.push($spiff_UnificationClassNames.disabled);
        }
        return classNames.join(' ');
      },
      customContentBefore: function ButtonBaseComponent$CustomContentBefore() {
        return (!ss.staticEquals(this.props.getCustomContentBefore, null) ? this.props.getCustomContentBefore() : null);
      },
      customContentAfter: function ButtonBaseComponent$CustomContentAfter() {
        return (!ss.staticEquals(this.props.getCustomContentAfter, null) ? this.props.getCustomContentAfter() : null);
      },
      render: function ButtonBaseComponent$Render() {
        var htmlProps = { className: this.get_className(), style: this.props.buttonStyle, title: (ss.isNullOrUndefined(this.props.tooltip) ? this.props.label : this.props.tooltip), onKeyDown: ss.mkdel(this, function(e) {
          var enteredKey = e.keyCode;
          if (enteredKey === 32 || enteredKey === 13) {
            this.$onTap(EventUtils.NormalizedEvent.Create(e, ReactDOM.findDOMNode(this), null));
            e.preventDefault();
            e.stopPropagation();
          }
        }), 'data-test-id': this.props.testId, role: 'button' };
        if (ss.isValue(this.props.tabIndex)) {
          htmlProps.tabIndex = ss.unbox(this.props.tabIndex);
        }
        if (ss.isValue(this.props.additionalRoles) && this.props.additionalRoles.length > 0) {
          htmlProps.role += ' ' + this.props.additionalRoles.join(' ');
        }
        var $t1 = new EventUtils.EventHandleSpec();
        $t1.tap = ss.mkdel(this, this.$onTap);
        $t1.doubleTap = ss.mkdel(this, this.$onDoubleTap);
        return EventUtils.EventForwarder.div($t1, htmlProps, this.customContentBefore(), $spiff_DOMElements.span({ className: $spiff_UnificationClassNames.text, style: this.props.labelStyle, key: 'textContent' }, this.props.label), this.customContentAfter());
      },
      $onTap: function ButtonBaseComponent$OnTap(e) {
        if (!this.props.disabled && !ss.staticEquals(this.props.onTap, null)) {
          this.props.onTap(e);
        }
      },
      $onDoubleTap: function ButtonBaseComponent$OnDoubleTap(e) {
        if (!this.props.disabled && !ss.staticEquals(this.props.onDoubleTap, null)) {
          this.props.onDoubleTap(e);
        }
      }
    }, null, function() {
      return React.Component;
    });
    return $type;
  });
  ss.initGenericClass($spiff_ButtonBaseComponent$1, 1);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ButtonComponent
  var $spiff_ButtonComponent = global.spiff.ButtonComponent = ss.mkType($asm, 'spiff.ButtonComponent', function(props) {
    ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]).call(this, props);
  }, null, {
    create: function ButtonComponent$Create(className, label, onTap) {
      return React.createElement($spiff_ButtonComponent, { customClassName: 'tabStyledTextButton tabMediumStyledTextButton ' + className, label: label, onTap: onTap });
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ButtonSize
  var $spiff_ButtonSize = global.spiff.ButtonSize = ss.mkEnum($asm, 'spiff.ButtonSize', { medium: 1, large: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ClearableTextInputView
  var $spiff_ClearableTextInputView = global.spiff.ClearableTextInputView = ss.mkType($asm, 'spiff.ClearableTextInputView', function(template, initialText, placeHoderText, clearButtonToolTip) {
    this.$dom = null;
    this.$searchBoxClearButton = null;
    this.$3$ClearButtonClickedField = null;
    $spiff_TextInputView.call(this, template, initialText, placeHoderText, null, false);
    this.$dom = template;
    this.add_propertyChanged(ss.mkdel(this, this.$onSearchTextInputView));
    this.$searchBoxClearButton = new $spiff_Button(this.$dom.get_searchBoxClear());
    this.$searchBoxClearButton.onClick(ss.mkdel(this, this.$onSearchBoxClearClick));
    this.$searchBoxClearButton.set_hoverTooltipText(clearButtonToolTip);
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.remove_propertyChanged(ss.mkdel(this, this.$onSearchTextInputView));
      this.$searchBoxClearButton.dispose();
    })));
    this.$handleSearchBoxChange();
  }, {
    add_clearButtonClicked: function ClearableTextInputView$add_ClearButtonClicked(value) {
      this.$3$ClearButtonClickedField = ss.delegateCombine(this.$3$ClearButtonClickedField, value);
    },
    remove_clearButtonClicked: function ClearableTextInputView$remove_ClearButtonClicked(value) {
      this.$3$ClearButtonClickedField = ss.delegateRemove(this.$3$ClearButtonClickedField, value);
    },
    get_dom: function ClearableTextInputView$get_Dom() {
      return this.$dom;
    },
    get_searchBoxClearButton: function ClearableTextInputView$get_SearchBoxClearButton() {
      return this.$searchBoxClearButton;
    },
    $handleSearchBoxChange: function ClearableTextInputView$HandleSearchBoxChange() {
      if (!ss.isNullOrEmptyString(this.get_text())) {
        this.$dom.get_searchBoxClear().show();
        this.$dom.get_inputElementContainer().addClass('clearButtonOn');
      }
      else {
        this.$dom.get_searchBoxClear().hide();
        this.$dom.get_inputElementContainer().removeClass('clearButtonOn');
      }
    },
    $onSearchTextInputView: function ClearableTextInputView$OnSearchTextInputView(sender, e) {
      this.$handleSearchBoxChange();
    },
    $onSearchBoxClearClick: function ClearableTextInputView$OnSearchBoxClearClick(button) {
      this.set_text('');
      if (!ss.staticEquals(this.$3$ClearButtonClickedField, null)) {
        this.$3$ClearButtonClickedField();
      }
    }
  }, {
    newClearableTextInputView: function ClearableTextInputView$NewClearableTextInputView(initialContent, placeHoderText, clearButtonToolTip) {
      var template = new $spiff_ClearableTextInputViewTemplate();
      return new $spiff_ClearableTextInputView(template, initialContent, placeHoderText, clearButtonToolTip);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ClearableTextInputViewTemplate
  var $spiff_ClearableTextInputViewTemplate = global.spiff.ClearableTextInputViewTemplate = ss.mkType($asm, 'spiff.ClearableTextInputViewTemplate', function() {
    this.$inputElement = null;
    this.$inputElementContainer = null;
    this.$searchBoxClear = null;
    $spiff_Template.call(this, $($spiff_ClearableTextInputViewTemplate.$html));
    this.$inputElement = this.getElementBySelector('.tabTextInputViewInputElement');
    this.$inputElementContainer = this.getElementBySelector('.tabTextInputViewInputElementContainer');
    this.$searchBoxClear = this.getElementBySelector('.tabClearableTextBoxClearButton');
  }, {
    get_domRootElement: function ClearableTextInputViewTemplate$get_DomRootElement() {
      return this.domRoot;
    },
    get_inputElement: function ClearableTextInputViewTemplate$get_InputElement() {
      return this.$inputElement;
    },
    get_inputElementContainer: function ClearableTextInputViewTemplate$get_InputElementContainer() {
      return this.$inputElementContainer;
    },
    get_searchBoxClear: function ClearableTextInputViewTemplate$get_SearchBoxClear() {
      return this.$searchBoxClear;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ClickBuster
  var $spiff_ClickBuster = global.spiff.ClickBuster = ss.mkType($asm, 'spiff.ClickBuster', null, null, {
    add_clickBustDetected: function ClickBuster$add_ClickBustDetected(value) {
      $spiff_ClickBuster.$1$ClickBustDetectedField = ss.delegateCombine($spiff_ClickBuster.$1$ClickBustDetectedField, value);
    },
    remove_clickBustDetected: function ClickBuster$remove_ClickBustDetected(value) {
      $spiff_ClickBuster.$1$ClickBustDetectedField = ss.delegateRemove($spiff_ClickBuster.$1$ClickBustDetectedField, value);
    },
    preventGhostClick: function ClickBuster$PreventGhostClick(pageX, pageY, target) {
      if (!BrowserSupport.BrowserSupport.IsTouch() || !BrowserSupport.BrowserSupport.AddEventListener()) {
        return;
      }
      if (ss.isNullOrUndefined($spiff_ClickBuster.$coordinates)) {
        $spiff_ClickBuster.$coordinates = [];
        document.addEventListener('click', $spiff_ClickBuster.$onClick, true);
      }
      var suppressClickBusting = $(target).closest('.' + $spiff_ClickBuster.suppressClickBustingClass).length > 0;
      if (!suppressClickBusting) {
        $spiff_ClickBuster.$coordinates.push({ item1: pageX, item2: pageY });
        window.setTimeout($spiff_ClickBuster.$pop, 600);
      }
    },
    $pop: function ClickBuster$Pop() {
      ss.removeAt($spiff_ClickBuster.$coordinates, 0);
    },
    $onClick: function ClickBuster$OnClick(e) {
      var me = ss.cast(e, MouseEvent);
      var pageX = me.pageX;
      var pageY = me.pageY;
      for (var $t1 = 0; $t1 < $spiff_ClickBuster.$coordinates.length; $t1++) {
        var coordinate = $spiff_ClickBuster.$coordinates[$t1];
        if (Math.abs(coordinate.item1 - pageX) < $spiff_ClickBuster.$clickRadius && Math.abs(coordinate.item2 - pageY) < $spiff_ClickBuster.$clickRadius) {
          tab.Logger.getLogger($spiff_ClickBuster, null).debug('Busting click!', []);
          e.stopPropagation();
          e.preventDefault();
          if (ss.isValue($spiff_ClickBuster.$1$ClickBustDetectedField)) {
            $spiff_ClickBuster.$1$ClickBustDetectedField(e);
          }
        }
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ClickHandler
  var $spiff_ClickHandler = global.spiff.ClickHandler = ss.mkType($asm, 'spiff.ClickHandler', function() {
    this.$disposables = new tab.DisposableHolder();
    this.$startX = 0;
    this.$startY = 0;
    this.$target = null;
    this.$eventNamespace = 'clickHandler' + $spiff_ClickHandler.$instanceId++;
    this.$moveListener = null;
    this.$clickTimeoutHandle = null;
    this.$1$PressField = null;
    this.$1$ClickField = null;
    this.$1$RightClickField = null;
  }, {
    add_$press: function ClickHandler$add_Press(value) {
      this.$1$PressField = ss.delegateCombine(this.$1$PressField, value);
    },
    remove_$press: function ClickHandler$remove_Press(value) {
      this.$1$PressField = ss.delegateRemove(this.$1$PressField, value);
    },
    add_$click: function ClickHandler$add_Click(value) {
      this.$1$ClickField = ss.delegateCombine(this.$1$ClickField, value);
    },
    remove_$click: function ClickHandler$remove_Click(value) {
      this.$1$ClickField = ss.delegateRemove(this.$1$ClickField, value);
    },
    add_$rightClick: function ClickHandler$add_RightClick(value) {
      this.$1$RightClickField = ss.delegateCombine(this.$1$RightClickField, value);
    },
    remove_$rightClick: function ClickHandler$remove_RightClick(value) {
      this.$1$RightClickField = ss.delegateRemove(this.$1$RightClickField, value);
    },
    get_target: function ClickHandler$get_Target() {
      return this.$target;
    },
    dispose: function ClickHandler$Dispose() {
      this.$reset();
      this.$disposables.dispose();
      if (!ss.isValue(this.$target)) {
        return;
      }
      this.$target.off('.' + this.$eventNamespace);
      this.$target = null;
    },
    onPress: function ClickHandler$OnPress(handler) {
      this.add_$press(handler);
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_$press(handler);
      })));
      return this;
    },
    onClick: function ClickHandler$OnClick(handler) {
      this.add_$click(handler);
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_$click(handler);
      })));
      return this;
    },
    onRightClick: function ClickHandler$OnRightClick(handler) {
      this.add_$rightClick(handler);
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_$rightClick(handler);
      })));
      return this;
    },
    setTarget: function ClickHandler$SetTarget(dom) {
      this.$target = dom;
      dom.on(this.$eventName('touchstart'), ss.mkdel(this, this.$handleTouchStart));
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        dom.off(this.$eventName('touchstart'));
      })));
      if (tsConfig.is_mobile) {
        if (!BrowserSupport.BrowserSupport.IsTouch()) {
          dom.on(this.$eventName('mousedown'), ss.mkdel(this, this.$handleMouseDown)).on(this.$eventName('click'), ss.mkdel(this, this.$handleClick));
          this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
            dom.off(this.$eventName('mousedown')).off(this.$eventName('click'));
          })));
        }
      }
      else {
        dom.on(this.$eventName('mousedown'), ss.mkdel(this, this.$handleMouseDown)).on(this.$eventName('click'), ss.mkdel(this, this.$handleClick)).on(this.$eventName('contextmenu'), ss.mkdel(this, this.$handleClick));
        this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
          dom.off(this.$eventName('mousedown')).off(this.$eventName('click')).off(this.$eventName('contextmenu'));
        })));
      }
      return this;
    },
    $eventName: function ClickHandler$EventName(name) {
      return name + '.' + this.$eventNamespace;
    },
    $reset: function ClickHandler$Reset() {
      tab.Log.get(this).debug('Reset', []);
      if (ss.isValue(this.$target)) {
        this.$target.off(this.$eventName('touchend'));
        this.$target.off(this.$eventName('touchcancel'));
      }
      if (ss.isValue(this.$moveListener)) {
        document.body.removeEventListener('touchmove'.toString(), this.$moveListener, true);
        this.$moveListener = null;
      }
      this.$clickTimeoutHandle = tab.MiscUtil.clearTimeout(this.$clickTimeoutHandle);
    },
    $handleMouseDown: function ClickHandler$HandleMouseDown(e) {
      tab.Log.get(this).debug('MouseDown', []);
      this.$startX = e.pageX;
      this.$startY = e.pageY;
      this.$startClickTimeout();
      if (ss.isValue(this.$1$PressField)) {
        this.$1$PressField(e);
      }
    },
    $getTouchZero: function ClickHandler$GetTouchZero(e) {
      var te = (ss.isValue(e) ? e['originalEvent'] : null);
      if (ss.isValue(te) && ss.isValue(te.touches) && ss.isValue(te.touches[0])) {
        return te.touches[0];
      }
      return null;
    },
    $handleTouchStart: function ClickHandler$HandleTouchStart(e) {
      if (!tsConfig.is_mobile) {
        if (tab.DomUtil.handleTouchEvents(e.target)) {
          e.preventDefault();
        }
        else {
          return;
        }
      }
      var touch = this.$getTouchZero(e);
      var pageX = 0;
      var pageY = 0;
      if (ss.isValue(touch)) {
        pageX = ss.coalesce(touch.pageX, 0);
        pageY = ss.coalesce(touch.pageY, 0);
      }
      tab.Log.get(this).debug('TouchStart - x=%d, y=%d', [pageX, pageY]);
      this.$target.on(this.$eventName('touchend'), ss.mkdel(this, this.$handleTouchEnd));
      this.$target.on(this.$eventName('touchcancel'), ss.mkdel(this, this.$handleTouchCancel));
      this.$startClickTimeout();
      if (BrowserSupport.BrowserSupport.AddEventListener()) {
        this.$moveListener = ss.thisFix(ss.mkdel(this, this.$handleTouchMove));
        document.body.addEventListener('touchmove'.toString(), this.$moveListener, true);
      }
      this.$startX = pageX;
      this.$startY = pageY;
      if (ss.isValue(this.$1$PressField)) {
        this.$1$PressField(e);
      }
    },
    $handleTouchEnd: function ClickHandler$HandleTouchEnd(e) {
      if (!tsConfig.is_mobile) {
        if (tab.DomUtil.handleTouchEvents(e.target)) {
          e.preventDefault();
        }
        else {
          return;
        }
      }
      this.$handleClick(e);
    },
    $startClickTimeout: function ClickHandler$StartClickTimeout() {
      this.$clickTimeoutHandle = tab.MiscUtil.clearTimeout(this.$clickTimeoutHandle);
      this.$clickTimeoutHandle = window.setTimeout(ss.mkdel(this, this.$reset), $spiff_ClickHandler.$clickTimeout);
    },
    $handleTouchMove: function ClickHandler$HandleTouchMove(element, e) {
      var touchEvent = ss.cast(e, TouchEvent);
      if (!tsConfig.is_mobile) {
        if (tab.DomUtil.handleTouchEvents(element)) {
          e.preventDefault();
        }
        else {
          return;
        }
      }
      var pageX = touchEvent.touches[0].pageX;
      var pageY = touchEvent.touches[0].pageY;
      tab.Log.get(this).debug('TouchMove - x=%s, y=%s', [pageX, pageY]);
      if (Math.abs(pageX - this.$startX) > $spiff_ClickHandler.$moveSlop || Math.abs(pageY - this.$startY) > $spiff_ClickHandler.$moveSlop) {
        tab.Log.get(this).debug('Cancel click: moved too far', []);
        this.$reset();
      }
    },
    $handleTouchCancel: function ClickHandler$HandleTouchCancel(e) {
      if (!tsConfig.is_mobile) {
        if (tab.DomUtil.handleTouchEvents(e.target)) {
          e.preventDefault();
        }
        else {
          return;
        }
      }
      this.$reset();
    },
    $handleClick: function ClickHandler$HandleClick(e) {
      tab.Log.get(this).debug('Click - %s', [e.type]);
      e.stopPropagation();
      this.$reset();
      if (e.type === 'contextmenu') {
        e.preventDefault();
        if (ss.isValue(this.$1$RightClickField)) {
          this.$1$RightClickField(e);
        }
      }
      else {
        if (ss.isValue(this.$1$ClickField)) {
          this.$1$ClickField(e);
        }
        if (e.type === 'touchend') {
          $spiff_ClickBuster.preventGhostClick(this.$startX, this.$startY, e.target);
        }
      }
    }
  }, {
    targetAndClick: function ClickHandler$TargetAndClick(o, onClick) {
      return (new $spiff_ClickHandler()).setTarget(o).onClick(onClick);
    },
    targetAndRightClick: function ClickHandler$TargetAndRightClick(o, onRightClick) {
      return (new $spiff_ClickHandler()).setTarget(o).onRightClick(onRightClick);
    },
    targetAndPress: function ClickHandler$TargetAndPress(o, onClick) {
      return (new $spiff_ClickHandler()).setTarget(o).onPress(onClick);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.ComboBoxComponent
  var $spiff_ComboBoxComponent = global.spiff.ComboBoxComponent = ss.mkType($asm, 'spiff.ComboBoxComponent', function() {
    React.Component.call(this);
    var $t1 = new $spiff_ComboBoxState();
    $t1.isSelecting = false;
    this.state = $t1;
  }, {
    render: function ComboBoxComponent$Render() {
      var buttonGroupProps = $.extend(new Object(), this.props);
      buttonGroupProps.onSelectionChanged = ss.mkdel(this, function(selection) {
        this.onSelect(selection, this.props.onSelectionChanged);
      });
      var contents = React.createElement($spiff_SelectableButtonGroupComponent, buttonGroupProps);
      var $t1 = new Object();
      $t1.styleClass = this.props.styleClass;
      $t1.isSelecting = this.state.isSelecting;
      $t1.getDesiredHeight = $spiff_SelectableButtonGroupComponent.getDesiredHeight;
      $t1.getMinimumWidth = $spiff_SelectableButtonGroupComponent.getMinimumWidth;
      $t1.onSelectorToggled = ss.mkdel(this, this.$toggleSelector);
      $t1.onFocusLost = ss.mkdel(this, this.$onFocusLost);
      $t1.tabIndex = -1;
      $t1.renderButton = ss.mkdel(this, function() {
        return React.createElement($spiff_TextDropdownButtonComponent, { styleClass: this.props.buttonStyleClass, selectionIconClass: this.props.selectedIconClass, selectionText: this.props.selectedText });
      });
      var element = React.createElement($spiff_StatelessDropdownComponent, $t1, contents);
      return element;
    },
    onSelect: function ComboBoxComponent$OnSelect(selection, callback) {
      var $t1 = new $spiff_ComboBoxState();
      $t1.isSelecting = false;
      this.setState($t1);
      if (!ss.staticEquals(callback, null)) {
        callback(selection);
      }
    },
    $toggleSelector: function ComboBoxComponent$ToggleSelector() {
      if (!this.props.enabled) {
        var $t1 = new $spiff_ComboBoxState();
        $t1.isSelecting = false;
        this.setState($t1);
      }
      else {
        var $t2 = new $spiff_ComboBoxState();
        $t2.isSelecting = !this.state.isSelecting;
        this.setState($t2);
      }
    },
    $onFocusLost: function ComboBoxComponent$OnFocusLost() {
      var $t1 = new $spiff_ComboBoxState();
      $t1.isSelecting = false;
      this.setState($t1);
    }
  }, {
    createCustomIconElements: function ComboBoxComponent$CreateCustomIconElements(iconClass) {
      if (ss.isNullOrEmptyString(iconClass)) {
        return null;
      }
      return [$spiff_DOMElements.div({ className: $spiff_UnificationClassNames.icon + ' ' + iconClass })];
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxDropdownMenuTheme
  var $spiff_ComboBoxDropdownMenuTheme = global.spiff.ComboBoxDropdownMenuTheme = ss.mkType($asm, 'spiff.ComboBoxDropdownMenuTheme', function(extraMenuClass) {
    $spiff_MenuViewTheme.call(this);
    this.itemClass = 'tabMenuItemComboDropdownTheme tab-ctrl-formatted-text';
    this.menuClass = 'tabMenuComboDropdownTheme tab-ctrl-formatted-widget ' + extraMenuClass;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxItem
  var $spiff_ComboBoxItem = global.spiff.ComboBoxItem = ss.mkType($asm, 'spiff.ComboBoxItem', function(iconClass, name, data, description, title) {
    this.$1$IconClassField = null;
    this.$1$NameField = null;
    this.$1$DataField = null;
    this.$1$DescriptionField = null;
    this.$1$TitleField = null;
    this.set_iconClass(iconClass);
    this.set_name(name);
    this.set_data(data);
    this.set_description(description);
    this.set_title(title);
  }, {
    get_iconClass: function ComboBoxItem$get_IconClass() {
      return this.$1$IconClassField;
    },
    set_iconClass: function ComboBoxItem$set_IconClass(value) {
      this.$1$IconClassField = value;
    },
    get_name: function ComboBoxItem$get_Name() {
      return this.$1$NameField;
    },
    set_name: function ComboBoxItem$set_Name(value) {
      this.$1$NameField = value;
    },
    get_data: function ComboBoxItem$get_Data() {
      return this.$1$DataField;
    },
    set_data: function ComboBoxItem$set_Data(value) {
      this.$1$DataField = value;
    },
    get_description: function ComboBoxItem$get_Description() {
      return this.$1$DescriptionField;
    },
    set_description: function ComboBoxItem$set_Description(value) {
      this.$1$DescriptionField = value;
    },
    get_title: function ComboBoxItem$get_Title() {
      return this.$1$TitleField;
    },
    set_title: function ComboBoxItem$set_Title(value) {
      this.$1$TitleField = value;
    },
    asMenuItem: function ComboBoxItem$AsMenuItem() {
      return (new $spiff_MenuItemBuilder()).data(this).name(this.get_name()).iconClass(this.get_iconClass()).enabled(true).description(this.get_description()).title(this.get_title()).build();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxMenuTheme
  var $spiff_ComboBoxMenuTheme = global.spiff.ComboBoxMenuTheme = ss.mkType($asm, 'spiff.ComboBoxMenuTheme', function() {
    $spiff_MenuViewTheme.call(this);
    this.itemClass = 'tabMenuItemComboTheme';
    this.menuClass = 'tabMenuComboTheme';
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxMenuThemeChoice
  var $spiff_ComboBoxMenuThemeChoice = global.spiff.ComboBoxMenuThemeChoice = ss.mkEnum($asm, 'spiff.ComboBoxMenuThemeChoice', { standard: 0, dropdown: 1, unification: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.ComboBoxProps
  var $spiff_ComboBoxProps = global.spiff.ComboBoxProps = ss.mkType($asm, 'spiff.ComboBoxProps', function() {
    this.styleClass = null;
    this.buttonStyleClass = null;
    this.selectedText = null;
    this.selectedIconClass = null;
    this.hasTooltip = false;
    this.enabled = false;
    Object.call(this);
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxSizing
  var $spiff_ComboBoxSizing = global.spiff.ComboBoxSizing = ss.mkEnum($asm, 'spiff.ComboBoxSizing', { standard: 0, autoFit: 1 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.ComboBoxState
  var $spiff_ComboBoxState = global.spiff.ComboBoxState = ss.mkType($asm, 'spiff.ComboBoxState', function() {
    this.isSelecting = false;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxTemplate
  var $spiff_ComboBoxTemplate = global.spiff.ComboBoxTemplate = ss.mkType($asm, 'spiff.ComboBoxTemplate', function() {
    this.icon = null;
    this.name = null;
    this.button = null;
    $spiff_Template.call(this, $($spiff_ComboBoxTemplate.$htmlTemplate));
    this.icon = this.getElementBySelector('.tabComboBoxIcon');
    this.name = this.getElementBySelector('.tabComboBoxName');
    this.button = this.getElementBySelector('.tabComboBoxButtonHolder');
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxTheme
  var $spiff_ComboBoxTheme = global.spiff.ComboBoxTheme = ss.mkEnum($asm, 'spiff.ComboBoxTheme', { standard: 0, compact: 1, unification: 2, lineAndArrow: 3 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxView
  var $spiff_ComboBoxView = global.spiff.ComboBoxView = ss.mkType($asm, 'spiff.ComboBoxView', function(viewModel, dom) {
    this.clickHandler = null;
    this.$viewModel$1 = null;
    this.$dom = null;
    ss.makeGenericType($spiff_BaseView$1, [$spiff_ComboBoxViewModel]).call(this, viewModel, dom);
    this.$viewModel$1 = viewModel;
    this.$dom = dom;
    this.$viewModel$1.add_selectedItemChanged(ss.mkdel(this, this.$selectedItemChanged));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$viewModel$1.remove_selectedItemChanged(ss.mkdel(this, this.$selectedItemChanged));
    })));
    this.$viewModel$1.add_itemsChanged(ss.mkdel(this, this.$handleItemsChanged));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$viewModel$1.remove_itemsChanged(ss.mkdel(this, this.$handleItemsChanged));
    })));
    this.$viewModel$1.add_enabledChanged(ss.mkdel(this, this.$handleEnabledChanged));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$viewModel$1.remove_enabledChanged(ss.mkdel(this, this.$handleEnabledChanged));
    })));
    this.$viewModel$1.add_isSelectionInvalidChanged(ss.mkdel(this, this.$handleIsSelectionInvalidChanged));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$viewModel$1.remove_isSelectionInvalidChanged(ss.mkdel(this, this.$handleIsSelectionInvalidChanged));
    })));
    this.clickHandler = $spiff_TableauClickHandler.targetAndClick(this.$dom.domRoot[0], ss.mkdel(this, this.$onClick));
    this.clickHandler.set_stopPropagationOnEvent(false);
    this.disposables.add$1(this.clickHandler);
    this.$dom.domRoot.keydown(ss.mkdel(this, this.$onDomKeydown));
    this.$dom.domRoot.focus(ss.mkdel(this, this.$handleFocusOrBlur));
    this.$dom.domRoot.blur(ss.mkdel(this, this.$handleFocusOrBlur));
    this.$dom.domRoot.addClass($spiff_ComboBoxView.classesForTheme[this.$viewModel$1.get_theme()]);
    this.$viewModel$1.add_menuHidden(ss.mkdel(this, this.$handleMenuHidden));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$viewModel$1.remove_menuHidden(ss.mkdel(this, this.$handleMenuHidden));
    })));
    this.$selectedItemChanged(this.$viewModel$1.get_selectedItem());
    this.$handleEnabledChanged();
    this.$handleIsSelectionInvalidChanged();
  }, {
    $handleMenuHidden: function ComboBoxView$HandleMenuHidden() {
      this.$dom.icon.removeClass($spiff_ComboBoxView.iconPressedClass);
      this.$dom.domRoot.removeClass($spiff_ComboBoxView.pressedClass);
      this.$dom.domRoot.removeAttr('aria-controls');
      this.$dom.domRoot.attr('aria-expanded', 'false');
      this.$dom.domRoot.focus();
    },
    $onClick: function ComboBoxView$OnClick() {
      if (!this.$viewModel$1.get_enabled()) {
        return;
      }
      this.$dom.domRoot.addClass($spiff_ComboBoxView.pressedClass);
      if (this.$viewModel$1.get_showDropdownIcon()) {
        this.$dom.icon.addClass($spiff_ComboBoxView.iconPressedClass);
      }
      this.$dom.domRoot.attr('aria-controls', this.get_viewModel().get_menuId());
      this.$dom.domRoot.attr('aria-expanded', 'true');
      this.$viewModel$1.buildAndShowMenu(this.$dom.domRoot);
    },
    $handleFocusOrBlur: function ComboBoxView$HandleFocusOrBlur(e) {
      if (ss.isValue(this.get_viewModel().get_selectedItem())) {
        this.$updateAriaLabel(this.get_viewModel().get_selectedItem().get_name());
      }
      this.$dom.domRoot.attr('aria-live', ((e.type === 'focus') ? 'assertive' : 'off'));
    },
    $onDomKeydown: function ComboBoxView$OnDomKeydown(e) {
      if (!this.$viewModel$1.get_menu().get_visible() && e.which === 32) {
        e.preventDefault();
        e.stopPropagation();
        this.$onClick();
        return;
      }
      var indexChange = 0;
      switch (e.which) {
        case 40: {
          indexChange = 1;
          break;
        }
        case 38: {
          indexChange = -1;
          break;
        }
        default: {
          return;
        }
      }
      e.preventDefault();
      e.stopPropagation();
      var selectedIndex = ss.indexOf(this.$viewModel$1.get_items(), this.$viewModel$1.get_selectedItem());
      if (selectedIndex < 0) {
        return;
      }
      selectedIndex += indexChange;
      if (selectedIndex >= 0 && selectedIndex < this.$viewModel$1.get_items().length) {
        this.$viewModel$1.set_selectedItem(this.$viewModel$1.get_items()[selectedIndex]);
      }
    },
    $selectedItemChanged: function ComboBoxView$SelectedItemChanged(arg) {
      if (ss.isInstanceOfType(arg, $spiff_CustomComboBoxItem)) {
        return;
      }
      this.$dom.icon.remove();
      if (ss.isNullOrUndefined(arg)) {
        var str = (ss.isValue(this.$viewModel$1.get_summary()) ? this.$viewModel$1.get_summary() : '&nbsp;');
        this.$dom.name.html(str);
        return;
      }
      this.$dom.icon = $('<span></span>').addClass('tabComboBoxIcon').addClass(arg.get_iconClass()).appendTo(this.$dom.domRoot);
      if (!ss.isValue(arg.get_iconClass())) {
        this.$dom.domRoot.addClass($spiff_ComboBoxView.noIconClass);
      }
      var buttonText = arg.get_name();
      if (!ss.referenceEquals(this.$dom.name.text(), buttonText)) {
        this.$dom.name.text(buttonText);
        this.$updateAriaLabel(buttonText);
      }
      if (!ss.isNullOrEmptyString(arg.get_title())) {
        this.$dom.domRoot.attr('title', arg.get_title());
      }
    },
    $updateAriaLabel: function ComboBoxView$UpdateAriaLabel(buttonText) {
      this.$dom.domRoot.attr('aria-label', this.get_viewModel().get_labelText() + ' ' + buttonText);
    },
    $handleItemsChanged: function ComboBoxView$HandleItemsChanged() {
      this.$selectedItemChanged(this.$viewModel$1.get_selectedItem());
    },
    $handleEnabledChanged: function ComboBoxView$HandleEnabledChanged() {
      this.$dom.domRoot.toggleClass($spiff_ComboBoxView.disabledClass, !this.$viewModel$1.get_enabled());
    },
    $handleIsSelectionInvalidChanged: function ComboBoxView$HandleIsSelectionInvalidChanged() {
      this.$dom.domRoot.toggleClass($spiff_ComboBoxView.invalidClass, this.$viewModel$1.get_isSelectionInvalid());
    },
    onAddedToDom: function ComboBoxView$OnAddedToDom() {
      $spiff_Widget.prototype.onAddedToDom.call(this);
      if (this.$viewModel$1.get_sizing() === 1) {
        var menuView = tab.ObjectRegistry.newView($spiff_MenuView).call(null, [this.$viewModel$1.get_menu()]);
        var hiddenContainer = $('<div></div>').css({ visibility: 'hidden', position: 'absolute', left: 0 + 'px', top: 0 + 'px' });
        $(document.body).append(hiddenContainer);
        menuView.addToDom(hiddenContainer);
        this.$dom.domRoot.css({ width: menuView.element.width() + 'px' });
        menuView.dispose();
        hiddenContainer.remove();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ComboBoxViewModel
  var $spiff_ComboBoxViewModel = global.spiff.ComboBoxViewModel = ss.mkType($asm, 'spiff.ComboBoxViewModel', function() {
    this.$items = [];
    this.$selectedItem = null;
    this.$currentMenu = null;
    this.$theme = 0;
    this.$menuTheme = 0;
    this.$sizing = 0;
    this.$showSelectedItem = true;
    this.$enabled = true;
    this.$isSelectionInvalid = false;
    this.$menuStyleClass = '';
    this.$additionalMenuClass = null;
    this.$hasTooltip = true;
    this.$3$ItemsChangedField = null;
    this.$3$SelectedItemChangedField = null;
    this.$3$MenuHiddenField = null;
    this.$3$EnabledChangedField = null;
    this.$3$IsSelectionInvalidChangedField = null;
    this.$3$MenuIdField = null;
    this.$3$LabelTextField = null;
    this.$3$SummaryField = null;
    this.$3$ShowDropdownIconField = false;
    this.menuItems = null;
    this.selectedMenuItem = null;
    this.generateProps = false;
    this.$3$AllowSetToSameValueField = false;
    this.$3$DropdownStyleClassField = null;
    ss.makeGenericType($spiff_BaseReactViewModel$1, [$spiff_ComboBoxProps]).call(this);
    this.set_showDropdownIcon(false);
    this.generateProps = false;
    this.set_menuId(tab.DomUtil.generateUniqueId());
  }, {
    add_itemsChanged: function ComboBoxViewModel$add_ItemsChanged(value) {
      this.$3$ItemsChangedField = ss.delegateCombine(this.$3$ItemsChangedField, value);
    },
    remove_itemsChanged: function ComboBoxViewModel$remove_ItemsChanged(value) {
      this.$3$ItemsChangedField = ss.delegateRemove(this.$3$ItemsChangedField, value);
    },
    add_selectedItemChanged: function ComboBoxViewModel$add_SelectedItemChanged(value) {
      this.$3$SelectedItemChangedField = ss.delegateCombine(this.$3$SelectedItemChangedField, value);
    },
    remove_selectedItemChanged: function ComboBoxViewModel$remove_SelectedItemChanged(value) {
      this.$3$SelectedItemChangedField = ss.delegateRemove(this.$3$SelectedItemChangedField, value);
    },
    add_menuHidden: function ComboBoxViewModel$add_MenuHidden(value) {
      this.$3$MenuHiddenField = ss.delegateCombine(this.$3$MenuHiddenField, value);
    },
    remove_menuHidden: function ComboBoxViewModel$remove_MenuHidden(value) {
      this.$3$MenuHiddenField = ss.delegateRemove(this.$3$MenuHiddenField, value);
    },
    add_enabledChanged: function ComboBoxViewModel$add_EnabledChanged(value) {
      this.$3$EnabledChangedField = ss.delegateCombine(this.$3$EnabledChangedField, value);
    },
    remove_enabledChanged: function ComboBoxViewModel$remove_EnabledChanged(value) {
      this.$3$EnabledChangedField = ss.delegateRemove(this.$3$EnabledChangedField, value);
    },
    add_isSelectionInvalidChanged: function ComboBoxViewModel$add_IsSelectionInvalidChanged(value) {
      this.$3$IsSelectionInvalidChangedField = ss.delegateCombine(this.$3$IsSelectionInvalidChangedField, value);
    },
    remove_isSelectionInvalidChanged: function ComboBoxViewModel$remove_IsSelectionInvalidChanged(value) {
      this.$3$IsSelectionInvalidChangedField = ss.delegateRemove(this.$3$IsSelectionInvalidChangedField, value);
    },
    get_hasTooltip: function ComboBoxViewModel$get_HasTooltip() {
      return this.$hasTooltip;
    },
    set_hasTooltip: function ComboBoxViewModel$set_HasTooltip(value) {
      this.$hasTooltip = value;
    },
    get_theme: function ComboBoxViewModel$get_Theme() {
      return this.$theme;
    },
    set_theme: function ComboBoxViewModel$set_Theme(value) {
      this.$theme = value;
    },
    get_menu: function ComboBoxViewModel$get_Menu() {
      if (ss.isNullOrUndefined(this.$currentMenu)) {
        this.$initializeCurrentMenu();
      }
      return this.$currentMenu;
    },
    get_menuId: function ComboBoxViewModel$get_MenuId() {
      return this.$3$MenuIdField;
    },
    set_menuId: function ComboBoxViewModel$set_MenuId(value) {
      this.$3$MenuIdField = value;
    },
    get_menuTheme: function ComboBoxViewModel$get_MenuTheme() {
      return this.$menuTheme;
    },
    set_menuTheme: function ComboBoxViewModel$set_MenuTheme(value) {
      this.$menuTheme = value;
    },
    get_sizing: function ComboBoxViewModel$get_Sizing() {
      return this.$sizing;
    },
    set_sizing: function ComboBoxViewModel$set_Sizing(value) {
      this.$sizing = value;
    },
    get_menuStyleClass: function ComboBoxViewModel$get_MenuStyleClass() {
      return this.$menuStyleClass;
    },
    set_menuStyleClass: function ComboBoxViewModel$set_MenuStyleClass(value) {
      this.$menuStyleClass = value;
    },
    get_labelText: function ComboBoxViewModel$get_LabelText() {
      return this.$3$LabelTextField;
    },
    set_labelText: function ComboBoxViewModel$set_LabelText(value) {
      this.$3$LabelTextField = value;
    },
    get_items: function ComboBoxViewModel$get_Items() {
      return this.$items;
    },
    get_selectedItem: function ComboBoxViewModel$get_SelectedItem() {
      return this.$selectedItem;
    },
    set_selectedItem: function ComboBoxViewModel$set_SelectedItem(value) {
      if (ss.referenceEquals(this.$selectedItem, value) && !this.get_allowSetToSameValue()) {
        return;
      }
      this.$selectedItem = value;
      this.$updateReactProps();
      this.raiseActionEvent$1($spiff_ComboBoxItem).call(this, this.$3$SelectedItemChangedField, this.$selectedItem);
    },
    get_summary: function ComboBoxViewModel$get_Summary() {
      return this.$3$SummaryField;
    },
    set_summary: function ComboBoxViewModel$set_Summary(value) {
      this.$3$SummaryField = value;
    },
    get_showSelectedItem: function ComboBoxViewModel$get_ShowSelectedItem() {
      return this.$showSelectedItem;
    },
    set_showSelectedItem: function ComboBoxViewModel$set_ShowSelectedItem(value) {
      this.$showSelectedItem = value;
    },
    get_showDropdownIcon: function ComboBoxViewModel$get_ShowDropdownIcon() {
      return this.$3$ShowDropdownIconField;
    },
    set_showDropdownIcon: function ComboBoxViewModel$set_ShowDropdownIcon(value) {
      this.$3$ShowDropdownIconField = value;
    },
    get_enabled: function ComboBoxViewModel$get_Enabled() {
      return this.$enabled;
    },
    set_enabled: function ComboBoxViewModel$set_Enabled(value) {
      if (this.$enabled === value) {
        return;
      }
      this.$enabled = value;
      this.$updateReactProps();
      this.raiseActionEvent(this.$3$EnabledChangedField);
    },
    get_isSelectionInvalid: function ComboBoxViewModel$get_IsSelectionInvalid() {
      return this.$isSelectionInvalid;
    },
    set_isSelectionInvalid: function ComboBoxViewModel$set_IsSelectionInvalid(value) {
      if (this.$isSelectionInvalid === value) {
        return;
      }
      this.$isSelectionInvalid = value;
      this.raiseActionEvent(this.$3$IsSelectionInvalidChangedField);
    },
    get_additionalMenuClass: function ComboBoxViewModel$get_AdditionalMenuClass() {
      return this.$additionalMenuClass;
    },
    set_additionalMenuClass: function ComboBoxViewModel$set_AdditionalMenuClass(value) {
      this.$additionalMenuClass = value;
    },
    get_allowSetToSameValue: function ComboBoxViewModel$get_AllowSetToSameValue() {
      return this.$3$AllowSetToSameValueField;
    },
    set_allowSetToSameValue: function ComboBoxViewModel$set_AllowSetToSameValue(value) {
      this.$3$AllowSetToSameValueField = value;
    },
    get_selectedText: function ComboBoxViewModel$get_SelectedText() {
      return (ss.isValue(this.get_selectedItem()) ? this.get_selectedItem().get_name() : '');
    },
    get_selectedIconClass: function ComboBoxViewModel$get_SelectedIconClass() {
      return (ss.isValue(this.get_selectedItem()) ? this.get_selectedItem().get_iconClass() : '');
    },
    get_$hasAnyIcons: function ComboBoxViewModel$get_HasAnyIcons() {
      var $t1 = this.get_items();
      for (var $t2 = 0; $t2 < $t1.length; $t2++) {
        var item = $t1[$t2];
        if (!tab.MiscUtil.isNullOrEmpty$1(item.get_iconClass())) {
          return true;
        }
      }
      return false;
    },
    get_dropdownStyleClass: function ComboBoxViewModel$get_DropdownStyleClass() {
      return this.$3$DropdownStyleClassField;
    },
    set_dropdownStyleClass: function ComboBoxViewModel$set_DropdownStyleClass(value) {
      this.$3$DropdownStyleClassField = value;
    },
    get_$styleClass: function ComboBoxViewModel$get_StyleClass() {
      var styleClass = 'tab-unification-line-arrow-dropdown';
      if (!this.get_enabled()) {
        styleClass += ' ' + $spiff_UnificationClassNames.disabled;
      }
      if (this.get_$hasAnyIcons()) {
        styleClass += ' ' + $spiff_ComboBoxViewModel.$hasIconsClass;
      }
      return styleClass;
    },
    dispose: function ComboBoxViewModel$Dispose() {
      if (ss.isValue(this.$currentMenu)) {
        this.$currentMenu.dispose();
      }
      $spiff_BaseViewModel.prototype.dispose.call(this);
      this.$currentMenu = null;
    },
    setItems: function ComboBoxViewModel$SetItems(newItems) {
      ss.clear(this.$items);
      var $t1 = ss.getEnumerator(newItems);
      try {
        while ($t1.moveNext()) {
          var item = $t1.current();
          this.$items.push(item);
        }
      }
      finally {
        $t1.dispose();
      }
      this.$raiseItemsChanged();
      this.$updateReactProps();
    },
    setItemsWithInitialSelection: function ComboBoxViewModel$SetItemsWithInitialSelection(newItems, selected) {
      ss.clear(this.$items);
      var $t1 = ss.getEnumerator(newItems);
      try {
        while ($t1.moveNext()) {
          var item = $t1.current();
          this.$items.push(item);
        }
      }
      finally {
        $t1.dispose();
      }
      this.$selectedItem = selected;
      this.$raiseItemsChanged();
      this.$updateReactProps();
    },
    addItem: function ComboBoxViewModel$AddItem(item) {
      this.$items.push(item);
      this.$raiseItemsChanged();
      this.$updateReactProps();
    },
    clearItems: function ComboBoxViewModel$ClearItems() {
      ss.clear(this.$items);
      this.$raiseItemsChanged();
      this.set_selectedItem(null);
      this.$updateReactProps();
    },
    $shouldBuildMenu: function ComboBoxViewModel$ShouldBuildMenu() {
      return this.$items.length > 0 && (this.$enabled || this.get_sizing() === 1);
    },
    updateCurrentMenu: function ComboBoxViewModel$UpdateCurrentMenu() {
      if (!this.$shouldBuildMenu() || !ss.isValue(this.$currentMenu)) {
        return;
      }
      this.$buildMenuItems();
      this.$currentMenu.set_menu(new $spiff_Menu(this.menuItems));
      this.$currentMenu.set_selectedItem(this.selectedMenuItem);
    },
    $initializeCurrentMenu: function ComboBoxViewModel$InitializeCurrentMenu() {
      if (!this.$shouldBuildMenu()) {
        return;
      }
      this.$buildMenuItems();
      this.$currentMenu = $spiff_MenuViewModel.createForMenu(new $spiff_Menu(this.menuItems), ss.mkdel(this, this.$menuItemClicked), ss.mkdel(this, this.$raiseMenuHidden), null);
      this.$currentMenu.set_ariaLabel(this.get_labelText());
      this.$currentMenu.set_id(this.get_menuId());
      this.$currentMenu.set_theme(this.$createMenuTheme());
      this.$currentMenu.set_selectedItem(this.selectedMenuItem);
      this.$currentMenu.set_focusedItem(this.selectedMenuItem);
    },
    buildAndShowMenu: function ComboBoxViewModel$BuildAndShowMenu(relativeTo) {
      if (!this.$shouldBuildMenu()) {
        return;
      }
      this.$initializeCurrentMenu();
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.$currentMenu.remove_hidden(ss.mkdel(this, this.$raiseMenuHidden));
      })));
      var $t1 = new $spiff_ShowMenuOptions(relativeTo, true);
      $t1.additionalMenuClass = 'tabComboBoxMenu';
      var options = $t1;
      if (ss.isValue(this.$additionalMenuClass)) {
        options.additionalMenuClass += ' ' + this.$additionalMenuClass;
      }
      this.$currentMenu.show(options);
    },
    $updateReactProps: function ComboBoxViewModel$UpdateReactProps() {
      if (this.generateProps) {
        this.incrementProps();
      }
    },
    $buildMenuItems: function ComboBoxViewModel$BuildMenuItems() {
      var menuItems = [];
      var selectedMenuItem = null;
      if (ss.isValue(this.$items)) {
        for (var $t1 = 0; $t1 < this.$items.length; $t1++) {
          var i = this.$items[$t1];
          if (this.$showSelectedItem || !ss.referenceEquals(i, this.$selectedItem)) {
            var mi = i.asMenuItem();
            if (ss.referenceEquals(i, this.$selectedItem)) {
              selectedMenuItem = mi;
            }
            menuItems.push(mi);
          }
        }
      }
      this.menuItems = menuItems;
      this.selectedMenuItem = selectedMenuItem;
    },
    $createMenuTheme: function ComboBoxViewModel$CreateMenuTheme() {
      switch (this.$menuTheme) {
        case 0: {
          return new $spiff_ComboBoxMenuTheme();
        }
        case 1: {
          return new $spiff_ComboBoxDropdownMenuTheme(this.get_menuStyleClass());
        }
        case 2: {
          return new $spiff_UnificationLightMenuTheme();
        }
        default: {
          return new $spiff_ComboBoxMenuTheme();
        }
      }
    },
    $raiseMenuHidden: function ComboBoxViewModel$RaiseMenuHidden() {
      if (!ss.staticEquals(this.$3$MenuHiddenField, null)) {
        this.$3$MenuHiddenField();
      }
    },
    $raiseItemsChanged: function ComboBoxViewModel$RaiseItemsChanged() {
      if (!ss.staticEquals(this.$3$ItemsChangedField, null)) {
        this.$3$ItemsChangedField();
      }
    },
    $menuItemClicked: function ComboBoxViewModel$MenuItemClicked(arg) {
      var ci = ss.cast(arg.data, $spiff_ComboBoxItem);
      tab.Log.get(this).debug('item selected: %o', [ci]);
      this.set_selectedItem(ci);
    },
    $onSelectionChanged: function ComboBoxViewModel$OnSelectionChanged(selection) {
      this.set_selectedItem(selection.mapSelected($spiff_ComboBoxItem).call(selection, ss.mkdel(this, function(index) {
        return this.get_items()[index];
      }))[0]);
    },
    $getCustomContentBefore: function ComboBoxViewModel$GetCustomContentBefore(item) {
      return $spiff_ComboBoxComponent.createCustomIconElements(item.get_iconClass());
    },
    createUpdatedProps: function ComboBoxViewModel$CreateUpdatedProps() {
      if (!this.generateProps) {
        return null;
      }
      var $t1 = new $spiff_ComboBoxProps();
      $t1.items = _.map(this.get_items(), ss.mkdel(this, function(item) {
        var $t2 = new $spiff_SelectableButtonGroupItem();
        $t2.label = item.get_name();
        $t2.getCustomContentBefore = ss.mkdel(this, function() {
          return this.$getCustomContentBefore(item);
        });
        $t2.tooltip = (!this.get_props().hasTooltip ? '' : null);
        return $t2;
      }));
      $t1.selection = $spiff_SingleSelectGroupSelection.buildSingleSelectGroupSelection$1($spiff_ComboBoxItem).call(null, Array.prototype.slice.call(this.get_items()), ss.mkdel(this, function(item1) {
        return ss.equals(item1, this.get_selectedItem());
      }));
      $t1.selectedText = this.get_selectedText();
      $t1.selectedIconClass = this.get_selectedIconClass();
      $t1.onSelectionChanged = ss.mkdel(this, this.$onSelectionChanged);
      $t1.hasTooltip = this.get_hasTooltip();
      $t1.hasAnyIcons = this.get_$hasAnyIcons();
      $t1.buttonStyleClass = this.get_$styleClass();
      $t1.styleClass = this.get_dropdownStyleClass();
      $t1.enabled = this.get_enabled();
      return $t1;
    }
  }, {
    newUnificationComboBoxViewModel: function ComboBoxViewModel$NewUnificationComboBoxViewModel() {
      var $t1 = new $spiff_ComboBoxViewModel();
      $t1.set_theme(2);
      $t1.set_menuTheme(2);
      return $t1;
    },
    newLineAndArrowComboBoxViewModel: function ComboBoxViewModel$NewLineAndArrowComboBoxViewModel() {
      var $t1 = new $spiff_ComboBoxViewModel();
      $t1.set_theme(3);
      $t1.set_menuTheme(2);
      return $t1;
    },
    newReactLineAndArrowComboBoxViewModel: function ComboBoxViewModel$NewReactLineAndArrowComboBoxViewModel() {
      var $t1 = new $spiff_ComboBoxViewModel();
      $t1.set_theme(3);
      $t1.set_menuTheme(2);
      $t1.generateProps = true;
      return $t1;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.CompositeSearchWidget
  var $spiff_CompositeSearchWidget = global.spiff.CompositeSearchWidget = ss.mkType($asm, 'spiff.CompositeSearchWidget', function(compositeSearchWidgetTemplate) {
    this.compositeSearchWidgetTemplate = null;
    this.$popupVM = null;
    this.initialSearchTextInfo = null;
    this.$currentlySettingSearchText = false;
    this.$2$InputTextChangedField = null;
    this.$2$ListItemClickedField = null;
    this.$2$ListItemMouseEnterField = null;
    this.$2$ListItemMouseMoveField = null;
    this.$2$TextInputElementClickedField = null;
    this.$2$TextInputClearButtonClickedField = null;
    this.$2$TextInputSearchButtonClickedField = null;
    this.$2$ListViewModelField = null;
    $spiff_Widget.call(this, compositeSearchWidgetTemplate.get_domRootElement());
    this.compositeSearchWidgetTemplate = compositeSearchWidgetTemplate;
    this.compositeSearchWidgetTemplate.get_clearButton().add_click(ss.mkdel(this, this.$clearButtonClicked));
    this.compositeSearchWidgetTemplate.get_searchButton().add_click(ss.mkdel(this, this.$searchButtonClicked));
    this.compositeSearchWidgetTemplate.get_textInputView().add_propertyChanged(ss.mkdel(this, this.$handleInputTextChange));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.compositeSearchWidgetTemplate.get_clearButton().remove_click(ss.mkdel(this, this.$clearButtonClicked));
      this.compositeSearchWidgetTemplate.get_searchButton().remove_click(ss.mkdel(this, this.$searchButtonClicked));
      this.compositeSearchWidgetTemplate.get_textInputView().remove_propertyChanged(ss.mkdel(this, this.$handleInputTextChange));
      this.compositeSearchWidgetTemplate.disposeTemplate();
    })));
    this.disposables.add$1($spiff_EventUtil.bindWithDispose(this.get_textInputView().get_inputElement(), 'mousedown', ss.mkdel(this, this.$onInputElementClick)));
    this.disposables.add$1($spiff_EventUtil.bindWithDispose(this.get_textInputView().get_inputElement(), 'touchstart', ss.mkdel(this, this.$onInputElementClick)));
    this.get_textInputView().get_inputElement().attr('autocomplete', 'off');
    this.get_textInputView().get_inputElement().attr('autocorrect', 'off');
    this.get_textInputView().get_inputElement().attr('autocapitalize', 'off');
    this.get_textInputView().get_inputElement().attr('spellcheck', 'false');
  }, {
    add_inputTextChanged: function CompositeSearchWidget$add_InputTextChanged(value) {
      this.$2$InputTextChangedField = ss.delegateCombine(this.$2$InputTextChangedField, value);
    },
    remove_inputTextChanged: function CompositeSearchWidget$remove_InputTextChanged(value) {
      this.$2$InputTextChangedField = ss.delegateRemove(this.$2$InputTextChangedField, value);
    },
    add_listItemClicked: function CompositeSearchWidget$add_ListItemClicked(value) {
      this.$2$ListItemClickedField = ss.delegateCombine(this.$2$ListItemClickedField, value);
    },
    remove_listItemClicked: function CompositeSearchWidget$remove_ListItemClicked(value) {
      this.$2$ListItemClickedField = ss.delegateRemove(this.$2$ListItemClickedField, value);
    },
    add_listItemMouseEnter: function CompositeSearchWidget$add_ListItemMouseEnter(value) {
      this.$2$ListItemMouseEnterField = ss.delegateCombine(this.$2$ListItemMouseEnterField, value);
    },
    remove_listItemMouseEnter: function CompositeSearchWidget$remove_ListItemMouseEnter(value) {
      this.$2$ListItemMouseEnterField = ss.delegateRemove(this.$2$ListItemMouseEnterField, value);
    },
    add_listItemMouseMove: function CompositeSearchWidget$add_ListItemMouseMove(value) {
      this.$2$ListItemMouseMoveField = ss.delegateCombine(this.$2$ListItemMouseMoveField, value);
    },
    remove_listItemMouseMove: function CompositeSearchWidget$remove_ListItemMouseMove(value) {
      this.$2$ListItemMouseMoveField = ss.delegateRemove(this.$2$ListItemMouseMoveField, value);
    },
    add_textInputElementClicked: function CompositeSearchWidget$add_TextInputElementClicked(value) {
      this.$2$TextInputElementClickedField = ss.delegateCombine(this.$2$TextInputElementClickedField, value);
    },
    remove_textInputElementClicked: function CompositeSearchWidget$remove_TextInputElementClicked(value) {
      this.$2$TextInputElementClickedField = ss.delegateRemove(this.$2$TextInputElementClickedField, value);
    },
    add_textInputClearButtonClicked: function CompositeSearchWidget$add_TextInputClearButtonClicked(value) {
      this.$2$TextInputClearButtonClickedField = ss.delegateCombine(this.$2$TextInputClearButtonClickedField, value);
    },
    remove_textInputClearButtonClicked: function CompositeSearchWidget$remove_TextInputClearButtonClicked(value) {
      this.$2$TextInputClearButtonClickedField = ss.delegateRemove(this.$2$TextInputClearButtonClickedField, value);
    },
    add_textInputSearchButtonClicked: function CompositeSearchWidget$add_TextInputSearchButtonClicked(value) {
      this.$2$TextInputSearchButtonClickedField = ss.delegateCombine(this.$2$TextInputSearchButtonClickedField, value);
    },
    remove_textInputSearchButtonClicked: function CompositeSearchWidget$remove_TextInputSearchButtonClicked(value) {
      this.$2$TextInputSearchButtonClickedField = ss.delegateRemove(this.$2$TextInputSearchButtonClickedField, value);
    },
    get_template: function CompositeSearchWidget$get_Template() {
      return this.compositeSearchWidgetTemplate.get_template();
    },
    get_domRoot: function CompositeSearchWidget$get_DomRoot() {
      return this.compositeSearchWidgetTemplate.get_domRootElement();
    },
    get_textInputView: function CompositeSearchWidget$get_TextInputView() {
      return this.compositeSearchWidgetTemplate.get_textInputView();
    },
    get_searchButton: function CompositeSearchWidget$get_SearchButton() {
      return this.compositeSearchWidgetTemplate.get_searchButton();
    },
    get_clearButton: function CompositeSearchWidget$get_ClearButton() {
      return this.compositeSearchWidgetTemplate.get_clearButton();
    },
    get_listViewModel: function CompositeSearchWidget$get_ListViewModel() {
      return this.$2$ListViewModelField;
    },
    set_listViewModel: function CompositeSearchWidget$set_ListViewModel(value) {
      this.$2$ListViewModelField = value;
    },
    setPlaceholderText: function CompositeSearchWidget$SetPlaceholderText(text) {
      this.get_textInputView().get_inputElement().attr('placeholder', text);
    },
    showList: function CompositeSearchWidget$ShowList(listItems, itemCreator, parent) {
      this.removeList();
      if (listItems.length > 0) {
        this.set_listViewModel(new $spiff_PopupListViewModel(listItems, itemCreator, 0));
        if (!ss.staticEquals(this.$2$ListItemClickedField, null)) {
          this.get_listViewModel().add_selectionChanged(ss.mkdel(this, function() {
            this.$2$ListItemClickedField(this.get_listViewModel().get_firstSelectedItem());
          }));
        }
        if (!ss.staticEquals(this.$2$ListItemMouseEnterField, null)) {
          this.get_listViewModel().add_listItemMouseEnter(ss.mkdel(this, function(item) {
            this.$2$ListItemMouseEnterField(item);
          }));
        }
        if (!ss.staticEquals(this.$2$ListItemMouseMoveField, null)) {
          this.get_listViewModel().add_listItemMouseMove(ss.mkdel(this, function(item1) {
            this.$2$ListItemMouseMoveField(item1);
          }));
        }
        var listView = new $spiff_PopupListView(this.get_listViewModel());
        listView.addClass($spiff_CompositeSearchWidget.listClassName);
        listView.addToDom(parent || this.get_domRoot());
      }
    },
    showListInsideUberPopup: function CompositeSearchWidget$ShowListInsideUberPopup(listItems, itemCreator, relativeElement, additionalClassName, maxPopupHeight) {
      if (listItems.length <= 0) {
        this.removeList();
        return;
      }
      this.set_listViewModel(new $spiff_PopupListViewModel(listItems, itemCreator, 0));
      if (!ss.staticEquals(this.$2$ListItemClickedField, null)) {
        this.get_listViewModel().add_selectionChanged(ss.mkdel(this, function() {
          this.$2$ListItemClickedField(this.get_listViewModel().get_firstSelectedItem());
        }));
      }
      if (!ss.staticEquals(this.$2$ListItemMouseEnterField, null)) {
        this.get_listViewModel().add_listItemMouseEnter(ss.mkdel(this, function(item) {
          this.$2$ListItemMouseEnterField(item);
        }));
      }
      if (!ss.staticEquals(this.$2$ListItemMouseMoveField, null)) {
        this.get_listViewModel().add_listItemMouseMove(ss.mkdel(this, function(item1) {
          this.$2$ListItemMouseMoveField(item1);
        }));
      }
      if (ss.isNullOrUndefined(this.$popupVM)) {
        this.$popupVM = $spiff_UberPopupViewModel.createForContent$1(this.get_listViewModel(), relativeElement, null, true);
        this.$popupVM.set_resizeContent(ss.mkdel(this, this.$resizeListInsideUberPopup));
        var additionalClassNames = (ss.isValue(additionalClassName) ? [$spiff_CompositeSearchWidget.listClassName, additionalClassName] : [$spiff_CompositeSearchWidget.listClassName]);
        var $t2 = this.$popupVM;
        var $t1 = new $spiff_UberPopupShowOptions();
        $t1.additionalClassNames = additionalClassNames;
        $t1.globalTouchWhitelist = [this.get_textInputView().element.get(0), this.get_searchButton().element.get(0), this.get_clearButton().element.get(0)];
        $t1.horizontalAttach = 1;
        $t1.limitPopupHeight = true;
        $t1.maxPopupHeight = maxPopupHeight;
        $t1.popupMode = 1;
        $t1.theme = 1;
        $t1.focusOnShown = false;
        $t2.options = $t1;
        this.$popupVM.add_hidden(ss.mkdel(this, function() {
          this.$popupVM = null;
          this.handleRemoveList();
        }));
        this.$popupVM.show();
      }
      else {
        this.$popupVM.set_content(this.get_listViewModel());
      }
    },
    $resizeListInsideUberPopup: function CompositeSearchWidget$ResizeListInsideUberPopup(contentWrapper, element) {
      var dropdownList = contentWrapper.children('.tab-list').eq(0);
      var dropdownFullHeight = dropdownList.prop('scrollHeight');
      if (dropdownFullHeight < 1) {
        element.show();
        dropdownFullHeight = dropdownList.prop('scrollHeight');
        element.hide();
      }
      var inputBoxWidth = this.$popupVM.get_relativeElement().outerWidth();
      dropdownList.css('min-width', inputBoxWidth + 'px').css('max-width', Math.max(inputBoxWidth, $spiff_CompositeSearchWidget.$listInsideUberPopupMaxWidth) + 'px');
      var options = this.$popupVM.options;
      if (ss.isValue(options.maxPopupHeight) && dropdownFullHeight > ss.unbox(options.maxPopupHeight)) {
        dropdownList.css('overflow-y', 'scroll');
      }
    },
    removeList: function CompositeSearchWidget$RemoveList() {
      if (ss.isValue(this.$popupVM)) {
        this.$popupVM.hide(false);
      }
      else {
        this.handleRemoveList();
      }
    },
    handleRemoveList: function CompositeSearchWidget$HandleRemoveList() {
      if (ss.isValue(this.get_listViewModel())) {
        this.get_listViewModel().dispose();
        this.set_listViewModel(null);
      }
    },
    $clearButtonClicked: function CompositeSearchWidget$ClearButtonClicked() {
      this.get_textInputView().get_inputElement().focus();
      this.get_textInputView().set_text('');
      if (!ss.staticEquals(this.$2$TextInputClearButtonClickedField, null)) {
        this.$2$TextInputClearButtonClickedField();
      }
    },
    $searchButtonClicked: function CompositeSearchWidget$SearchButtonClicked() {
      if (!ss.staticEquals(this.$2$TextInputSearchButtonClickedField, null)) {
        this.$2$TextInputSearchButtonClickedField();
      }
    },
    setSearchText: function CompositeSearchWidget$SetSearchText(newText) {
      this.$currentlySettingSearchText = true;
      this.get_textInputView().set_text(newText);
      this.$currentlySettingSearchText = false;
    },
    $handleInputTextChange: function CompositeSearchWidget$HandleInputTextChange(sender, args) {
      if (!ss.staticEquals(this.$2$InputTextChangedField, null) && !this.$currentlySettingSearchText) {
        this.$2$InputTextChangedField(this.get_textInputView().get_text());
      }
    },
    $onInputElementClick: function CompositeSearchWidget$OnInputElementClick(e) {
      this.get_textInputView().get_inputElement().get(0).focus();
      if (!ss.staticEquals(this.$2$TextInputElementClickedField, null)) {
        this.$2$TextInputElementClickedField();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.CompositeSearchWidgetInitialSearchTextInfo
  var $spiff_CompositeSearchWidgetInitialSearchTextInfo = global.spiff.CompositeSearchWidgetInitialSearchTextInfo = ss.mkType($asm, 'spiff.CompositeSearchWidgetInitialSearchTextInfo', function() {
    this.initialSearchText = '';
    this.initialSearchTextDomClassName = '';
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.CompositeSearchWidgetTemplate
  var $spiff_CompositeSearchWidgetTemplate = global.spiff.CompositeSearchWidgetTemplate = ss.mkType($asm, 'spiff.CompositeSearchWidgetTemplate', function() {
    this.searchTextInputView = null;
    this.$searchButton = null;
    this.$clearButton = null;
    $spiff_Template.call(this, $($spiff_CompositeSearchWidgetTemplate.$htmlTemplate));
    this.searchTextInputView = $spiff_TextInputView.newTextInputView('', '', null, false);
    this.get_textInputView().addToDom(this.domRoot);
    this.$searchButton = $spiff_LabelButton.newNativeButton();
    this.$searchButton.addClass('tabCompositeSearchWidget-SearchButton');
    this.get_searchButton().addToDom(this.domRoot);
    this.get_searchButton().element.attr('title', tab.Strings.MapsSearchViewInitialText);
    this.get_searchButton().tabIndex(0);
    this.$clearButton = $spiff_LabelButton.newNativeButton();
    this.$clearButton.addClass('tabCompositeSearchWidget-ClearButton');
    this.$clearButton.element.attr('title', tab.Strings.MapsSearchViewClearInputTooltip);
    this.$clearButton.tabIndex(0);
    this.get_clearButton().get_labelElement().css('display', 'none');
    this.$clearButton.addToDom(this.domRoot);
  }, {
    get_domRootElement: function CompositeSearchWidgetTemplate$get_DomRootElement() {
      return this.domRoot;
    },
    get_template: function CompositeSearchWidgetTemplate$get_Template() {
      return this;
    },
    get_textInputView: function CompositeSearchWidgetTemplate$get_TextInputView() {
      return this.searchTextInputView;
    },
    get_searchButton: function CompositeSearchWidgetTemplate$get_SearchButton() {
      return this.$searchButton;
    },
    get_clearButton: function CompositeSearchWidgetTemplate$get_ClearButton() {
      return this.$clearButton;
    },
    disposeTemplate: function CompositeSearchWidgetTemplate$DisposeTemplate() {
      this.dispose();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.CustomComboBoxItem
  var $spiff_CustomComboBoxItem = global.spiff.CustomComboBoxItem = ss.mkType($asm, 'spiff.CustomComboBoxItem', function(domRoot, iconClass, name, data, description) {
    this.$domRoot = null;
    $spiff_ComboBoxItem.call(this, iconClass, name, data, description, null);
    this.$domRoot = domRoot;
  }, {
    get_domRoot: function CustomComboBoxItem$get_DomRoot() {
      return this.$domRoot;
    },
    asMenuItem: function CustomComboBoxItem$AsMenuItem() {
      return $spiff_CustomMenuItem.newCustomMenuItem(this.get_domRoot());
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.CustomCursor
  var $spiff_CustomCursor = global.spiff.CustomCursor = ss.mkType($asm, 'spiff.CustomCursor', function(assetURL, fallback) {
    this.$cssString = null;
    if (ss.isValue(assetURL)) {
      this.$cssString = 'url(' + tableau.util.assetUrl(assetURL, true) + '), ' + fallback;
    }
    else {
      this.$cssString = fallback;
    }
  }, {
    setCursor: function CustomCursor$SetCursor(element) {
      element.css('cursor', this.$cssString);
    }
  }, {
    copyFromElement: function CustomCursor$CopyFromElement(element) {
      var cursor = (ss.isValue(element) ? element.css('cursor') : '');
      return new $spiff_CustomCursor(null, cursor);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.CustomIScrollTemplate
  var $spiff_CustomIScrollTemplate = global.spiff.CustomIScrollTemplate = ss.mkType($asm, 'spiff.CustomIScrollTemplate', function() {
    this.contentWindow = null;
    this.verticalScrollbar = null;
    this.verticalScrollbarIndicator = null;
    this.horizontalScrollbar = null;
    this.horizontalScrollbarIndicator = null;
    $spiff_IScrollTemplate.call(this, $spiff_CustomIScrollTemplate.$htmlTemplate);
    this.content = this.getElementBySelector('.tabScrollerContent');
    this.scroll = this.domRoot;
    this.contentWindow = this.getElementBySelector('.tabScrollerContentWindow');
    this.verticalScrollbar = this.getElementBySelector('.tabVerticalScrollbar');
    this.verticalScrollbarIndicator = this.getElementBySelector('.tabVerticalScrollbar .tabScrollbarIndicator');
    this.horizontalScrollbar = this.getElementBySelector('.tabHorizontalScrollbar');
    this.horizontalScrollbarIndicator = this.getElementBySelector('.tabHorizontalScrollbar .tabScrollbarIndicator');
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.CustomIScrollView
  var $spiff_CustomIScrollView = global.spiff.CustomIScrollView = ss.mkType($asm, 'spiff.CustomIScrollView', function(viewModel) {
    $spiff_IScrollView.call(this, viewModel, new $spiff_CustomIScrollTemplate());
    this.$addScrollbarToIScrollOptions();
    this.$formatControls();
    if (viewModel.get_hasScrollBars()) {
      this.addScroller();
      this.setUpEvents();
      this.$listenToTopLevelEvents();
    }
  }, {
    get_scrollbarBuffer: function CustomIScrollView$get_ScrollbarBuffer() {
      return 0;
    },
    get_customDom: function CustomIScrollView$get_CustomDom() {
      return ss.cast(this.get_template(), $spiff_CustomIScrollTemplate);
    },
    get_verticalScrollbar: function CustomIScrollView$get_VerticalScrollbar() {
      return this.get_customDom().verticalScrollbar;
    },
    get_horizontalScrollbar: function CustomIScrollView$get_HorizontalScrollbar() {
      return this.get_customDom().horizontalScrollbar;
    },
    $addScrollbarToIScrollOptions: function CustomIScrollView$AddScrollbarToIScrollOptions() {
      this.get_scrollableViewModel().get_indicatorOptions().resize = false;
      this.get_scrollableViewModel().add_refresh(ss.mkdel(this, this.$resizeScrollBarIndicatorIndicator));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.get_scrollableViewModel().remove_refresh(ss.mkdel(this, this.$resizeScrollBarIndicatorIndicator));
      })));
      if (!tsConfig.is_mobile) {
        this.get_scrollableViewModel().get_indicatorOptions().interactive = true;
      }
      if (this.get_scrollableViewModel().get_scrollY()) {
        this.get_scrollableViewModel().get_indicatorOptions().el = this.get_verticalScrollbar()[0];
      }
      else if (this.get_scrollableViewModel().get_scrollX()) {
        this.get_scrollableViewModel().get_indicatorOptions().el = this.get_horizontalScrollbar()[0];
      }
    },
    $formatControls: function CustomIScrollView$FormatControls() {
      if (this.get_scrollableViewModel().isCenteredVertically) {
        this.get_customDom().contentWindow.addClass($spiff_CustomIScrollView.centeredVerticallyClassName);
      }
      if (this.get_scrollableViewModel().get_hasScrollBars()) {
        this.get_customDom().contentWindow.addClass($spiff_CustomIScrollView.scrollableClassName);
      }
    },
    createScroller: function CustomIScrollView$CreateScroller() {
      this.scroller = new IScroll(this.get_customDom().contentWindow[0], this.get_scrollableViewModel().get_options());
    },
    $listenToTopLevelEvents: function CustomIScrollView$ListenToTopLevelEvents() {
      if (BrowserSupport.BrowserSupport.AddEventListener()) {
        var handleEvent = ss.mkdel(this, function(e) {
          this.sendEventToScroller(e);
        });
        if (!tsConfig.is_mobile) {
          this.get_template().domRoot[0].addEventListener(BrowserSupport.BrowserSupport.MouseWheelEvent(), handleEvent, false);
          this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
            this.get_template().domRoot[0].removeEventListener(BrowserSupport.BrowserSupport.MouseWheelEvent(), handleEvent, false);
          })));
        }
      }
    },
    addNewContent: function CustomIScrollView$AddNewContent() {
      this.get_dom().content.append(this.get_scrollableViewModel().get_content());
      this.$resizeScrollBarIndicatorIndicator();
      this.handleRefresh();
    },
    $resizeScrollBarIndicatorIndicator: function CustomIScrollView$ResizeScrollBarIndicatorIndicator() {
      if (this.get_scrollableViewModel().get_scrollY()) {
        this.get_customDom().verticalScrollbarIndicator.height($spiff_CustomIScrollView.$indicatorSize(tab.DoubleUtil.roundToInt(this.get_customDom().verticalScrollbar.height()), tab.DoubleUtil.roundToInt(this.get_customDom().contentWindow.height()), tab.DoubleUtil.roundToInt(this.get_customDom().content.height())) + 'px');
      }
      else if (this.get_scrollableViewModel().get_scrollX()) {
        this.get_customDom().horizontalScrollbarIndicator.width($spiff_CustomIScrollView.$indicatorSize(tab.DoubleUtil.roundToInt(this.get_customDom().horizontalScrollbar.width()), tab.DoubleUtil.roundToInt(this.get_customDom().contentWindow.width()), tab.DoubleUtil.roundToInt(this.get_customDom().content.width())) + 'px');
      }
    }
  }, {
    $indicatorSize: function CustomIScrollView$IndicatorSize(scrollbarSize, windowSize, contentSize) {
      return Math.max(ss.round(scrollbarSize * windowSize / Math.max(contentSize, 1)), $spiff_CustomIScrollView.$minimumIndicatorLength);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.CustomMenuItem
  var $spiff_CustomMenuItem = global.spiff.CustomMenuItem = ss.mkType($asm, 'spiff.CustomMenuItem', function() {
    this.$domRoot = null;
    $spiff_MenuItem.call(this);
  }, {
    get_domRoot: function CustomMenuItem$get_DomRoot() {
      return this.$domRoot;
    },
    set_domRoot: function CustomMenuItem$set_DomRoot(value) {
      this.$domRoot = value;
    }
  }, {
    newCustomMenuItem: function CustomMenuItem$NewCustomMenuItem(domRoot) {
      var $t1 = new $spiff_CustomMenuItem();
      $t1.set_domRoot(domRoot);
      var mi = $t1;
      return mi;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DefaultIScrollTemplate
  var $spiff_DefaultIScrollTemplate = global.spiff.DefaultIScrollTemplate = ss.mkType($asm, 'spiff.DefaultIScrollTemplate', function() {
    $spiff_IScrollTemplate.call(this, $spiff_DefaultIScrollTemplate.$htmlTemplate);
    this.content = this.getElementBySelector('.tabScrollerContent');
    this.scroll = this.domRoot;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DefaultIScrollView
  var $spiff_DefaultIScrollView = global.spiff.DefaultIScrollView = ss.mkType($asm, 'spiff.DefaultIScrollView', function(viewModel) {
    this.$verticalScrollbarObject = null;
    this.$horizontalScrollbarObject = null;
    $spiff_IScrollView.call(this, viewModel, new $spiff_DefaultIScrollTemplate());
    this.addScroller();
    this.setUpEvents();
  }, {
    get_scrollbarSize: function DefaultIScrollView$get_ScrollbarSize() {
      return $spiff_DefaultIScrollView.$iScrollScrollbarSize;
    },
    get_scrollbarBuffer: function DefaultIScrollView$get_ScrollbarBuffer() {
      return $spiff_DefaultIScrollView.$iScrollScrollbarSize + $spiff_DefaultIScrollView.$iScrollScrollbarWhiteSpace;
    },
    get_verticalScrollbar: function DefaultIScrollView$get_VerticalScrollbar() {
      return this.$verticalScrollbarObject;
    },
    get_horizontalScrollbar: function DefaultIScrollView$get_HorizontalScrollbar() {
      return this.$horizontalScrollbarObject;
    },
    createScroller: function DefaultIScrollView$CreateScroller() {
      this.scroller = new IScroll(this.get_dom().scroll[0], this.get_scrollableViewModel().get_options());
      if (this.get_scrollableViewModel().get_scrollY()) {
        this.get_dom().content.css('margin-right', this.get_scrollbarBuffer() + 'px');
      }
      if (this.get_scrollableViewModel().get_scrollX()) {
        this.get_dom().content.css('margin-bottom', this.get_scrollbarBuffer() + 'px');
      }
      this.$verticalScrollbarObject = this.get_dom().scroll.find('.iScrollVerticalScrollbar').css('width', this.get_scrollbarSize() + 'px');
      this.$horizontalScrollbarObject = this.get_dom().scroll.find('.iScrollHorizontalScrollbar').css('height', this.get_scrollbarSize() + 'px');
    },
    addNewContent: function DefaultIScrollView$AddNewContent() {
      this.get_dom().content.append(this.get_scrollableViewModel().get_content());
      this.handleRefresh();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.UI.DesktopMenuAdapter
  var $spiff_DesktopMenuAdapter = global.spiff.DesktopMenuAdapter = ss.mkType($asm, 'spiff.DesktopMenuAdapter', function(viewModel) {
    this.$viewModel = null;
    tab.Param.verifyValue(viewModel, 'viewModel');
    this.$viewModel = viewModel;
  }, {
    show: function DesktopMenuAdapter$Show(options) {
      tab.HybridWidgetsApiResolver.get_menuApi().done(ss.mkdel(this, function(api) {
        this.showHybridMenu(api, options);
      })).fail(ss.mkdel(this, function(error) {
        tab.Log.get(this).error('Failed to load Menu API', [error]);
      }));
    },
    showHybridMenu: function DesktopMenuAdapter$ShowHybridMenu(menuApi, options) {
      var menuItemLookup = {};
      this.$viewModel.get_menu().menuItems.forEach(function(menuItem) {
        $spiff_DesktopMenuAdapter.$populateMenuItemLookup(menuItem, menuItemLookup);
      });
      var configure = { position: { anchorElement: options.relativeDom.get(0), anchorOffset: { x: 0, y: tab.DoubleUtil.roundToInt(options.relativeDom.height()) } } };
      var hybridMenus = this.$viewModel.get_menu().menuItems.map($spiff_DesktopMenuAdapter.spiffMenuToHybridMenu);
      menuApi.Show(configure, hybridMenus).then(ss.mkdel(this, function(menu) {
        var menuItem1 = menuItemLookup[menu.key];
        this.$viewModel.clickMenuItem(menuItem1);
      }), ss.mkdel(this, function(error) {
        tab.Log.get(this).error('Failed to execute Show method in Hybrid Widgets Desktop:', [error.toString()]);
      }));
    }
  }, {
    spiffMenuToHybridMenu: function DesktopMenuAdapter$SpiffMenuToHybridMenu(spiffMenu) {
      tab.Param.verifyValue(spiffMenu, 'spiffMenu');
      if (spiffMenu.isDivider) {
        return { type: 'divider' };
      }
      var $t1 = { type: 'entry' };
      $t1.displayValue = spiffMenu.name;
      $t1.key = spiffMenu.id;
      $t1.tooltip = spiffMenu.title;
      $t1.disabled = !spiffMenu.enabled;
      $t1.checked = spiffMenu.checkState !== 0;
      $t1.isDefault = spiffMenu.isDefault;
      var newMenu = $t1;
      if (ss.isValue(spiffMenu.subMenu) && spiffMenu.subMenu.menuItems.length > 0) {
        newMenu.subMenuItems = spiffMenu.subMenu.menuItems.map($spiff_DesktopMenuAdapter.spiffMenuToHybridMenu);
      }
      return newMenu;
    },
    $populateMenuItemLookup: function DesktopMenuAdapter$PopulateMenuItemLookup(spiffMenu, idToSpiffMenuItemMap) {
      tab.Param.verifyValue(spiffMenu, 'spiffMenu');
      idToSpiffMenuItemMap[spiffMenu.id] = spiffMenu;
      if (ss.isValue(spiffMenu.subMenu) && spiffMenu.subMenu.menuItems.length > 0) {
        spiffMenu.subMenu.menuItems.forEach(function(subMenu) {
          $spiff_DesktopMenuAdapter.$populateMenuItemLookup(subMenu, idToSpiffMenuItemMap);
        });
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Dialog
  var $spiff_Dialog = global.spiff.Dialog = ss.mkType($asm, 'spiff.Dialog', function(titleUnescaped, body) {
    this.$dialogElement = null;
    this.$titleBarElement = null;
    this.$resizerElement = null;
    this.$spinnerContainerElement = null;
    this.$bodyElement = null;
    this.$closeButton = null;
    this.$isShown = false;
    this.$useClosingAnimation = false;
    this.$setFocusOnShow = true;
    this.$moveDragSource = null;
    this.$resizeDragSource = null;
    this.$maximized = false;
    this.$stayInWindow = false;
    this.$positionX = 0;
    this.$positionY = 0;
    this.$isActive = false;
    this.$mouseDownOnMe = false;
    this.$sawMouseDown = false;
    this.$afterCloseCallback = null;
    this.$2$ClosingField = null;
    this.$2$ClosedField = null;
    this.$2$ResizeMoveField = null;
    this.$2$ResizeEndField = null;
    this.$2$StartingPositionXField = null;
    this.$2$StartingPositionYField = null;
    this.showTitleTooltip = false;
    $spiff_Widget.call(this, $($spiff_Dialog.$htmlTemplate));
    this.set_titleUnescaped(titleUnescaped);
    this.set_body(body);
    this.$closeButton = $spiff_LabelButton.newNativeButton();
    this.$closeButton.add_click(ss.mkdel(this, this.$onCloseButtonClick));
    this.element.find($spiff_Dialog.$closeButtonSelector).append(this.$closeButton.element);
    this.$closeButton.tabIndex(-2);
    this.$dialogElement = this.element;
    this.$titleBarElement = this.element.find($spiff_Dialog.$titleBarSelector);
    this.$resizerElement = this.element.find($spiff_Dialog.$resizerSelector);
    this.$spinnerContainerElement = this.element.find($spiff_Dialog.$spinnerContainerSelector);
    this.$spinnerContainerElement.hide();
    var pageSpinner = $('#loadingSpinner');
    if (pageSpinner.length === 1) {
      this.$spinnerContainerElement.append(pageSpinner.html());
    }
    this.set_resizeable(false);
    this.$dialogElement.attr('tabindex', '-1');
    EventUtils.GlobalUIEvents.add_FirstTouch(ss.mkdel(this, this.$handleGlobalFirstTouch));
    EventUtils.GlobalUIEvents.add_LastTouch(ss.mkdel(this, this.$handleGlobalLastTouch));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      EventUtils.GlobalUIEvents.remove_FirstTouch(ss.mkdel(this, this.$handleGlobalFirstTouch));
    })));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      EventUtils.GlobalUIEvents.remove_LastTouch(ss.mkdel(this, this.$handleGlobalLastTouch));
    })));
    EventUtils.DragDropManager.attachDropTarget(this.$dialogElement, $spiff_Dialog.$defaultDropTarget);
  }, {
    add_closing: function Dialog$add_Closing(value) {
      this.$2$ClosingField = ss.delegateCombine(this.$2$ClosingField, value);
    },
    remove_closing: function Dialog$remove_Closing(value) {
      this.$2$ClosingField = ss.delegateRemove(this.$2$ClosingField, value);
    },
    add_closed: function Dialog$add_Closed(value) {
      this.$2$ClosedField = ss.delegateCombine(this.$2$ClosedField, value);
    },
    remove_closed: function Dialog$remove_Closed(value) {
      this.$2$ClosedField = ss.delegateRemove(this.$2$ClosedField, value);
    },
    add_resizeMove: function Dialog$add_ResizeMove(value) {
      this.$2$ResizeMoveField = ss.delegateCombine(this.$2$ResizeMoveField, value);
    },
    remove_resizeMove: function Dialog$remove_ResizeMove(value) {
      this.$2$ResizeMoveField = ss.delegateRemove(this.$2$ResizeMoveField, value);
    },
    add_resizeEnd: function Dialog$add_ResizeEnd(value) {
      this.$2$ResizeEndField = ss.delegateCombine(this.$2$ResizeEndField, value);
    },
    remove_resizeEnd: function Dialog$remove_ResizeEnd(value) {
      this.$2$ResizeEndField = ss.delegateRemove(this.$2$ResizeEndField, value);
    },
    get_body: function Dialog$get_Body() {
      return this.$bodyElement;
    },
    set_body: function Dialog$set_Body(value) {
      if (ss.referenceEquals(this.$bodyElement, value)) {
        return;
      }
      if (ss.isValue(this.$bodyElement)) {
        this.$bodyElement.off(this.get_eventNamespace());
      }
      this.$bodyElement = value;
      this.element.find($spiff_Dialog.$bodyContainerSelector).html('').append(value);
      this.setInitialFocus();
    },
    get_bodyHeight: function Dialog$get_BodyHeight() {
      return tab.DoubleUtil.roundToInt(this.$dialogElement.height());
    },
    get_position: function Dialog$get_Position() {
      return { x: this.$positionX, y: this.$positionY };
    },
    set_position: function Dialog$set_Position(value) {
      if (this.get_maximized()) {
        return;
      }
      if (ss.isNullOrUndefined(value)) {
        this.positionInWindow();
      }
      else {
        this.$positionX = value.x;
        this.$positionY = value.y;
        tab.DomUtil.setElementPosition(this.$dialogElement, this.$positionX, this.$positionY, null, false);
        this.$dialogElement.css('position', 'fixed');
      }
      this.raisePropertyChanged($spiff_Dialog.positionProperty);
    },
    get_isActive: function Dialog$get_IsActive() {
      return this.$isActive;
    },
    set_isActive: function Dialog$set_IsActive(value) {
      if (value !== this.$isActive) {
        this.$isActive = value;
        this.$dialogElement.toggleClass($spiff_Dialog.$activeClass, value);
        this.raisePropertyChanged($spiff_Dialog.isActiveProperty);
      }
    },
    get_draggable: function Dialog$get_Draggable() {
      return !this.get_maximized() && ss.isValue(this.$moveDragSource);
    },
    get_resizeable: function Dialog$get_Resizeable() {
      return !this.get_maximized() && ss.isValue(this.$resizeDragSource);
    },
    set_resizeable: function Dialog$set_Resizeable(value) {
      if (this.get_maximized()) {
        return;
      }
      if (value) {
        if (ss.isNullOrUndefined(this.$resizeDragSource)) {
          this.$resizeDragSource = new $spiff_ResizeDragSource(this.$resizerElement, this.$dialogElement, 'bottomRight');
          this.$resizeDragSource.add_endAction(ss.mkdel(this, this.$resizeDragSourceOnEndAction));
          this.$resizeDragSource.add_moveAction(ss.mkdel(this, this.$resizeDragSourceOnMoveAction));
        }
        this.$dialogElement.addClass('resizeable');
      }
      else {
        if (ss.isValue(this.$resizeDragSource)) {
          this.$resizeDragSource.remove_endAction(ss.mkdel(this, this.$resizeDragSourceOnEndAction));
          this.$resizeDragSource.remove_moveAction(ss.mkdel(this, this.$resizeDragSourceOnMoveAction));
          this.$resizeDragSource.dispose();
          this.$resizeDragSource = null;
        }
        this.$dialogElement.removeClass('resizeable');
      }
    },
    get_zIndex: function Dialog$get_ZIndex() {
      return tab.DomUtil.getComputedZIndex(this.element[0]);
    },
    set_zIndex: function Dialog$set_ZIndex(value) {
      this.element.css('z-index', value.toString());
    },
    get_maximized: function Dialog$get_Maximized() {
      return this.$maximized;
    },
    set_maximized: function Dialog$set_Maximized(value) {
      this.$maximized = value;
      this.$dialogElement.toggleClass('maximized', value);
    },
    get_startingPositionX: function Dialog$get_StartingPositionX() {
      return this.$2$StartingPositionXField;
    },
    set_startingPositionX: function Dialog$set_StartingPositionX(value) {
      this.$2$StartingPositionXField = value;
    },
    get_startingPositionY: function Dialog$get_StartingPositionY() {
      return this.$2$StartingPositionYField;
    },
    set_startingPositionY: function Dialog$set_StartingPositionY(value) {
      this.$2$StartingPositionYField = value;
    },
    get_titleUnescaped: function Dialog$get_TitleUnescaped() {
      return this.get_titleElement().text();
    },
    set_titleUnescaped: function Dialog$set_TitleUnescaped(value) {
      this.get_titleElement().text(value);
      if (this.showTitleTooltip) {
        this.get_titleElement().attr('title', this.get_titleElement().text());
      }
    },
    get_isShown: function Dialog$get_IsShown() {
      return this.$isShown;
    },
    get_setFocusOnShow: function Dialog$get_SetFocusOnShow() {
      return this.$setFocusOnShow;
    },
    set_setFocusOnShow: function Dialog$set_SetFocusOnShow(value) {
      this.$setFocusOnShow = value;
    },
    get_closeButton: function Dialog$get_CloseButton() {
      return this.$closeButton;
    },
    get_closeButtonVisible: function Dialog$get_CloseButtonVisible() {
      return this.element.find($spiff_Dialog.$closeButtonSelector).is(':visible');
    },
    set_closeButtonVisible: function Dialog$set_CloseButtonVisible(value) {
      if (value) {
        this.element.find($spiff_Dialog.$closeButtonSelector).show();
      }
      else {
        this.element.find($spiff_Dialog.$closeButtonSelector).hide();
      }
    },
    get_stayInWindow: function Dialog$get_StayInWindow() {
      return this.$stayInWindow;
    },
    set_stayInWindow: function Dialog$set_StayInWindow(value) {
      if (value && !this.$stayInWindow) {
        this.$addStayInWindowHandlers();
      }
      else if (!value) {
        this.$removeStayInWindowHandlers();
      }
      this.$stayInWindow = value;
    },
    get_useClosingAnimation: function Dialog$get_UseClosingAnimation() {
      return this.$useClosingAnimation;
    },
    set_useClosingAnimation: function Dialog$set_UseClosingAnimation(value) {
      this.$useClosingAnimation = value;
    },
    get_dialogElement: function Dialog$get_DialogElement() {
      return this.$dialogElement;
    },
    get_titleBarElement: function Dialog$get_TitleBarElement() {
      return this.$titleBarElement;
    },
    get_titleElement: function Dialog$get_TitleElement() {
      return this.element.find($spiff_Dialog.$titleSelector);
    },
    get_resizerElement: function Dialog$get_ResizerElement() {
      return this.$resizerElement;
    },
    configMoveDragSource: function Dialog$ConfigMoveDragSource(factory) {
      if (ss.isValue(this.$moveDragSource)) {
        throw new ss.Exception('dialog can only be configured once.');
      }
      this.$moveDragSource = factory(this);
      if (ss.isValue(this.$moveDragSource)) {
        this.$moveDragSource.add_endAction(ss.mkdel(this, this.$onMoveEnd));
        this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
          this.$moveDragSource.remove_endAction(ss.mkdel(this, this.$onMoveEnd));
          this.$moveDragSource.dispose();
        })));
      }
    },
    showSpinner: function Dialog$ShowSpinner() {
      this.$spinnerContainerElement.show();
    },
    hideSpinner: function Dialog$HideSpinner() {
      this.$spinnerContainerElement.hide();
    },
    show: function Dialog$Show() {
      this.ensureAttachedAndSized();
      this.element.show();
      this.$isShown = true;
      this.moveToTop();
      if (this.get_setFocusOnShow()) {
        this.setInitialFocus();
      }
      this.set_isActive(true);
    },
    close: function Dialog$Close(callbackWhenClosed) {
      this.$resetMouseState();
      if (!this.get_isShown()) {
        if (!ss.staticEquals(callbackWhenClosed, null)) {
          callbackWhenClosed();
        }
        return;
      }
      var cancelEventArgs = new ss.CancelEventArgs();
      this.onClosing(cancelEventArgs);
      if (cancelEventArgs.cancel) {
        return;
      }
      tab.DomUtil.blur();
      this.$afterCloseCallback = callbackWhenClosed;
      if (this.get_useClosingAnimation()) {
        this.element.fadeOut('fast', ss.mkdel(this, this.$afterCloseAction));
      }
      else {
        this.element.hide();
        this.$afterCloseAction();
      }
    },
    closeAndDispose: function Dialog$CloseAndDispose() {
      this.close(ss.mkdel(this, this.dispose));
    },
    $afterCloseAction: function Dialog$AfterCloseAction() {
      this.detach();
      if (!ss.staticEquals(this.$afterCloseCallback, null)) {
        this.$afterCloseCallback();
        this.$afterCloseCallback = null;
      }
      this.onClosed(new ss.EventArgs());
    },
    onClosing: function Dialog$OnClosing(e) {
      if (!ss.staticEquals(this.$2$ClosingField, null)) {
        this.$2$ClosingField(this, e);
      }
    },
    onClosed: function Dialog$OnClosed(e) {
      if (!ss.staticEquals(this.$2$ClosedField, null)) {
        this.$2$ClosedField(this, e);
      }
    },
    isAttached: function Dialog$IsAttached() {
      return ss.referenceEquals(this.element.parent().get(0), document.body);
    },
    ensureAttachedAndSized: function Dialog$EnsureAttachedAndSized() {
      if (!this.isAttached()) {
        this.element.appendTo(document.body);
        this.bindToEvents();
      }
      this.positionInWindow();
    },
    bindToEvents: function Dialog$BindToEvents() {
      this.element.on(this.createNamespacedEventName('keydown'), ss.mkdel(this, this.onKeyDown));
    },
    $resetMouseState: function Dialog$ResetMouseState() {
      this.$mouseDownOnMe = false;
      this.$sawMouseDown = false;
    },
    $handleGlobalFirstTouch: function Dialog$HandleGlobalFirstTouch(e, cancelCallback) {
      if (!this.$isShown) {
        return;
      }
      this.$resetMouseState();
      this.$sawMouseDown = true;
      if (ss.isValue(e) && !tab.DomUtil.isEqualOrAncestorOf(this.get_closeButton().element[0], e.target) && tab.DomUtil.isEqualOrAncestorOf(this.element[0], e.target)) {
        this.moveToTop();
        this.$mouseDownOnMe = true;
      }
    },
    $handleGlobalLastTouch: function Dialog$HandleGlobalLastTouch(e, cancelCallback) {
      if (!this.$isShown || !this.$sawMouseDown) {
        return;
      }
      if (this.$mouseDownOnMe && tab.DomUtil.isEqualOrAncestorOf(this.element.get(0), e.target) || ss.isNullOrUndefined(e)) {
        if (!this.get_isActive()) {
          this.set_isActive(true);
        }
      }
      else {
        if ($('body').children($spiff_Glass.glassSelector).length !== 0) {
          this.$resetMouseState();
          return;
        }
        this.set_isActive(false);
      }
    },
    unbindEvents: function Dialog$UnbindEvents() {
      this.element.off(this.get_eventNamespace());
    },
    $addStayInWindowHandlers: function Dialog$AddStayInWindowHandlers() {
      $spiff_OrientationHandler.add_orientationChanged(ss.mkdel(this, this.ensureOnScreen));
      $(window).on(this.createNamespacedEventName('resize'), ss.mkdel(this, function() {
        this.ensureOnScreen();
      }));
    },
    $removeStayInWindowHandlers: function Dialog$RemoveStayInWindowHandlers() {
      $spiff_OrientationHandler.remove_orientationChanged(ss.mkdel(this, this.ensureOnScreen));
      $(window).off(this.createNamespacedEventName('resize'));
    },
    detach: function Dialog$Detach() {
      this.$isShown = false;
      this.element.hide();
      this.element.detach();
      this.unbindEvents();
      if (ss.referenceEquals($spiff_Dialog.$topDialog, this)) {
        $spiff_Dialog.$topDialog = null;
      }
    },
    dispose: function Dialog$Dispose() {
      if (ss.isValue(this.$closeButton)) {
        this.$closeButton.remove_click(ss.mkdel(this, this.$onCloseButtonClick));
        this.$closeButton.dispose();
        this.$closeButton = null;
      }
      if (ss.isValue(this.$resizeDragSource)) {
        this.$resizeDragSource.remove_endAction(ss.mkdel(this, this.$resizeDragSourceOnEndAction));
        this.$resizeDragSource.remove_moveAction(ss.mkdel(this, this.$resizeDragSourceOnMoveAction));
        this.$resizeDragSource.dispose();
        this.$resizeDragSource = null;
      }
      this.$removeStayInWindowHandlers();
      this.$isShown = false;
      this.$2$ClosedField = null;
      this.$2$ClosingField = null;
      this.unbindEvents();
      $spiff_Widget.prototype.dispose.call(this);
      if (ss.referenceEquals($spiff_Dialog.$topDialog, this)) {
        $spiff_Dialog.$topDialog = null;
      }
    },
    setInitialFocus: function Dialog$SetInitialFocus() {
      if (this.$isShown) {
        var contentTabbableItems = this.element.find($spiff_Dialog.$bodyContainerSelector + ' :tabbable');
        if (contentTabbableItems.length > 0) {
          contentTabbableItems.eq(0).focus();
        }
        else {
          this.$dialogElement.eq(0).focus();
        }
      }
    },
    ensureOnScreen: function Dialog$EnsureOnScreen() {
      if (!this.get_isShown() || this.get_maximized()) {
        return;
      }
      $spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, function(v) {
        if (ss.isNullOrUndefined(v) || ss.isNullOrUndefined(v.get_dimensions())) {
          tab.Log.get(this).warn('Bad viewport given to Dialog', []);
          return;
        }
        var width = tab.DoubleUtil.roundToInt(this.$dialogElement.outerWidth(true));
        var height = tab.DoubleUtil.roundToInt(this.$dialogElement.outerHeight(true));
        if (this.get_resizeable()) {
          if (width > v.get_dimensions().w) {
            var innerWidth = tab.DoubleUtil.roundToInt(this.$dialogElement.width());
            this.$dialogElement.width(v.get_dimensions().w - (width - innerWidth));
            width = v.get_dimensions().w;
          }
          if (height > v.get_dimensions().h) {
            var innerHeight = tab.DoubleUtil.roundToInt(this.$dialogElement.height());
            this.$dialogElement.height(v.get_dimensions().h - (height - innerHeight));
            height = v.get_dimensions().h;
          }
        }
        var newX = null;
        if (this.$positionX + width > v.get_dimensions().w) {
          newX = Math.max(0, v.get_dimensions().w - width);
        }
        var newY = null;
        if (this.$positionY + height > v.get_dimensions().h) {
          newY = Math.max(0, v.get_dimensions().h - height);
        }
        if (ss.isValue(newX) || ss.isValue(newY)) {
          var $t1 = newX;
          if (ss.isNullOrUndefined($t1)) {
            $t1 = this.$positionX;
          }
          newX = $t1;
          var $t2 = newY;
          if (ss.isNullOrUndefined($t2)) {
            $t2 = this.$positionY;
          }
          newY = $t2;
          tab.Log.get(this).debug('Moving dialog to be in view: newPos:{%s, %s}', [newX, newY]);
          this.set_position({ x: ss.unbox(newX), y: ss.unbox(newY) });
        }
      }));
    },
    positionInWindow: function Dialog$PositionInWindow() {
      this.positionInWindow$1(0, 0);
    },
    positionInWindow$1: function Dialog$PositionInWindow(xBuffer, yBuffer) {
      if (this.get_maximized()) {
        return;
      }
      $spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, function(viewport) {
        var newPositionX = 0;
        var newPositionY = 0;
        var dialogWidth = tab.DoubleUtil.roundToInt(this.$dialogElement.outerWidth(true)) + xBuffer;
        var dialogHeight = tab.DoubleUtil.roundToInt(this.$dialogElement.outerHeight(true)) + yBuffer;
        var windowWidth = tab.DoubleUtil.roundToInt($(window).width());
        var windowHeight = tab.DoubleUtil.roundToInt($(window).height());
        var leftOffset = 0;
        var topOffset = 0;
        if (ss.isValue(viewport.get_dimensions())) {
          windowWidth = viewport.get_dimensions().w;
          windowHeight = viewport.get_dimensions().h;
          var h = new tab.WindowHelper(window.self);
          leftOffset = viewport.get_dimensions().l - h.get_pageXOffset();
          topOffset = viewport.get_dimensions().t - h.get_pageYOffset();
        }
        if (ss.isValue(this.get_startingPositionX())) {
          var right = Math.min(ss.unbox(this.get_startingPositionX()) + dialogWidth, windowWidth);
          newPositionX = Math.max(0, right - dialogWidth);
        }
        else {
          newPositionX = Math.max(0, Math.round((windowWidth - dialogWidth) / 2) + leftOffset);
        }
        if (ss.isValue(this.get_startingPositionY())) {
          var bottom = Math.min(ss.unbox(this.get_startingPositionY()) + dialogHeight, windowHeight);
          newPositionY = Math.max(0, bottom - dialogHeight);
        }
        else {
          newPositionY = Math.max(0, Math.round((windowHeight - dialogHeight) / 2) + topOffset);
        }
        this.set_position({ x: newPositionX, y: newPositionY });
      }));
    },
    moveToTop: function Dialog$MoveToTop() {
      if (!this.$isShown) {
        return;
      }
      this.set_isActive(true);
      if (ss.isNullOrUndefined($spiff_Dialog.$topDialog)) {
        $spiff_Dialog.$topDialog = this;
      }
      else if (!ss.referenceEquals($spiff_Dialog.$topDialog, this)) {
        $spiff_Dialog.$topDialog.set_isActive(false);
        $spiff_Dialog.$topDialog = this;
        this.element.appendTo(document.body);
        tab.DomUtil.blur();
      }
    },
    $resizeDragSourceOnEndAction: function Dialog$ResizeDragSourceOnEndAction(arg) {
      if (!ss.staticEquals(this.$2$ResizeEndField, null)) {
        this.$2$ResizeEndField();
      }
      this.set_isActive(true);
      this.$resetMouseState();
    },
    $resizeDragSourceOnMoveAction: function Dialog$ResizeDragSourceOnMoveAction(arg) {
      if (!ss.staticEquals(this.$2$ResizeMoveField, null)) {
        this.$2$ResizeMoveField();
      }
    },
    $onMoveEnd: function Dialog$OnMoveEnd(e) {
      this.set_position(tab.PointUtil.fromPosition(this.$dialogElement.position()));
      this.set_isActive(true);
      this.$resetMouseState();
    },
    $onCloseButtonClick: function Dialog$OnCloseButtonClick() {
      this.close(null);
    },
    onKeyDown: function Dialog$OnKeyDown(e) {
      if (e.which === 9) {
        this.$handleTabKey(e);
        return;
      }
    },
    $handleTabKey: function Dialog$HandleTabKey(e) {
      var tabbables = this.element.find(':tabbable');
      var first = tabbables.filter(':first');
      var last = tabbables.filter(':last');
      if (ss.referenceEquals(e.target, first[0]) && e.shiftKey) {
        last.focusDelayed(1);
        $spiff_EventUtil.stopEvent$2(e);
      }
      else if (ss.referenceEquals(e.target, last[0]) && !e.shiftKey) {
        first.focusDelayed(1);
        $spiff_EventUtil.stopEvent$2(e);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DividerComboBoxItem
  var $spiff_DividerComboBoxItem = global.spiff.DividerComboBoxItem = ss.mkType($asm, 'spiff.DividerComboBoxItem', function() {
    $spiff_ComboBoxItem.call(this, null, null, null, null, null);
  }, {
    asMenuItem: function DividerComboBoxItem$AsMenuItem() {
      return $spiff_MenuItem.newDivider();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DocumentBodySizeUsage
  var $spiff_DocumentBodySizeUsage = global.spiff.DocumentBodySizeUsage = ss.mkEnum($asm, 'spiff.DocumentBodySizeUsage', { useScrollSize: 'useScrollSize', useClientSize: 'useClientSize' }, true);
  ////////////////////////////////////////////////////////////////////////////////
  // React.DOMElements
  var $spiff_DOMElements = global.spiff.DOMElements = ss.mkType($asm, 'spiff.DOMElements', null, null, {
    $htmlFactory: function DOMElements$HtmlFactory(type) {
      return React.createFactory(type);
    },
    $svgFactory: function DOMElements$SvgFactory(type) {
      return React.createFactory(type);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DragSafeGlass
  var $spiff_DragSafeGlass = global.spiff.DragSafeGlass = ss.mkType($asm, 'spiff.DragSafeGlass', function() {
    $spiff_Glass.call(this, null, false);
    EventUtils.DragDropManager.registerDragGlass(this);
  }, {
    dispose: function DragSafeGlass$Dispose() {
      EventUtils.DragDropManager.unregisterDragGlass(this);
      $spiff_Glass.prototype.dispose.call(this);
    },
    disableHitTests: function DragSafeGlass$DisableHitTests() {
      this.element.css('pointer-events', 'none');
    },
    enableHitTests: function DragSafeGlass$EnableHitTests() {
      this.element.css('pointer-events', 'auto');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DragSortListItemDragAvatar
  var $spiff_DragSortListItemDragAvatar = global.spiff.DragSortListItemDragAvatar = ss.mkType($asm, 'spiff.DragSortListItemDragAvatar', function(listItemView) {
    this.$element = null;
    this.$element = listItemView.element.clone(false).addClass('dragAvatar');
  }, {
    get_rootElement: function DragSortListItemDragAvatar$get_RootElement() {
      return this.$element;
    },
    get_viewModel: function DragSortListItemDragAvatar$get_ViewModel() {
      return null;
    },
    dispose: function DragSortListItemDragAvatar$Dispose() {
      this.$element = null;
    },
    addToDom: function DragSortListItemDragAvatar$AddToDom(parent) {
      parent.append(this.get_rootElement());
      this.onAddedToDom();
    },
    onAddedToDom: function DragSortListItemDragAvatar$OnAddedToDom() {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DropdownComponent
  var $spiff_DropdownComponent = global.spiff.DropdownComponent = ss.mkType($asm, 'spiff.DropdownComponent', function() {
    React.Component.call(this);
    this.state = { isSelecting: false };
  }, {
    componentWillReceiveProps: function DropdownComponent$ComponentWillReceiveProps(nextProps) {
      if (nextProps.resetSelector) {
        this.setState({ isSelecting: false });
      }
    },
    render: function DropdownComponent$Render() {
      var $t1 = new Object();
      $t1.styleClass = this.props.styleClass;
      $t1.isSelecting = this.state.isSelecting;
      $t1.getDesiredHeight = this.props.getDesiredHeight;
      $t1.getMinimumWidth = this.props.getMinimumWidth;
      $t1.children = this.props.children;
      $t1.renderButton = this.props.renderButton;
      $t1.tabIndex = this.props.tabIndex;
      $t1.onSelectorToggled = ss.mkdel(this, this.$toggleSelector);
      $t1.onFocusLost = ss.mkdel(this, this.$onFocusLost);
      return React.createElement($spiff_StatelessDropdownComponent, $t1);
    },
    $toggleSelector: function DropdownComponent$ToggleSelector() {
      this.setState({ isSelecting: !this.state.isSelecting });
    },
    $onFocusLost: function DropdownComponent$OnFocusLost() {
      this.setState({ isSelecting: false });
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.EditableTextLabelComponent
  var $spiff_EditableTextLabelComponent = global.spiff.EditableTextLabelComponent = ss.mkType($asm, 'spiff.EditableTextLabelComponent', function(props, context) {
    ss.makeGenericType($spiff_ReactSpiffAdapter$3, [$spiff_EditableTextView, Object, Object]).call(this, $spiff_EditableTextLabelComponent.$createFromProps(props), props, context);
  }, {
    handleWidgetPropertyChanged: function EditableTextLabelComponent$HandleWidgetPropertyChanged(sender, propertyChangedEventArgs) {
    },
    updateWidgetState: function EditableTextLabelComponent$UpdateWidgetState(newProps) {
      if (!this.get_widget().get_isEditing()) {
        this.get_widget().set_text(newProps.initialContent);
        this.get_widget().updateTextElement(newProps.initialContent);
        this.get_widget().get_inputElement().val(newProps.initialContent);
        if (!tab.MiscUtil.isNullOrEmpty$1(newProps.tooltip)) {
          this.get_widget().get_textElement().find('.text-span').get(0).title = newProps.tooltip;
          this.get_widget().get_inputElement().attr('title', newProps.tooltip);
        }
      }
    }
  }, {
    $createFromProps: function EditableTextLabelComponent$CreateFromProps(props) {
      var widget = $spiff_EditableTextView.newEditableTextView(props.initialContent, props.placeHolderText, props.editOnDoubleClick);
      if (!tab.MiscUtil.isNullOrEmpty$1(props.tooltip)) {
        widget.get_inputElement().attr('title', props.tooltip);
        widget.get_textElement().find('.text-span').get(0).title = props.tooltip;
      }
      widget.showHover = ss.isNullOrUndefined(props.showHover) || props.showHover;
      widget.showTooltip = props.showTooltip;
      widget.add_committed(function() {
        props.onCommit(widget.get_text());
      });
      if (!ss.isNullOrEmptyString(props.styleOverrideClass)) {
        tab.StyleUtil.appendCSSRuleToStyleSheet$1(props.styleOverrideClass + '-override-style', '.' + props.styleOverrideClass + ' .tab-editable-text-view > div', props.styleOverride);
      }
      return widget;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.EditableTextView
  var $spiff_EditableTextView = global.spiff.EditableTextView = ss.mkType($asm, 'spiff.EditableTextView', function(template, initialText, placeHolderText, editOnDoubleClick) {
    this.$template$1 = null;
    this.$3$HoverStateChangedField = null;
    this.$3$EditingField = null;
    this.$3$CommittedField = null;
    this.$3$IsEditingField = false;
    this.showHover = false;
    this.showTooltip = false;
    $spiff_TextInputView.call(this, template, initialText, placeHolderText, null, false);
    this.$template$1 = template;
    this.updateTextElement(initialText);
    var textButton = new $spiff_Button(this.get_textElement());
    if (editOnDoubleClick) {
      this.disposables.add$1($spiff_TableauClickHandler.targetAndDoubleClick(textButton.element.get(0), ss.mkdel(this, function(e) {
        this.edit();
      })));
    }
    else {
      textButton.add_click(ss.mkdel(this, this.edit));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        textButton.remove_click(ss.mkdel(this, this.edit));
        textButton.dispose();
      })));
    }
    this.get_textElement().show();
    this.get_inputElement().hide();
    this.get_inputElement().blur(ss.mkdel(this, function(e1) {
      this.commit();
    }));
    this.add_enterKeyPressed(ss.mkdel(this, function() {
      this.commit();
    }));
    this.add_propertyChanged(ss.mkdel(this, function() {
      this.updateTextElement(this.get_text());
    }));
    if (!tsConfig.is_mobile) {
      var hoverHandler = new $spiff_HoverBehavior(this, null, ss.mkdel(this, function(jQueryEvent) {
        if (this.showHover) {
          this.element.addClass($spiff_EditableTextView.$hoverClassName);
          this.$handleHoverStateChanged(true);
        }
      }), ss.mkdel(this, function(jQueryEvent1) {
        if (this.showHover) {
          this.element.removeClass($spiff_EditableTextView.$hoverClassName);
          this.$handleHoverStateChanged(false);
        }
      }));
      this.disposables.add$1(hoverHandler);
    }
    this.set_isEditing(false);
    this.showHover = true;
  }, {
    add_hoverStateChanged: function EditableTextView$add_HoverStateChanged(value) {
      this.$3$HoverStateChangedField = ss.delegateCombine(this.$3$HoverStateChangedField, value);
    },
    remove_hoverStateChanged: function EditableTextView$remove_HoverStateChanged(value) {
      this.$3$HoverStateChangedField = ss.delegateRemove(this.$3$HoverStateChangedField, value);
    },
    add_editing: function EditableTextView$add_Editing(value) {
      this.$3$EditingField = ss.delegateCombine(this.$3$EditingField, value);
    },
    remove_editing: function EditableTextView$remove_Editing(value) {
      this.$3$EditingField = ss.delegateRemove(this.$3$EditingField, value);
    },
    add_committed: function EditableTextView$add_Committed(value) {
      this.$3$CommittedField = ss.delegateCombine(this.$3$CommittedField, value);
    },
    remove_committed: function EditableTextView$remove_Committed(value) {
      this.$3$CommittedField = ss.delegateRemove(this.$3$CommittedField, value);
    },
    get_textElement: function EditableTextView$get_TextElement() {
      return this.$template$1.get_$textElement();
    },
    get_isEditing: function EditableTextView$get_IsEditing() {
      return this.$3$IsEditingField;
    },
    set_isEditing: function EditableTextView$set_IsEditing(value) {
      this.$3$IsEditingField = value;
    },
    get_textDisplayWidth: function EditableTextView$get_TextDisplayWidth() {
      return Math.min(tab.DoubleUtil.roundToInt(this.$template$1.get_$textSpan().width()), tab.DoubleUtil.roundToInt(this.$template$1.get_$textElement().width()));
    },
    $handleHoverStateChanged: function EditableTextView$HandleHoverStateChanged(onHover) {
      if (ss.isValue(this.$3$HoverStateChangedField)) {
        this.$3$HoverStateChangedField(onHover);
      }
    },
    updateTextElement: function EditableTextView$UpdateTextElement(text) {
      this.$template$1.get_$textSpan().text(text);
      var spanElt = this.$template$1.get_$textSpan().get(0);
      spanElt.title = (this.showTooltip ? text : '');
    },
    edit: function EditableTextView$Edit() {
      this.get_textElement().hide();
      this.get_inputElement().show();
      this.get_inputElement().focus();
      tab.DomUtil.selectAllInputText(this.get_inputElement());
      this.set_isEditing(true);
      this.element.addClass($spiff_EditableTextView.$editingClassName);
      if (ss.isValue(this.$3$EditingField)) {
        this.$3$EditingField();
      }
    },
    commit: function EditableTextView$Commit() {
      if (this.get_isEditing()) {
        this.set_isEditing(false);
        this.get_inputElement().hide();
        this.get_textElement().show();
        this.element.removeClass($spiff_EditableTextView.$editingClassName);
        if (ss.isValue(this.$3$CommittedField)) {
          this.$3$CommittedField();
        }
      }
    },
    $adjustHeight: function EditableTextView$AdjustHeight() {
      var containerHeight = tab.DoubleUtil.roundToInt(this.element.parent().height());
      this.element.height(containerHeight);
      var boundingDiv = this.element.children('div');
      var insideHeight = tab.DoubleUtil.roundToInt(boundingDiv.height());
      this.get_textElement().css('height', insideHeight + 'px');
      this.get_textElement().css('line-height', insideHeight + 'px');
      this.get_inputElement().css('height', insideHeight + 'px');
      this.get_inputElement().css('line-height', insideHeight + 'px');
    },
    onAddedToDom: function EditableTextView$OnAddedToDom() {
      this.$adjustHeight();
      $spiff_Widget.prototype.onAddedToDom.call(this);
    }
  }, {
    newEditableTextView: function EditableTextView$NewEditableTextView(initialContent, placeHolderText, editOnDoubleClick) {
      var template = new $spiff_$EditableTextViewTemplate();
      return new $spiff_EditableTextView(template, initialContent, placeHolderText, editOnDoubleClick);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.EventUtil
  var $spiff_EventUtil = global.spiff.EventUtil = ss.mkType($asm, 'spiff.EventUtil', null, null, {
    bindWithDispose: function EventUtil$BindWithDispose(element, eventName, handler) {
      var eventId = ss.formatString('{0}.{1}', eventName, ++$spiff_EventUtil.$eventCounter);
      element.on(eventId, handler);
      return new tab.CallOnDispose(function() {
        element.off(eventId);
      });
    },
    addEventListenerWithDispose: function EventUtil$AddEventListenerWithDispose(element, eventName, handler, capture) {
      element.addEventListener(eventName.toString(), handler, capture);
      return new tab.CallOnDispose(function() {
        element.removeEventListener(eventName.toString(), handler, capture);
      });
    },
    isCtrlKey: function EventUtil$IsCtrlKey(e) {
      if (ss.isNullOrUndefined(e)) {
        return false;
      }
      return (BrowserSupport.BrowserSupport.IsMac() ? e.metaKey : e.ctrlKey);
    },
    getDragFileList: function EventUtil$GetDragFileList(de) {
      if (ss.isNullOrUndefined(de) || ss.isNullOrUndefined(de.dataTransfer) || ss.isNullOrUndefined(de.dataTransfer.files) || de.dataTransfer.files.length === 0) {
        return null;
      }
      return de.dataTransfer.files;
    },
    stopEvent: function EventUtil$StopEvent(e) {
      e.stopPropagation();
      e.preventDefault();
    },
    stopEvent$1: function EventUtil$StopEvent(e) {
      e.stopPropagation();
      e.preventDefault();
    },
    stopEvent$2: function EventUtil$StopEvent(e) {
      e.stopPropagation();
      e.preventDefault();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.EventUtilsInitializer
  var $spiff_EventUtilsInitializer = global.spiff.EventUtilsInitializer = ss.mkType($asm, 'spiff.EventUtilsInitializer');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ExclusiveMultiSelectGroupSelection
  var $spiff_ExclusiveMultiSelectGroupSelection = global.spiff.ExclusiveMultiSelectGroupSelection = ss.mkType($asm, 'spiff.ExclusiveMultiSelectGroupSelection', function(groupSize) {
    $spiff_MultiSelectGroupSelection.call(this, groupSize);
  }, {
    get_selectedCount: function ExclusiveMultiSelectGroupSelection$get_SelectedCount() {
      return (ss.isValue(this.get_selectedIndexes()) ? ss.count(Object.keys(this.get_selectedIndexes())) : 0);
    },
    mapSelected: function(T) {
      return function ExclusiveMultiSelectGroupSelection$MapSelected(projection) {
        return this.mapSelected$1(T).call(this, projection, false);
      };
    },
    validateAllSelectedState: function ExclusiveMultiSelectGroupSelection$ValidateAllSelectedState() {
      if (ss.isValue(this.get_selectedIndexes()) && ss.count(Object.keys(this.get_selectedIndexes())) === 0) {
        this.set_theAllItemIsSelected(true);
      }
    },
    handleTap: function ExclusiveMultiSelectGroupSelection$HandleTap(index) {
      ss.Debug.assert(index >= 0 && index < this.groupSize);
      if (this.get_theAllItemIsSelected()) {
        this.set_theAllItemIsSelected(false);
        this.get_selectedIndexes()[index] = true;
      }
      else {
        ss.Debug.assert(ss.isValue(this.get_selectedIndexes()));
        if (this.get_selectedIndexes()[index]) {
          delete this.get_selectedIndexes()[index];
          this.validateAllSelectedState();
        }
        else {
          this.get_selectedIndexes()[index] = true;
        }
      }
    },
    handleTapAll: function ExclusiveMultiSelectGroupSelection$HandleTapAll() {
      if (this.get_theAllItemIsSelected()) {
        this.set_theAllItemIsSelected(false);
        for (var i = 0; i < this.groupSize; ++i) {
          this.get_selectedIndexes()[i] = true;
        }
      }
      else {
        this.set_theAllItemIsSelected(true);
      }
    },
    clone: function ExclusiveMultiSelectGroupSelection$Clone() {
      var clone = new $spiff_ExclusiveMultiSelectGroupSelection(this.groupSize);
      clone.allSelected = this.allSelected;
      clone.set_selectedIndexes(_.clone(this.get_selectedIndexes()));
      return clone;
    },
    isSelected: function ExclusiveMultiSelectGroupSelection$IsSelected(index) {
      ss.Debug.assert(index >= 0 && index < this.groupSize);
      return ss.isValue(this.get_selectedIndexes()) && ss.keyExists(this.get_selectedIndexes(), index);
    }
  }, {
    buildExclusiveMultiSelectGroupSelection: function(T) {
      return function ExclusiveMultiSelectGroupSelection$BuildExclusiveMultiSelectGroupSelection(group, isSelected) {
        ss.Debug.assert(ss.isValue(group));
        ss.Debug.assert(!ss.staticEquals(isSelected, null));
        var groupSelection = new $spiff_ExclusiveMultiSelectGroupSelection(group.length);
        var groupLength = group.length;
        for (var i = 0; i < groupLength; ++i) {
          if (isSelected(group[i])) {
            groupSelection.get_selectedIndexes()[i] = true;
          }
        }
        groupSelection.validateAllSelectedState();
        ss.Debug.assert(groupSelection.get_selectedCount() >= 1 || groupSelection.get_theAllItemIsSelected() && groupSelection.get_selectedCount() === 0);
        return groupSelection;
      };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ExclusiveSingleSelectGroupSelection
  var $spiff_ExclusiveSingleSelectGroupSelection = global.spiff.ExclusiveSingleSelectGroupSelection = ss.mkType($asm, 'spiff.ExclusiveSingleSelectGroupSelection', function(groupSize) {
    $spiff_SingleSelectGroupSelection.call(this, groupSize);
  }, {
    mapSelected: function(T) {
      return function ExclusiveSingleSelectGroupSelection$MapSelected(projection) {
        return this.mapSelected$1(T).call(this, projection, false);
      };
    },
    validateAllSelectedState: function ExclusiveSingleSelectGroupSelection$ValidateAllSelectedState() {
      if (ss.isValue(this.get_selectedIndexes()) && ss.count(Object.keys(this.get_selectedIndexes())) === 0) {
        this.set_theAllItemIsSelected(true);
      }
    },
    clone: function ExclusiveSingleSelectGroupSelection$Clone() {
      var clone = new $spiff_ExclusiveSingleSelectGroupSelection(this.groupSize);
      clone.allSelected = this.allSelected;
      clone.set_selectedIndexes(_.clone(this.get_selectedIndexes()));
      return clone;
    }
  }, {
    buildExclusiveSingleSelectGroupSelection: function(T) {
      return function ExclusiveSingleSelectGroupSelection$BuildExclusiveSingleSelectGroupSelection(group, isSelected) {
        ss.Debug.assert(ss.isValue(group));
        ss.Debug.assert(!ss.staticEquals(isSelected, null));
        var groupSelection = new $spiff_ExclusiveSingleSelectGroupSelection(group.length);
        var groupLength = group.length;
        for (var i = 0; i < groupLength; ++i) {
          if (isSelected(group[i])) {
            groupSelection.get_selectedIndexes()[i] = true;
          }
        }
        groupSelection.validateAllSelectedState();
        ss.Debug.assert(groupSelection.get_selectedCount() === 1 || groupSelection.get_theAllItemIsSelected() && groupSelection.get_selectedCount() === 0);
        return groupSelection;
      };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.FocusManager
  var $spiff_FocusManager = global.spiff.FocusManager = ss.mkType($asm, 'spiff.FocusManager', function() {
    {
      $spiff_FocusManager.$bindCapturedEventHandler('focus', $spiff_FocusManager.$handleFocus);
      $spiff_FocusManager.$bindCapturedEventHandler('blur', $spiff_FocusManager.$handleBlur);
      $spiff_FocusManager.$bindCapturedEventHandler('keydown', $spiff_FocusManager.$handleKey);
      $spiff_FocusManager.$bindCapturedEventHandler('keyup', $spiff_FocusManager.$handleKey);
      $spiff_FocusManager.$bindCapturedEventHandler('touchstart', $spiff_FocusManager.$handlePointer);
      $spiff_FocusManager.$bindCapturedEventHandler('mousedown', $spiff_FocusManager.$handlePointer);
      if (!ss.referenceEquals(window.self, window.top)) {
        $spiff_FocusManager.$lastInput = 1;
      }
    }
  }, null, {
    shutdown: function FocusManager$Shutdown() {
      if (ss.isNullOrUndefined($spiff_FocusManager.$instance)) {
        return;
      }
      $spiff_FocusManager.$unbindCapturedEventHandler('focus', $spiff_FocusManager.$handleFocus);
      $spiff_FocusManager.$unbindCapturedEventHandler('blur', $spiff_FocusManager.$handleBlur);
      $spiff_FocusManager.$unbindCapturedEventHandler('keydown', $spiff_FocusManager.$handleKey);
      $spiff_FocusManager.$unbindCapturedEventHandler('keyup', $spiff_FocusManager.$handleKey);
      $spiff_FocusManager.$unbindCapturedEventHandler('touchstart', $spiff_FocusManager.$handlePointer);
      $spiff_FocusManager.$unbindCapturedEventHandler('mousedown', $spiff_FocusManager.$handlePointer);
      $spiff_FocusManager.$instance = null;
    },
    initialize: function FocusManager$Initialize() {
      if (ss.isNullOrUndefined($spiff_FocusManager.$instance)) {
        $spiff_FocusManager.$instance = new $spiff_FocusManager();
      }
    },
    $bindCapturedEventHandler: function FocusManager$BindCapturedEventHandler(type, handler) {
      document.addEventListener(type, handler, true);
    },
    $unbindCapturedEventHandler: function FocusManager$UnbindCapturedEventHandler(type, handler) {
      document.removeEventListener(type, handler, true);
    },
    updateFocusIndicatorVisibility: function FocusManager$UpdateFocusIndicatorVisibility() {
      $(document.activeElement).toggleClass($spiff_FocusManager.$showIndicatorClass, $spiff_FocusManager.$lastInput === 1);
    },
    $handleFocus: function FocusManager$HandleFocus(e) {
      if (ss.referenceEquals(document.activeElement, document.body)) {
        return;
      }
      if (document.hasFocus() && ss.referenceEquals(document.activeElement, e.target) && $spiff_$FocusManager$NavigationKeyState.$isAnyDown()) {
        $spiff_FocusManager.$lastInput = 1;
      }
      $spiff_FocusManager.updateFocusIndicatorVisibility();
    },
    $handleBlur: function FocusManager$HandleBlur(e) {
      window.setTimeout(function() {
        if (document.hasFocus()) {
          $(e.target).removeClass($spiff_FocusManager.$showIndicatorClass);
        }
        else {
          $spiff_$FocusManager$NavigationKeyState.$clear();
        }
      });
    },
    $handleKey: function FocusManager$HandleKey(e) {
      var code = e.keyCode;
      $spiff_$FocusManager$NavigationKeyState.$set(code, e.type === 'keydown');
      if (ss.isNullOrUndefined(document.activeElement)) {
        document.body.focus();
      }
    },
    $handlePointer: function FocusManager$HandlePointer(e) {
      $spiff_FocusManager.$lastInput = 0;
    },
    wasFocusedByPointer: function FocusManager$WasFocusedByPointer() {
      return $spiff_FocusManager.$lastInput === 0;
    },
    trapFocus: function FocusManager$TrapFocus(container) {
      container.off($spiff_FocusManager.$keyDownEventName).on($spiff_FocusManager.$keyDownEventName, $spiff_FocusManager.$onTrappedKeyDown);
    },
    untrapFocus: function FocusManager$UntrapFocus(container) {
      container.off($spiff_FocusManager.$keyDownEventName);
    },
    $onTrappedKeyDown: function FocusManager$OnTrappedKeyDown(e) {
      if (e.which === 9) {
        var tabbables = $(e.currentTarget).find(':tabbable');
        if (ss.referenceEquals(e.target, tabbables.last()[0]) && !e.shiftKey) {
          tabbables.first().focus();
        }
        else if (ss.referenceEquals(e.target, tabbables.first()[0]) && e.shiftKey) {
          tabbables.last().focus();
        }
        else if (tabbables.length > 0) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.Core.FullscreenUtil
  var $spiff_FullscreenUtil = global.spiff.FullscreenUtil = ss.mkType($asm, 'spiff.FullscreenUtil', null, null, {
    add_fullscreenStateChanged: function FullscreenUtil$add_FullscreenStateChanged(value) {
      $spiff_FullscreenUtil.$1$FullscreenStateChangedField = ss.delegateCombine($spiff_FullscreenUtil.$1$FullscreenStateChangedField, value);
    },
    remove_fullscreenStateChanged: function FullscreenUtil$remove_FullscreenStateChanged(value) {
      $spiff_FullscreenUtil.$1$FullscreenStateChangedField = ss.delegateRemove($spiff_FullscreenUtil.$1$FullscreenStateChangedField, value);
    },
    get_fullscreenChangeEventName: function FullscreenUtil$get_FullscreenChangeEventName() {
      return $spiff_FullscreenUtil.$onfullscreenchangeProperty.substring(2);
    },
    get_fullscreenEnabled: function FullscreenUtil$get_FullscreenEnabled() {
      if (ss.isNullOrUndefined($spiff_FullscreenUtil.$fullscreenEnabledProperty)) {
        return false;
      }
      return !!document[$spiff_FullscreenUtil.$fullscreenEnabledProperty];
    },
    get_fullscreenElement: function FullscreenUtil$get_FullscreenElement() {
      if (ss.isNullOrUndefined($spiff_FullscreenUtil.$fullscreenElementProperty)) {
        return null;
      }
      return ss.cast(document[$spiff_FullscreenUtil.$fullscreenElementProperty], HTMLElement);
    },
    get_inFullscreenMode: function FullscreenUtil$get_InFullscreenMode() {
      return ss.isValue($spiff_FullscreenUtil.get_fullscreenElement());
    },
    $findFirstAvailableProperty: function FullscreenUtil$FindFirstAvailableProperty(obj, candidates) {
      for (var $t1 = 0; $t1 < candidates.length; $t1++) {
        var property = candidates[$t1];
        if (property in obj || property.toLowerCase() in obj) {
          return property;
        }
      }
      return null;
    },
    exitFullscreen: function FullscreenUtil$ExitFullscreen() {
      if (ss.isNullOrUndefined($spiff_FullscreenUtil.$exitFullscreenProperty)) {
        return;
      }
      document[$spiff_FullscreenUtil.$exitFullscreenProperty]();
    },
    requestFullscreen: function FullscreenUtil$RequestFullscreen(element) {
      if (ss.isNullOrUndefined($spiff_FullscreenUtil.$requestFullscreenProperty)) {
        return;
      }
      element[$spiff_FullscreenUtil.$requestFullscreenProperty]();
    },
    $handleFullscreenChange: function FullscreenUtil$HandleFullscreenChange(e) {
      document.documentElement.classList.toggle('fullscreen', $spiff_FullscreenUtil.get_inFullscreenMode());
      window.setTimeout(function() {
        if (!ss.staticEquals($spiff_FullscreenUtil.$1$FullscreenStateChangedField, null)) {
          $spiff_FullscreenUtil.$1$FullscreenStateChangedField();
        }
      });
    },
    $updateTrapFocus: function FullscreenUtil$UpdateTrapFocus() {
      var documentElement = $(document.documentElement);
      if ($spiff_FullscreenUtil.get_inFullscreenMode()) {
        $spiff_FocusManager.trapFocus(documentElement);
      }
      else {
        $spiff_FocusManager.untrapFocus(documentElement);
      }
    },
    centeringContainerOffset: function FullscreenUtil$CenteringContainerOffset() {
      if (!$spiff_FullscreenUtil.get_inFullscreenMode()) {
        return 0;
      }
      var container = $($spiff_FullscreenUtil.$centeringContainerSelector);
      return container.offset().top;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.GenericDropdownButtonComponent
  var $spiff_GenericDropdownButtonComponent = global.spiff.GenericDropdownButtonComponent = ss.mkType($asm, 'spiff.GenericDropdownButtonComponent', function(props) {
    $spiff_PureRenderComponent.call(this, props);
  }, {
    render: function GenericDropdownButtonComponent$Render() {
      var styleClass = ss.coalesce(this.props.styleClass, 'tab-unification-line-arrow-dropdown');
      var arrowDownStyle = null;
      if (this.props.isDisabled) {
        styleClass = styleClass + ' disabled';
      }
      if (this.props.disableArrowDown) {
        arrowDownStyle = { display: 'none' };
      }
      return $spiff_DOMElements.div({ className: 'tab-GenericDropdownButton' + ' ' + styleClass, 'data-test-id': ss.coalesce(this.props.testId, 'tab-GenericDropdownButton') }, $spiff_DOMElements.div({ className: 'tab-SelectionDisplay', key: 'tab-SelectionDisplay' }, this.props.selectionDisplay()), $spiff_DOMElements.div({ className: 'tab-DownArrowButton', style: arrowDownStyle, key: 'tab-DownArrowButton' }, $spiff_DOMElements.div({ className: 'arrow down' })));
    }
  }, {
    create: function GenericDropdownButtonComponent$Create(props) {
      return React.createElement($spiff_GenericDropdownButtonComponent, props);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Glass
  var $spiff_Glass = global.spiff.Glass = ss.mkType($asm, 'spiff.Glass', function(parentEl, disableTouchPageZoom) {
    this.$parentElement = null;
    this.$clickHandler = null;
    this.$2$ClickField = null;
    this.$2$ClickWithEventField = null;
    this.$2$PressField = null;
    $spiff_Widget.call(this, $($spiff_Glass.$htmlTemplate));
    this.$parentElement = parentEl || document.body;
    if (!ss.referenceEquals(this.$parentElement, document.body)) {
      this.element.css('position', 'absolute');
    }
    var config = new EventUtils.EventHandleSpec();
    if (disableTouchPageZoom) {
      config.doubleTap = function(e) {
        e.preventDefault();
      };
      config.pinchStart = function(e1) {
        e1.preventDefault();
      };
    }
    this.$clickHandler = $spiff_TableauClickHandler.targetAndConfig(this.element[0], config).onPress(ss.mkdel(this, this.$handlePress)).onClick(ss.mkdel(this, this.$handleClick)).onRightClick(ss.mkdel(this, this.$handleClick));
  }, {
    add_click: function Glass$add_Click(value) {
      this.$2$ClickField = ss.delegateCombine(this.$2$ClickField, value);
    },
    remove_click: function Glass$remove_Click(value) {
      this.$2$ClickField = ss.delegateRemove(this.$2$ClickField, value);
    },
    add_clickWithEvent: function Glass$add_ClickWithEvent(value) {
      this.$2$ClickWithEventField = ss.delegateCombine(this.$2$ClickWithEventField, value);
    },
    remove_clickWithEvent: function Glass$remove_ClickWithEvent(value) {
      this.$2$ClickWithEventField = ss.delegateRemove(this.$2$ClickWithEventField, value);
    },
    add_press: function Glass$add_Press(value) {
      this.$2$PressField = ss.delegateCombine(this.$2$PressField, value);
    },
    remove_press: function Glass$remove_Press(value) {
      this.$2$PressField = ss.delegateRemove(this.$2$PressField, value);
    },
    get_zIndex: function Glass$get_ZIndex() {
      return tab.DomUtil.getComputedZIndex(this.element[0]);
    },
    set_zIndex: function Glass$set_ZIndex(value) {
      this.element.css('z-index', value.toString());
    },
    get_opaque: function Glass$get_Opaque() {
      return this.element.hasClass($spiff_Glass.$opaqueGlassClass);
    },
    set_opaque: function Glass$set_Opaque(value) {
      this.element.toggleClass($spiff_Glass.$clearGlassClass, !value);
      this.element.toggleClass($spiff_Glass.$opaqueGlassClass, value);
    },
    set_preventWebPageScroll: function Glass$set_PreventWebPageScroll(value) {
      if (value) {
        this.element.on(BrowserSupport.BrowserSupport.MouseWheelEvent(), function(e) {
          e.preventDefault();
        });
      }
      else {
        this.element.off(BrowserSupport.BrowserSupport.MouseWheelEvent(), function(e1) {
          e1.preventDefault();
        });
      }
    },
    show: function Glass$Show() {
      if (!ss.referenceEquals(this.element.parent()[0], this.$parentElement)) {
        this.element.appendTo(this.$parentElement);
      }
      if (this.get_opaque()) {
        this.element.toggleClass('glass-fade-in-immediate', true);
      }
      this.element.show();
    },
    hide: function Glass$Hide() {
      this.element.hide();
    },
    setColor: function Glass$SetColor(color) {
      this.element.css('background-color', color);
    },
    dispose: function Glass$Dispose() {
      tab.Log.get(this).debug('Dispose', []);
      this.set_preventWebPageScroll(false);
      if (ss.isValue(this.$clickHandler)) {
        this.$clickHandler.dispose();
        this.$clickHandler = null;
      }
      $spiff_Widget.prototype.dispose.call(this);
    },
    $handleClick: function Glass$HandleClick(e) {
      if (ss.isValue(this.$2$ClickField)) {
        this.$2$ClickField();
      }
      else if (ss.isValue(this.$2$ClickWithEventField)) {
        this.$2$ClickWithEventField(e);
      }
    },
    $handlePress: function Glass$HandlePress(e) {
      if (ss.isValue(this.$2$PressField)) {
        this.$2$PressField(e);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.GridIScrollHandler
  var $spiff_GridIScrollHandler = global.spiff.GridIScrollHandler = ss.mkType($asm, 'spiff.GridIScrollHandler', function(props) {
    this.$scrollingControl = null;
    this.$bindToScrollingControl = null;
    this.$callOnScrollToEnd = null;
    React.Component.call(this, props);
    this.state = {};
    this.$bindToScrollingControl = ss.mkdel(this, function(scrollControl) {
      this.$scrollingControl = scrollControl;
    });
  }, {
    render: function GridIScrollHandler$Render() {
      var $t1 = new $spiff_ScrollingProps();
      $t1.customStyle = { top: this.props.marginTop };
      $t1.extraCssClass = this.props.rootCssClass;
      $t1.scrollX = true;
      $t1.scrollY = true;
      $t1.onScroll = ss.mkdel(this, function(position) {
        this.props.onScroll(-position.x, -position.y);
      });
      $t1.onScrollStop = ss.mkdel(this, function(position1, maxPosition) {
        this.props.onScroll(-position1.x, -position1.y);
        if (position1.y === maxPosition.y && !ss.staticEquals(this.$callOnScrollToEnd, null)) {
          this.$callOnScrollToEnd();
        }
      });
      $t1.startingY = this.state.writeOnlyScrollTop;
      $t1.onScrollingControlRefUpdated = this.$bindToScrollingControl;
      return $spiff_ScrollingComponent.createScroller($t1, [this.props.children]);
    },
    componentDidMount: function GridIScrollHandler$ComponentDidMount() {
      if (!ss.staticEquals(this.props.onRefUpdated, null)) {
        this.props.onRefUpdated(this);
      }
    },
    componentWillUnmount: function GridIScrollHandler$ComponentWillUnmount() {
      if (!ss.staticEquals(this.props.onRefUpdated, null)) {
        this.props.onRefUpdated(null);
      }
    },
    callOnScrollToEnd: function GridIScrollHandler$CallOnScrollToEnd(functionToCallOnScrollToEnd) {
      this.$callOnScrollToEnd = functionToCallOnScrollToEnd;
    },
    setScrollPosition$1: function GridIScrollHandler$SetScrollPosition(scrollLeft, scrollTop) {
      this.setState({ writeOnlyScrollTop: scrollTop });
    },
    scrollBy$1: function GridIScrollHandler$ScrollBy(x, y) {
      var sc = this.$scrollingControl;
      this.scrollBy$2(x, y, sc.get_x(), sc.get_y(), sc.get_maxScrollX(), sc.get_maxScrollY());
    },
    scrollBy$2: function GridIScrollHandler$ScrollBy(x, y, currentX, currentY, maxScrollX, maxScrollY) {
      var newX = currentX + x;
      var clampedNewX = Math.min(Math.max(newX, 0), maxScrollX);
      var newY = currentY + y;
      var clampedNewY = Math.min(Math.max(newY, 0), maxScrollY);
      this.setScrollPosition$1(clampedNewX, clampedNewY);
    },
    setScrollPosition: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_SetScrollPosition(scrollLeft, scrollTop) {
      this.$scrollingControl.scrollTo(scrollLeft, scrollTop);
    },
    getScrollPosition: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_GetScrollPosition() {
      var sc = this.$scrollingControl;
      var left = Math.min(Math.max(sc.get_x(), 0), sc.get_maxScrollX());
      var top = Math.min(Math.max(sc.get_y(), 0), sc.get_maxScrollY());
      return { scrollLeft: left, scrollTop: top };
    },
    scrollBy: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_ScrollBy(x, y) {
      var sc = this.$scrollingControl;
      this.scrollBy$2(x, y, sc.get_x(), sc.get_y(), sc.get_maxScrollX(), sc.get_maxScrollY());
    },
    getScrollbarWidth: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_GetScrollbarWidth() {
      return 9;
    },
    canScroll: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_CanScroll() {
      return this.$scrollingControl.get_canScroll();
    },
    dispose: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_Dispose() {
      this.$scrollingControl.destroy();
    },
    resetPosition: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_ResetPosition() {
      this.$scrollingControl.resetPosition();
    },
    refresh: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_Refresh() {
      this.$scrollingControl.refresh();
    },
    handleEvent: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_HandleEvent(e) {
      this.$scrollingControl.handleEvent(e);
    },
    getScrollContainer: function GridIScrollHandler$SharedWidgetsDataGrid_IScrollable_GetScrollContainer() {
      return ReactDOM.findDOMNode(this);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.GroupSelection
  var $spiff_GroupSelection = global.spiff.GroupSelection = ss.mkType($asm, 'spiff.GroupSelection', function(groupSize) {
    this.groupSize = 0;
    this.allSelected = false;
    this.$1$SelectedIndexesField = null;
    this.groupSize = groupSize;
    this.allSelected = false;
    this.set_selectedIndexes({});
  }, {
    get_theAllItemIsSelected: function GroupSelection$get_TheAllItemIsSelected() {
      return this.allSelected;
    },
    set_theAllItemIsSelected: function GroupSelection$set_TheAllItemIsSelected(value) {
      if (this.groupSize > 0) {
        this.allSelected = value;
        if (value === true) {
          this.set_selectedIndexes(null);
        }
        else {
          this.set_selectedIndexes({});
        }
      }
    },
    get_selectedIndexes: function GroupSelection$get_SelectedIndexes() {
      return this.$1$SelectedIndexesField;
    },
    set_selectedIndexes: function GroupSelection$set_SelectedIndexes(value) {
      this.$1$SelectedIndexesField = value;
    },
    get_selectedCount: function GroupSelection$get_SelectedCount() {
      return (ss.isValue(this.get_selectedIndexes()) ? ss.count(Object.keys(this.get_selectedIndexes())) : 0);
    },
    validateAllSelectedState: function GroupSelection$ValidateAllSelectedState() {
      if (ss.isValue(this.get_selectedIndexes()) && ss.count(Object.keys(this.get_selectedIndexes())) === this.groupSize) {
        this.set_theAllItemIsSelected(true);
      }
    },
    mapSelected: function(T) {
      return function GroupSelection$MapSelected(projection) {
        return this.mapSelected$1(T).call(this, projection, true);
      };
    },
    mapSelected$1: function(T) {
      return function GroupSelection$MapSelected(projection, populateAllForAllSelected) {
        var selectedIndexesArray;
        if (this.get_theAllItemIsSelected() && populateAllForAllSelected) {
          selectedIndexesArray = [];
          var groupSize = this.groupSize;
          for (var i = 0; i < groupSize; ++i) {
            selectedIndexesArray.push(i);
          }
        }
        else {
          selectedIndexesArray = _.map(this.get_selectedIndexes(), function(value, index) {
            return index;
          }).sort();
        }
        return _.map(selectedIndexesArray, function(index1) {
          return projection(index1);
        });
      };
    },
    handleTap: null,
    handleTapAll: null,
    isSelected: null,
    clone: null
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.HorizontalSliderComponent
  var $spiff_HorizontalSliderComponent = global.spiff.HorizontalSliderComponent = ss.mkType($asm, 'spiff.HorizontalSliderComponent', function(props, context) {
    this.$locallyModified = false;
    $spiff_PureRenderComponent.$ctor1.call(this, props, context);
    this.state = { value: props.initialValue, emptyTextBox: false };
  }, {
    render: function HorizontalSliderComponent$Render() {
      return $spiff_StatelessHorizontalSliderComponent.create({ commitValue: ss.mkdel(this, this.$commitValueChange), disabled: this.props.disabled, emptyTextBox: this.state.emptyTextBox, extraCssClass: this.props.extraCssClass, maxValue: this.props.maxValue, minValue: this.props.minValue, showValueTextBox: this.props.showValueTextBox, showPercentageSign: this.props.showPercentageSign, styleClass: this.props.styleClass, tabIndex: this.props.tabIndex, value: this.state.value, displayValueChanged: ss.mkdel(this, this.$setValueInState), width: this.props.width });
    },
    $setValueInState: function HorizontalSliderComponent$SetValueInState(newValue) {
      if (this.props.disabled) {
        return;
      }
      if (ss.isNullOrUndefined(newValue)) {
        this.setState({ value: 0, emptyTextBox: true });
      }
      else {
        this.setState({ value: ss.unbox(newValue), emptyTextBox: false });
      }
      this.$locallyModified = true;
    },
    $commitValueChange: function HorizontalSliderComponent$CommitValueChange(newValue, forceCommit) {
      if (this.props.disabled) {
        return;
      }
      var isChanged = this.$locallyModified || newValue !== this.state.value || forceCommit;
      if (!ss.staticEquals(this.props.onValueChanged, null) && isChanged) {
        this.props.onValueChanged(newValue);
        this.$locallyModified = false;
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.HoverAddClassBehavior
  var $spiff_HoverAddClassBehavior = global.spiff.HoverAddClassBehavior = ss.mkType($asm, 'spiff.HoverAddClassBehavior', null, null, {
    attach: function HoverAddClassBehavior$Attach(widget, classToAdd, childSelector) {
      classToAdd = ss.coalesce(classToAdd, 'hover');
      return new $spiff_HoverBehavior(widget, childSelector, function(e) {
        $spiff_HoverAddClassBehavior.$handleEnter(e, classToAdd);
      }, function(e1) {
        $spiff_HoverAddClassBehavior.$handleLeave(e1, classToAdd);
      });
    },
    $handleEnter: function HoverAddClassBehavior$HandleEnter(e, classToAdd) {
      tab.Logger.getLogger($spiff_HoverAddClassBehavior, null).debug('Hover, element=%o, class=%s', [e.currentTarget, classToAdd]);
      $(e.currentTarget).addClass(classToAdd);
    },
    $handleLeave: function HoverAddClassBehavior$HandleLeave(e, classToAdd) {
      tab.Logger.getLogger($spiff_HoverAddClassBehavior, null).debug('Leave, element=%o, class=%s', [e.currentTarget, classToAdd]);
      $(e.currentTarget).removeClass(classToAdd);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.HoverBehavior
  var $spiff_HoverBehavior = global.spiff.HoverBehavior = ss.mkType($asm, 'spiff.HoverBehavior', function(widget, childSelector, onEnter, onExit) {
    this.$childSelector = null;
    this.$onEnter = null;
    this.$onExit = null;
    this.$onMoveWithin = null;
    this.$widget = null;
    this.$widget = widget;
    this.$childSelector = childSelector;
    this.$onEnter = onEnter;
    this.$onExit = onExit;
    this.$widget.add_disposed(ss.mkdel(this, this.$handleWidgetDispose));
    if (ss.isValue(childSelector)) {
      this.$widget.element.on('mouseenter' + this.get_$eventNamespace(), childSelector, ss.mkdel(this, this.$handleEnter));
      this.$widget.element.on('mouseleave' + this.get_$eventNamespace(), childSelector, ss.mkdel(this, this.$handleLeave));
    }
    else {
      this.$widget.element.on('mouseenter' + this.get_$eventNamespace(), ss.mkdel(this, this.$handleEnter));
      this.$widget.element.on('mouseleave' + this.get_$eventNamespace(), ss.mkdel(this, this.$handleLeave));
    }
    tab.Log.get(this).debug('New HoverBehavior: widget=%o', [this.$widget]);
  }, {
    get_$eventNamespace: function HoverBehavior$get_EventNamespace() {
      return ss.formatString('.{0}', ss.replaceAllString(ss.getTypeFullName(ss.getInstanceType(this)), '.', '_'));
    },
    dispose: function HoverBehavior$Dispose() {
      if (ss.isNullOrUndefined(this.$widget)) {
        return;
      }
      tab.Log.get(this).debug('Dispose', []);
      this.$widget.remove_disposed(ss.mkdel(this, this.$handleWidgetDispose));
      if (ss.isValue(this.$childSelector)) {
        var $t1 = this.$widget.element;
        var $t2 = this.$childSelector;
        $t1.off(this.get_$eventNamespace(), $t2);
      }
      else {
        this.$widget.element.off(this.get_$eventNamespace());
      }
      this.$widget = null;
    },
    $handleEnter: function HoverBehavior$HandleEnter(e) {
      tab.Log.get(this).debug('Hover, element=%o', [e.currentTarget]);
      if (ss.isValue(this.$onEnter)) {
        this.$onEnter(e);
      }
    },
    $handleMove: function HoverBehavior$HandleMove(e) {
      tab.Log.get(this).debug('Hover, element=%o', [e.currentTarget]);
      if (ss.isValue(this.$onMoveWithin)) {
        this.$onMoveWithin(e);
      }
    },
    $handleLeave: function HoverBehavior$HandleLeave(e) {
      tab.Log.get(this).debug('Leave, element=%o', [e.currentTarget]);
      if (ss.isValue(this.$onExit)) {
        this.$onExit(e);
      }
    },
    $handleWidgetDispose: function HoverBehavior$HandleWidgetDispose(source, args) {
      this.dispose();
    }
  }, {
    $ctor1: function(widget, childSelector, onEnter, onExit, onMoveWithin) {
      this.$childSelector = null;
      this.$onEnter = null;
      this.$onExit = null;
      this.$onMoveWithin = null;
      this.$widget = null;
      this.$widget = widget;
      this.$childSelector = childSelector;
      this.$onEnter = onEnter;
      this.$onExit = onExit;
      this.$onMoveWithin = onMoveWithin;
      this.$widget.add_disposed(ss.mkdel(this, this.$handleWidgetDispose));
      if (ss.isValue(childSelector)) {
        this.$widget.element.on('mouseenter' + this.get_$eventNamespace(), childSelector, ss.mkdel(this, this.$handleEnter));
        this.$widget.element.on('mousemove' + this.get_$eventNamespace(), childSelector, ss.mkdel(this, this.$handleMove));
        this.$widget.element.on('mouseleave' + this.get_$eventNamespace(), childSelector, ss.mkdel(this, this.$handleLeave));
      }
      else {
        this.$widget.element.on('mouseenter' + this.get_$eventNamespace(), ss.mkdel(this, this.$handleEnter));
        this.$widget.element.on('mousemove' + this.get_$eventNamespace(), ss.mkdel(this, this.$handleMove));
        this.$widget.element.on('mouseleave' + this.get_$eventNamespace(), ss.mkdel(this, this.$handleLeave));
      }
      tab.Log.get(this).debug('New HoverBehavior: widget=%o', [this.$widget]);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ICompositeSearchWidgetTemplate
  var $spiff_ICompositeSearchWidgetTemplate = global.spiff.ICompositeSearchWidgetTemplate = ss.mkType($asm, 'spiff.ICompositeSearchWidgetTemplate');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IconButton
  var $spiff_IconButton = global.spiff.IconButton = ss.mkType($asm, 'spiff.IconButton', function() {
    this.iconElement = null;
    $spiff_Button.call(this, $('<a></a>').addClass('tab-iconButton'));
    this.setEnabled(true);
  }, {
    get_buttonElement: function IconButton$get_ButtonElement() {
      return this.element;
    },
    setEnabled: function IconButton$SetEnabled(enabled) {
      if (enabled) {
        this.get_buttonElement().removeClass('tab-disabled');
        this.get_buttonElement().addClass('tab-enabled');
      }
      else {
        this.get_buttonElement().removeClass('tab-enabled');
        this.get_buttonElement().addClass('tab-disabled');
      }
      return this;
    },
    setIcon: function IconButton$SetIcon(iconClass) {
      if (!ss.isValue(this.iconElement)) {
        this.iconElement = $('<span></span>');
        this.iconElement.appendTo(this.get_buttonElement());
      }
      this.iconElement.removeClass().addClass('tab-iconButtonIcon').addClass(iconClass);
      return this;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IconButtonComponent
  var $spiff_IconButtonComponent = global.spiff.IconButtonComponent = ss.mkType($asm, 'spiff.IconButtonComponent', function(props) {
    React.Component.call(this, props);
    this.state = this.$buildState();
  }, {
    get_className: function IconButtonComponent$get_ClassName() {
      var classNames = [$spiff_UnificationClassNames.iconButton];
      ss.Debug.assert(ss.isValue(this.props.customClassName), 'IconButton needs to have specific button name.');
      classNames.push(this.props.customClassName);
      if (this.props.disabled) {
        classNames.push($spiff_UnificationClassNames.disabled);
      }
      return classNames.join(' ');
    },
    $buildState: function IconButtonComponent$BuildState() {
      var $t1 = new $spiff_IconButtonState();
      $t1.isActive = (ss.isValue(this.state) ? this.state.isActive : false);
      return $t1;
    },
    render: function IconButtonComponent$Render() {
      ss.Debug.assert(ss.isValue(this.props.iconClassName), 'IconButton should have a valid icon.');
      var $t1 = new EventUtils.EventHandleSpec();
      $t1.tap = ss.mkdel(this, this.$onTap);
      $t1.firstTouch = ss.mkdel(this, function(e) {
        if (tsConfig.is_mobile) {
          var $t2 = new $spiff_IconButtonState();
          $t2.isActive = true;
          this.setState($t2);
        }
      });
      $t1.lastTouch = ss.mkdel(this, function(e1) {
        if (tsConfig.is_mobile) {
          var $t3 = new $spiff_IconButtonState();
          $t3.isActive = false;
          this.setState($t3);
        }
      });
      return EventUtils.EventForwarder.div($t1, { className: this.get_className(), title: this.props.title, onMouseEnter: ss.mkdel(this, function(e2) {
        if (!tsConfig.is_mobile) {
          var $t4 = new $spiff_IconButtonState();
          $t4.isActive = true;
          this.setState($t4);
        }
      }), onMouseLeave: ss.mkdel(this, function(e3) {
        if (!tsConfig.is_mobile) {
          var $t5 = new $spiff_IconButtonState();
          $t5.isActive = false;
          this.setState($t5);
        }
      }) }, $spiff_DOMElements.div({ className: $spiff_UnificationClassNames.icon + ' ' + this.props.iconClassName + (this.state.isActive ? (' ' + $spiff_UnificationClassNames.active) : ''), key: this.props.customClassName, tabIndex: this.props.tabIndex, role: 'button', onKeyPress: ss.mkdel(this, function(e4) {
        this.props.onKeyPress(e4);
      }), 'aria-label': this.props.ariaLabelName }));
    },
    $onTap: function IconButtonComponent$OnTap(e) {
      if (!this.props.disabled && !ss.staticEquals(this.props.onTap, null)) {
        this.props.onTap(e);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IconButtonState
  var $spiff_IconButtonState = global.spiff.IconButtonState = ss.mkType($asm, 'spiff.IconButtonState', function() {
    this.isActive = false;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IContent
  var $spiff_IContent = global.spiff.IContent = ss.mkType($asm, 'spiff.IContent');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Vql.UI.IDialogContent
  var $spiff_IDialogContent = global.spiff.IDialogContent = ss.mkType($asm, 'spiff.IDialogContent');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IHasEnabledState
  var $spiff_IHasEnabledState = global.spiff.IHasEnabledState = ss.mkType($asm, 'spiff.IHasEnabledState');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IListItemContentCreator
  var $spiff_IListItemContentCreator = global.spiff.IListItemContentCreator = ss.mkType($asm, 'spiff.IListItemContentCreator');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IListItemDragAvatarCreator
  var $spiff_IListItemDragAvatarCreator = global.spiff.IListItemDragAvatarCreator = ss.mkType($asm, 'spiff.IListItemDragAvatarCreator');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IListViewDragFeedback
  var $spiff_IListViewDragFeedback = global.spiff.IListViewDragFeedback = ss.mkType($asm, 'spiff.IListViewDragFeedback');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IListViewScrollHandler
  var $spiff_IListViewScrollHandler = global.spiff.IListViewScrollHandler = ss.mkType($asm, 'spiff.IListViewScrollHandler');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.InputType
  var $spiff_InputType = global.spiff.InputType = ss.mkEnum($asm, 'spiff.InputType', { positiveInteger: 0, string: 1 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.InteractAsButtonWrapperComponent
  var $spiff_InteractAsButtonWrapperComponent = global.spiff.InteractAsButtonWrapperComponent = ss.mkType($asm, 'spiff.InteractAsButtonWrapperComponent', function(props, context) {
    this.$eventHandleSpec = null;
    $spiff_PureRenderComponent.$ctor1.call(this, props, context);
    var $t1 = new EventUtils.EventHandleSpec();
    $t1.tap = ss.mkdel(this, function(event) {
      this.$handleInteraction();
      this.$handleClickEvent(event);
    });
    this.$eventHandleSpec = $t1;
  }, {
    render: function InteractAsButtonWrapperComponent$Render() {
      var className = 'tab-custom-button';
      var htmlProps = { role: 'button' };
      if (!this.props.disabled) {
        htmlProps.onKeyDown = ss.mkdel(this, this.$handleKeyDown);
        htmlProps.tabIndex = 0;
      }
      else {
        className += ' ' + $spiff_UnificationClassNames.disabled;
      }
      htmlProps.className = className;
      return EventUtils.EventForwarder.div(this.$eventHandleSpec, htmlProps, this.props.buttonContent());
    },
    $handleKeyDown: function InteractAsButtonWrapperComponent$HandleKeyDown(keyboardEvent) {
      switch (keyboardEvent.which) {
        case 13:
        case 32: {
          this.$handleInteraction();
          this.$handleEnterAndSpaceKeyDown();
          break;
        }
        default: {
          return;
        }
      }
      keyboardEvent.stopPropagation();
      keyboardEvent.preventDefault();
    },
    $handleInteraction: function InteractAsButtonWrapperComponent$HandleInteraction() {
      if (!this.props.disabled && !ss.staticEquals(this.props.handleAllTriggers, null)) {
        this.props.handleAllTriggers();
      }
    },
    $handleEnterAndSpaceKeyDown: function InteractAsButtonWrapperComponent$HandleEnterAndSpaceKeyDown() {
      if (!this.props.disabled && !ss.staticEquals(this.props.handleEnterSpaceOnly, null)) {
        this.props.handleEnterSpaceOnly();
      }
    },
    $handleClickEvent: function InteractAsButtonWrapperComponent$HandleClickEvent(e) {
      if (!this.props.disabled && !ss.staticEquals(this.props.handleClickOnly, null)) {
        this.props.handleClickOnly(e);
      }
    }
  }, {
    create: function InteractAsButtonWrapperComponent$Create(props) {
      return React.createElement($spiff_InteractAsButtonWrapperComponent, props);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IPropsProvider<TProps>
  var $spiff_IPropsProvider$1 = global.spiff.IPropsProvider$1 = ss.mkType($asm, 'spiff.IPropsProvider$1', function(TProps) {
    var $type = ss.registerGenericInterfaceInstance($spiff_IPropsProvider$1, [TProps], { add_propsUpdated: null, remove_propsUpdated: null, get_props: null });
    return $type;
  });
  ss.initGenericInterface($spiff_IPropsProvider$1, 1);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScrollable
  var $spiff_IScrollable = global.spiff.IScrollable = ss.mkType($asm, 'spiff.IScrollable');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScrollComponent
  var $spiff_IScrollComponent = global.spiff.IScrollComponent = ss.mkType($asm, 'spiff.IScrollComponent', function(props, context) {
    this.$refreshTimeout = null;
    this.$windowDisposable = null;
    this.iScroll = null;
    React.Component.call(this, props, context);
    this.state = { hovered: false, scrolling: false };
  }, {
    render: function IScrollComponent$Render() {
      var classes = ['tab-iscroll-component'];
      if (this.state.hovered) {
        classes.push('hover');
      }
      if (this.state.scrolling) {
        classes.push('tabScrolling');
      }
      if (ss.isValue(this.props.extraCssClass)) {
        classes.push(this.props.extraCssClass);
      }
      if (this.props.alwaysShowScrollbarsIfScrollable) {
        classes.push('showIfScrollable');
      }
      var className = ss.arrayFromEnumerable(classes).join(' ');
      return $spiff_DOMElements.div({ ref: 'iscroll-wrapper', className: className, style: this.props.customStyle, onMouseOver: ss.mkdel(this, this.handleOnMouseOver), onMouseOut: ss.mkdel(this, this.handleOnMouseOut) }, $spiff_DOMElements.div({ className: 'tab-iscroll-content' }, this.props.children));
    },
    componentDidMount: function IScrollComponent$ComponentDidMount() {
      this.$windowDisposable = $spiff_EventUtil.bindWithDispose($(window), 'resize', ss.mkdel(this, this.$handleBrowserResize));
      var wrapper = ReactDOM.findDOMNode(this.refs['iscroll-wrapper']);
      this.iScroll = new $spiff_$AugmentedIScroll(wrapper, this.props);
      this.iScroll.on('scrollStart', ss.mkdel(this, this.handleScrollStart));
      this.iScroll.on('scroll', ss.mkdel(this, this.$handleScroll));
      this.iScroll.on('scrollEnd', ss.mkdel(this, function() {
        this.handleScrollStop();
        this.$callScrollStopCallback();
      }));
      this.$refresh();
    },
    componentWillUnmount: function IScrollComponent$ComponentWillUnmount() {
      this.$windowDisposable = tab.MiscUtil.dispose$1(this.$windowDisposable);
      this.iScroll.destroy();
      this.iScroll = null;
      this.$refreshTimeout = tab.MiscUtil.clearTimeout(this.$refreshTimeout);
    },
    componentDidUpdate: function IScrollComponent$ComponentDidUpdate(prevProps) {
      ss.Debug.assert(_.isEqual(prevProps.iScrollOptions, this.props.iScrollOptions), "IScrollComponent doesn't handle IScrollOptions changing");
      if (!ss.referenceEquals(this.props.startingY, prevProps.startingY) && ss.isValue(this.props.startingY)) {
        this.iScroll.scrollTo(this.iScroll.x, ss.unbox(this.props.startingY), 0, null);
        this.$callScrollStopCallback();
      }
      this.$refresh();
    },
    handleOnMouseOver: function IScrollComponent$HandleOnMouseOver(mouseEvent) {
      this.setState({ hovered: true, scrolling: this.state.scrolling });
    },
    handleOnMouseOut: function IScrollComponent$HandleOnMouseOut(mouseEvent) {
      this.setState({ hovered: false, scrolling: this.state.scrolling });
    },
    handleScrollStart: function IScrollComponent$HandleScrollStart() {
      this.setState({ hovered: this.state.hovered, scrolling: true });
    },
    $handleScroll: function IScrollComponent$HandleScroll() {
      if (!ss.staticEquals(this.props.scrollCallback, null)) {
        this.props.scrollCallback(this.iScroll.getComputedPosition());
      }
    },
    handleScrollStop: function IScrollComponent$HandleScrollStop() {
      this.setState({ hovered: this.state.hovered, scrolling: false });
    },
    $handleBrowserResize: function IScrollComponent$HandleBrowserResize(queryEvent) {
      this.$refresh();
    },
    $refresh: function IScrollComponent$Refresh() {
      this.$refreshTimeout = window.setTimeout(ss.mkdel(this, function() {
        if (ss.isValue(this.iScroll)) {
          this.iScroll.refresh();
        }
      }), this.props.refreshDelay);
    },
    $callScrollStopCallback: function IScrollComponent$CallScrollStopCallback() {
      if (!ss.staticEquals(this.props.scrollStopCallback, null)) {
        var $t1 = new Object();
        $t1.x = this.iScroll.maxScrollX;
        $t1.y = this.iScroll.maxScrollY;
        var maxScrollPosition = $t1;
        this.props.scrollStopCallback(this.iScroll.getComputedPosition(), maxScrollPosition);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScroller
  var $spiff_IScroller = global.spiff.IScroller = ss.mkType($asm, 'spiff.IScroller');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScrollingControl
  var $spiff_IScrollingControl = global.spiff.IScrollingControl = ss.mkType($asm, 'spiff.IScrollingControl');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScrollProps
  var $spiff_IScrollProps = global.spiff.IScrollProps = ss.mkType($asm, 'spiff.IScrollProps', function() {
    this.extraCssClass = null;
    this.iScrollOptions = null;
    this.refreshDelay = 0;
    this.keepPositionOnRecreate = true;
    this.alwaysShowScrollbarsIfScrollable = false;
    this.startingY = null;
    this.augmentedScrollX = true;
    this.augmentedScrollY = true;
    this.customStyle = null;
    this.scrollStopCallback = null;
    this.scrollCallback = null;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScrollTemplate
  var $spiff_IScrollTemplate = global.spiff.IScrollTemplate = ss.mkType($asm, 'spiff.IScrollTemplate', function(htmlTemplate) {
    this.content = null;
    this.scroll = null;
    $spiff_Template.call(this, $(htmlTemplate));
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IScrollView
  var $spiff_IScrollView = global.spiff.IScrollView = ss.mkType($asm, 'spiff.IScrollView', function(viewModel, template) {
    this.scrollEndCleanup = new tab.DisposableHolder();
    this.scroller = null;
    $spiff_ScrollableView.call(this, viewModel, template);
  }, {
    get_scrollerX: function IScrollView$get_ScrollerX() {
      return (ss.isNullOrUndefined(this.scroller) ? 0 : -this.scroller.x);
    },
    get_scrollerY: function IScrollView$get_ScrollerY() {
      return (ss.isNullOrUndefined(this.scroller) ? 0 : -this.scroller.y);
    },
    get_dom: function IScrollView$get_Dom() {
      return ss.cast(this.get_template(), $spiff_IScrollTemplate);
    },
    get_scrollableViewModel: function IScrollView$get_ScrollableViewModel() {
      return this.get_viewModel();
    },
    get_scrollbarBuffer: null,
    get_verticalScrollbar: null,
    get_horizontalScrollbar: null,
    addScroller: function IScrollView$AddScroller() {
      this.createScroller();
      this.postCreationScrollerSetup();
      this.get_dom().scroll.toggleClass('tabScrollerCanScrollX', this.get_scrollableViewModel().get_scrollX());
      this.get_dom().scroll.toggleClass('tabScrollerCanScrollY', this.get_scrollableViewModel().get_scrollY());
    },
    createScroller: null,
    postCreationScrollerSetup: function IScrollView$PostCreationScrollerSetup() {
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.scroller.destroy();
      })));
      this.scroller.on('scrollStart', ss.mkdel(this, this.$scrollStart));
      this.scroller.on('scrollEnd', ss.mkdel(this, this.$scrollEnd));
      this.get_dom().scroll.addClass('tabScrollerIScroll');
      this.disposables.add$1($spiff_ClickHandler.targetAndClick(this.get_verticalScrollbar(), function(e) {
        e.stopPropagation();
      }));
      this.disposables.add$1($spiff_ClickHandler.targetAndClick(this.get_horizontalScrollbar(), function(e1) {
        e1.stopPropagation();
      }));
      this.get_dom().domRoot.on(BrowserSupport.BrowserSupport.MouseWheelEvent(), function(e2) {
        e2.stopPropagation();
      });
    },
    setUpEvents: function IScrollView$SetUpEvents() {
      this.get_scrollableViewModel().add_contentChanged(ss.mkdel(this, this.$handleContentChanged));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.get_scrollableViewModel().remove_contentChanged(ss.mkdel(this, this.$handleContentChanged));
      })));
      this.get_scrollableViewModel().add_refresh(ss.mkdel(this, this.handleRefresh));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.get_scrollableViewModel().remove_refresh(ss.mkdel(this, this.handleRefresh));
      })));
    },
    onAddedToDom: function IScrollView$OnAddedToDom() {
      $spiff_Widget.prototype.onAddedToDom.call(this);
      this.addNewContent();
    },
    $handleContentChanged: function IScrollView$HandleContentChanged() {
      this.get_dom().content.empty();
      this.addNewContent();
    },
    addNewContent: null,
    handleRefresh: function IScrollView$HandleRefresh() {
      if (this.get_viewModel().get_hasScrollBars()) {
        this.scroller.refresh();
        this.$hideUnneededScrollers();
      }
      else {
        this.get_verticalScrollbar().addClass('noScroll');
        this.get_horizontalScrollbar().addClass('noScroll');
      }
    },
    $hideUnneededScrollers: function IScrollView$HideUnneededScrollers() {
      this.get_verticalScrollbar().removeClass('noScroll');
      if (!this.scroller.hasVerticalScroll) {
        this.get_verticalScrollbar().addClass('noScroll');
      }
      this.get_horizontalScrollbar().removeClass('noScroll');
      if (!this.scroller.hasHorizontalScroll) {
        this.get_horizontalScrollbar().addClass('noScroll');
      }
    },
    $scrollStart: function IScrollView$ScrollStart() {
      if (tsConfig.is_mobile && (this.scroller.directionX === 0 || !this.scroller.hasHorizontalScroll) && (this.scroller.directionY === 0 || !this.scroller.hasVerticalScroll)) {
        return;
      }
      if (BrowserSupport.BrowserSupport.MouseCapture()) {
        tab.Log.get(this).debug('Start scroll, browser supports setCapture', []);
        tab.DomUtil.setCapture(this.get_dom().scroll[0], true);
        this.scrollEndCleanup.add$1(new tab.CallOnDispose(function() {
          tab.DomUtil.releaseCapture();
        }));
      }
      else if (BrowserSupport.BrowserSupport.AddEventListener() && !tsConfig.is_mobile) {
        tab.Log.get(this).debug('Start scroll, using capture phase', []);
        var handleEvent = ss.mkdel(this, function(e) {
          this.sendEventToScroller(e);
        });
        var handleMouseOut = ss.mkdel(this, function(e1) {
          var toElement = ss.cast(e1.toElement, HTMLElement);
          if (ss.isNullOrUndefined(toElement) || toElement.nodeName === 'HTML') {
            tab.Log.get(this).debug('Exiting document, stop scrolling', []);
            if ('createEvent' in document) {
              var mouseEvent = document.createEvent('MouseEvent');
              mouseEvent.initEvent('mouseup', false, false);
              this.sendEventToScroller(mouseEvent);
            }
          }
        });
        document.addEventListener('mousemove', handleEvent, true);
        document.addEventListener('mouseup', handleEvent, true);
        document.addEventListener('mouseout', handleMouseOut, true);
        this.scrollEndCleanup.add$1(new tab.CallOnDispose(function() {
          document.removeEventListener('mousemove', handleEvent, true);
          document.removeEventListener('mouseup', handleEvent, true);
          document.removeEventListener('mouseout', handleMouseOut, true);
        }));
      }
      this.get_dom().scroll.addClass('tabScrolling');
    },
    sendEventToScroller: function IScrollView$SendEventToScroller(e) {
      this.scroller.handleEvent(e);
      for (var $t1 = 0; $t1 < this.scroller.indicators.length; $t1++) {
        var indicator = this.scroller.indicators[$t1];
        if (!ss.referenceEquals(e.type, 'mousemove'.toString()) || indicator.moved) {
          indicator.handleEvent(e);
        }
      }
    },
    $scrollEnd: function IScrollView$ScrollEnd() {
      tab.Log.get(this).debug('ScrollEnd', []);
      this.scrollEndCleanup.dispose();
      this.get_dom().scroll.removeClass('tabScrolling');
    },
    scrollTo: function IScrollView$ScrollTo(x, y, time, easing) {
      this.scroller.scrollTo(-x, -y, time, easing);
    },
    scrollToElement: function IScrollView$ScrollToElement(elem, time, xOffset, yOffset) {
      this.scroller.scrollToElement(elem, time, xOffset, yOffset);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ISelectable
  var $spiff_ISelectable = global.spiff.ISelectable = ss.mkType($asm, 'spiff.ISelectable');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ITabControlTemplate
  var $spiff_ITabControlTemplate = global.spiff.ITabControlTemplate = ss.mkType($asm, 'spiff.ITabControlTemplate');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ITextInputViewTemplate
  var $spiff_ITextInputViewTemplate = global.spiff.ITextInputViewTemplate = ss.mkType($asm, 'spiff.ITextInputViewTemplate');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.IUberPopupContent
  var $spiff_IUberPopupContent = global.spiff.IUberPopupContent = ss.mkType($asm, 'spiff.IUberPopupContent');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Testhooks.JQueryGestureExtensions
  var $spiff_JQueryGestureExtensions = global.spiff.JQueryGestureExtensions = ss.mkType($asm, 'spiff.JQueryGestureExtensions', null, null, {
    fireTableauGesture: function JQueryGestureExtensions$FireTableauGesture(targetElement, callbackName, evt, param) {
      if (ss.isNullOrUndefined(evt)) {
        var fakeEvent = new Object();
        fakeEvent.type = 'touchend';
        fakeEvent.timeStamp = tab.DateUtil.get_nowAsTime();
        fakeEvent.keyCode = null;
        fakeEvent.ctrlKey = false;
        fakeEvent.altKey = false;
        fakeEvent.metaKey = false;
        fakeEvent.shiftKey = false;
        fakeEvent.charOrCode = null;
        fakeEvent.clientX = 0;
        fakeEvent.clientY = 0;
        fakeEvent.touches = new Array();
        fakeEvent.targetTouches = new Array();
        fakeEvent.changedTouches = new Array();
        fakeEvent.target = targetElement;
        evt = fakeEvent;
      }
      var type;
      switch (callbackName) {
        case 'dragMove':
        case 'dragStart':
        case 'dragEnd': {
          type = 'drag';
          break;
        }
        case 'hover':
        case 'moving':
        case 'mouseleave': {
          type = 'hover';
          break;
        }
        case 'pinchStart':
        case 'pinchMove':
        case 'pinchEnd': {
          type = 'pinch';
          break;
        }
        default: {
          type = 'discrete';
          break;
        }
      }
      var normalizedEvent = EventUtils.NormalizedEvent.Create(evt, targetElement, null);
      EventUtils.Gesture.FromHtml(targetElement, type).Fire(callbackName, normalizedEvent, param || {});
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.LabelButton
  var $spiff_LabelButton = global.spiff.LabelButton = ss.mkType($asm, 'spiff.LabelButton', function(dom, labelSelector) {
    this.$labelSelector = $spiff_LabelButton.$labelSelectorDefault;
    $spiff_Button.call(this, dom);
    this.$labelSelector = labelSelector;
  }, {
    get_labelElement: function LabelButton$get_LabelElement() {
      return this.element.find(this.$labelSelector);
    },
    get_label: function LabelButton$get_Label() {
      return this.get_labelElement().text();
    },
    set_label: function LabelButton$set_Label(value) {
      this.get_labelElement().text(value);
      if (ss.isNullOrEmptyString(value)) {
        this.get_labelElement().addClass('hide');
      }
      else {
        this.get_labelElement().removeClass('hide');
      }
    },
    setLabelContents: function LabelButton$SetLabelContents(element) {
      if (ss.isValue(element)) {
        this.get_labelElement().html(element);
        this.get_labelElement().removeClass('hide');
      }
      else {
        this.get_labelElement().html('');
        this.get_labelElement().addClass('hide');
      }
    }
  }, {
    newAnchorButton: function LabelButton$NewAnchorButton() {
      return new $spiff_LabelButton($($spiff_LabelButton.$htmlTemplateLink), $spiff_LabelButton.$labelSelectorDefault);
    },
    newNativeButton: function LabelButton$NewNativeButton() {
      return new $spiff_LabelButton($($spiff_LabelButton.$htmlTemplateButton), $spiff_LabelButton.$labelSelectorDefault);
    },
    newMenuButton: function LabelButton$NewMenuButton() {
      return new $spiff_LabelButton($($spiff_LabelButton.$htmlTemplateMenuButton), $spiff_LabelButton.$labelSelectorDefault);
    },
    newTextButton: function LabelButton$NewTextButton(clickHandler, label) {
      var button = new $spiff_LabelButton($($spiff_LabelButton.$htmlTextButton), $spiff_LabelButton.$labelSelectorDefault);
      if (ss.isValue(clickHandler)) {
        button.add_click(clickHandler);
        button.disposables.add$1(new tab.CallOnDispose(function() {
          button.remove_click(clickHandler);
        }));
      }
      if (ss.isValue(label)) {
        button.set_label(label);
      }
      return button;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.LabelToggleButton
  var $spiff_LabelToggleButton = global.spiff.LabelToggleButton = ss.mkType($asm, 'spiff.LabelToggleButton', function(dom, labelSelector) {
    this.$labelSelector = $spiff_LabelToggleButton.$labelSelectorDefault;
    $spiff_ToggleButton.call(this, dom, null);
    this.$labelSelector = labelSelector;
  }, {
    get_labelElement: function LabelToggleButton$get_LabelElement() {
      return this.element.find(this.$labelSelector);
    },
    get_inputElement: function LabelToggleButton$get_InputElement() {
      return this.element.find('input');
    },
    get_label: function LabelToggleButton$get_Label() {
      return this.get_labelElement().text();
    },
    set_label: function LabelToggleButton$set_Label(value) {
      this.get_labelElement().text(value);
      if (ss.isNullOrEmptyString(value)) {
        this.get_labelElement().addClass($spiff_LabelToggleButton.$hideClass);
      }
      else {
        this.get_labelElement().removeClass($spiff_LabelToggleButton.$hideClass);
      }
    },
    get_selected: function LabelToggleButton$get_Selected() {
      return $spiff_ToggleButton.prototype.get_selected.call(this);
    },
    set_selected: function LabelToggleButton$set_Selected(value) {
      if (this.get_selected() === value) {
        return;
      }
      var input = this.get_inputElement();
      if (ss.isValue(input)) {
        input.prop('checked', (value ? 'checked' : ''));
      }
      $spiff_ToggleButton.prototype.set_selected.call(this, value);
    },
    get_disabled: function LabelToggleButton$get_Disabled() {
      return $spiff_Button.prototype.get_disabled.call(this);
    },
    set_disabled: function LabelToggleButton$set_Disabled(value) {
      var input = this.get_inputElement();
      if (ss.isValue(input)) {
        input.prop('disabled', value);
      }
      $spiff_Button.prototype.set_disabled.call(this, value);
    }
  }, {
    newCheckbox: function LabelToggleButton$NewCheckbox(label, isSelected) {
      var btn = $spiff_LabelToggleButton.$createToggleButton($spiff_LabelToggleButton.$htmlToggleButton, label, isSelected);
      btn.element.addClass($spiff_LabelToggleButton.$unificationCheckboxClass).find('.icon').append($($spiff_LabelToggleButton.$htmlInnerIcon).addClass($spiff_LabelToggleButton.$unificationCheckboxImageClass));
      return btn;
    },
    newRadioButton: function LabelToggleButton$NewRadioButton(label, isSelected) {
      var btn = $spiff_LabelToggleButton.$createToggleButton($spiff_LabelToggleButton.$htmlToggleButton, label, isSelected);
      btn.element.addClass($spiff_LabelToggleButton.$unificationRadioButtonClass).find('.icon').append($($spiff_LabelToggleButton.$htmlInnerIcon));
      return btn;
    },
    $createToggleButton: function LabelToggleButton$CreateToggleButton(html, label, isSelected) {
      var $t1 = new $spiff_LabelToggleButton($(html), $spiff_LabelToggleButton.$labelSelectorDefault);
      $t1.set_label(label);
      $t1.set_selected(isSelected);
      var btn = $t1;
      var input = btn.get_inputElement();
      if (ss.isValue(input)) {
        input.click(function(e) {
          e.preventDefault();
        });
      }
      return btn;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.LineEditWithButtonComponent
  var $spiff_LineEditWithButtonComponent = global.spiff.LineEditWithButtonComponent = ss.mkType($asm, 'spiff.LineEditWithButtonComponent', function(props) {
    this.$eventHandleSpec = null;
    React.Component.call(this, props, null);
    this.state = this.$buildState();
    var $t1 = new EventUtils.EventHandleSpec();
    $t1.firstTouch = ss.mkdel(this, function(event) {
      this.handleEnterPress();
    });
    this.$eventHandleSpec = $t1;
  }, {
    handleBlur: function LineEditWithButtonComponent$HandleBlur(e) {
      if (this.props.blurBehavior === 0) {
        this.$resetText();
      }
      else if (this.props.blurBehavior === 1) {
        this.handleEnterPress();
      }
    },
    componentWillReceiveProps: function LineEditWithButtonComponent$ComponentWillReceiveProps(nextProps) {
      if (!ss.referenceEquals(this.props.initialValue, nextProps.initialValue)) {
        this.setState({ displayedText: nextProps.initialValue });
      }
    },
    $resetText: function LineEditWithButtonComponent$ResetText() {
      this.setState({ displayedText: this.props.initialValue });
    },
    $buildState: function LineEditWithButtonComponent$BuildState() {
      return { displayedText: (tab.MiscUtil.isNullOrEmpty$1(this.props.initialValue) ? '' : this.props.initialValue) };
    },
    handleInput: function LineEditWithButtonComponent$HandleInput(value) {
      if (this.props.inputFilter === 0) {
        value = ss.replaceAllString(value, ',', '');
        value = ss.replaceAllString(value, '.', '');
        value = ss.replaceAllString(value, '-', '');
        var result = {};
        if (ss.isNullOrEmptyString(value) || ss.Int32.tryParse(value, result)) {
          this.setState({ displayedText: value });
        }
      }
      else {
        this.setState({ displayedText: value });
      }
    },
    $handleKeyPress: function LineEditWithButtonComponent$HandleKeyPress(e) {
      if (e.keyCode === 27) {
        e.preventDefault();
        e.stopPropagation();
        this.$resetText();
      }
    },
    handleEnterPress: function LineEditWithButtonComponent$HandleEnterPress() {
      var valueToCommit = this.$getValueToCommit();
      if (!ss.staticEquals(this.props.onCommit, null)) {
        this.props.onCommit(valueToCommit);
      }
      if (this.props.blurBehavior === 0) {
        this.$resetText();
      }
      else if (!ss.referenceEquals(this.state.displayedText, valueToCommit)) {
        this.setState({ displayedText: valueToCommit });
      }
    },
    $getValueToCommit: function LineEditWithButtonComponent$GetValueToCommit() {
      var result = {};
      if (ss.Int32.tryParse(this.state.displayedText, result)) {
        return ((ss.isValue(this.props.maxValue) && ss.Nullable$1.gt(result.$, this.props.maxValue)) ? this.props.maxValue.toString() : this.state.displayedText);
      }
      else {
        return this.state.displayedText;
      }
    },
    render: function LineEditWithButtonComponent$Render() {
      var $t2 = this.$eventHandleSpec;
      var $t1 = new Object();
      $t1.iconClassName = 'confirmArrowIcon';
      $t1.customClassName = 'confirmButton';
      var confirmButton = EventUtils.EventForwarder.div($t2, { className: 'confirmButtonDiv' }, React.createElement($spiff_IconButtonComponent, $t1));
      var $t4 = this.state.displayedText;
      var $t5 = ss.mkdel(this, this.handleInput);
      var $t6 = ss.mkdel(this, this.handleEnterPress);
      var $t3 = this.props.maxLength;
      if (ss.isNullOrUndefined($t3)) {
        $t3 = $spiff_LineEditWithButtonComponent.$defaultMaxLength;
      }
      var inputTextBox = React.createElement(SharedWidgets.OutlineTextFieldWidget, { text: $t4, testId: 'lineEdit', handleChange: $t5, handleEnter: $t6, maxLength: $t3 });
      return $spiff_DOMElements.div({ className: 'lineEditWithButtonComponent', onKeyDown: ss.mkdel(this, this.$handleKeyPress), onBlur: ss.mkdel(this, this.handleBlur), style: { width: ss.coalesce(this.props.textBoxWidth, 'auto') } }, inputTextBox, confirmButton);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListComponent<TListProps, TListItemData>
  var $spiff_ListComponent$2 = global.spiff.ListComponent$2 = ss.mkType($asm, 'spiff.ListComponent$2', function(TListProps, TListItemData) {
    var $type = ss.registerGenericClassInstance($spiff_ListComponent$2, [TListProps, TListItemData], function(props, context) {
      React.Component.call(this, props, context);
    }, {
      render: function ListComponent$Render() {
        var items = _.map(this.props.items, ss.mkdel(this, function(item) {
          var spec = this.getEventHandleSpecForItem(item);
          var itemProps = { className: 'tabListItem', key: this.getItemKey(item.data), role: 'option' };
          if (this.isSelected(item.data)) {
            itemProps['aria-selected'] = true;
          }
          if (ss.isNullOrUndefined(spec)) {
            return $spiff_DOMElements.div(itemProps, this.buildItem(item.data));
          }
          else {
            return EventUtils.EventForwarder.div(spec, itemProps, this.buildItem(item.data));
          }
        }));
        return $spiff_DOMElements.div({ className: 'tabList', role: 'listbox' }, items);
      },
      getItemKey: null,
      buildItem: null,
      isSelected: null,
      getEventHandleSpecForItem: function ListComponent$GetEventHandleSpecForItem(itemProps) {
        return null;
      }
    }, null, function() {
      return React.Component;
    });
    return $type;
  });
  ss.initGenericClass($spiff_ListComponent$2, 2);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListItemDragSource
  var $spiff_ListItemDragSource = global.spiff.ListItemDragSource = ss.mkType($asm, 'spiff.ListItemDragSource', function(parentListView, listItemView) {
    this.$1$ParentListViewField = null;
    this.$1$DraggableListItemViewField = null;
    this.set_parentListView(parentListView);
    this.set_draggableListItemView(listItemView);
  }, {
    get_parentListView: function ListItemDragSource$get_ParentListView() {
      return this.$1$ParentListViewField;
    },
    set_parentListView: function ListItemDragSource$set_ParentListView(value) {
      this.$1$ParentListViewField = value;
    },
    get_draggableListItemView: function ListItemDragSource$get_DraggableListItemView() {
      return this.$1$DraggableListItemViewField;
    },
    set_draggableListItemView: function ListItemDragSource$set_DraggableListItemView(value) {
      this.$1$DraggableListItemViewField = value;
    },
    startDrag: function ListItemDragSource$StartDrag(e) {
      if (ss.isNullOrUndefined(this.get_parentListView()) || ss.isNullOrUndefined(this.get_draggableListItemView()) || ss.isNullOrUndefined(this.get_parentListView().get_dragFeedback())) {
        return null;
      }
      return this.get_parentListView().get_dragFeedback().startDrag(this.get_parentListView(), this.get_draggableListItemView());
    },
    acceptsDragType: function ListItemDragSource$AcceptsDragType() {
      return 1;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListItemGroup
  var $spiff_ListItemGroup = global.spiff.ListItemGroup = ss.mkType($asm, 'spiff.ListItemGroup', function(selectionType) {
    this.$anchorIndex = null;
    this.$rangeAnchorIndex = null;
    $spiff_SelectableGroup.call(this);
    this.set_selectionType(selectionType);
  }, {
    $setAnchor$1: function ListItemGroup$SetAnchor(item) {
      this.$setAnchor(ss.indexOf(this.get_items(), item));
    },
    $setAnchor: function ListItemGroup$SetAnchor(index) {
      if (index < 0 || index >= this.get_items().length) {
        return;
      }
      this.$anchorIndex = index;
      this.$rangeAnchorIndex = null;
    },
    $clearAnchor: function ListItemGroup$ClearAnchor() {
      this.$anchorIndex = null;
      this.$rangeAnchorIndex = null;
    },
    addItem: function ListItemGroup$AddItem(item) {
      $spiff_SelectableGroup.prototype.addItem.call(this, item);
      if (item.get_selected() && ss.isNullOrUndefined(this.$anchorIndex) && this.get_selectionType() === 0) {
        this.$setAnchor$1(item);
      }
    },
    onItemDisposed: function ListItemGroup$OnItemDisposed(sender, args) {
      this.$clearAnchor();
      $spiff_SelectableGroup.prototype.onItemDisposed.call(this, sender, args);
    },
    dispose: function ListItemGroup$Dispose() {
      this.$clearAnchor();
      $spiff_SelectableGroup.prototype.dispose.call(this);
    },
    selectItem: function ListItemGroup$SelectItem(item) {
      this.selectItemAtIndex(ss.indexOf(this.get_items(), item));
    },
    selectSingleItem: function ListItemGroup$SelectSingleItem(item) {
      var index = ss.indexOf(this.get_items(), item);
      if (index < 0) {
        return;
      }
      $spiff_SelectableGroup.prototype.selectSingleItem.call(this, item);
      this.$setAnchor(index);
    },
    selectItemAtIndex: function ListItemGroup$SelectItemAtIndex(index) {
      ss.Debug.assert(index >= 0 && index < this.get_items().length, 'invalid index');
      $spiff_SelectableGroup.prototype.selectItem.call(this, this.get_items()[index]);
      this.$setAnchor(index);
    },
    selectItems: function ListItemGroup$SelectItems(itemsToSelect, unselectOthers) {
      this.$selectItemsInternal(itemsToSelect, unselectOthers);
      this.$rangeAnchorIndex = null;
    },
    $selectItemsInternal: function ListItemGroup$SelectItemsInternal(itemsToSelect, unselectOthers) {
      $spiff_SelectableGroup.prototype.selectItems.call(this, itemsToSelect, unselectOthers);
    },
    clearSelection: function ListItemGroup$ClearSelection(itemToRemainSelected) {
      $spiff_SelectableGroup.prototype.clearSelection.call(this, itemToRemainSelected);
      this.$clearAnchor();
    },
    selectItemForKey: function ListItemGroup$SelectItemForKey(key, shiftKey) {
      if (this.get_selectionType() === 2) {
        return null;
      }
      if (!ss.isValue(this.$anchorIndex)) {
        return null;
      }
      var keyUpArrow = key === 38;
      var keyDownArrow = key === 40;
      if (keyUpArrow || keyDownArrow) {
        if (!this.get_items()[ss.unbox(this.$anchorIndex)].get_selected()) {
          this.selectItem(this.get_items()[ss.unbox(this.$anchorIndex)]);
        }
        var newAnchor = ss.unbox(this.$anchorIndex) + (keyUpArrow ? -1 : 1);
        if (newAnchor < 0 || newAnchor >= this.get_items().length) {
          return null;
        }
        if (this.get_selectionType() === 1 && shiftKey) {
          var newRangeAnchorIndex = this.$rangeAnchorIndex;
          if (ss.isValue(this.$rangeAnchorIndex)) {
            var min = Math.min(ss.unbox(this.$rangeAnchorIndex), ss.unbox(this.$anchorIndex));
            var max = Math.max(ss.unbox(this.$rangeAnchorIndex), ss.unbox(this.$anchorIndex));
            if (newAnchor >= min && newAnchor <= max) {
              this.unselectItem(this.get_items()[ss.unbox(this.$anchorIndex)]);
            }
          }
          else {
            newRangeAnchorIndex = this.$anchorIndex;
          }
          this.selectItem(this.get_items()[newAnchor]);
          this.$rangeAnchorIndex = newRangeAnchorIndex;
        }
        else {
          this.selectSingleItem(this.get_items()[newAnchor]);
          this.$rangeAnchorIndex = null;
        }
        this.$anchorIndex = newAnchor;
        return this.get_items()[newAnchor];
      }
      return null;
    },
    handleSelectionChanging: function ListItemGroup$HandleSelectionChanging(sender, selectArgs) {
      var item = ss.cast(sender, $spiff_ISelectable);
      var newAnchor = ss.indexOf(this.get_items(), item);
      if (newAnchor < 0) {
        return;
      }
      if (this.get_selectionType() === 0) {
        $spiff_SelectableGroup.prototype.handleSelectionChanging.call(this, sender, selectArgs);
        return;
      }
      var prevAnchor = this.$anchorIndex;
      var prevRangeAnchor = this.$rangeAnchorIndex;
      this.$setAnchor(newAnchor);
      if (this.get_selectionType() === 2 || selectArgs.get_ctrlKey()) {
        if (selectArgs.get_selecting()) {
          this.selectItem(item);
        }
        else {
          this.unselectItem(item);
        }
        return;
      }
      if (selectArgs.get_shiftKey() && (ss.isValue(prevAnchor) || ss.isValue(prevRangeAnchor))) {
        this.$rangeAnchorIndex = ss.coalesce(prevRangeAnchor, prevAnchor);
        var min = Math.min(ss.unbox(this.$rangeAnchorIndex), ss.unbox(this.$anchorIndex));
        var max = Math.max(ss.unbox(this.$rangeAnchorIndex), ss.unbox(this.$anchorIndex));
        var items = [];
        for (var i = min; i <= max; i++) {
          items.push(this.get_items()[i]);
        }
        this.$selectItemsInternal(items, true);
        selectArgs.cancel = true;
        return;
      }
      this.selectSingleItem(item);
      if (ss.referenceEquals(this.get_selectedItem(), item)) {
        selectArgs.cancel = true;
      }
    },
    handleSelectionChanged: function ListItemGroup$HandleSelectionChanged(sender, args) {
      $spiff_SelectableGroup.prototype.handleSelectionChanged.call(this, sender, args);
      this.$setAnchor$1(ss.cast(sender, $spiff_ISelectable));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListItemView
  var $spiff_ListItemView = global.spiff.ListItemView = ss.mkType($asm, 'spiff.ListItemView', function(contentElement, viewModel) {
    this.$viewModel = null;
    this.$contentElement = null;
    $spiff_ToggleButton.call(this, $spiff_ListItemView.$wrapContentElement(contentElement), null);
    tab.Param.verifyValue(viewModel, 'viewModel');
    tab.Param.verifyValue(viewModel.get_id(), 'viewModel.Id');
    this.$viewModel = viewModel;
    this.$viewModel.add_propertyChanged(ss.mkdel(this, this.$onViewModelChange));
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.$viewModel.remove_propertyChanged(ss.mkdel(this, this.$onViewModelChange));
    })));
    this.set_selectionId(viewModel.get_id());
    this.set_widgetId(viewModel.get_id());
    this.$contentElement = contentElement;
  }, {
    get_viewModel: function ListItemView$get_ViewModel() {
      return this.$viewModel;
    },
    get_selected: function ListItemView$get_Selected() {
      return (this.addedToDom ? $spiff_ToggleButton.prototype.get_selected.call(this) : this.$viewModel.get_selected());
    },
    set_selected: function ListItemView$set_Selected(value) {
      $spiff_ToggleButton.prototype.set_selected.call(this, value);
      this.get_viewModel().set_selected(value);
    },
    get_isInvalid: function ListItemView$get_IsInvalid() {
      return this.$viewModel.get_isInvalid();
    },
    set_isInvalid: function ListItemView$set_IsInvalid(value) {
      this.$contentElement.toggleClass($spiff_ListItemView.invalidClass, value);
      this.get_viewModel().set_isInvalid(value);
    },
    get_isBold: function ListItemView$get_IsBold() {
      return this.$viewModel.get_isBold();
    },
    set_isBold: function ListItemView$set_IsBold(value) {
      this.$contentElement.toggleClass($spiff_ListItemView.boldClass, value);
      this.get_viewModel().set_isBold(value);
    },
    get_disabled: function ListItemView$get_Disabled() {
      return $spiff_Button.prototype.get_disabled.call(this);
    },
    set_disabled: function ListItemView$set_Disabled(value) {
      this.$contentElement.toggleClass(this.get_disabledClass(), value);
      $spiff_Button.prototype.set_disabled.call(this, value);
    },
    init: function ListItemView$Init() {
      this.set_selected(this.$viewModel.get_selected());
    },
    $onViewModelChange: function ListItemView$OnViewModelChange(sender, e) {
      switch (e.get_propertyName()) {
        case 'selected': {
          this.set_selected(this.get_viewModel().get_selected());
          break;
        }
        case 'invalid': {
          this.set_isInvalid(this.get_viewModel().get_isInvalid());
          break;
        }
        case 'bold': {
          this.set_isBold(this.get_viewModel().get_isBold());
          break;
        }
        case 'spotlighted': {
          this.element.toggleClass($spiff_ListItemView.listItemSpotlightedClassName, this.get_viewModel().get_spotlighted());
          break;
        }
      }
    }
  }, {
    $wrapContentElement: function ListItemView$WrapContentElement(contentElement) {
      var wrapperElement = $('<div></div>').addClass('tab-list-item');
      wrapperElement.append(contentElement);
      return wrapperElement;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListItemViewModel
  var $spiff_ListItemViewModel = global.spiff.ListItemViewModel = ss.mkType($asm, 'spiff.ListItemViewModel', function(itemId, itemData, isSelected, isInvalid, isBold) {
    this.$id = null;
    this.$data = null;
    this.$selected = false;
    this.$isInvalid = false;
    this.$draggable = false;
    this.$spotlighted = false;
    this.$isBold = false;
    $spiff_BaseViewModel.call(this);
    this.$id = itemId;
    if (ss.isValue(itemData)) {
      this.$data = itemData;
    }
    this.$selected = isSelected;
    this.$isInvalid = isInvalid;
    this.$isBold = isBold;
  }, {
    get_id: function ListItemViewModel$get_Id() {
      return this.$id;
    },
    get_data: function ListItemViewModel$get_Data() {
      return this.$data;
    },
    get_selected: function ListItemViewModel$get_Selected() {
      return this.$selected;
    },
    set_selected: function ListItemViewModel$set_Selected(value) {
      if (this.$selected === value) {
        return;
      }
      this.$selected = value;
      this.notifyPropertyChanged($spiff_ListItemViewModel.selectedProperty);
    },
    get_isInvalid: function ListItemViewModel$get_IsInvalid() {
      return this.$isInvalid;
    },
    set_isInvalid: function ListItemViewModel$set_IsInvalid(value) {
      if (this.$isInvalid === value) {
        return;
      }
      this.$isInvalid = value;
      this.notifyPropertyChanged($spiff_ListItemViewModel.invalidProperty);
    },
    get_isBold: function ListItemViewModel$get_IsBold() {
      return this.$isBold;
    },
    set_isBold: function ListItemViewModel$set_IsBold(value) {
      if (this.$isBold === value) {
        return;
      }
      this.$isBold = value;
      this.notifyPropertyChanged($spiff_ListItemViewModel.boldProperty);
    },
    get_draggable: function ListItemViewModel$get_Draggable() {
      return this.$draggable;
    },
    set_draggable: function ListItemViewModel$set_Draggable(value) {
      if (this.$draggable === value) {
        return;
      }
      this.$draggable = value;
      this.notifyPropertyChanged($spiff_ListItemViewModel.draggableProperty);
    },
    get_spotlighted: function ListItemViewModel$get_Spotlighted() {
      return this.$spotlighted;
    },
    set_spotlighted: function ListItemViewModel$set_Spotlighted(value) {
      if (this.$spotlighted === value) {
        return;
      }
      this.$spotlighted = value;
      this.notifyPropertyChanged($spiff_ListItemViewModel.spotlightedProperty);
    }
  }, {
    newListItem: function ListItemViewModel$NewListItem(id, data, selected, isInvalid, isBold) {
      tab.Param.verifyString(id, 'id');
      return new $spiff_ListItemViewModel(id, data, selected, isInvalid, isBold);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListItemViewModelCollectionBuilder
  var $spiff_ListItemViewModelCollectionBuilder = global.spiff.ListItemViewModelCollectionBuilder = ss.mkType($asm, 'spiff.ListItemViewModelCollectionBuilder', function() {
    this.itemDatas = null;
    this.selectionIndexes = null;
    this.invalidIndexes = null;
    this.itemIds = null;
  }, {
    create: function ListItemViewModelCollectionBuilder$Create() {
      this.$validateInput();
      var listItemVMs = [];
      for (var listIndex = 0, valuesCount = this.itemDatas.length; listIndex < valuesCount; listIndex++) {
        var itemId = this.itemIds[listIndex];
        var isSelected = (ss.isValue(this.selectionIndexes) ? ss.contains(this.selectionIndexes, listIndex) : false);
        var isInvalid = (ss.isValue(this.invalidIndexes) ? ss.contains(this.invalidIndexes, listIndex) : false);
        var itemData = this.itemDatas[listIndex];
        var $t1 = new $spiff_ListItemViewModel(itemId, itemData, isSelected, isInvalid, false);
        $t1.set_draggable(valuesCount > 1);
        var itemViewModel = $t1;
        listItemVMs.push(itemViewModel);
      }
      return listItemVMs;
    },
    $validateInput: function ListItemViewModelCollectionBuilder$ValidateInput() {
      tab.Param.verifyValue(this.itemDatas, 'ItemDatas');
      tab.Param.verifyValue(this.itemIds, 'ItemIds');
      ss.Debug.assert(this.itemDatas.length === this.itemIds.length, 'itemDatas and itemIds not allowed to have different number of items');
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListView
  var $spiff_ListView = global.spiff.ListView = ss.mkType($asm, 'spiff.ListView', function(viewModel, itemCreator) {
    this.$itemViews = [];
    this.$itemCreator = null;
    this.$3$DragFeedbackField = null;
    this.$scrollHandler = null;
    this.$3$ListItemsUpdatedField = null;
    ss.makeGenericType($spiff_BaseView$1, [$spiff_ListViewModel]).call(this, viewModel, new $spiff_ListViewTemplate());
    this.get_viewModel().add_selectionModelUpdated(ss.mkdel(this, this.$handleSelectionModelUpdated));
    this.get_viewModel().add_spotlightedItemChanged(ss.mkdel(this, this.$handleSpotlightedItemChanged));
    this.get_viewModel().add_itemMoved(ss.mkdel(this, this.$moveListItem));
    this.disposables.add(ss.mkdel(this, function() {
      this.get_viewModel().remove_selectionModelUpdated(ss.mkdel(this, this.$handleSelectionModelUpdated));
      this.get_viewModel().remove_spotlightedItemChanged(ss.mkdel(this, this.$handleSpotlightedItemChanged));
      this.get_viewModel().remove_itemMoved(ss.mkdel(this, this.$moveListItem));
    }));
    this.set_scrollHandler(new $spiff_$DefaultListViewScrollHandler(this.element));
    this.get_dom().get_listItemContainer().keypress(ss.mkdel(this, this.$handleKeyPress)).keydown(ss.mkdel(this, this.$handleKeyPress));
    this.$itemCreator = itemCreator;
    this.$buildListItems();
  }, {
    get_dragFeedback: function ListView$get_DragFeedback() {
      return this.$3$DragFeedbackField;
    },
    set_dragFeedback: function ListView$set_DragFeedback(value) {
      this.$3$DragFeedbackField = value;
    },
    add_listItemsUpdated: function ListView$add_ListItemsUpdated(value) {
      this.$3$ListItemsUpdatedField = ss.delegateCombine(this.$3$ListItemsUpdatedField, value);
    },
    remove_listItemsUpdated: function ListView$remove_ListItemsUpdated(value) {
      this.$3$ListItemsUpdatedField = ss.delegateRemove(this.$3$ListItemsUpdatedField, value);
    },
    get_dom: function ListView$get_Dom() {
      return ss.cast(this.get_template(), $spiff_ListViewTemplate);
    },
    get_domRoot: function ListView$get_DomRoot() {
      return this.get_dom().domRoot;
    },
    get_itemViews: function ListView$get_ItemViews() {
      return this.$itemViews;
    },
    get_$firstItemOffsetTop: function ListView$get_FirstItemOffsetTop() {
      return ((this.$itemViews.length > 0) ? this.$itemViews[0].element[0].offsetTop : 0);
    },
    get_scrollerPosition: function ListView$get_ScrollerPosition() {
      return this.get_scrollHandler().get_scrollViewPagePosition();
    },
    get_scrollerSize: function ListView$get_ScrollerSize() {
      return this.get_scrollHandler().get_scrollViewSize();
    },
    get_scrollHandler: function ListView$get_ScrollHandler() {
      return this.$scrollHandler;
    },
    set_scrollHandler: function ListView$set_ScrollHandler(value) {
      this.$scrollHandler = value || new $spiff_$DefaultListViewScrollHandler(this.element);
    },
    useScrollableView: function ListView$UseScrollableView(sv) {
      this.set_scrollHandler(new $spiff_$ScrollableViewListViewScrollHandler(sv));
    },
    $buildListItems: function ListView$BuildListItems() {
      var startTime = new Date();
      for (var i = 0; i < this.get_viewModel().get_collection().length; i++) {
        var itemViewModel = { $: this.get_viewModel().get_collection()[i] };
        if (ss.isValue(itemViewModel.$)) {
          var contentElement = this.$itemCreator.createListItemContent(itemViewModel.$);
          var itemView = new $spiff_ListItemView(contentElement, itemViewModel.$);
          itemView.init();
          itemView.onDoubleClick(ss.mkdel(this, this.$handleDoubleClickItem));
          itemView.set_disabled(!this.get_viewModel().get_enabled());
          itemView.set_isInvalid(itemViewModel.$.get_isInvalid());
          itemView.set_isBold(itemViewModel.$.get_isBold());
          itemView.onMouseEnter(ss.mkdel({ itemViewModel: itemViewModel, $this: this }, function(button) {
            this.$this.$handleListItemMouseEnter(this.itemViewModel.$);
          }));
          itemView.onMouseMove(ss.mkdel({ itemViewModel: itemViewModel, $this: this }, function(button1) {
            this.$this.$handleListItemMouseMove(this.itemViewModel.$);
          }));
          this.$updateItemDraggableState(itemView);
          this.$itemViews.push(itemView);
          this.get_viewModel().addItemToGroup(itemView);
          itemView.addToDom(this.get_dom().get_listItemContainer());
          itemViewModel.$.add_propertyChanged(ss.mkdel(this, this.$onItemViewModelPropertyChanged));
        }
      }
      var endTime = new Date();
      tab.Log.get(this).debug('Time to render list: ' + (endTime - startTime) + 'ms', []);
      this.$raiseEvent(this.$3$ListItemsUpdatedField);
    },
    $handleSelectionModelUpdated: function ListView$HandleSelectionModelUpdated(topMostIndex) {
      if (!ss.isValue(topMostIndex)) {
        return;
      }
      this.$showItem(this.$itemViews[ss.unbox(topMostIndex)]);
    },
    $handleSpotlightedItemChanged: function ListView$HandleSpotlightedItemChanged(spotlightedItemIndex) {
      if (ss.isValue(spotlightedItemIndex)) {
        this.$showItem(this.$itemViews[ss.unbox(spotlightedItemIndex)]);
      }
    },
    $handleDoubleClickItem: function ListView$HandleDoubleClickItem(itemView) {
      this.get_viewModel().selectionSubmitted();
    },
    $handleListItemMouseEnter: function ListView$HandleListItemMouseEnter(item) {
      this.get_viewModel().handleListItemMouseEnter(item);
    },
    $handleListItemMouseMove: function ListView$HandleListItemMouseMove(item) {
      this.get_viewModel().handleListItemMouseMove(item);
    },
    $handleKeyPress: function ListView$HandleKeyPress(e) {
      var item = ss.cast(this.get_viewModel().get_listItemGroup().selectItemForKey(e.which, e.shiftKey), $spiff_ListItemView);
      if (ss.isValue(item)) {
        $spiff_EventUtil.stopEvent$2(e);
        this.$showItem(item);
      }
    },
    onViewModelPropertyChanged: function ListView$OnViewModelPropertyChanged(sender, e) {
      if (ss.referenceEquals(e.get_propertyName(), $spiff_ListViewModel.collectionProperty)) {
        this.$disposeItemButtons();
        this.get_dom().get_listItemContainer().empty();
        this.$buildListItems();
      }
      else if (ss.referenceEquals(e.get_propertyName(), $spiff_ListViewModel.enabledProperty)) {
        this.$itemViews.forEach(ss.mkdel(this, function(item) {
          item.set_disabled(!this.get_viewModel().get_enabled());
          this.$updateItemDraggableState(item);
        }));
      }
      ss.makeGenericType($spiff_BaseView$1, [$spiff_ListViewModel]).prototype.onViewModelPropertyChanged.call(this, sender, e);
    },
    $onItemViewModelPropertyChanged: function ListView$OnItemViewModelPropertyChanged(sender, e) {
      if (ss.referenceEquals(e.get_propertyName(), $spiff_ListItemViewModel.draggableProperty)) {
        var itemView = this.$findItemViewForItemViewModel(ss.cast(sender, $spiff_ListItemViewModel));
        this.$updateItemDraggableState(itemView);
      }
    },
    $updateItemDraggableState: function ListView$UpdateItemDraggableState(itemView) {
      if (itemView.get_viewModel().get_draggable() && !itemView.get_disabled()) {
        itemView.element.addClass('tabDraggable');
        EventUtils.DragDropManager.attachDragSource(itemView.element, new $spiff_ListItemDragSource(this, itemView));
      }
      else {
        itemView.element.removeClass('tabDraggable');
        EventUtils.DragDropManager.removeDragSource(itemView.element);
      }
    },
    tabIndex: function ListView$TabIndex(index) {
      this.get_dom().get_listItemContainer().attr('tabindex', index.toString());
      return this;
    },
    showItemAtIndex: function ListView$ShowItemAtIndex(index) {
      ss.Debug.assert(index >= 0 && index < this.get_itemViews().length, 'invalid item index');
      this.$showItem(this.get_itemViews()[index]);
    },
    $showItem: function ListView$ShowItem(itemView) {
      if (ss.isNullOrUndefined(itemView)) {
        return;
      }
      var item = itemView.element[0];
      this.$scrollHandler.scrollToElement(item, this.get_$firstItemOffsetTop());
    },
    $moveListItem: function ListView$MoveListItem(itemIndex, moveToIndex) {
      if (itemIndex === moveToIndex || itemIndex < 0 || itemIndex >= this.get_itemViews().length || moveToIndex < 0 || moveToIndex >= this.get_itemViews().length) {
        return;
      }
      var itemView = this.get_itemViews()[itemIndex];
      itemView.element.hide();
      if (moveToIndex < itemIndex) {
        itemView.element.insertBefore(this.get_itemViews()[moveToIndex].element);
      }
      else {
        itemView.element.insertAfter(this.get_itemViews()[moveToIndex].element);
      }
      itemView.element.fadeIn();
      ss.removeAt(this.get_itemViews(), itemIndex);
      ss.insert(this.get_itemViews(), moveToIndex, itemView);
    },
    dispose: function ListView$Dispose() {
      this.get_viewModel().remove_selectionModelUpdated(ss.mkdel(this, this.$handleSelectionModelUpdated));
      this.get_viewModel().remove_itemMoved(ss.mkdel(this, this.$moveListItem));
      this.$disposeItemButtons();
      ss.makeGenericType($spiff_BaseView$1, [$spiff_ListViewModel]).prototype.dispose.call(this);
    },
    $disposeItemButtons: function ListView$DisposeItemButtons() {
      this.$itemViews.forEach(ss.mkdel(this, function(itemView) {
        itemView.get_viewModel().remove_propertyChanged(ss.mkdel(this, this.$onItemViewModelPropertyChanged));
        itemView.dispose();
      }));
      ss.clear(this.$itemViews);
    },
    $raiseEvent: function ListView$RaiseEvent(callback) {
      if (ss.isValue(callback)) {
        callback();
      }
    },
    $findItemViewForItemViewModel: function ListView$FindItemViewForItemViewModel(itemViewModel) {
      for (var i = 0, len = this.$itemViews.length; i < len; i++) {
        if (ss.referenceEquals(this.$itemViews[i].get_selectionId(), itemViewModel.get_id())) {
          return this.$itemViews[i];
        }
      }
      return null;
    }
  }, {
    createListView: function ListView$CreateListView(viewModel, creator) {
      return new $spiff_ListView(viewModel, creator);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListViewDragSortFeedback
  var $spiff_ListViewDragSortFeedback = global.spiff.ListViewDragSortFeedback = ss.mkType($asm, 'spiff.ListViewDragSortFeedback', function() {
    this.$dragClassName = 'dragging';
    this.$dragHoverClassName = 'dragHover';
    this.$draggedElem = null;
    this.$draggedItemViewModel = null;
    this.$startIndex = 0;
    this.$moveToIndex = 0;
    this.$insertionPointerElem = null;
    this.$insertionPointerYOffset = 0;
    this.$listView = null;
    this.$numListItems = 0;
    this.$listTopPageY = 0;
    this.$listBottomPageY = 0;
    this.$dragTimer = null;
    this.$1$DragStartingField = null;
    this.$1$DragEndedField = null;
    this.$1$AvatarCreatorField = null;
  }, {
    add_dragStarting: function ListViewDragSortFeedback$add_DragStarting(value) {
      this.$1$DragStartingField = ss.delegateCombine(this.$1$DragStartingField, value);
    },
    remove_dragStarting: function ListViewDragSortFeedback$remove_DragStarting(value) {
      this.$1$DragStartingField = ss.delegateRemove(this.$1$DragStartingField, value);
    },
    add_dragEnded: function ListViewDragSortFeedback$add_DragEnded(value) {
      this.$1$DragEndedField = ss.delegateCombine(this.$1$DragEndedField, value);
    },
    remove_dragEnded: function ListViewDragSortFeedback$remove_DragEnded(value) {
      this.$1$DragEndedField = ss.delegateRemove(this.$1$DragEndedField, value);
    },
    get_dragClassName: function ListViewDragSortFeedback$get_DragClassName() {
      return this.$dragClassName;
    },
    set_dragClassName: function ListViewDragSortFeedback$set_DragClassName(value) {
      this.$dragClassName = value;
    },
    get_dragHoverClassName: function ListViewDragSortFeedback$get_DragHoverClassName() {
      return this.$dragHoverClassName;
    },
    set_dragHoverClassName: function ListViewDragSortFeedback$set_DragHoverClassName(value) {
      this.$dragHoverClassName = value;
    },
    get_avatarCreator: function ListViewDragSortFeedback$get_AvatarCreator() {
      return this.$1$AvatarCreatorField;
    },
    set_avatarCreator: function ListViewDragSortFeedback$set_AvatarCreator(value) {
      this.$1$AvatarCreatorField = value;
    },
    dispose: function ListViewDragSortFeedback$Dispose() {
      EventUtils.DragDropManager.remove_dragStarted(ss.mkdel(this, this.$onDragStarted));
      EventUtils.DragDropManager.remove_dragEnded(ss.mkdel(this, this.$onDragEnded));
      this.$removeInsertionFeedback();
      this.$clearDragTimer();
    },
    startDrag: function ListViewDragSortFeedback$StartDrag(dragListView, draggedListItem) {
      if (ss.isNullOrUndefined(dragListView) || ss.isNullOrUndefined(dragListView.get_itemViews())) {
        return null;
      }
      var itemIndex = ss.indexOf(dragListView.get_itemViews(), draggedListItem);
      if (itemIndex < 0) {
        return null;
      }
      this.$initDragInfo(dragListView, itemIndex);
      ss.Debug.assert(ss.isValue(this.$draggedElem), 'draggedElem was not properly initialized');
      ss.Debug.assert(ss.isValue(this.$draggedItemViewModel), 'draggedItemViewModel was not properly initialized');
      this.$initInsertionPointer(tab.DoubleUtil.roundToInt(this.$draggedElem.outerWidth()));
      this.$draggedElem.toggleClass(this.get_dragClassName(), true);
      this.$showInsertionFeedback();
      if (!ss.staticEquals(this.$1$DragStartingField, null)) {
        this.$1$DragStartingField(this.$draggedItemViewModel);
      }
      EventUtils.DragDropManager.add_dragStarted(ss.mkdel(this, this.$onDragStarted));
      EventUtils.DragDropManager.add_dragEnded(ss.mkdel(this, this.$onDragEnded));
      var avatar = this.$createAvatar(dragListView.get_itemViews()[itemIndex]);
      return new $spiff_MoveDragInstance(this.$draggedElem, ss.mkdel(this, this.$handleItemDrag), ss.mkdel(this, this.$handleItemDragEnd), avatar);
    },
    $initDragInfo: function ListViewDragSortFeedback$InitDragInfo(dragListView, itemIndex) {
      this.$listView = dragListView;
      this.$numListItems = this.$listView.get_itemViews().length;
      this.$listTopPageY = this.$listView.get_scrollerPosition().y;
      this.$listBottomPageY = this.$listTopPageY + this.$listView.get_scrollerSize().h;
      this.$startIndex = itemIndex;
      this.$moveToIndex = itemIndex;
      var itemView = dragListView.get_itemViews()[itemIndex];
      this.$draggedItemViewModel = itemView.get_viewModel();
      this.$draggedElem = itemView.element;
    },
    $initInsertionPointer: function ListViewDragSortFeedback$InitInsertionPointer(width) {
      this.$insertionPointerElem = this.$createInsertionPointerElem(width).appendTo($('body')).hide();
      this.$insertionPointerYOffset = ss.idiv(tab.DoubleUtil.roundToInt(this.$insertionPointerElem.outerHeight()), 2);
    },
    $createInsertionPointerElem: function ListViewDragSortFeedback$CreateInsertionPointerElem(width) {
      return $("<div class='tab-list-item-insertion-pointer'></div>").width(width);
    },
    $createAvatar: function ListViewDragSortFeedback$CreateAvatar(itemView) {
      if (ss.isValue(this.get_avatarCreator())) {
        return this.get_avatarCreator().createListItemDragAvatar(itemView.get_viewModel());
      }
      return new $spiff_DragSortListItemDragAvatar(itemView);
    },
    $onDragStarted: function ListViewDragSortFeedback$OnDragStarted(dragInstance) {
      EventUtils.DragDropManager.remove_dragStarted(ss.mkdel(this, this.$onDragStarted));
      EventUtils.DragDropManager.setDragCursor(new $spiff_CustomCursor(null, 'move'));
      EventUtils.DragDropManager.setDragCursor(new $spiff_CustomCursor(null, '-webkit-grabbing'));
      EventUtils.DragDropManager.setDragCursor(new $spiff_CustomCursor(null, '-moz-grabbing'));
      EventUtils.DragDropManager.setDragCursor(new $spiff_CustomCursor(null, 'grabbing'));
    },
    $onDragEnded: function ListViewDragSortFeedback$OnDragEnded(result) {
      EventUtils.DragDropManager.remove_dragEnded(ss.mkdel(this, this.$onDragEnded));
      this.$clearDragTimer();
      this.$removeInsertionFeedback();
    },
    $handleItemDrag: function ListViewDragSortFeedback$HandleItemDrag(e) {
      if (ss.isNullOrUndefined(this.$draggedElem)) {
        return;
      }
      this.$clearDragTimer();
      var moveToElem = this.$listView.get_itemViews()[this.$moveToIndex].element;
      var moveToItemPagePt = tab.DomUtil.getElementPosition(moveToElem);
      var movingUp = this.$moveToIndex > 0 && (e.pageY < this.$listTopPageY || e.pageY < moveToItemPagePt.y);
      var movingDown = this.$moveToIndex < this.$numListItems - 1 && (e.pageY > this.$listBottomPageY || e.pageY > moveToItemPagePt.y + moveToElem.outerHeight());
      if (!movingUp && !movingDown) {
        return;
      }
      var offset = (movingUp ? -1 : 1);
      this.$moveToIndex += offset;
      this.$listView.showItemAtIndex(this.$moveToIndex);
      this.$showInsertionFeedback();
      this.$dragTimer = window.setTimeout(ss.mkdel(this, function() {
        this.$handleItemDrag(EventUtils.DragDropManager.get_lastDragEvent());
      }), $spiff_ListViewDragSortFeedback.$dragScrollTimeout);
    },
    $showInsertionFeedback: function ListViewDragSortFeedback$ShowInsertionFeedback() {
      ss.Debug.assert(this.$moveToIndex >= 0 && this.$moveToIndex < this.$numListItems, 'invalid dragged item index');
      if (this.$moveToIndex === this.$startIndex) {
        this.$insertionPointerElem.hide();
        this.$draggedElem.toggleClass(this.get_dragHoverClassName(), true);
        return;
      }
      this.$draggedElem.toggleClass(this.get_dragHoverClassName(), false);
      var moveToElem = this.$listView.get_itemViews()[this.$moveToIndex].element;
      var insertionCoord = tab.DomUtil.getElementPosition(moveToElem);
      if (this.$moveToIndex > this.$startIndex) {
        insertionCoord.y += tab.DoubleUtil.roundToInt(moveToElem.outerHeight());
      }
      tab.DomUtil.setElementPosition(this.$insertionPointerElem, insertionCoord.x, insertionCoord.y - this.$insertionPointerYOffset, null, false);
      this.$insertionPointerElem.show();
    },
    $handleItemDragEnd: function ListViewDragSortFeedback$HandleItemDragEnd(e) {
      this.$clearDragTimer();
      this.$removeInsertionFeedback();
      if (this.$startIndex !== this.$moveToIndex) {
        this.$listView.get_viewModel().moveItem(this.$startIndex, this.$moveToIndex);
      }
      if (!ss.staticEquals(this.$1$DragEndedField, null)) {
        this.$1$DragEndedField(this.$draggedItemViewModel, this.$startIndex !== this.$moveToIndex);
      }
    },
    $removeInsertionFeedback: function ListViewDragSortFeedback$RemoveInsertionFeedback() {
      if (ss.isValue(this.$insertionPointerElem)) {
        this.$insertionPointerElem.remove();
        this.$insertionPointerElem = null;
      }
      if (ss.isValue(this.$draggedElem)) {
        this.$draggedElem.removeClass(this.get_dragHoverClassName());
        this.$draggedElem.removeClass(this.get_dragClassName());
        this.$draggedElem = null;
      }
    },
    $clearDragTimer: function ListViewDragSortFeedback$ClearDragTimer() {
      this.$dragTimer = tab.MiscUtil.clearTimeout(this.$dragTimer);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListViewModel
  var $spiff_ListViewModel = global.spiff.ListViewModel = ss.mkType($asm, 'spiff.ListViewModel', function(collection, selectionType) {
    this.$props = null;
    this.$listItemGroup = null;
    this.$originalCollection = null;
    this.$filteredSortedCollection = null;
    this.$filter = null;
    this.$sort = null;
    this.$enabled = true;
    this.$spotlightedItemIndex = null;
    this.$2$PropsUpdatedField = null;
    this.$2$SelectionChangedField = null;
    this.$2$SubmitSelectionField = null;
    this.$2$ListItemMouseEnterField = null;
    this.$2$ListItemMouseMoveField = null;
    this.$2$SelectionModelUpdatedField = null;
    this.$2$SpotlightedItemChangedField = null;
    this.$2$ItemMovedField = null;
    $spiff_BaseViewModel.call(this);
    this.$props = {};
    this.$listItemGroup = new $spiff_ListItemGroup(selectionType);
    this.$listItemGroup.add_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
    this.update(collection);
  }, {
    add_propsUpdated: function ListViewModel$add_PropsUpdated(value) {
      this.$2$PropsUpdatedField = ss.delegateCombine(this.$2$PropsUpdatedField, value);
    },
    remove_propsUpdated: function ListViewModel$remove_PropsUpdated(value) {
      this.$2$PropsUpdatedField = ss.delegateRemove(this.$2$PropsUpdatedField, value);
    },
    add_selectionChanged: function ListViewModel$add_SelectionChanged(value) {
      this.$2$SelectionChangedField = ss.delegateCombine(this.$2$SelectionChangedField, value);
    },
    remove_selectionChanged: function ListViewModel$remove_SelectionChanged(value) {
      this.$2$SelectionChangedField = ss.delegateRemove(this.$2$SelectionChangedField, value);
    },
    add_submitSelection: function ListViewModel$add_SubmitSelection(value) {
      this.$2$SubmitSelectionField = ss.delegateCombine(this.$2$SubmitSelectionField, value);
    },
    remove_submitSelection: function ListViewModel$remove_SubmitSelection(value) {
      this.$2$SubmitSelectionField = ss.delegateRemove(this.$2$SubmitSelectionField, value);
    },
    add_listItemMouseEnter: function ListViewModel$add_ListItemMouseEnter(value) {
      this.$2$ListItemMouseEnterField = ss.delegateCombine(this.$2$ListItemMouseEnterField, value);
    },
    remove_listItemMouseEnter: function ListViewModel$remove_ListItemMouseEnter(value) {
      this.$2$ListItemMouseEnterField = ss.delegateRemove(this.$2$ListItemMouseEnterField, value);
    },
    add_listItemMouseMove: function ListViewModel$add_ListItemMouseMove(value) {
      this.$2$ListItemMouseMoveField = ss.delegateCombine(this.$2$ListItemMouseMoveField, value);
    },
    remove_listItemMouseMove: function ListViewModel$remove_ListItemMouseMove(value) {
      this.$2$ListItemMouseMoveField = ss.delegateRemove(this.$2$ListItemMouseMoveField, value);
    },
    add_selectionModelUpdated: function ListViewModel$add_SelectionModelUpdated(value) {
      this.$2$SelectionModelUpdatedField = ss.delegateCombine(this.$2$SelectionModelUpdatedField, value);
    },
    remove_selectionModelUpdated: function ListViewModel$remove_SelectionModelUpdated(value) {
      this.$2$SelectionModelUpdatedField = ss.delegateRemove(this.$2$SelectionModelUpdatedField, value);
    },
    add_spotlightedItemChanged: function ListViewModel$add_SpotlightedItemChanged(value) {
      this.$2$SpotlightedItemChangedField = ss.delegateCombine(this.$2$SpotlightedItemChangedField, value);
    },
    remove_spotlightedItemChanged: function ListViewModel$remove_SpotlightedItemChanged(value) {
      this.$2$SpotlightedItemChangedField = ss.delegateRemove(this.$2$SpotlightedItemChangedField, value);
    },
    add_itemMoved: function ListViewModel$add_ItemMoved(value) {
      this.$2$ItemMovedField = ss.delegateCombine(this.$2$ItemMovedField, value);
    },
    remove_itemMoved: function ListViewModel$remove_ItemMoved(value) {
      this.$2$ItemMovedField = ss.delegateRemove(this.$2$ItemMovedField, value);
    },
    get_originalCollection: function ListViewModel$get_OriginalCollection() {
      return this.$originalCollection;
    },
    get_collection: function ListViewModel$get_Collection() {
      return this.$filteredSortedCollection;
    },
    get_filter: function ListViewModel$get_Filter() {
      return this.$filter;
    },
    set_filter: function ListViewModel$set_Filter(value) {
      this.$filter = value;
      this.$applyFilterAndSort();
    },
    get_sort: function ListViewModel$get_Sort() {
      return this.$sort;
    },
    set_sort: function ListViewModel$set_Sort(value) {
      this.$sort = value;
      this.$applyFilterAndSort();
    },
    get_$operateOnClonedCollection: function ListViewModel$get_OperateOnClonedCollection() {
      return !ss.staticEquals(this.$filter, null) || !ss.staticEquals(this.$sort, null);
    },
    get_props: function ListViewModel$get_Props() {
      return this.$props;
    },
    get_selectionType: function ListViewModel$get_SelectionType() {
      return this.$listItemGroup.get_selectionType();
    },
    get_listItemGroup: function ListViewModel$get_ListItemGroup() {
      return this.$listItemGroup;
    },
    get_firstSelectedItem: function ListViewModel$get_FirstSelectedItem() {
      var selectedItemList = this.$getTopNSelectedItems(1);
      return ((selectedItemList.length > 0) ? selectedItemList[0] : null);
    },
    get_selectedItems: function ListViewModel$get_SelectedItems() {
      return this.$getTopNSelectedItems(this.$listItemGroup.get_numberOfSelectedItems());
    },
    get_enabled: function ListViewModel$get_Enabled() {
      return this.$enabled;
    },
    set_enabled: function ListViewModel$set_Enabled(value) {
      if (this.$enabled === value) {
        return;
      }
      this.$enabled = value;
      this.notifyPropertyChanged($spiff_ListViewModel.enabledProperty);
    },
    dispose: function ListViewModel$Dispose() {
      this.$listItemGroup.remove_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
      this.$listItemGroup.dispose();
      ss.clear(this.$originalCollection);
      ss.clear(this.$filteredSortedCollection);
      $spiff_BaseViewModel.prototype.dispose.call(this);
    },
    selectionSubmitted: function ListViewModel$SelectionSubmitted() {
      this.raiseActionEvent(this.$2$SubmitSelectionField);
    },
    handleListItemMouseEnter: function ListViewModel$HandleListItemMouseEnter(item) {
      this.raiseActionEvent$1($spiff_ListItemViewModel).call(this, this.$2$ListItemMouseEnterField, item);
    },
    handleListItemMouseMove: function ListViewModel$HandleListItemMouseMove(item) {
      this.raiseActionEvent$1($spiff_ListItemViewModel).call(this, this.$2$ListItemMouseMoveField, item);
    },
    update: function ListViewModel$Update(collection) {
      this.$originalCollection = ss.arrayClone(collection);
      this.$applyFilterAndSort();
      this.$props.items = _.map(this.get_collection(), ss.mkdel(this, function(item) {
        return { data: item.get_data() };
      }));
      this.raiseActionEvent(this.$2$PropsUpdatedField);
    },
    addItemToGroup: function ListViewModel$AddItemToGroup(item) {
      this.$listItemGroup.addItem(item);
    },
    $applyFilterAndSort: function ListViewModel$ApplyFilterAndSort() {
      if (this.get_$operateOnClonedCollection()) {
        this.$filteredSortedCollection = (ss.isValue(this.$filter) ? this.$originalCollection.filter(this.$filter) : ss.arrayClone(this.$originalCollection));
        if (ss.isValue(this.$sort)) {
          this.$filteredSortedCollection.sort(this.$sort);
        }
      }
      else {
        this.$filteredSortedCollection = this.$originalCollection;
      }
      this.notifyPropertyChanged($spiff_ListViewModel.collectionProperty);
    },
    onSelectionChanged: function ListViewModel$OnSelectionChanged() {
      this.raiseActionEvent(this.$2$SelectionChangedField);
    },
    $getTopNSelectedItems: function ListViewModel$GetTopNSelectedItems(numWanted) {
      var selectedViewModels = [];
      var totalSelectedItems = this.$listItemGroup.get_numberOfSelectedItems();
      if (totalSelectedItems === 1) {
        selectedViewModels.push(this.$listItemGroup.get_selectedItem().get_viewModel());
        return selectedViewModels;
      }
      var numToReturn = Math.min(totalSelectedItems, numWanted);
      for (var i = 0, len = this.get_collection().length; i < len && selectedViewModels.length < numToReturn; i++) {
        if (this.$listItemGroup.isItemSelected(this.get_collection()[i].get_id())) {
          selectedViewModels.push(this.get_collection()[i]);
        }
      }
      return selectedViewModels;
    },
    setSelectedItems: function ListViewModel$SetSelectedItems(indexesToSelect) {
      if (this.get_collection().length === 0) {
        return;
      }
      this.$listItemGroup.remove_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
      this.get_listItemGroup().clearSelection(null);
      var topMostSelectedIndex = null;
      for (var i = 0, len = indexesToSelect.length; i < len; i++) {
        var index = indexesToSelect[i];
        ss.Debug.assert(index < this.get_collection().length, 'invalid index');
        topMostSelectedIndex = Math.min(ss.coalesce(topMostSelectedIndex, index), index);
        this.get_collection()[index].set_selected(true);
        if (this.get_listItemGroup().get_selectionType() === 0) {
          break;
        }
      }
      this.raiseActionEvent$1(ss.makeGenericType(ss.Nullable$1, [ss.UInt32])).call(this, this.$2$SelectionModelUpdatedField, ss.coalesce(topMostSelectedIndex, 0));
      this.$listItemGroup.add_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
    },
    setInvalidItems: function ListViewModel$SetInvalidItems(indexesToInvalidate) {
      for (var ii = 0, len = this.get_collection().length; ii < len; ++ii) {
        this.get_collection()[ii].set_isInvalid(ss.contains(indexesToInvalidate, ii));
      }
    },
    selectItemById: function ListViewModel$SelectItemById(itemId) {
      for (var i = 0, len = this.get_collection().length; i < len; i++) {
        var item = this.get_collection()[i];
        if (ss.referenceEquals(item.get_id(), itemId)) {
          this.selectItemAtIndex(i);
          break;
        }
      }
    },
    selectItemAtIndex: function ListViewModel$SelectItemAtIndex(index) {
      ss.Debug.assert(index < this.get_collection().length, 'invalid item index');
      this.$listItemGroup.remove_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
      var item = this.get_collection()[index];
      var changed = !item.get_selected();
      if (this.$listItemGroup.get_selectionType() === 0) {
        this.clearSelection();
      }
      item.set_selected(true);
      if (changed) {
        this.raiseActionEvent(this.$2$SelectionChangedField);
      }
      this.raiseActionEvent$1(ss.makeGenericType(ss.Nullable$1, [ss.UInt32])).call(this, this.$2$SelectionModelUpdatedField, index);
      this.$listItemGroup.add_selectionChanged(ss.mkdel(this, this.onSelectionChanged));
    },
    clearSpotlighting: function ListViewModel$ClearSpotlighting() {
      if (ss.isValue(this.$spotlightedItemIndex) && ss.isValue(this.get_collection()[ss.unbox(this.$spotlightedItemIndex)])) {
        this.get_collection()[ss.unbox(this.$spotlightedItemIndex)].set_spotlighted(false);
      }
      this.$spotlightedItemIndex = null;
      this.raiseActionEvent$1(ss.makeGenericType(ss.Nullable$1, [ss.UInt32])).call(this, this.$2$SpotlightedItemChangedField, this.$spotlightedItemIndex);
    },
    spotlightItemAtIndex: function ListViewModel$SpotlightItemAtIndex(newSpotlightedItemIndex) {
      ss.Debug.assert(newSpotlightedItemIndex < this.get_collection().length, 'invalid item index');
      if (ss.isValue(this.$spotlightedItemIndex) && ss.isValue(this.get_collection()[ss.unbox(this.$spotlightedItemIndex)])) {
        this.get_collection()[ss.unbox(this.$spotlightedItemIndex)].set_spotlighted(false);
      }
      var itemToSpotlight = this.get_collection()[newSpotlightedItemIndex];
      if (ss.isNullOrUndefined(itemToSpotlight)) {
        return;
      }
      itemToSpotlight.set_spotlighted(true);
      this.$spotlightedItemIndex = newSpotlightedItemIndex;
      this.raiseActionEvent$1(ss.makeGenericType(ss.Nullable$1, [ss.UInt32])).call(this, this.$2$SpotlightedItemChangedField, this.$spotlightedItemIndex);
    },
    clearSelection: function ListViewModel$ClearSelection() {
      this.$listItemGroup.clearSelection(null);
    },
    moveItem: function ListViewModel$MoveItem(fromIndex, toIndex) {
      if (fromIndex === toIndex) {
        return;
      }
      ss.Debug.assert(fromIndex >= 0 && fromIndex < this.get_collection().length, 'invalid item index');
      ss.Debug.assert(toIndex >= 0 && toIndex < this.get_collection().length, 'invalid item index');
      var item = this.get_collection()[fromIndex];
      ss.removeAt(this.get_collection(), fromIndex);
      ss.insert(this.get_collection(), toIndex, item);
      if (!ss.staticEquals(this.$2$ItemMovedField, null)) {
        this.$2$ItemMovedField(fromIndex, toIndex);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ListViewTemplate
  var $spiff_ListViewTemplate = global.spiff.ListViewTemplate = ss.mkType($asm, 'spiff.ListViewTemplate', function() {
    this.$listItemContainer = null;
    $spiff_Template.call(this, $($spiff_ListViewTemplate.$html));
    this.$listItemContainer = this.getElementBySelector('.tab-list-itemHolder');
  }, {
    get_domRootElement: function ListViewTemplate$get_DomRootElement() {
      return this.domRoot;
    },
    get_listItemContainer: function ListViewTemplate$get_ListItemContainer() {
      return this.$listItemContainer;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Menu
  var $spiff_Menu = global.spiff.Menu = ss.mkType($asm, 'spiff.Menu', function(items) {
    this.menuItems = null;
    this.defaultItem = null;
    this.menuItems = items;
    this.defaultItem = _.find(items, function(item) {
      return item.isDefault;
    });
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuItem
  var $spiff_MenuItem = global.spiff.MenuItem = ss.mkType($asm, 'spiff.MenuItem', function() {
    this.name = null;
    this.telemetryId = null;
    this.description = null;
    this.title = null;
    this.readId = null;
    this.iconClass = null;
    this.iconClassTwo = null;
    this.itemClass = null;
    this.checkState = 0;
    this.enabled = false;
    this.isDivider = false;
    this.isTextInput = false;
    this.isDefault = false;
    this.subMenu = null;
    this.data = null;
    this.id = null;
    ++$spiff_MenuItem.$nextIdentifier;
    this.id = 'menuItem' + $spiff_MenuItem.$nextIdentifier;
  }, {
    get_displayName: function MenuItem$get_DisplayName() {
      if (ss.isNullOrUndefined(this.name)) {
        return null;
      }
      return this.name.replace('&', '');
    },
    get_selectable: function MenuItem$get_Selectable() {
      return this.enabled && !this.isDivider;
    }
  }, {
    newDivider: function MenuItem$NewDivider() {
      return (new $spiff_MenuItemBuilder()).isDivider(true).enabled(false).build();
    },
    newActionItem: function MenuItem$NewActionItem(name, action, enabled, readId) {
      return (new $spiff_MenuItemBuilder()).name(name).readId(readId).data(action).enabled(!ss.staticEquals(action, null) && enabled).build();
    },
    newActionItemWithItemClass: function MenuItem$NewActionItemWithItemClass(name, action, itemClass) {
      return (new $spiff_MenuItemBuilder()).name(name).itemClass(itemClass).data(action).enabled(!ss.staticEquals(action, null)).build();
    },
    newItem: function MenuItem$NewItem(data, name, telemetryId, checkState, subMenu) {
      return (new $spiff_MenuItemBuilder()).data(data).name(name).telemetryId(telemetryId).checkState(ss.coalesce(checkState, 0)).subMenu(subMenu).enabled(ss.isNullOrUndefined(subMenu) || subMenu.menuItems.some(function(item) {
        return item.enabled;
      })).build();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuItemBuilder
  var $spiff_MenuItemBuilder = global.spiff.MenuItemBuilder = ss.mkType($asm, 'spiff.MenuItemBuilder', function() {
    this.$mi = null;
    this.$mi = new $spiff_MenuItem();
  }, {
    checkState: function MenuItemBuilder$CheckState(value) {
      this.$mi.checkState = value;
      return this;
    },
    data: function MenuItemBuilder$Data(value) {
      this.$mi.data = value;
      return this;
    },
    description: function MenuItemBuilder$Description(value) {
      this.$mi.description = value;
      return this;
    },
    enabled: function MenuItemBuilder$Enabled(value) {
      this.$mi.enabled = value;
      return this;
    },
    isDivider: function MenuItemBuilder$IsDivider(value) {
      this.$mi.isDivider = value;
      return this;
    },
    isTextInput: function MenuItemBuilder$IsTextInput(value) {
      this.$mi.isTextInput = value;
      return this;
    },
    iconClass: function MenuItemBuilder$IconClass(value) {
      this.$mi.iconClass = value;
      return this;
    },
    iconClassTwo: function MenuItemBuilder$IconClassTwo(value) {
      this.$mi.iconClassTwo = value;
      return this;
    },
    itemClass: function MenuItemBuilder$ItemClass(value) {
      this.$mi.itemClass = value;
      return this;
    },
    name: function MenuItemBuilder$Name(value) {
      this.$mi.name = value;
      return this;
    },
    telemetryId: function MenuItemBuilder$TelemetryId(value) {
      this.$mi.telemetryId = value;
      return this;
    },
    readId: function MenuItemBuilder$ReadId(value) {
      this.$mi.readId = value;
      return this;
    },
    subMenu: function MenuItemBuilder$SubMenu(value) {
      this.$mi.subMenu = value;
      return this;
    },
    title: function MenuItemBuilder$Title(value) {
      this.$mi.title = value;
      return this;
    },
    build: function MenuItemBuilder$Build() {
      var item = this.$mi;
      this.$mi = null;
      return item;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuItemCheckState
  var $spiff_MenuItemCheckState = global.spiff.MenuItemCheckState = ss.mkEnum($asm, 'spiff.MenuItemCheckState', { none: 0, check: 1, radio: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuItemDividerTemplate
  var $spiff_MenuItemDividerTemplate = global.spiff.MenuItemDividerTemplate = ss.mkType($asm, 'spiff.MenuItemDividerTemplate', function() {
    $spiff_Template.call(this, $($spiff_MenuItemDividerTemplate.$html));
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuItemTextInputTemplate
  var $spiff_MenuItemTextInputTemplate = global.spiff.MenuItemTextInputTemplate = ss.mkType($asm, 'spiff.MenuItemTextInputTemplate', function() {
    this.textInput = null;
    $spiff_Template.call(this, $($spiff_MenuItemTextInputTemplate.$html));
    this.textInput = this.getElementBySelector('.tabMenuItemTextInput');
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuTemplate
  var $spiff_MenuTemplate = global.spiff.MenuTemplate = ss.mkType($asm, 'spiff.MenuTemplate', function() {
    this.content = null;
    $spiff_Template.call(this, $($spiff_MenuTemplate.$htmlTemplate));
    this.content = this.getElementBySelector('.tabMenuContent');
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuView
  var $spiff_MenuView = global.spiff.MenuView = ss.mkType($asm, 'spiff.MenuView', function(viewModel, template) {
    this.menuStack = [];
    this.dom = null;
    this.menuViewModel = null;
    this.glass = null;
    this.$menuItemMap = {};
    this.menuDisposables = new tab.DisposableHolder();
    ss.makeGenericType($spiff_BaseMenuView$1, [$spiff_MenuViewModel]).call(this, viewModel, template);
    this.menuViewModel = viewModel;
    this.dom = template;
    this.menuStack[0] = this.dom;
    this.menuViewModel.add_menuChanged(ss.mkdel(this, this.updateMenu));
    this.menuViewModel.add_shown(ss.mkdel(this, this.shown));
    this.menuViewModel.add_hidden(ss.mkdel(this, this.hidden));
    this.menuViewModel.add_menuItemSelectionChanged(ss.mkdel(this, this.$selectionChanged));
    this.element.addClass(this.menuViewModel.get_theme().menuClass);
    this.element.on('blur', ss.mkdel(this, this.onBlur));
    this.element.attr('aria-label', this.menuViewModel.get_ariaLabel());
    this.element.attr('id', this.menuViewModel.get_id());
  }, {
    get_$menuAndSubMenuDom: function MenuView$get_MenuAndSubMenuDom() {
      var allMenus = this.dom.domRoot;
      for (var $t1 = 0; $t1 < this.menuStack.length; $t1++) {
        var menuTemplate = this.menuStack[$t1];
        allMenus = allMenus.add(menuTemplate.domRoot);
      }
      return allMenus;
    },
    dispose: function MenuView$Dispose() {
      this.menuViewModel.remove_menuChanged(ss.mkdel(this, this.updateMenu));
      this.menuViewModel.remove_shown(ss.mkdel(this, this.shown));
      this.menuViewModel.remove_hidden(ss.mkdel(this, this.hidden));
      this.menuViewModel.remove_menuItemSelectionChanged(ss.mkdel(this, this.$selectionChanged));
      var afterFade = ss.mkdel(this, function() {
        this.menuDisposables.dispose();
        for (var $t1 = 0; $t1 < this.menuStack.length; $t1++) {
          var menuTemplate = this.menuStack[$t1];
          menuTemplate.dispose();
        }
        ss.clear(this.menuStack);
        this.removeGlass();
        ss.makeGenericType($spiff_BaseView$1, [$spiff_MenuViewModel]).prototype.dispose.call(this);
      });
      this.$fadeOutMenus(afterFade);
    },
    removeGlass: function MenuView$RemoveGlass() {
      if (ss.isValue(this.glass)) {
        this.glass.remove_click(ss.mkdel(this, this.glassClicked));
        this.glass.dispose();
        this.glass = null;
      }
    },
    getElementForMenuItem: function MenuView$GetElementForMenuItem(mi) {
      return (ss.isValue(mi) ? this.$menuItemMap[mi.id] : null);
    },
    getMenuElementForMenuItem: function MenuView$GetMenuElementForMenuItem(mi) {
      var menuItem = this.getElementForMenuItem(mi);
      if (ss.isNullOrUndefined(menuItem)) {
        return null;
      }
      var menu = this.menuStack[$spiff_MenuView.getMenuItemLevel(menuItem) - 1];
      if (ss.isNullOrUndefined(menu)) {
        return null;
      }
      else {
        return menu.domRoot;
      }
    },
    updateMenu: function MenuView$UpdateMenu() {
      this.dom.content.children().remove();
      this.$menuItemMap = {};
      this.menuDisposables.dispose();
      this.menuDisposables = new tab.DisposableHolder();
      this.buildMenu(this.dom, this.menuViewModel.get_menu());
    },
    hidden: function MenuView$Hidden() {
      var afterFade = ss.mkdel(this, function() {
        this.dom.domRoot.detach();
        this.removeGlass();
      });
      this.$fadeOutMenus(afterFade);
    },
    shown: function MenuView$Shown(options) {
      if (options.get_minWidth() !== 0) {
        var nonClientWidth = tab.DoubleUtil.roundToInt(this.dom.domRoot.outerWidth(true)) - tab.DoubleUtil.roundToInt(this.dom.domRoot.width());
        this.dom.domRoot.css('min-width', options.get_minWidth() - nonClientWidth + 'px');
      }
      var menuZIndex = $spiff_MenuView.$baseLayerZIndex;
      if (options.relativeDom.length > 0) {
        var relativeZIndex = tab.DomUtil.getComputedZIndex(options.relativeDom[0]);
        if (relativeZIndex >= menuZIndex) {
          menuZIndex = Math.max($spiff_MenuView.$dialogLayerZIndex, relativeZIndex + 1);
        }
      }
      this.removeGlass();
      var $t1 = new $spiff_Glass(null, false);
      $t1.set_zIndex(menuZIndex - 1);
      this.glass = $t1;
      this.glass.add_click(ss.mkdel(this, this.glassClicked));
      this.glass.show();
      this.dom.domRoot.css('z-index', menuZIndex);
      if (ss.isValue(options.additionalMenuClass)) {
        this.dom.domRoot.addClass(options.additionalMenuClass);
      }
      $spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, function(spiffBrowserViewport) {
        this.dom.domRoot.appendTo($('body'));
        this.positionMenu(spiffBrowserViewport, options, this.dom);
        this.dom.domRoot.css('visibility', 'visible');
        this.onAddedToDom();
        this.dom.domRoot.show();
        this.onSized();
      }));
      this.disposables.add$1($spiff_EventUtil.bindWithDispose($(window), 'resize', ss.mkdel(this, function(e) {
        this.menuViewModel.hide();
      })));
      var hideEvent = ss.mkdel(this, function(e1) {
        this.menuViewModel.hide();
      });
      tab.WindowHelper.addListener(window.self, 'popstate', hideEvent);
      this.disposables.add$1(new tab.CallOnDispose(function() {
        tab.WindowHelper.removeListener(window.self, 'popstate', hideEvent);
      }));
      EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(this, this.onDismissTemporaryElements));
      this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(this, this.onDismissTemporaryElements));
      })));
    },
    onSized: function MenuView$OnSized() {
    },
    $selectionChanged: function MenuView$SelectionChanged(mi, isSelected) {
      var menuElem = this.$menuItemMap[mi.id];
      if (ss.isValue(menuElem) && menuElem.is(':visible')) {
        menuElem.toggleClass('tabMenuSelectedItem', isSelected);
        if (isSelected) {
          this.scrollToMenuItem(menuElem);
        }
      }
    },
    scrollToMenuItem: function MenuView$ScrollToMenuItem(elem) {
      elem.offsetParent().scrollTop(tab.DoubleUtil.roundToInt(elem.position().top));
    },
    glassClicked: function MenuView$GlassClicked() {
      this.menuViewModel.hide();
    },
    onDismissTemporaryElements: function MenuView$OnDismissTemporaryElements() {
      this.menuViewModel.hide();
    },
    showSubmenu: null,
    activateSubmenu: function MenuView$ActivateSubmenu(mi, relativeObj) {
      if (!mi.enabled) {
        return;
      }
      var itemLevel = ss.unbox(ss.cast(relativeObj.data($spiff_MenuView.$keyMenuItemLevel), ss.Int32));
      if (ss.isValue(itemLevel) && itemLevel < this.menuStack.length) {
        return;
      }
      var template = new $spiff_MenuTemplate();
      template.domRoot.addClass(this.menuViewModel.get_theme().menuClass);
      template.domRoot.attr('data-sub-menu-depth', this.menuStack.length.toString());
      this.menuStack.push(template);
      this.buildMenu(template, mi.subMenu);
      this.showSubmenu(mi, relativeObj, template);
      template.domRoot.focus();
      template.domRoot.on('blur', ss.mkdel(this, this.onBlur));
    },
    buildMenu: function MenuView$BuildMenu(root, m) {
      var seenIcon = false;
      var seenIconTwo = false;
      var seenDesc = false;
      var items = [];
      var menuClickHandler = $spiff_TableauClickHandler.targetAndClick(root.domRoot.get(0), ss.mkdel(this, this.$onMenuClicked));
      this.menuDisposables.add$1(menuClickHandler);
      for (var $t1 = 0; $t1 < m.menuItems.length; $t1++) {
        var mi = m.menuItems[$t1];
        var newMenuItemElement;
        if (mi.isDivider) {
          newMenuItemElement = (new $spiff_MenuItemDividerTemplate()).domRoot.addClass(this.menuViewModel.get_theme().dividerClass);
        }
        else {
          if (mi.isTextInput) {
            var textItemTemplate = this.$makeMenuItemTextInputTemplate(mi);
            newMenuItemElement = textItemTemplate.domRoot;
          }
          else if (ss.isInstanceOfType(mi, $spiff_CustomMenuItem)) {
            newMenuItemElement = ss.cast(mi, $spiff_CustomMenuItem).get_domRoot();
          }
          else {
            var mit = (new $spiff_$MenuItemTemplate$MenuTemplateBuilder(mi.get_displayName(), mi.enabled)).$icon(mi.checkState, mi.iconClass).$iconTwo(mi.iconClassTwo).$description(mi.description).$title(mi.title).$subMenu(mi.subMenu).$theme([this.menuViewModel.get_theme().itemClass, mi.itemClass]).$build();
            seenIcon = seenIcon || mit.$hasIcon;
            seenIconTwo = seenIconTwo || mit.$hasIconTwo;
            seenDesc = seenDesc || mit.$hasDescription;
            mit.domRoot.data($spiff_MenuView.keyMenuItem, mi);
            mit.domRoot.data($spiff_MenuView.$keyMenuItemLevel, this.menuStack.length);
            newMenuItemElement = mit.domRoot;
          }
          newMenuItemElement.addClass($spiff_MenuView.classMenuItem);
          if (mi.isDefault) {
            newMenuItemElement.addClass($spiff_MenuView.defaultMenuItem);
          }
        }
        items.push(newMenuItemElement);
        this.$menuItemMap[mi.id] = newMenuItemElement;
      }
      root.content.append(items);
      if (!seenIcon) {
        root.domRoot.addClass(this.menuViewModel.get_theme().noIconClass);
      }
      if (seenIconTwo) {
        root.domRoot.addClass($spiff_MenuView.$classMenuHasIconTwo);
      }
      if (!seenDesc) {
        root.domRoot.addClass(this.menuViewModel.get_theme().noDescClass);
      }
      if (ss.isValue(this.menuViewModel.get_selectedItem())) {
        this.$selectionChanged(this.menuViewModel.get_selectedItem(), true);
      }
    },
    $onMenuClicked: function MenuView$OnMenuClicked(evt) {
      var mit = $(evt.target).closest('.' + $spiff_MenuView.classMenuItem);
      var mi = ss.cast(mit.data($spiff_MenuView.keyMenuItem), $spiff_MenuItem);
      if (ss.isNullOrUndefined(mi)) {
        return;
      }
      else if (ss.isValue(mi.subMenu)) {
        this.activateSubmenu(mi, mit);
      }
      else {
        this.menuViewModel.clickMenuItem(mi);
        tab.OnlineAnalyticsClient.logEvent($spiff_MenuView.$itemClickedEventName, ss.mkdict(['MenuItemId', mi.telemetryId, 'CheckState', mi.checkState]));
      }
    },
    onBlur: function MenuView$OnBlur(e) {
      window.setTimeout(ss.mkdel(this, function() {
        var menusDom = this.get_$menuAndSubMenuDom();
        if (menusDom.index(document.activeElement) < 0 && menusDom.find(document.activeElement).length === 0) {
          this.get_viewModel().hide();
        }
      }));
    },
    $menuItemTextInputKeydown: function MenuView$MenuItemTextInputKeydown(e) {
      e.stopPropagation();
      switch (e.which) {
        case 13: {
          var callback = e.data['callback'];
          if ($.isFunction(callback)) {
            ss.cast(callback, Function)($(e.target).val());
          }
          break;
        }
        case 9: {
          e.preventDefault();
          e.target.blur();
          this.menuViewModel.iterateFocus((e.shiftKey ? -1 : 1), null);
          break;
        }
      }
    },
    $makeMenuItemTextInputTemplate: function MenuView$MakeMenuItemTextInputTemplate(menuItem) {
      var template = new $spiff_MenuItemTextInputTemplate();
      template.textInput.keydown(ss.mkdict(['callback', menuItem.data]), ss.mkdel(this, this.$menuItemTextInputKeydown)).keypress($spiff_MenuView.$menuItemTextInputKeypress).focus(ss.mkdel(this, function(e) {
        this.get_viewModel().set_focusedItem(menuItem);
      })).attr('placeholder', menuItem.description);
      if (!ss.isNullOrEmptyString(menuItem.itemClass)) {
        template.domRoot.addClass(menuItem.itemClass);
      }
      this.disposables.add$1(new tab.CallOnDispose(function() {
        template.textInput.off();
      }));
      return template;
    },
    $fadeOutMenus: function MenuView$FadeOutMenus(afterFade) {
      if ($.fx.off || !this.menuViewModel.get_shouldAnimateOnClose()) {
        afterFade();
      }
      else {
        this.get_$menuAndSubMenuDom().fadeOut($spiff_MenuView.menuFadeDurationMs, afterFade);
      }
    }
  }, {
    getMenuItem: function MenuView$GetMenuItem(menuItemDom) {
      return ss.cast(menuItemDom.data($spiff_MenuView.keyMenuItem), $spiff_MenuItem);
    },
    getMenuItemLevel: function MenuView$GetMenuItemLevel(menuItemDom) {
      return ss.unbox(ss.cast(ss.coalesce(menuItemDom.data($spiff_MenuView.$keyMenuItemLevel), 1), ss.Int32));
    },
    $menuItemTextInputKeypress: function MenuView$MenuItemTextInputKeypress(e) {
      e.stopPropagation();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuViewModel
  var $spiff_MenuViewModel = global.spiff.MenuViewModel = ss.mkType($asm, 'spiff.MenuViewModel', function() {
    this.$disposeLater = null;
    this.$menu = null;
    this.$selectedItem = null;
    this.$focusedItem = null;
    this.$ensureViewCreated = null;
    this.$2$ShownField = null;
    this.$2$HiddenField = null;
    this.$2$MenuChangedField = null;
    this.$2$MenuItemClickedField = null;
    this.$2$MenuItemSelectionChangedField = null;
    this.$2$MenuItemFocusChangedField = null;
    this.$2$VisibleField = false;
    this.$2$IsExpandedField = false;
    this.$2$ShouldAnimateOnCloseField = false;
    this.$2$AriaLabelField = null;
    this.$2$IdField = null;
    this.$2$ThemeField = null;
    $spiff_BaseViewModel.call(this);
    this.set_shouldAnimateOnClose(true);
    this.set_theme(new $spiff_UnificationLightMenuTheme());
    this.$ensureViewCreated = _.once(ss.mkdel(this, function() {
      tab.ObjectRegistry.newView($spiff_MenuView).call(null, [this]);
    }));
    this.$disposeLater = ss.mkdel(this, function() {
      _.defer(ss.mkdel(this, this.dispose));
    });
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.remove_hidden(this.$disposeLater);
    })));
  }, {
    add_shown: function MenuViewModel$add_Shown(value) {
      this.$2$ShownField = ss.delegateCombine(this.$2$ShownField, value);
    },
    remove_shown: function MenuViewModel$remove_Shown(value) {
      this.$2$ShownField = ss.delegateRemove(this.$2$ShownField, value);
    },
    add_hidden: function MenuViewModel$add_Hidden(value) {
      this.$2$HiddenField = ss.delegateCombine(this.$2$HiddenField, value);
    },
    remove_hidden: function MenuViewModel$remove_Hidden(value) {
      this.$2$HiddenField = ss.delegateRemove(this.$2$HiddenField, value);
    },
    add_menuChanged: function MenuViewModel$add_MenuChanged(value) {
      this.$2$MenuChangedField = ss.delegateCombine(this.$2$MenuChangedField, value);
    },
    remove_menuChanged: function MenuViewModel$remove_MenuChanged(value) {
      this.$2$MenuChangedField = ss.delegateRemove(this.$2$MenuChangedField, value);
    },
    add_menuItemClicked: function MenuViewModel$add_MenuItemClicked(value) {
      this.$2$MenuItemClickedField = ss.delegateCombine(this.$2$MenuItemClickedField, value);
    },
    remove_menuItemClicked: function MenuViewModel$remove_MenuItemClicked(value) {
      this.$2$MenuItemClickedField = ss.delegateRemove(this.$2$MenuItemClickedField, value);
    },
    add_menuItemSelectionChanged: function MenuViewModel$add_MenuItemSelectionChanged(value) {
      this.$2$MenuItemSelectionChangedField = ss.delegateCombine(this.$2$MenuItemSelectionChangedField, value);
    },
    remove_menuItemSelectionChanged: function MenuViewModel$remove_MenuItemSelectionChanged(value) {
      this.$2$MenuItemSelectionChangedField = ss.delegateRemove(this.$2$MenuItemSelectionChangedField, value);
    },
    add_menuItemFocusChanged: function MenuViewModel$add_MenuItemFocusChanged(value) {
      this.$2$MenuItemFocusChangedField = ss.delegateCombine(this.$2$MenuItemFocusChangedField, value);
    },
    remove_menuItemFocusChanged: function MenuViewModel$remove_MenuItemFocusChanged(value) {
      this.$2$MenuItemFocusChangedField = ss.delegateRemove(this.$2$MenuItemFocusChangedField, value);
    },
    get_visible: function MenuViewModel$get_Visible() {
      return this.$2$VisibleField;
    },
    set_visible: function MenuViewModel$set_Visible(value) {
      this.$2$VisibleField = value;
    },
    get_isExpanded: function MenuViewModel$get_IsExpanded() {
      return this.$2$IsExpandedField;
    },
    set_isExpanded: function MenuViewModel$set_IsExpanded(value) {
      this.$2$IsExpandedField = value;
    },
    get_shouldAnimateOnClose: function MenuViewModel$get_ShouldAnimateOnClose() {
      return this.$2$ShouldAnimateOnCloseField;
    },
    set_shouldAnimateOnClose: function MenuViewModel$set_ShouldAnimateOnClose(value) {
      this.$2$ShouldAnimateOnCloseField = value;
    },
    get_ariaLabel: function MenuViewModel$get_AriaLabel() {
      return this.$2$AriaLabelField;
    },
    set_ariaLabel: function MenuViewModel$set_AriaLabel(value) {
      this.$2$AriaLabelField = value;
    },
    get_id: function MenuViewModel$get_Id() {
      return this.$2$IdField;
    },
    set_id: function MenuViewModel$set_Id(value) {
      this.$2$IdField = value;
    },
    set_disposeOnHide: function MenuViewModel$set_DisposeOnHide(value) {
      this.remove_hidden(this.$disposeLater);
      if (value) {
        this.add_hidden(this.$disposeLater);
      }
    },
    get_menu: function MenuViewModel$get_Menu() {
      return this.$menu;
    },
    set_menu: function MenuViewModel$set_Menu(value) {
      if (_.isEqual(this.$menu, value)) {
        return;
      }
      this.$menu = value;
      if (!ss.staticEquals(this.$2$MenuChangedField, null)) {
        this.$2$MenuChangedField();
      }
    },
    get_theme: function MenuViewModel$get_Theme() {
      return this.$2$ThemeField;
    },
    set_theme: function MenuViewModel$set_Theme(value) {
      this.$2$ThemeField = value;
    },
    get_selectedItem: function MenuViewModel$get_SelectedItem() {
      return this.$selectedItem;
    },
    set_selectedItem: function MenuViewModel$set_SelectedItem(value) {
      if (ss.isValue(this.$selectedItem)) {
        if (!ss.staticEquals(this.$2$MenuItemSelectionChangedField, null)) {
          this.$2$MenuItemSelectionChangedField(this.$selectedItem, false);
        }
      }
      if (ss.isNullOrUndefined(value)) {
        this.$selectedItem = null;
        return;
      }
      this.$selectedItem = value;
      if (!ss.staticEquals(this.$2$MenuItemSelectionChangedField, null)) {
        this.$2$MenuItemSelectionChangedField(this.$selectedItem, true);
      }
    },
    get_focusedItem: function MenuViewModel$get_FocusedItem() {
      return this.$focusedItem;
    },
    set_focusedItem: function MenuViewModel$set_FocusedItem(value) {
      if (ss.referenceEquals(this.$focusedItem, value)) {
        return;
      }
      if (ss.isValue(this.$focusedItem) && !ss.staticEquals(this.$2$MenuItemFocusChangedField, null)) {
        this.$2$MenuItemFocusChangedField(this.$focusedItem, false);
      }
      if (ss.isNullOrUndefined(value) || !value.enabled) {
        this.$focusedItem = null;
        return;
      }
      this.$focusedItem = value;
      if (!ss.staticEquals(this.$2$MenuItemFocusChangedField, null)) {
        this.$2$MenuItemFocusChangedField(this.$focusedItem, true);
      }
    },
    show: function MenuViewModel$Show(options) {
      this.$ensureViewCreated();
      this.set_isExpanded(options.expanded);
      if (this.get_visible()) {
        return;
      }
      this.set_visible(true);
      if (tsConfig.is_desktop) {
        (new $spiff_DesktopMenuAdapter(this)).show(options);
      }
      else if (!ss.staticEquals(this.$2$ShownField, null)) {
        this.$2$ShownField(options);
      }
    },
    dispose: function MenuViewModel$Dispose() {
      this.hide();
      $spiff_BaseViewModel.prototype.dispose.call(this);
    },
    hide: function MenuViewModel$Hide() {
      if (this.get_visible() === false) {
        return;
      }
      this.set_visible(false);
      this.raiseActionEvent(this.$2$HiddenField);
    },
    clickMenuItem: function MenuViewModel$ClickMenuItem(mi) {
      if (!mi.enabled) {
        return;
      }
      tab.Log.get(this).debug('Clicking: %o', [mi]);
      this.hide();
      if (!ss.staticEquals(this.$2$MenuItemClickedField, null)) {
        this.$2$MenuItemClickedField(mi);
      }
    },
    iterateFocus: function MenuViewModel$IterateFocus(indexChange, startIndex) {
      var focusedMenu = this.findMenuForMenuItem(this.get_focusedItem());
      if (ss.isNullOrUndefined(focusedMenu)) {
        return;
      }
      var $t1 = startIndex;
      if (ss.isNullOrUndefined($t1)) {
        $t1 = ss.indexOf(focusedMenu.menuItems, this.get_focusedItem());
      }
      var currentIndex = $t1;
      var newIndex = currentIndex;
      do {
        newIndex += indexChange;
        if (newIndex >= focusedMenu.menuItems.length) {
          newIndex = 0;
        }
        else if (newIndex < 0) {
          newIndex = focusedMenu.menuItems.length - 1;
        }
      } while (!focusedMenu.menuItems[newIndex].get_selectable() && newIndex !== currentIndex);
      if (newIndex !== currentIndex) {
        this.set_focusedItem(focusedMenu.menuItems[newIndex]);
      }
    },
    focusByNamePrefix: function MenuViewModel$FocusByNamePrefix(prefix) {
      prefix = prefix.toLowerCase();
      var focusedMenu = this.findMenuForMenuItem(this.get_focusedItem());
      if (ss.isNullOrUndefined(focusedMenu)) {
        return;
      }
      var startIndex = ss.indexOf(focusedMenu.menuItems, this.get_focusedItem()) + 1;
      if (startIndex >= focusedMenu.menuItems.length) {
        startIndex = 0;
      }
      var searchIndex = startIndex;
      do {
        if (focusedMenu.menuItems[searchIndex].enabled && !focusedMenu.menuItems[searchIndex].isDivider) {
          if (ss.isValue(focusedMenu.menuItems[searchIndex].name) && ss.startsWithString(focusedMenu.menuItems[searchIndex].name.toLowerCase(), prefix)) {
            this.set_focusedItem(focusedMenu.menuItems[searchIndex]);
            return;
          }
        }
        ++searchIndex;
        if (searchIndex >= focusedMenu.menuItems.length) {
          searchIndex = 0;
        }
      } while (searchIndex !== startIndex);
    },
    findMenuForMenuItem: function MenuViewModel$FindMenuForMenuItem(item) {
      if (ss.isNullOrUndefined(item)) {
        return null;
      }
      var lookThroughSubMenu = null;
      lookThroughSubMenu = function(subMenu) {
        if (ss.contains(subMenu.menuItems, item)) {
          return subMenu;
        }
        for (var $t1 = 0; $t1 < subMenu.menuItems.length; $t1++) {
          var mi = subMenu.menuItems[$t1];
          if (ss.isValue(mi.subMenu)) {
            var itemToReturn = lookThroughSubMenu(mi.subMenu);
            if (ss.isValue(itemToReturn)) {
              return itemToReturn;
            }
          }
        }
        return null;
      };
      return lookThroughSubMenu(this.get_menu());
    },
    findItemContainingSubMenu: function MenuViewModel$FindItemContainingSubMenu(subMenu) {
      if (ss.isNullOrUndefined(subMenu) || ss.referenceEquals(this.get_menu(), subMenu)) {
        return null;
      }
      var lookForSubMenu = null;
      lookForSubMenu = function(currentMenu) {
        var itemToReturn = null;
        for (var $t1 = 0; $t1 < currentMenu.menuItems.length; $t1++) {
          var item = currentMenu.menuItems[$t1];
          if (ss.isValue(item.subMenu)) {
            itemToReturn = (ss.referenceEquals(item.subMenu, subMenu) ? item : lookForSubMenu(item.subMenu));
            if (ss.isValue(itemToReturn)) {
              break;
            }
          }
        }
        return itemToReturn;
      };
      return lookForSubMenu(this.get_menu());
    },
    hasMenuItems: function MenuViewModel$HasMenuItems() {
      return ss.isValue(this.get_menu()) && !tab.MiscUtil.isNullOrEmpty$3(this.get_menu().menuItems);
    }
  }, {
    createForMenu: function MenuViewModel$CreateForMenu(menu, clickHandler, onHideAction, onShowAction) {
      var $t1 = new $spiff_MenuViewModel();
      $t1.set_menu(menu);
      $t1.set_disposeOnHide(true);
      var vm = $t1;
      if (!ss.staticEquals(clickHandler, null)) {
        vm.add_menuItemClicked(clickHandler);
        vm.disposables.add$1(new tab.CallOnDispose(function() {
          vm.remove_menuItemClicked(clickHandler);
        }));
      }
      if (!ss.staticEquals(onHideAction, null)) {
        vm.add_hidden(onHideAction);
        vm.disposables.add$1(new tab.CallOnDispose(function() {
          vm.remove_hidden(onHideAction);
        }));
      }
      if (!ss.staticEquals(onShowAction, null)) {
        vm.add_shown(onShowAction);
        vm.disposables.add$1(new tab.CallOnDispose(function() {
          vm.remove_shown(onShowAction);
        }));
      }
      return vm;
    },
    handleMenuActionItemClicked: function MenuViewModel$HandleMenuActionItemClicked(arg) {
      if ($.isFunction(arg.data)) {
        ss.cast(arg.data, Function)();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MenuViewTheme
  var $spiff_MenuViewTheme = global.spiff.MenuViewTheme = ss.mkType($asm, 'spiff.MenuViewTheme', function() {
    this.menuClass = 'tabMenuBaseTheme';
    this.itemClass = 'tabMenuItemBaseTheme';
    this.dividerClass = 'tabMenuItemDividerBaseTheme';
    this.noIconClass = 'tabMenuNoIcons';
    this.noDescClass = 'tabMenuNoDesc';
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ModalDialog
  var $spiff_ModalDialog = global.spiff.ModalDialog = ss.mkType($asm, 'spiff.ModalDialog', function(titleUnescaped, template) {
    this.$glass = null;
    this.template = null;
    $spiff_Dialog.call(this, titleUnescaped, template.domRoot);
    this.template = template;
    this.$init();
    this.element.attr('aria-modal', 'true');
  }, {
    get_glass: function ModalDialog$get_Glass() {
      return this.$glass;
    },
    ensureAttachedAndSized: function ModalDialog$EnsureAttachedAndSized() {
      if (ss.isValue(this.$glass) || this.isAttached()) {
        return;
      }
      this.$glass = new $spiff_Glass(null, false);
      this.$glass.set_opaque(true);
      this.$glass.show();
      this.element.css('z-index', (this.$glass.get_zIndex() + 1).toString());
      $spiff_Dialog.prototype.ensureAttachedAndSized.call(this);
    },
    bindToEvents: function ModalDialog$BindToEvents() {
      $spiff_Dialog.prototype.bindToEvents.call(this);
      this.disposables.add$1($spiff_EventUtil.bindWithDispose($(window), 'resize', ss.mkdel(this, this.onWindowResize)));
      this.disposables.add$1($spiff_EventUtil.bindWithDispose($(window), 'keyup', ss.mkdel(this, this.onDocumentKeyUp)));
    },
    detach: function ModalDialog$Detach() {
      this.$removeGlass();
      $spiff_Dialog.prototype.detach.call(this);
    },
    dispose: function ModalDialog$Dispose() {
      this.$removeGlass();
      if (ss.isValue(this.template)) {
        this.template.dispose();
        this.template = null;
      }
      $spiff_Dialog.prototype.dispose.call(this);
    },
    $removeGlass: function ModalDialog$RemoveGlass() {
      if (ss.isValue(this.$glass)) {
        this.$glass.dispose();
        this.$glass = null;
      }
    },
    $init: function ModalDialog$Init() {
      this.configMoveDragSource($spiff_Dialog.defaultStationaryDialogConfigurer);
    },
    onWindowResize: function ModalDialog$OnWindowResize(e) {
      this.positionInWindow();
    },
    onDocumentKeyUp: function ModalDialog$OnDocumentKeyUp(e) {
      if (e.which === 27) {
        this.close(null);
        e.preventDefault();
        e.stopPropagation();
        return;
      }
    }
  }, {
    $ctor1: function(titleUnescaped, body) {
      $spiff_ModalDialog.call(this, titleUnescaped, new $spiff_Template(body));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MoveDragInstance
  var $spiff_MoveDragInstance = global.spiff.MoveDragInstance = ss.mkType($asm, 'spiff.MoveDragInstance', function(dragged, moveCallback, dropCallback, dragAvatar) {
    $spiff_MoveDragInstance.$ctor1.call(this, dragged, moveCallback, dropCallback, $spiff_MoveDragInstance.$noOpCallback, dragAvatar);
  }, {
    get_dragType: function MoveDragInstance$get_DragType() {
      return 'dragmove';
    },
    moveTo: function MoveDragInstance$MoveTo(e) {
      if (ss.isValue(this.$moveCallback)) {
        this.$moveCallback(e);
      }
    },
    endDragAt: function MoveDragInstance$EndDragAt(e) {
      if (ss.isValue(this.$dropCallback)) {
        this.$dropCallback(e);
      }
    },
    cancelDrag: function MoveDragInstance$CancelDrag() {
      if (ss.isValue(this.$cancelCallback)) {
        this.$cancelCallback();
      }
    }
  }, {
    $ctor1: function(dragged, moveCallback, dropCallback, cancelCallback, dragAvatar) {
      this.$moveCallback = null;
      this.$dropCallback = null;
      this.$cancelCallback = null;
      EventUtils.DragInstance.call(this, dragged, dragAvatar);
      this.$moveCallback = moveCallback;
      this.$dropCallback = dropCallback;
      this.$cancelCallback = cancelCallback;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MoveDragSource
  var $spiff_MoveDragSource = global.spiff.MoveDragSource = ss.mkType($asm, 'spiff.MoveDragSource', function(elementToDrag, elementToChange, addDraggingCSSToElementToChange) {
    this.$elementToDrag = null;
    this.$elementToChange = null;
    this.$offset = null;
    this.$documentBodySize = null;
    this.$addDraggingCSSToElementToChange = false;
    this.$1$MoveActionField = null;
    this.$1$EndActionField = null;
    this.$elementToDrag = elementToDrag;
    this.$elementToChange = elementToChange;
    this.$documentBodySize = 'useScrollSize';
    this.$addDraggingCSSToElementToChange = addDraggingCSSToElementToChange;
    EventUtils.DragDropManager.attachDragSource(this.$elementToDrag, this);
  }, {
    add_moveAction: function MoveDragSource$add_MoveAction(value) {
      this.$1$MoveActionField = ss.delegateCombine(this.$1$MoveActionField, value);
    },
    remove_moveAction: function MoveDragSource$remove_MoveAction(value) {
      this.$1$MoveActionField = ss.delegateRemove(this.$1$MoveActionField, value);
    },
    add_endAction: function MoveDragSource$add_EndAction(value) {
      this.$1$EndActionField = ss.delegateCombine(this.$1$EndActionField, value);
    },
    remove_endAction: function MoveDragSource$remove_EndAction(value) {
      this.$1$EndActionField = ss.delegateRemove(this.$1$EndActionField, value);
    },
    get_offset: function MoveDragSource$get_Offset() {
      return this.$offset;
    },
    set_offset: function MoveDragSource$set_Offset(value) {
      this.$offset = value;
    },
    get_elementToDrag: function MoveDragSource$get_ElementToDrag() {
      return this.$elementToDrag;
    },
    get_elementToChange: function MoveDragSource$get_ElementToChange() {
      return this.$elementToChange;
    },
    get_documentBodySize: function MoveDragSource$get_DocumentBodySize() {
      return this.$documentBodySize;
    },
    set_documentBodySize: function MoveDragSource$set_DocumentBodySize(value) {
      this.$documentBodySize = value;
    },
    dispose: function MoveDragSource$Dispose() {
      EventUtils.DragDropManager.removeDragSource(this.$elementToDrag);
    },
    calculateOffset: function MoveDragSource$CalculateOffset(e) {
      var elementToChangePos = this.$elementToChange.position();
      return { x: e.pageX - tab.DoubleUtil.roundToInt(elementToChangePos.left), y: e.pageY - tab.DoubleUtil.roundToInt(elementToChangePos.top) };
    },
    startDrag: function MoveDragSource$StartDrag(e) {
      this.$offset = this.calculateOffset(e);
      this.$elementToDrag.addClass('dragging');
      if (this.$addDraggingCSSToElementToChange) {
        this.$elementToChange.addClass('dragging');
      }
      return new $spiff_MoveDragInstance(this.$elementToDrag, ss.mkdel(this, this.dragMove), ss.mkdel(this, this.dragEnd), null);
    },
    acceptsDragType: function MoveDragSource$AcceptsDragType() {
      return 1;
    },
    dragMove: function MoveDragSource$DragMove(e) {
      this.performMove(e);
      if (ss.isValue(this.$1$MoveActionField)) {
        this.$1$MoveActionField(e);
      }
    },
    performMove: function MoveDragSource$PerformMove(e) {
      var x = e.pageX - this.$offset.x;
      var y = e.pageY - this.$offset.y;
      var bodyWidth = ((this.$documentBodySize === 'useClientSize') ? document.body.clientWidth : document.body.scrollWidth);
      var bodyHeight = ((this.$documentBodySize === 'useClientSize') ? document.body.clientHeight : document.body.scrollHeight);
      x = Math.max(0, Math.min(bodyWidth - tab.DoubleUtil.roundToInt(this.$elementToChange.outerWidth()), x));
      y = Math.max(0, Math.min(bodyHeight - tab.DoubleUtil.roundToInt(this.$elementToChange.outerHeight()), y));
      tab.DomUtil.setElementPosition(this.$elementToChange, x, y, null, null);
    },
    dragEnd: function MoveDragSource$DragEnd(e) {
      this.performMove(e);
      this.$elementToDrag.removeClass('dragging');
      if (this.$addDraggingCSSToElementToChange) {
        this.$elementToChange.removeClass('dragging');
      }
      if (ss.isValue(this.$1$EndActionField)) {
        this.$1$EndActionField(e);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.MultiSelectGroupSelection
  var $spiff_MultiSelectGroupSelection = global.spiff.MultiSelectGroupSelection = ss.mkType($asm, 'spiff.MultiSelectGroupSelection', function(groupSize) {
    $spiff_GroupSelection.call(this, groupSize);
  }, {
    get_selectedCount: function MultiSelectGroupSelection$get_SelectedCount() {
      return (this.get_theAllItemIsSelected() ? this.groupSize : ss.count(Object.keys(this.get_selectedIndexes())));
    },
    handleTap: function MultiSelectGroupSelection$HandleTap(index) {
      ss.Debug.assert(index >= 0 && index < this.groupSize);
      if (this.get_theAllItemIsSelected()) {
        this.set_theAllItemIsSelected(false);
        for (var i = 0; i < this.groupSize; ++i) {
          if (i !== index) {
            this.get_selectedIndexes()[i] = true;
          }
        }
      }
      else {
        ss.Debug.assert(ss.isValue(this.get_selectedIndexes()));
        if (this.get_selectedIndexes()[index]) {
          delete this.get_selectedIndexes()[index];
        }
        else {
          this.get_selectedIndexes()[index] = true;
          this.validateAllSelectedState();
        }
      }
    },
    handleTapAll: function MultiSelectGroupSelection$HandleTapAll() {
      this.set_theAllItemIsSelected(!this.get_theAllItemIsSelected());
    },
    clone: function MultiSelectGroupSelection$Clone() {
      var clone = new $spiff_MultiSelectGroupSelection(this.groupSize);
      clone.allSelected = this.allSelected;
      clone.set_selectedIndexes(_.clone(this.get_selectedIndexes()));
      return clone;
    },
    isSelected: function MultiSelectGroupSelection$IsSelected(index) {
      ss.Debug.assert(index >= 0 && index < this.groupSize);
      return this.get_theAllItemIsSelected() || ss.isValue(this.get_selectedIndexes()) && ss.keyExists(this.get_selectedIndexes(), index);
    }
  }, {
    buildMultiSelectGroupSelection$1: function(T) {
      return function MultiSelectGroupSelection$BuildMultiSelectGroupSelection(group, isSelected) {
        ss.Debug.assert(ss.isValue(group));
        ss.Debug.assert(!ss.staticEquals(isSelected, null));
        var groupSelection = new $spiff_MultiSelectGroupSelection(group.length);
        var groupLength = group.length;
        for (var i = 0; i < groupLength; ++i) {
          if (isSelected(group[i])) {
            groupSelection.get_selectedIndexes()[i] = true;
          }
        }
        groupSelection.validateAllSelectedState();
        return groupSelection;
      };
    },
    buildMultiSelectGroupSelection: function(T) {
      return function MultiSelectGroupSelection$BuildMultiSelectGroupSelection(group, allSelected) {
        ss.Debug.assert(ss.isValue(group));
        var groupSelection = new $spiff_MultiSelectGroupSelection(group.length);
        if (allSelected) {
          groupSelection.handleTapAll();
        }
        return groupSelection;
      };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.DragDrop.NoopDropTarget
  var $spiff_NoopDropTarget = global.spiff.NoopDropTarget = ss.mkType($asm, 'spiff.NoopDropTarget', function() {
    EventUtils.DelegateDropTarget.call(this);
    this.onFeedbackType = function() {
      return 'dropfeedbackuponentry';
    };
    this.onDragOver = function(dragInstance, self) {
      return self;
    };
    this.onAcceptDrop = function(dragInstance1) {
      return $.Deferred().resolve(false);
    };
    this.onGetDropCursor = function(dragInstance2) {
      return $spiff_CustomCursor.noOp;
    };
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.OnBlurBehavior
  var $spiff_OnBlurBehavior = global.spiff.OnBlurBehavior = ss.mkEnum($asm, 'spiff.OnBlurBehavior', { reset: 0, commit: 1, none: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.OrientationHandler
  var $spiff_OrientationHandler = global.spiff.OrientationHandler = ss.mkType($asm, 'spiff.OrientationHandler', null, null, {
    add_orientationChanged: function OrientationHandler$add_OrientationChanged(value) {
      $spiff_OrientationHandler.$1$OrientationChangedField = ss.delegateCombine($spiff_OrientationHandler.$1$OrientationChangedField, value);
    },
    remove_orientationChanged: function OrientationHandler$remove_OrientationChanged(value) {
      $spiff_OrientationHandler.$1$OrientationChangedField = ss.delegateRemove($spiff_OrientationHandler.$1$OrientationChangedField, value);
    },
    get_isLandscape: function OrientationHandler$get_IsLandscape() {
      return $spiff_OrientationHandler.$currentOrientation === 90 || $spiff_OrientationHandler.$currentOrientation === -90;
    },
    get_isPortrait: function OrientationHandler$get_IsPortrait() {
      return $spiff_OrientationHandler.$currentOrientation === 0 || $spiff_OrientationHandler.$currentOrientation === 180;
    },
    get_windowInstHelper: function OrientationHandler$get_WindowInstHelper() {
      return $spiff_OrientationHandler.$windowInstHelper;
    },
    init: function OrientationHandler$Init() {
      if (!tsConfig.is_mobile) {
        $spiff_OrientationHandler.$currentOrientation = 0;
        return;
      }
      $spiff_OrientationHandler.$windowInst = $spiff_OrientationHandler.$findWindow();
      $spiff_OrientationHandler.$windowInstHelper = new tab.WindowHelper($spiff_OrientationHandler.$windowInst);
      $spiff_OrientationHandler.$currentOrientation = $spiff_OrientationHandler.$getOrientation();
      $spiff_OrientationHandler.$currentWidth = $spiff_OrientationHandler.$windowInstHelper.get_innerWidth();
      if (BrowserSupport.BrowserSupport.OrientationChange()) {
        $($spiff_OrientationHandler.$windowInst).on('orientationchange'.toString(), $spiff_OrientationHandler.$handleOrientationChange);
      }
      $($spiff_OrientationHandler.$windowInst).on('resize'.toString(), $spiff_OrientationHandler.$handleResize);
      if ('addEventListener' in window.self) {
        window.addEventListener('unload', $spiff_OrientationHandler.$onUnload, true);
      }
    },
    $onUnload: function OrientationHandler$OnUnload(e) {
      $spiff_OrientationHandler.unbindEvents();
    },
    unbindEvents: function OrientationHandler$UnbindEvents() {
      if (ss.isNullOrUndefined($spiff_OrientationHandler.$windowInst)) {
        return;
      }
      $($spiff_OrientationHandler.$windowInst).off('orientationchange'.toString(), $spiff_OrientationHandler.$handleOrientationChange);
      $($spiff_OrientationHandler.$windowInst).off('resize'.toString(), $spiff_OrientationHandler.$handleResize);
    },
    $findWindow: function OrientationHandler$FindWindow() {
      var win = tab.WindowHelper.get_windowSelf();
      if (tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage()) {
        try {
          while (ss.isValue(win.parent) && !ss.referenceEquals(win.parent, win)) {
            var parentWindow = win.parent;
            var parentHelper = new tab.WindowHelper(parentWindow);
            if (ss.isNullOrUndefined(parentHelper.get_outerWidth())) {
              break;
            }
            win = parentWindow;
          }
        }
        catch ($t1) {
        }
      }
      return win;
    },
    $handleOrientationChange: function OrientationHandler$HandleOrientationChange(e) {
      $spiff_OrientationHandler.$startTime = new Date();
      $spiff_OrientationHandler.$handleDelayedOrientationChange();
    },
    $handleDelayedOrientationChange: function OrientationHandler$HandleDelayedOrientationChange() {
      var now = new Date();
      if (now - $spiff_OrientationHandler.$startTime >= $spiff_OrientationHandler.$waitTimeMax || $spiff_OrientationHandler.$newWidthIsSet || $spiff_OrientationHandler.$isWidthChanged() || $spiff_OrientationHandler.$isOrientationChanged()) {
        $spiff_OrientationHandler.$updateWidth();
        $spiff_OrientationHandler.$finishOrientationChange();
      }
      else {
        $spiff_OrientationHandler.$clearTimeout();
        $spiff_OrientationHandler.$timerId = window.setTimeout($spiff_OrientationHandler.$handleDelayedOrientationChange, $spiff_OrientationHandler.$waitTimePartition);
      }
    },
    $handleResize: function OrientationHandler$HandleResize(e) {
      if ($spiff_OrientationHandler.$newWidthIsSet || $spiff_OrientationHandler.$isWidthChanged()) {
        $spiff_OrientationHandler.$updateWidth();
        $spiff_OrientationHandler.$finishOrientationChange();
      }
    },
    $finishOrientationChange: function OrientationHandler$FinishOrientationChange() {
      $spiff_OrientationHandler.$clearTimeout();
      if ($spiff_OrientationHandler.$isOrientationChanged()) {
        $spiff_OrientationHandler.$currentOrientation = $spiff_OrientationHandler.$getOrientation();
        $spiff_OrientationHandler.$newWidthIsSet = false;
        if (ss.isValue($spiff_OrientationHandler.$1$OrientationChangedField)) {
          $spiff_OrientationHandler.$1$OrientationChangedField();
        }
      }
    },
    $isWidthChanged: function OrientationHandler$IsWidthChanged() {
      var newWidth = $spiff_OrientationHandler.$windowInstHelper.get_innerWidth();
      if ($spiff_OrientationHandler.$currentWidth !== newWidth) {
        return true;
      }
      return false;
    },
    $isOrientationChanged: function OrientationHandler$IsOrientationChanged() {
      var newOrientation = $spiff_OrientationHandler.$getOrientation();
      if ($spiff_OrientationHandler.$currentOrientation !== newOrientation) {
        return true;
      }
      return false;
    },
    $updateWidth: function OrientationHandler$UpdateWidth() {
      $spiff_OrientationHandler.$currentWidth = $spiff_OrientationHandler.$windowInstHelper.get_innerWidth();
      $spiff_OrientationHandler.$newWidthIsSet = true;
    },
    $getOrientation: function OrientationHandler$GetOrientation() {
      var orientation;
      if (!BrowserSupport.BrowserSupport.IsAndroid()) {
        orientation = $spiff_OrientationHandler.$getWindowOrientation();
        if (ss.isValue(orientation)) {
          return ss.unbox(orientation);
        }
      }
      orientation = (($spiff_OrientationHandler.$windowInstHelper.get_innerWidth() < $spiff_OrientationHandler.$windowInstHelper.get_innerHeight()) ? 0 : 90);
      return ss.unbox(orientation);
    },
    $getWindowOrientation: function OrientationHandler$GetWindowOrientation() {
      try {
        return $spiff_OrientationHandler.$windowInst.orientation;
      }
      catch ($t1) {
      }
      return null;
    },
    $clearTimeout: function OrientationHandler$ClearTimeout() {
      $spiff_OrientationHandler.$timerId = tab.MiscUtil.clearTimeout($spiff_OrientationHandler.$timerId);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.PagableListComponent<TPagableListProps, TListItemData>
  var $spiff_PagableListComponent$2 = global.spiff.PagableListComponent$2 = ss.mkType($asm, 'spiff.PagableListComponent$2', function(TPagableListProps, TListItemData) {
    var $type = ss.registerGenericClassInstance($spiff_PagableListComponent$2, [TPagableListProps, TListItemData], function(props) {
      React.Component.call(this, props);
    }, {
      render: function PagableListComponent$Render() {
        var items = _.map(this.props.items, ss.mkdel(this, function(item, index) {
          var spec = this.getEventHandleSpecForItem(item);
          var classes = ['tabListItem'];
          if (ss.imod(index, 2) === 1) {
            classes.push('tabListItemAlternate');
          }
          var htmlProps = { className: classes.join(' '), key: this.getUniqueKey(item.data) };
          if (ss.isNullOrUndefined(spec)) {
            return $spiff_DOMElements.div(htmlProps, this.buildItem(item.data));
          }
          else {
            return EventUtils.EventForwarder.div(spec, htmlProps, this.buildItem(item.data));
          }
        }));
        var $t1 = new $spiff_ScrollingProps();
        $t1.scrollY = true;
        $t1.scrollbars = true;
        $t1.onScrollStop = ss.mkdel(this, this.onScrollStop);
        $t1.alwaysShowScrollbarsIfScrollable = this.shouldScrollbarAlwaysBeShown();
        $t1.startingY = this.props.startingY;
        var scrollingProps = $t1;
        var pagableList = $spiff_ScrollingComponent.createScroller(scrollingProps, items);
        return $spiff_DOMElements.div({ className: 'tabPagableList' }, pagableList);
      },
      buildItem: null,
      getUniqueKey: null,
      onScrollStop: null,
      getEventHandleSpecForItem: function PagableListComponent$GetEventHandleSpecForItem(itemProps) {
        return null;
      },
      shouldScrollbarAlwaysBeShown: function PagableListComponent$ShouldScrollbarAlwaysBeShown() {
        return false;
      }
    }, null, function() {
      return React.Component;
    });
    return $type;
  });
  ss.initGenericClass($spiff_PagableListComponent$2, 2);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.PopupListView
  var $spiff_PopupListView = global.spiff.PopupListView = ss.mkType($asm, 'spiff.PopupListView', function(viewModel) {
    $spiff_ListView.call(this, viewModel, viewModel.get_listItemCreator());
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.PopupListViewModel
  var $spiff_PopupListViewModel = global.spiff.PopupListViewModel = ss.mkType($asm, 'spiff.PopupListViewModel', function(collection, listItemCreator, selectionType) {
    this.$listItemCreator = null;
    $spiff_ListViewModel.call(this, collection, selectionType);
    this.$listItemCreator = listItemCreator;
  }, {
    get_viewType: function PopupListViewModel$get_ViewType() {
      return $spiff_PopupListView;
    },
    get_viewModel: function PopupListViewModel$get_ViewModel() {
      return this;
    },
    get_listItemCreator: function PopupListViewModel$get_ListItemCreator() {
      return this.$listItemCreator;
    },
    disposeViewModel: function PopupListViewModel$DisposeViewModel() {
      this.dispose();
    },
    updateUberPopupViewModel: function PopupListViewModel$UpdateUberPopupViewModel(vm) {
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.PureRender
  var $spiff_PureRender = global.spiff.PureRender = ss.mkType($asm, 'spiff.PureRender', null, null, {
    mixIn: function PureRender$MixIn(c) {
      var shouldUpdate = function(props, state) {
        return $spiff_PureRender.$shouldUpdate(c, props, state);
      };
      c['shouldComponentUpdate'] = shouldUpdate;
    },
    $shouldUpdate: function PureRender$ShouldUpdate(c, newProps, newState) {
      var notEqual = !tab.MiscUtil.shallowEquals(c.props, newProps) || !tab.MiscUtil.shallowEquals(c.state, newState);
      if (!notEqual) {
        tab.Log.get(c).debug('Skipping render, shallow equals', []);
      }
      return notEqual;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.PureRenderComponent<TProps, TState>
  var $spiff_PureRenderComponent = global.spiff.PureRenderComponent = ss.mkType($asm, 'spiff.PureRenderComponent', function(props) {
    React.Component.call(this, props);
  }, {
    render: null,
    shouldComponentUpdate: function PureRenderComponent$ShouldComponentUpdate(newProps, newState) {
      return $spiff_PureRender.$shouldUpdate(this, newProps, newState);
    }
  }, {
    $ctor1: function(props, context) {
      React.Component.call(this, props, context);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ReactExtensions.ReactComponentExtensions
  var $spiff_ReactComponentExtensions = global.spiff.ReactComponentExtensions = ss.mkType($asm, 'spiff.ReactComponentExtensions', null, null, {
    generateUniqueKeys: function(T) {
      return function ReactComponentExtensions$GenerateUniqueKeys(items, reservedKeys) {
        var keyLookup = {};
        for (var i = 0; i < items.length; ++i) {
          keyLookup[items[i].toString()] = 0;
        }
        for (var i1 = 0; i1 < reservedKeys.length; ++i1) {
          keyLookup[reservedKeys[i1]] = 1;
        }
        return _.map(items, function(item) {
          var label = item.toString();
          var count = ss.unbox(ss.cast(keyLookup[label], ss.Int32));
          if (count === 0) {
            keyLookup[label] = 1;
            return label;
          }
          var key = null;
          do {
            key = [label, '_', ++count].join('');
          } while (ss.isValue(keyLookup[key]));
          keyLookup[label] = count;
          keyLookup[key] = 1;
          return key;
        });
      };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ReactElement
  var $spiff_ReactElement = global.spiff.ReactElement = ss.mkType($asm, 'spiff.ReactElement', null, null, {
    div$1: function ReactElement$Div(className, children) {
      return $spiff_DOMElements.div.apply(null, [{ className: className }].concat(children));
    },
    div: function ReactElement$Div(classNames, children) {
      var className = (ss.isValue(classNames) ? classNames.join(' ') : null);
      return $spiff_DOMElements.div.apply(null, [{ className: className }].concat(children));
    },
    span$1: function ReactElement$Span(className, children) {
      return $spiff_DOMElements.span.apply(null, [{ className: className }].concat(children));
    },
    span: function ReactElement$Span(classNames, children) {
      var className = (ss.isValue(classNames) ? classNames.join(' ') : null);
      return $spiff_DOMElements.span.apply(null, [{ className: className }].concat(children));
    },
    br: function ReactElement$Br(className) {
      return $spiff_DOMElements.br({ className: className });
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ReactHostView<TViewModel, TComponent, TProps>
  var $spiff_ReactHostView$3 = global.spiff.ReactHostView$3 = ss.mkType($asm, 'spiff.ReactHostView$3', function(TViewModel, TComponent, TProps) {
    var $type = ss.registerGenericClassInstance($spiff_ReactHostView$3, [TViewModel, TComponent, TProps], function(viewModel) {
      this.$viewModel = ss.getDefaultValue(TViewModel);
      this.$1$RootElementField = null;
      this.$1$ElementField = null;
      this.$set_RootElement($($type.$htmlTemplate));
      this.set_$element(this.get_rootElement().get(0));
      this.$viewModel = viewModel;
      this.$viewModel.add_disposed(ss.mkdel(this, this.$onViewModelDispose));
      this.$viewModel.add_propsUpdated(ss.mkdel(this, this.$onPropsUpdated));
    }, {
      get_viewModel: function ReactHostView$get_ViewModel() {
        return this.$viewModel;
      },
      get_rootElement: function ReactHostView$get_RootElement() {
        return this.$1$RootElementField;
      },
      $set_RootElement: function ReactHostView$set_RootElement(value) {
        this.$1$RootElementField = value;
      },
      get_$element: function ReactHostView$get_Element() {
        return this.$1$ElementField;
      },
      set_$element: function ReactHostView$set_Element(value) {
        this.$1$ElementField = value;
      },
      addToDom: function ReactHostView$AddToDom(parent) {
        parent.append(this.get_$element());
        this.$render(this.$viewModel.get_props());
      },
      onAddedToDom: function ReactHostView$OnAddedToDom() {
      },
      $onPropsUpdated: function ReactHostView$OnPropsUpdated() {
        this.$render(this.$viewModel.get_props());
      },
      $render: function ReactHostView$Render(props) {
        ReactDOM.render(React.createElement(TComponent, props), this.get_$element());
      },
      dispose: function ReactHostView$Dispose() {
        tab.Log.get(this).debug('Dispose', []);
        ReactDOM.unmountComponentAtNode(this.get_$element());
        this.get_rootElement().remove();
        this.$viewModel.remove_propsUpdated(ss.mkdel(this, this.$onPropsUpdated));
        this.$viewModel.remove_disposed(ss.mkdel(this, this.$onViewModelDispose));
      },
      $onViewModelDispose: function ReactHostView$OnViewModelDispose(vm) {
        this.dispose();
      },
      addClass: function ReactHostView$AddClass(className) {
        this.get_rootElement().addClass(className);
      }
    }, null, null, function() {
      return [ss.makeGenericType(tab.IView$1, [TViewModel]), ss.IDisposable, tab.IAppendableView];
    });
    $type.$htmlTemplate = "<div class='tab-ReactView'></div>";
    tab.ObjectRegistry.registerType($type, $type).call(null);
    return $type;
  });
  ss.initGenericClass($spiff_ReactHostView$3, 3);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ReactRefs
  var $spiff_ReactRefs = global.spiff.ReactRefs = ss.mkType($asm, 'spiff.ReactRefs', null, null, {
    attachDragSource: function ReactRefs$AttachDragSource(sourceFactory) {
      var mountedElement = null;
      return function(e) {
        if (ss.isValue(e)) {
          mountedElement = ReactDOM.findDOMNode(e);
          EventUtils.DragDropManager.attachDragSource($(mountedElement), sourceFactory());
        }
        else {
          EventUtils.DragDropManager.removeDragSource($(mountedElement));
        }
      };
    },
    attachDropTarget: function ReactRefs$AttachDropTarget(targetFactory) {
      var mountedElement = null;
      return function(e) {
        if (ss.isValue(e)) {
          mountedElement = ReactDOM.findDOMNode(e);
          EventUtils.DragDropManager.attachDropTarget($(mountedElement), targetFactory());
        }
        else {
          EventUtils.DragDropManager.detachDropTarget($(mountedElement));
        }
      };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ReactSpiffAdapter<TW, TP, TS>
  var $spiff_ReactSpiffAdapter$3 = global.spiff.ReactSpiffAdapter$3 = ss.mkType($asm, 'spiff.ReactSpiffAdapter$3', function(TW, TP, TS) {
    var $type = ss.registerGenericClassInstance($spiff_ReactSpiffAdapter$3, [TW, TP, TS], function(widget, props, context) {
      this.$3$WidgetField = null;
      React.Component.call(this, props, context);
      this.set_widget(widget);
      this.get_widget().add_propertyChanged(ss.mkdel(this, this.handleWidgetPropertyChanged));
    }, {
      get_widget: function ReactSpiffAdapter$get_Widget() {
        return this.$3$WidgetField;
      },
      set_widget: function ReactSpiffAdapter$set_Widget(value) {
        this.$3$WidgetField = value;
      },
      render: function ReactSpiffAdapter$Render() {
        return $spiff_DOMElements.div(null, '');
      },
      componentDidMount: function ReactSpiffAdapter$ComponentDidMount() {
        var domNode = $(ReactDOM.findDOMNode(this));
        this.get_widget().addToDom(domNode);
      },
      componentWillUnmount: function ReactSpiffAdapter$ComponentWillUnmount() {
        this.get_widget().remove_propertyChanged(ss.mkdel(this, this.handleWidgetPropertyChanged));
        this.get_widget().dispose();
      },
      componentWillReceiveProps: function ReactSpiffAdapter$ComponentWillReceiveProps(nextProps) {
        this.updateWidgetState(nextProps);
      },
      handleWidgetPropertyChanged: null,
      updateWidgetState: null
    }, null, function() {
      return React.Component;
    });
    return $type;
  });
  ss.initGenericClass($spiff_ReactSpiffAdapter$3, 3);
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ResizeDragSource
  var $spiff_ResizeDragSource = global.spiff.ResizeDragSource = ss.mkType($asm, 'spiff.ResizeDragSource', function(elementToDrag, elementToChange, location) {
    this.$location = 'bottomRight';
    $spiff_MoveDragSource.call(this, elementToDrag, elementToChange, false);
    this.$location = location;
  }, {
    calculateOffset: function ResizeDragSource$CalculateOffset(e) {
      var elementToChangePos = tab.PointUtil.fromPosition(this.get_elementToChange().position());
      var offset = { x: 0, y: 0 };
      switch (this.$location) {
        case 'bottomRight': {
          offset.x = elementToChangePos.x + tab.DoubleUtil.roundToInt(this.get_elementToChange().width()) - e.pageX;
          offset.y = elementToChangePos.y + tab.DoubleUtil.roundToInt(this.get_elementToChange().height()) - e.pageY;
          break;
        }
        case 'topLeft': {
          offset.x = e.pageX - elementToChangePos.x;
          offset.y = e.pageY - elementToChangePos.y;
          break;
        }
        case 'left': {
          offset.x = e.pageX - elementToChangePos.x;
          break;
        }
        case 'right': {
          offset.x = elementToChangePos.x + tab.DoubleUtil.roundToInt(this.get_elementToChange().width()) - e.pageX;
          break;
        }
        case 'top': {
          offset.y = e.pageY - elementToChangePos.y;
          break;
        }
        case 'bottom': {
          offset.y = elementToChangePos.y + tab.DoubleUtil.roundToInt(this.get_elementToChange().height()) - e.pageY;
          break;
        }
      }
      return offset;
    },
    performMove: function ResizeDragSource$PerformMove(e) {
      var elementToChangePos = tab.PointUtil.fromPosition(this.get_elementToChange().position());
      var width = tab.DoubleUtil.roundToInt(this.get_elementToChange().width());
      var height = tab.DoubleUtil.roundToInt(this.get_elementToChange().height());
      var bodyWidth = ((this.get_documentBodySize() === 'useClientSize') ? tab.DomUtil.get_documentBody().clientWidth : tab.DomUtil.get_documentBody().scrollWidth);
      var bodyHeight = ((this.get_documentBodySize() === 'useClientSize') ? tab.DomUtil.get_documentBody().clientHeight : tab.DomUtil.get_documentBody().scrollHeight);
      switch (this.$location) {
        case 'bottomRight': {
          this.get_elementToChange().width(Math.min(e.pageX + this.get_offset().x, bodyWidth) - elementToChangePos.x);
          this.get_elementToChange().height(Math.min(e.pageY + this.get_offset().y, bodyHeight) - elementToChangePos.y);
          break;
        }
        case 'topLeft': {
          this.get_elementToChange().width(width + (elementToChangePos.x - Math.max(e.pageX - this.get_offset().x, 0)));
          this.get_elementToChange().height(height + (elementToChangePos.y - Math.max(e.pageY - this.get_offset().y, 0)));
          tab.DomUtil.setElementPosition(this.get_elementToChange(), elementToChangePos.x + width - tab.DoubleUtil.roundToInt(this.get_elementToChange().width()), elementToChangePos.y + height - tab.DoubleUtil.roundToInt(this.get_elementToChange().height()), null, null);
          break;
        }
        case 'left': {
          this.get_elementToChange().width(width + (elementToChangePos.x - Math.max(e.pageX - this.get_offset().x, 0)));
          tab.DomUtil.setElementPosition(this.get_elementToChange(), elementToChangePos.x + width - tab.DoubleUtil.roundToInt(this.get_elementToChange().width()), elementToChangePos.y, null, null);
          break;
        }
        case 'right': {
          this.get_elementToChange().width(Math.min(e.pageX + this.get_offset().x, bodyWidth) - elementToChangePos.x);
          break;
        }
        case 'top': {
          this.get_elementToChange().height(height + (elementToChangePos.y - Math.max(e.pageY - this.get_offset().y, 0)));
          tab.DomUtil.setElementPosition(this.get_elementToChange(), elementToChangePos.x, elementToChangePos.y + height - tab.DoubleUtil.roundToInt(this.get_elementToChange().height()), null, null);
          break;
        }
        case 'bottom': {
          this.get_elementToChange().height(Math.min(e.pageY + this.get_offset().y, bodyHeight) - elementToChangePos.y);
          break;
        }
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ScrollableView
  var $spiff_ScrollableView = global.spiff.ScrollableView = ss.mkType($asm, 'spiff.ScrollableView', function(viewModel, scrollableTemplate) {
    ss.makeGenericType($spiff_BaseView$1, [$spiff_ScrollableViewModel]).call(this, viewModel, scrollableTemplate);
  }, { get_scrollbarBuffer: null, get_scrollerX: null, get_scrollerY: null, scrollTo: null, scrollToElement: null }, {
    createScrollableView: function ScrollableView$CreateScrollableView(viewModel) {
      if (viewModel.get_hasCustomIndicator()) {
        return new $spiff_CustomIScrollView(viewModel);
      }
      else {
        return new $spiff_DefaultIScrollView(viewModel);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ScrollableViewModel
  var $spiff_ScrollableViewModel = global.spiff.ScrollableViewModel = ss.mkType($asm, 'spiff.ScrollableViewModel', function() {
    this.$content = null;
    this.$options = null;
    this.$2$ContentChangedField = null;
    this.$2$RefreshField = null;
    this.isCenteredVertically = false;
    $spiff_BaseViewModel.call(this);
    this.$createOptions(true);
  }, {
    add_contentChanged: function ScrollableViewModel$add_ContentChanged(value) {
      this.$2$ContentChangedField = ss.delegateCombine(this.$2$ContentChangedField, value);
    },
    remove_contentChanged: function ScrollableViewModel$remove_ContentChanged(value) {
      this.$2$ContentChangedField = ss.delegateRemove(this.$2$ContentChangedField, value);
    },
    add_refresh: function ScrollableViewModel$add_Refresh(value) {
      this.$2$RefreshField = ss.delegateCombine(this.$2$RefreshField, value);
    },
    remove_refresh: function ScrollableViewModel$remove_Refresh(value) {
      this.$2$RefreshField = ss.delegateRemove(this.$2$RefreshField, value);
    },
    get_content: function ScrollableViewModel$get_Content() {
      return this.$content;
    },
    set_content: function ScrollableViewModel$set_Content(value) {
      this.$content = value;
      this.raiseActionEvent(this.$2$ContentChangedField);
    },
    get_options: function ScrollableViewModel$get_Options() {
      return this.$options;
    },
    get_scrollX: function ScrollableViewModel$get_ScrollX() {
      return (ss.isValue(this.$options.scrollX) ? this.$options.scrollX : false);
    },
    set_scrollX: function ScrollableViewModel$set_ScrollX(value) {
      this.$options.scrollX = value;
      if (this.get_hasCustomIndicator()) {
        this.get_indicatorOptions().listenX = value;
      }
    },
    get_scrollY: function ScrollableViewModel$get_ScrollY() {
      return (ss.isValue(this.$options.scrollY) ? this.$options.scrollY : false);
    },
    set_scrollY: function ScrollableViewModel$set_ScrollY(value) {
      this.$options.scrollY = value;
      if (this.get_hasCustomIndicator()) {
        this.get_indicatorOptions().listenY = value;
      }
    },
    get_hasScrollBars: function ScrollableViewModel$get_HasScrollBars() {
      return this.get_scrollY() || this.get_scrollX();
    },
    get_hasCustomIndicator: function ScrollableViewModel$get_HasCustomIndicator() {
      return ss.isValue(this.$options.indicators);
    },
    set_hasCustomIndicator: function ScrollableViewModel$set_HasCustomIndicator(value) {
      if (value) {
        if (ss.isNullOrUndefined(this.$options.indicators)) {
          this.get_options().indicators = new Object();
          this.get_options().indicators.listenX = this.get_scrollX();
          this.get_options().indicators.listenY = this.get_scrollY();
        }
      }
      else {
        this.get_options().indicators = null;
      }
    },
    get_indicatorOptions: function ScrollableViewModel$get_IndicatorOptions() {
      return this.get_options().indicators;
    },
    $createOptions: function ScrollableViewModel$CreateOptions(useCustomScrollbars) {
      this.$options = {};
      this.set_hasCustomIndicator(useCustomScrollbars);
      if (tsConfig.is_mobile) {
        this.$setDefaultMobileOptions();
      }
      else {
        this.$setDefaultWebOptions();
      }
    },
    $setDefaultWebOptions: function ScrollableViewModel$SetDefaultWebOptions() {
      if (!this.get_hasCustomIndicator()) {
        this.$options.scrollbars = 'custom';
        this.$options.interactiveScrollbars = true;
      }
      this.$options.mouseWheel = true;
      this.$options.disableMouse = true;
    },
    $setDefaultMobileOptions: function ScrollableViewModel$SetDefaultMobileOptions() {
      if (!this.get_hasCustomIndicator()) {
        this.$options.scrollbars = 'custom';
      }
    },
    triggerRefresh: function ScrollableViewModel$TriggerRefresh() {
      this.raiseActionEvent(this.$2$RefreshField);
    }
  }, {
    $ctor1: function(useCustomScrollbars) {
      this.$content = null;
      this.$options = null;
      this.$2$ContentChangedField = null;
      this.$2$RefreshField = null;
      this.isCenteredVertically = false;
      $spiff_BaseViewModel.call(this);
      this.$createOptions(useCustomScrollbars);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ScrollerType
  var $spiff_ScrollerType = global.spiff.ScrollerType = ss.mkEnum($asm, 'spiff.ScrollerType', { iScroll: 0 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ScrollingComponent
  var $spiff_ScrollingComponent = global.spiff.ScrollingComponent = ss.mkType($asm, 'spiff.ScrollingComponent', function(props, context) {
    React.Component.call(this, props, context);
  }, { get_scrollingControl: null, componentDidMount: null, componentWillUnmount: null, render: null }, {
    $chooseScrollerType: function ScrollingComponent$ChooseScrollerType(props) {
      var result = props.forceScrollerType;
      if (ss.isNullOrUndefined(result)) {
        result = 0;
      }
      return ss.unbox(result);
    },
    createScroller: function ScrollingComponent$CreateScroller(props, children) {
      var scrollerType = $spiff_ScrollingComponent.$chooseScrollerType(props);
      var scrollerComponentClass = $spiff_ScrollingComponent.$classesDictionary[scrollerType];
      if (children.length === 1) {
        return React.createElement(scrollerComponentClass, props, children[0]);
      }
      return React.createElement(scrollerComponentClass, props, children);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ScrollingProps
  var $spiff_ScrollingProps = global.spiff.ScrollingProps = ss.mkType($asm, 'spiff.ScrollingProps', function() {
    this.extraCssClass = null;
    this.customStyle = null;
    this.forceScrollerType = null;
    this.scrollX = false;
    this.scrollY = false;
    this.scrollbars = true;
    this.mouseWheel = true;
    this.alwaysShowScrollbarsIfScrollable = false;
    this.onScrollStop = null;
    this.onScroll = null;
    this.startingY = null;
    this.augmentedScrollX = true;
    this.augmentedScrollY = true;
    this.onScrollingControlRefUpdated = null;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ScrollTo
  var $spiff_ScrollTo = global.spiff.ScrollTo = ss.mkType($asm, 'spiff.ScrollTo', null, null, {
    elementInContainer: function ScrollTo$ElementInContainer(elementToBeVisisble, container) {
      if (ss.isValue(elementToBeVisisble) && ss.isValue(container)) {
        window.setTimeout(function() {
          var scrollingContainer = $(container);
          var selectedNode = $(elementToBeVisisble);
          if (selectedNode.parents().find(container).length > 0) {
            var currentNode = selectedNode;
            var top = 0;
            var left = 0;
            while (scrollingContainer.find(currentNode[0]).length > 0) {
              var currentPosition = currentNode.position();
              top += currentPosition.top;
              left += currentPosition.left;
              currentNode = currentNode.offsetParent();
            }
            var needsScroll = top < 0 || left < 0 || top + selectedNode.height() > scrollingContainer.height() || left + selectedNode.width() > scrollingContainer.width();
            if (needsScroll) {
              elementToBeVisisble.scrollIntoView();
            }
          }
        }, 0);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.SelectableButtonGroupComponent
  var $spiff_SelectableButtonGroupComponent = global.spiff.SelectableButtonGroupComponent = ss.mkType($asm, 'spiff.SelectableButtonGroupComponent', function(props) {
    React.Component.call(this, props);
    ss.Debug.assert(ss.isValue(props.selection), 'Instantiator must provide a selection.');
    this.state = this.$buildState(this.props.selection);
  }, {
    get_$selection: function SelectableButtonGroupComponent$get_Selection() {
      return this.state.currentSelection;
    },
    get_$applyCancelEnabled: function SelectableButtonGroupComponent$get_ApplyCancelEnabled() {
      return this.props.showApplyAndCancelButtons && !ss.referenceEquals(this.state.currentSelection, this.state.currentlyAppliedSelection);
    },
    $buildState: function SelectableButtonGroupComponent$BuildState(selection) {
      var newSelection = selection;
      if (ss.isValue(newSelection)) {
        newSelection = newSelection.clone();
      }
      return { currentlyAppliedSelection: selection, currentSelection: newSelection };
    },
    componentWillReceiveProps: function SelectableButtonGroupComponent$ComponentWillReceiveProps(nextProps) {
      if (!ss.referenceEquals(nextProps.selection, this.state.currentlyAppliedSelection)) {
        this.setState(this.$buildState(nextProps.selection));
      }
    },
    $applyCurrentSelection: function SelectableButtonGroupComponent$ApplyCurrentSelection() {
      if (ss.referenceEquals(this.get_$selection(), this.state.currentlyAppliedSelection)) {
        return;
      }
      this.setState(this.$buildState(this.get_$selection()));
      if (!ss.staticEquals(this.props.onSelectionChanged, null)) {
        this.props.onSelectionChanged(this.get_$selection());
      }
    },
    $revertCurrentSelection: function SelectableButtonGroupComponent$RevertCurrentSelection() {
      this.setState(this.$buildState(this.state.currentlyAppliedSelection));
    },
    render: function SelectableButtonGroupComponent$Render() {
      var renderAllOption = this.props.allOption && this.get_$selection().groupSize > 0;
      var buttonKeys;
      buttonKeys = $spiff_ReactComponentExtensions.generateUniqueKeys(String).call(null, _.map(this.props.items, function(item) {
        return item.label;
      }), [(renderAllOption ? $spiff_SelectableButtonGroupComponent.$allKey : null)]);
      var className = (!ss.isNullOrEmptyString(this.props.className) ? ($spiff_UnificationClassNames.vScrollable + ' ' + this.props.className) : $spiff_UnificationClassNames.vScrollable);
      if (this.props.showApplyAndCancelButtons) {
        className += ' ' + $spiff_UnificationClassNames.applyCancel;
      }
      var buttonGroupClassName = $spiff_UnificationClassNames.selectableButtonGroup + (this.props.hasAnyIcons ? ' hasIcons' : '');
      return $spiff_DOMElements.div({ className: buttonGroupClassName }, $spiff_DOMElements.div({ className: className, role: 'listbox' }, (renderAllOption ? ss.mkdel(this, function() {
        return React.createElement($spiff_$SelectableButtonComponent, { border: this.props.borders, label: this.props.allItem.label, tooltip: this.props.allItem.tooltip, buttonStyle: this.props.buttonStyle, labelStyle: this.props.labelStyle, isSelected: this.get_$selection().get_theAllItemIsSelected(), isButtonTextMarkedAsExcluded: false, onTap: ss.mkdel(this, function(e) {
          this.$onAllButtonTap();
        }), key: $spiff_SelectableButtonGroupComponent.$allKey, getCustomContentBefore: this.props.allItem.getCustomContentBefore, getCustomContentAfter: this.props.allItem.getCustomContentAfter, additionalRoles: ['option'] });
      })() : null), _.map(this.props.items, ss.mkdel(this, function(item1, index) {
        return React.createElement($spiff_$SelectableButtonComponent, { border: this.props.borders, disabled: item1.disabled, label: item1.label, tooltip: item1.tooltip, buttonStyle: this.props.buttonStyle, labelStyle: this.props.labelStyle, isSelected: this.get_$selection().isSelected(index), isButtonTextMarkedAsExcluded: this.props.isSelectionExclusive, onTap: ss.mkdel(this, function(e1) {
          this.$onButtonTap(index);
        }), onDoubleTap: ss.mkdel(this, function(e2) {
          this.$onButtonDoubleTap(e2, item1.onDoubleClick);
        }), key: buttonKeys[index], testId: item1.testId, getCustomContentBefore: item1.getCustomContentBefore, getCustomContentAfter: item1.getCustomContentAfter, tabIndex: (item1.isTabbable ? 0 : null), additionalRoles: ['option'] });
      }))), (this.props.showApplyAndCancelButtons ? ss.mkdel(this, function() {
        return $spiff_DOMElements.div({ className: $spiff_UnificationClassNames.applyCancelPanel }, React.createElement($spiff_ButtonComponent, { label: this.props.applyButtonLabel, customClassName: $spiff_UnificationClassNames.apply$1, border: false, onTap: ss.mkdel(this, function(e3) {
          this.$applyCurrentSelection();
        }), disabled: !this.get_$applyCancelEnabled() }), React.createElement($spiff_ButtonComponent, { label: this.props.cancelButtonLabel, customClassName: $spiff_UnificationClassNames.cancel, border: false, onTap: ss.mkdel(this, function(e4) {
          this.$revertCurrentSelection();
        }), disabled: !this.get_$applyCancelEnabled() }));
      })() : null));
    },
    $onAllButtonTap: function SelectableButtonGroupComponent$OnAllButtonTap() {
      this.get_$selection().handleTapAll();
      this.$notifySelectionChanged();
    },
    $onButtonTap: function SelectableButtonGroupComponent$OnButtonTap(index) {
      this.get_$selection().handleTap(index);
      this.$notifySelectionChanged();
    },
    $onButtonDoubleTap: function SelectableButtonGroupComponent$OnButtonDoubleTap(e, onDoubleClick) {
      if (!ss.staticEquals(onDoubleClick, null)) {
        onDoubleClick(e);
      }
    },
    $notifySelectionChanged: function SelectableButtonGroupComponent$NotifySelectionChanged() {
      if (this.props.showApplyAndCancelButtons) {
        this.setState(this.state);
      }
      else {
        this.$applyCurrentSelection();
      }
    }
  }, {
    getDesiredHeight: function SelectableButtonGroupComponent$GetDesiredHeight(parentEl) {
      return $('.tab-vScrollable', parentEl).get(0).scrollHeight;
    },
    getMinimumWidth: function SelectableButtonGroupComponent$GetMinimumWidth(parentEl) {
      return $('.tab-vScrollable', parentEl).get(0).scrollWidth;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.SelectableButtonGroupItem
  var $spiff_SelectableButtonGroupItem = global.spiff.SelectableButtonGroupItem = ss.mkType($asm, 'spiff.SelectableButtonGroupItem', function() {
    this.disabled = false;
    this.isTabbable = false;
    this.label = null;
    this.tooltip = null;
    this.getCustomContentBefore = null;
    this.getCustomContentAfter = null;
    this.testId = null;
    this.onDoubleClick = null;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.SelectableGroup
  var $spiff_SelectableGroup = global.spiff.SelectableGroup = ss.mkType($asm, 'spiff.SelectableGroup', function() {
    this.$items = null;
    this.$selectedItems = null;
    this.$selectionType = 0;
    this.$selectedClass = 'tabSelected';
    this.$1$SelectionChangedField = null;
    this.$items = [];
    this.$selectedItems = {};
  }, {
    add_selectionChanged: function SelectableGroup$add_SelectionChanged(value) {
      this.$1$SelectionChangedField = ss.delegateCombine(this.$1$SelectionChangedField, value);
    },
    remove_selectionChanged: function SelectableGroup$remove_SelectionChanged(value) {
      this.$1$SelectionChangedField = ss.delegateRemove(this.$1$SelectionChangedField, value);
    },
    get_selectedClass: function SelectableGroup$get_SelectedClass() {
      return this.$selectedClass;
    },
    set_selectedClass: function SelectableGroup$set_SelectedClass(value) {
      this.$selectedClass = value;
    },
    get_selectionType: function SelectableGroup$get_SelectionType() {
      return this.$selectionType;
    },
    set_selectionType: function SelectableGroup$set_SelectionType(value) {
      this.$selectionType = value;
    },
    get_items: function SelectableGroup$get_Items() {
      return this.$items;
    },
    get_selectedItems: function SelectableGroup$get_SelectedItems() {
      var selectedList = [];
      var $t1 = ss.getEnumerator(Object.keys(this.$selectedItems));
      try {
        while ($t1.moveNext()) {
          var key = $t1.current();
          selectedList.push(this.$selectedItems[key]);
        }
      }
      finally {
        $t1.dispose();
      }
      return selectedList;
    },
    get_selectedItem: function SelectableGroup$get_SelectedItem() {
      if (this.get_numberOfSelectedItems() === 0) {
        return null;
      }
      var firstKey = Object.keys(this.$selectedItems)[0];
      return this.$selectedItems[firstKey];
    },
    get_numberOfSelectedItems: function SelectableGroup$get_NumberOfSelectedItems() {
      return ss.getKeyCount(this.$selectedItems);
    },
    addItem: function SelectableGroup$AddItem(item) {
      item.set_selectedClass(this.$selectedClass);
      this.$items.push(item);
      if (item.get_selected()) {
        this.$selectItemInternal(item, false, false);
      }
      this.$addItemEventHandlers(item);
    },
    containsItem: function SelectableGroup$ContainsItem(item) {
      return ss.contains(this.get_items(), item);
    },
    dispose: function SelectableGroup$Dispose() {
      ss.clearKeys(this.$selectedItems);
      this.get_items().forEach(ss.mkdel(this, this.$removeItemEventHandlers));
      ss.clear(this.get_items());
    },
    onItemDisposed: function SelectableGroup$OnItemDisposed(sender, args) {
      var item = ss.cast(sender, $spiff_ISelectable);
      this.$removeItemEventHandlers(item);
      if (this.isItemSelected$1(item)) {
        delete this.$selectedItems[item.get_selectionId()];
      }
      ss.remove(this.$items, item);
    },
    $addItemEventHandlers: function SelectableGroup$AddItemEventHandlers(item) {
      item.add_selectableDisposed(ss.mkdel(this, this.onItemDisposed));
      item.add_selectedChanging(ss.mkdel(this, this.handleSelectionChanging));
      item.add_selectedChanged(ss.mkdel(this, this.handleSelectionChanged));
    },
    $removeItemEventHandlers: function SelectableGroup$RemoveItemEventHandlers(item) {
      item.remove_selectableDisposed(ss.mkdel(this, this.onItemDisposed));
      item.remove_selectedChanging(ss.mkdel(this, this.handleSelectionChanging));
      item.remove_selectedChanged(ss.mkdel(this, this.handleSelectionChanged));
    },
    selectAll: function SelectableGroup$SelectAll() {
      this.selectItems(this.get_items(), false);
    },
    isItemSelected$1: function SelectableGroup$IsItemSelected(item) {
      return ss.isValue(item) && ss.keyExists(this.$selectedItems, item.get_selectionId());
    },
    isItemSelected: function SelectableGroup$IsItemSelected(itemSelectionId) {
      return ss.keyExists(this.$selectedItems, itemSelectionId);
    },
    selectItem: function SelectableGroup$SelectItem(item) {
      this.$selectItemInternal(item, false, true);
    },
    selectSingleItem: function SelectableGroup$SelectSingleItem(item) {
      this.$selectItemInternal(item, true, true);
    },
    $selectItemInternal: function SelectableGroup$SelectItemInternal(item, forceSingleSelection, fireChangeEvent) {
      var changed = false;
      if (forceSingleSelection || this.get_selectionType() === 0) {
        changed = this.$doClearSelection(item);
      }
      changed = this.$doSelectItem(item) || changed;
      if (fireChangeEvent && changed) {
        this.$raiseSelectionChanged();
      }
    },
    selectItems: function SelectableGroup$SelectItems(itemsToSelect, unselectOthers) {
      switch (this.get_selectionType()) {
        case 0: {
          var item = ((ss.isValue(itemsToSelect) && itemsToSelect.length > 0) ? itemsToSelect[0] : null);
          this.selectItem(item);
          break;
        }
        case 1:
        case 2: {
          var changed = false;
          if (unselectOthers) {
            changed = this.$doClearSelection(null);
          }
          if (ss.isValue(itemsToSelect)) {
            for (var i = 0, len = itemsToSelect.length; i < len; i++) {
              changed = this.$doSelectItem(itemsToSelect[i]) || changed;
            }
          }
          if (changed) {
            this.$raiseSelectionChanged();
          }
          break;
        }
      }
    },
    $doSelectItem: function SelectableGroup$DoSelectItem(item) {
      if (ss.isNullOrUndefined(item)) {
        return false;
      }
      ss.Debug.assert(ss.isValue(item.get_selectionId()), 'ISelectable requires a SelectionId');
      if (ss.isNullOrUndefined(item.get_selectionId())) {
        return false;
      }
      if (this.isItemSelected$1(item)) {
        return false;
      }
      if (!this.containsItem(item)) {
        ss.Debug.assert(false, "Can't select an item that hasn't been added to the group");
        return false;
      }
      this.$selectedItems[item.get_selectionId()] = item;
      item.set_selected(true);
      return true;
    },
    clearSelection: function SelectableGroup$ClearSelection(itemToRemainSelected) {
      if (this.$doClearSelection(itemToRemainSelected)) {
        this.$raiseSelectionChanged();
      }
    },
    $doClearSelection: function SelectableGroup$DoClearSelection(itemToRemainSelected) {
      var oldSelectedCount = ss.getKeyCount(this.$selectedItems);
      var $t1 = ss.getEnumerator(Object.keys(this.$selectedItems));
      try {
        while ($t1.moveNext()) {
          var key = $t1.current();
          if (ss.isValue(itemToRemainSelected) && ss.referenceEquals(key, itemToRemainSelected.get_selectionId())) {
            continue;
          }
          this.$doUnselectItem(this.$selectedItems[key]);
        }
      }
      finally {
        $t1.dispose();
      }
      return oldSelectedCount > 0 && ss.getKeyCount(this.$selectedItems) !== oldSelectedCount;
    },
    unselectItem: function SelectableGroup$UnselectItem(item) {
      if (!this.isItemSelected$1(item)) {
        return;
      }
      this.$doUnselectItem(item);
      this.$raiseSelectionChanged();
    },
    $doUnselectItem: function SelectableGroup$DoUnselectItem(item) {
      delete this.$selectedItems[item.get_selectionId()];
      item.set_selected(false);
    },
    handleSelectionChanging: function SelectableGroup$HandleSelectionChanging(sender, selectArgs) {
      var item = ss.cast(sender, $spiff_ISelectable);
      if (selectArgs.get_selecting()) {
        this.selectItem(item);
      }
      else if (this.get_selectionType() !== 0) {
        this.unselectItem(item);
      }
      else if (ss.referenceEquals(this.get_selectedItem(), item)) {
        selectArgs.cancel = true;
      }
    },
    handleSelectionChanged: function SelectableGroup$HandleSelectionChanged(sender, args) {
      var item = ss.cast(sender, $spiff_ISelectable);
      var isSelected = this.isItemSelected$1(item);
      if (item.get_selected() && !isSelected) {
        this.$doSelectItem(item);
      }
      else if (!item.get_selected() && isSelected) {
        this.$doUnselectItem(item);
      }
    },
    $raiseSelectionChanged: function SelectableGroup$RaiseSelectionChanged() {
      if (!ss.staticEquals(this.$1$SelectionChangedField, null)) {
        this.$1$SelectionChangedField();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.SelectionEventArgs
  var $spiff_SelectionEventArgs = global.spiff.SelectionEventArgs = ss.mkType($asm, 'spiff.SelectionEventArgs', function(selecting, shiftKey, ctrlKey) {
    this.$selecting = false;
    this.$shiftKey = false;
    this.$ctrlKey = false;
    ss.CancelEventArgs.call(this);
    this.$selecting = selecting;
    this.$shiftKey = shiftKey;
    this.$ctrlKey = ctrlKey;
  }, {
    get_selecting: function SelectionEventArgs$get_Selecting() {
      return this.$selecting;
    },
    get_shiftKey: function SelectionEventArgs$get_ShiftKey() {
      return this.$shiftKey;
    },
    get_ctrlKey: function SelectionEventArgs$get_CtrlKey() {
      return this.$ctrlKey;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.SelectionMethod
  var $spiff_SelectionMethod = global.spiff.SelectionMethod = ss.mkEnum($asm, 'spiff.SelectionMethod', { single: 0, multiGrouped: 1, multiToggle: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Events.SharedWidgetsPointerEventAdapter
  var $spiff_SharedWidgetsPointerEventAdapter = global.spiff.SharedWidgetsPointerEventAdapter = ss.mkType($asm, 'spiff.SharedWidgetsPointerEventAdapter', function() {
    this.$eventHandler = null;
    this.$prevProps = null;
    this.$eventHandler = EventUtils.TableauEventHandlerForReact.CreateEmpty();
  }, {
    didMount: function SharedWidgetsPointerEventAdapter$DidMount(domNode, props) {
      var spec = new EventUtils.EventHandleSpec();
      if (!ss.staticEquals(props.pointerClick, null)) {
        spec.tap = function(e) {
          props.pointerClick(e.reactEvent);
        };
      }
      if (!ss.staticEquals(props.pointerDown, null)) {
        spec.firstTouch = function(e1) {
          props.pointerDown(e1.reactEvent);
        };
      }
      if (!ss.staticEquals(props.pointerUp, null)) {
        spec.lastTouch = function(e2) {
          props.pointerUp(e2.reactEvent);
        };
      }
      if (!ss.staticEquals(props.pointerDoubleClick, null)) {
        spec.doubleTap = function(e3) {
          props.pointerDoubleClick(e3.reactEvent);
        };
      }
      this.$eventHandler.UpdateEventHandleSpec(domNode, spec);
      this.$prevProps = props;
    },
    didUpdate: function SharedWidgetsPointerEventAdapter$DidUpdate(domNode, props) {
      if (!ss.staticEquals(this.$prevProps.pointerClick, props.pointerClick) || !ss.staticEquals(this.$prevProps.pointerDown, props.pointerDown) || !ss.staticEquals(this.$prevProps.pointerUp, props.pointerUp) || !ss.staticEquals(this.$prevProps.pointerDoubleClick, props.pointerDoubleClick)) {
        var spec = new EventUtils.EventHandleSpec();
        if (!ss.staticEquals(props.pointerClick, null)) {
          spec.tap = function(e) {
            props.pointerClick(e.reactEvent);
          };
        }
        if (!ss.staticEquals(props.pointerDown, null)) {
          spec.firstTouch = function(e1) {
            props.pointerDown(e1.reactEvent);
          };
        }
        if (!ss.staticEquals(props.pointerUp, null)) {
          spec.lastTouch = function(e2) {
            props.pointerUp(e2.reactEvent);
          };
        }
        if (!ss.staticEquals(props.pointerDoubleClick, null)) {
          spec.doubleTap = function(e3) {
            props.pointerDoubleClick(e3.reactEvent);
          };
        }
        this.$eventHandler.Update(spec);
      }
      this.$prevProps = props;
    },
    getHtmlAttributes: function SharedWidgetsPointerEventAdapter$GetHtmlAttributes(props) {
      return this.$eventHandler.EventHandlingAttributesForReact;
    },
    willUnmount: function SharedWidgetsPointerEventAdapter$WillUnmount() {
      this.$eventHandler.dispose();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ShowMenuOptions
  var $spiff_ShowMenuOptions = global.spiff.ShowMenuOptions = ss.mkType($asm, 'spiff.ShowMenuOptions', function(relativeDom, setMinWidth) {
    this.relativeDom = null;
    this.preferUp = false;
    this.preferLeft = false;
    this.expanded = false;
    this.additionalMenuClass = null;
    this.cursorPosition = null;
    this.activatedBy = null;
    this.openedFrom = null;
    this.$1$MinWidthField = 0;
    this.relativeDom = relativeDom;
    this.set_minWidth((setMinWidth ? tab.DoubleUtil.roundToInt(relativeDom.outerWidth()) : 0));
  }, {
    get_minWidth: function ShowMenuOptions$get_MinWidth() {
      return this.$1$MinWidthField;
    },
    set_minWidth: function ShowMenuOptions$set_MinWidth(value) {
      this.$1$MinWidthField = value;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.SingleSelectGroupSelection
  var $spiff_SingleSelectGroupSelection = global.spiff.SingleSelectGroupSelection = ss.mkType($asm, 'spiff.SingleSelectGroupSelection', function(groupSize) {
    $spiff_GroupSelection.call(this, groupSize);
  }, {
    validateAllSelectedState: function SingleSelectGroupSelection$ValidateAllSelectedState() {
      if (ss.isValue(this.get_selectedIndexes()) && (ss.count(Object.keys(this.get_selectedIndexes())) === this.groupSize || ss.count(Object.keys(this.get_selectedIndexes())) === 0)) {
        {
          this.set_theAllItemIsSelected(true);
        }
      }
    },
    handleTap: function SingleSelectGroupSelection$HandleTap(index) {
      ss.Debug.assert(index >= 0 && index < this.groupSize);
      if (this.get_theAllItemIsSelected()) {
        this.set_theAllItemIsSelected(false);
      }
      ss.Debug.assert(ss.isValue(this.get_selectedIndexes()));
      if (!this.get_selectedIndexes()[index]) {
        if (ss.count(Object.keys(this.get_selectedIndexes())) > 0) {
          ss.clearKeys(this.get_selectedIndexes());
        }
        this.get_selectedIndexes()[index] = true;
      }
      this.validateAllSelectedState();
    },
    handleTapAll: function SingleSelectGroupSelection$HandleTapAll() {
      if (!this.get_theAllItemIsSelected()) {
        this.set_theAllItemIsSelected(true);
      }
    },
    clone: function SingleSelectGroupSelection$Clone() {
      var clone = new $spiff_SingleSelectGroupSelection(this.groupSize);
      clone.allSelected = this.allSelected;
      clone.set_selectedIndexes(_.clone(this.get_selectedIndexes()));
      return clone;
    },
    isSelected: function SingleSelectGroupSelection$IsSelected(index) {
      ss.Debug.assert(index >= 0 && index < this.groupSize);
      return ss.isValue(this.get_selectedIndexes()) && ss.keyExists(this.get_selectedIndexes(), index);
    },
    selectNext: function SingleSelectGroupSelection$SelectNext(increment) {
      var initialSelectedIndex = 0;
      var selectedIndex = initialSelectedIndex;
      if (this.get_selectedCount() === 1) {
        initialSelectedIndex = this.mapSelected(ss.Int32).call(this, function(i) {
          return i - 0;
        })[0];
        selectedIndex = initialSelectedIndex + increment;
      }
      if (selectedIndex >= this.groupSize) {
        if (initialSelectedIndex === this.groupSize - 1) {
          selectedIndex = 0;
        }
        else {
          selectedIndex = this.groupSize - 1;
        }
      }
      this.$setSelection(selectedIndex);
    },
    selectPrevious: function SingleSelectGroupSelection$SelectPrevious(increment) {
      var initialSelectedIndex = this.groupSize - 1;
      var selectedIndex = initialSelectedIndex;
      if (this.get_selectedCount() === 1) {
        initialSelectedIndex = this.mapSelected(ss.Int32).call(this, function(i) {
          return i - 0;
        })[0];
        selectedIndex = initialSelectedIndex - increment;
      }
      if (selectedIndex < 0) {
        if (initialSelectedIndex === 0) {
          selectedIndex = this.groupSize - 1;
        }
        else {
          selectedIndex = 0;
        }
      }
      this.$setSelection(selectedIndex);
    },
    selectFirst: function SingleSelectGroupSelection$SelectFirst() {
      this.$setSelection(0);
    },
    selectLast: function SingleSelectGroupSelection$SelectLast() {
      this.$setSelection(this.groupSize - 1);
    },
    $setSelection: function SingleSelectGroupSelection$SetSelection(index) {
      index = Math.max(0, index);
      index = Math.min(this.groupSize - 1, index);
      if (this.groupSize > 0) {
        this.allSelected = false;
        this.set_selectedIndexes({});
        this.get_selectedIndexes()[index] = true;
      }
    }
  }, {
    buildSingleSelectGroupSelection$1: function(T) {
      return function SingleSelectGroupSelection$BuildSingleSelectGroupSelection(group, isSelected) {
        ss.Debug.assert(ss.isValue(group));
        ss.Debug.assert(!ss.staticEquals(isSelected, null));
        var groupSelection = new $spiff_SingleSelectGroupSelection(group.length);
        var groupLength = group.length;
        if (groupLength === 0) {
          tab.Log.get(groupSelection).debug('Group Selection with group size = 0/. This should only happen in unit test.', []);
        }
        for (var i = 0; i < groupLength; ++i) {
          if (isSelected(group[i])) {
            groupSelection.get_selectedIndexes()[i] = true;
          }
        }
        groupSelection.validateAllSelectedState();
        ss.Debug.assert(groupSelection.get_selectedCount() === 1 || groupLength === 0 || groupSelection.get_theAllItemIsSelected() && groupSelection.get_selectedCount() === 0);
        return groupSelection;
      };
    },
    buildSingleSelectGroupSelection: function(T) {
      return function SingleSelectGroupSelection$BuildSingleSelectGroupSelection(group, allSelected) {
        ss.Debug.assert(ss.isValue(group));
        var groupSelection = new $spiff_SingleSelectGroupSelection(group.length);
        if (allSelected) {
          groupSelection.handleTapAll();
        }
        return groupSelection;
      };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.SpiffBrowserViewport
  var $spiff_SpiffBrowserViewport = global.spiff.SpiffBrowserViewport = ss.mkType($asm, 'spiff.SpiffBrowserViewport', function(dimensions, getVisibleRoomFunc) {
    this.$dimensions = null;
    this.$getVisibleRoomFunc = null;
    this.$dimensions = dimensions;
    this.$getVisibleRoomFunc = getVisibleRoomFunc;
  }, {
    get_dimensions: function SpiffBrowserViewport$get_Dimensions() {
      return this.$dimensions;
    },
    get_getVisibleRoomFunc: function SpiffBrowserViewport$get_GetVisibleRoomFunc() {
      return this.$getVisibleRoomFunc;
    },
    getVisibleRoom: function SpiffBrowserViewport$GetVisibleRoom(position) {
      if (!ss.staticEquals(this.get_getVisibleRoomFunc(), null)) {
        return this.get_getVisibleRoomFunc()(position);
      }
      var MaxInt = 2147483647;
      return { roomAbove: MaxInt, roomBelow: MaxInt, roomLeft: MaxInt, roomRight: MaxInt };
    }
  }, {
    getViewport: function SpiffBrowserViewport$GetViewport(callback) {
      if (!ss.staticEquals($spiff_SpiffBrowserViewport.getSpiffBrowserViewportFunc, null)) {
        $spiff_SpiffBrowserViewport.getSpiffBrowserViewportFunc(callback);
      }
      else {
        callback(new $spiff_SpiffBrowserViewport(null, null));
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.StatelessDropdownComponent
  var $spiff_StatelessDropdownComponent = global.spiff.StatelessDropdownComponent = ss.mkType($asm, 'spiff.StatelessDropdownComponent', function(props, context) {
    this.$boundTrackDropdownFunc = null;
    this.$dropdownElement = null;
    React.Component.call(this, props, context);
    this.$boundTrackDropdownFunc = ss.mkdel(this, function(element) {
      this.$dropdownElement = element;
    });
  }, {
    componentDidMount: function StatelessDropdownComponent$ComponentDidMount() {
      EventUtils.GlobalUIEvents.add_FirstTouch(ss.mkdel(this, this.$handleGlobalTouch));
      EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(this, this.$handleDismissTemporaryElements));
      $(window).on('resize'.toString(), ss.mkdel(this, this.$handleBrowserResize));
    },
    componentWillUnmount: function StatelessDropdownComponent$ComponentWillUnmount() {
      EventUtils.GlobalUIEvents.remove_FirstTouch(ss.mkdel(this, this.$handleGlobalTouch));
      EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(this, this.$handleDismissTemporaryElements));
      $(window).off('resize'.toString(), ss.mkdel(this, this.$handleBrowserResize));
    },
    componentDidUpdate: function StatelessDropdownComponent$ComponentDidUpdate() {
      if (this.props.isSelecting) {
        $spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, this.$positionAndSizeContents));
      }
    },
    $handleGlobalTouch: function StatelessDropdownComponent$HandleGlobalTouch(e, cancelCallback) {
      if (ss.isValue(this.$dropdownElement) && this.$dropdownElement.contains(e.target)) {
        return;
      }
      this.props.onFocusLost();
    },
    $handleDismissTemporaryElements: function StatelessDropdownComponent$HandleDismissTemporaryElements() {
      this.props.onFocusLost();
    },
    $handleBrowserResize: function StatelessDropdownComponent$HandleBrowserResize(e) {
      if (this.props.isSelecting) {
        $spiff_SpiffBrowserViewport.getViewport(ss.mkdel(this, this.$positionAndSizeContents));
      }
    },
    $positionAndSizeContents: function StatelessDropdownComponent$PositionAndSizeContents(viewport) {
      var containerElem = ReactDOM.findDOMNode(this.refs[$spiff_StatelessDropdownComponent.$selectorOuterContainerRef]);
      var relativeElem = ReactDOM.findDOMNode(this.refs[$spiff_StatelessDropdownComponent.$positioningElementRef]);
      if (ss.isNullOrUndefined(containerElem) || ss.isNullOrUndefined(relativeElem)) {
        return;
      }
      var container = $(containerElem);
      var height = this.props.getDesiredHeight(container);
      var relativeTo = $(relativeElem);
      var relativePos = tab.PointUtil.fromPosition(relativeTo.offset());
      var room = viewport.getVisibleRoom(relativePos);
      var selectorOffset = relativeTo.innerHeight();
      var actualRoomBelow = room.roomBelow - selectorOffset - $spiff_StatelessDropdownComponent.$selectorEndMargin;
      var actualRoomAbove = room.roomAbove - $spiff_StatelessDropdownComponent.$selectorEndMargin;
      var shouldRenderBelow = actualRoomBelow >= Math.min(height, actualRoomAbove);
      var spaceAvailable = (shouldRenderBelow ? actualRoomBelow : actualRoomAbove);
      height = Math.min(height, ss.trunc(spaceAvailable));
      var bottomPos = (shouldRenderBelow ? 'auto' : (selectorOffset + 'px'));
      var topPos = (shouldRenderBelow ? (selectorOffset + 'px') : 'auto');
      container.css('bottom', bottomPos);
      container.css('top', topPos);
      container.height(height);
      if (!ss.staticEquals(this.props.getMinimumWidth, null)) {
        var minimumWidth = this.props.getMinimumWidth(container);
        if (minimumWidth > room.roomRight) {
          var shift = minimumWidth - room.roomRight + $spiff_StatelessDropdownComponent.$shiftBuffer;
          container.css('left', -1 * shift + 'px');
        }
        container.css('min-width', minimumWidth);
      }
    },
    $onDropdownKeyDown: function StatelessDropdownComponent$OnDropdownKeyDown(e) {
      if (!ss.staticEquals(this.props.onKeyDown, null)) {
        this.props.onKeyDown(e);
      }
    },
    render: function StatelessDropdownComponent$Render() {
      var dropDownClassName = 'tab-Dropdown';
      if (!ss.isNullOrUndefined(this.props.styleClass)) {
        dropDownClassName += ' ' + this.props.styleClass;
      }
      var $t2 = $spiff_DOMElements.div;
      var $t3 = { className: dropDownClassName, role: 'combobox', onKeyDown: ss.mkdel(this, this.$onDropdownKeyDown), 'aria-expanded': this.props.isSelecting, ref: this.$boundTrackDropdownFunc };
      var $t1 = new EventUtils.EventHandleSpec();
      $t1.tap = ss.mkdel(this, function(e) {
        this.props.onSelectorToggled();
      });
      return $t2($t3, EventUtils.EventForwarder.div($t1, { className: 'tab-DropdownButton', role: 'button', tabIndex: ss.coalesce(this.props.tabIndex, 0), ref: $spiff_StatelessDropdownComponent.$positioningElementRef }, this.props.renderButton()), (this.props.isSelecting ? this.renderSelector() : null));
    },
    renderSelector: function StatelessDropdownComponent$RenderSelector() {
      return [$spiff_DOMElements.div({ className: 'tab-SelectorContainerOuter', key: 'selector-container-outer', ref: $spiff_StatelessDropdownComponent.$selectorOuterContainerRef }, $spiff_DOMElements.div({ className: 'tab-SelectorContainer', key: 'selector-container' }, this.props.children))];
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.StatelessHorizontalSliderComponent
  var $spiff_StatelessHorizontalSliderComponent = global.spiff.StatelessHorizontalSliderComponent = ss.mkType($asm, 'spiff.StatelessHorizontalSliderComponent', function(props) {
    this.$sliderInputElement = null;
    this.$sliderBoxElement = null;
    this.$dragStartedOnSlider = false;
    $spiff_PureRenderComponent.call(this, props);
  }, {
    get_$sliderBoxValue: function StatelessHorizontalSliderComponent$get_SliderBoxValue() {
      if (ss.isNullOrUndefined(this.$sliderBoxElement)) {
        return null;
      }
      var value = this.$sliderBoxElement.value;
      if (ss.isNullOrEmptyString(value)) {
        return null;
      }
      var sliderBoxValue = parseInt(tableau.format.convertFullwidthNumberToAscii(value));
      return this.$sanitizeNewValue(sliderBoxValue);
    },
    get_$sliderInputValue: function StatelessHorizontalSliderComponent$get_SliderInputValue() {
      if (ss.isNullOrUndefined(this.$sliderInputElement)) {
        return 0;
      }
      var sliderInputValue = parseInt(this.$sliderInputElement.value);
      return this.$sanitizeNewValue(sliderInputValue);
    },
    componentWillMount: function StatelessHorizontalSliderComponent$ComponentWillMount() {
      this.$addClickDetector();
    },
    componentWillUnmount: function StatelessHorizontalSliderComponent$ComponentWillUnmount() {
      this.$removeClickDetector();
    },
    $addClickDetector: function StatelessHorizontalSliderComponent$AddClickDetector() {
      this.$resetMouseState();
      EventUtils.GlobalUIEvents.add_DragEnd(ss.mkdel(this, this.$handleDragEnd));
    },
    $removeClickDetector: function StatelessHorizontalSliderComponent$RemoveClickDetector() {
      EventUtils.GlobalUIEvents.remove_DragEnd(ss.mkdel(this, this.$handleDragEnd));
    },
    $resetMouseState: function StatelessHorizontalSliderComponent$ResetMouseState() {
      this.$dragStartedOnSlider = false;
    },
    $handleDragEnd: function StatelessHorizontalSliderComponent$HandleDragEnd(e, cancelCallback) {
      if (this.$dragStartedOnSlider) {
        this.$commitValue(this.get_$sliderInputValue(), false);
        this.$resetMouseState();
      }
    },
    $renderSlider: function StatelessHorizontalSliderComponent$RenderSlider() {
      var sliderProps = { type: 'range', value: this.props.value.toString(), min: this.props.minValue, max: this.props.maxValue, className: $spiff_UnificationClassNames.sliderInputClass, style: { width: this.props.width }, disabled: this.props.disabled, onInput: ss.mkdel(this, this.$onSliderControlInput), onChange: ss.mkdel(this, this.$onSliderControlInput), onKeyUp: ss.mkdel(this, this.$onSliderControlKeyUp), onMouseUp: ss.mkdel(this, this.$onSliderControlMouseUp), onMouseDown: ss.mkdel(this, this.$onSliderControlMouseDown), onTouchEnd: ss.mkdel(this, this.$onSliderControlTouchEnd), onTouchStart: ss.mkdel(this, this.$onSliderControlTouchStart), ref: ss.mkdel(this, this.$trackSliderInput), key: 'sliderInput' };
      return $spiff_DOMElements.input(sliderProps);
    },
    $renderValueTextBox: function StatelessHorizontalSliderComponent$RenderValueTextBox() {
      var sliderBoxProps = { type: 'text', value: (this.props.emptyTextBox ? '' : this.props.value.toString()), className: $spiff_UnificationClassNames.sliderTextBoxClass, disabled: this.props.disabled, onInput: ss.mkdel(this, this.$onTextInput), onChange: ss.mkdel(this, this.$onTextInput), onKeyUp: ss.mkdel(this, this.$onTextKeyUp), onBlur: ss.mkdel(this, this.$onTextBlur), ref: ss.mkdel(this, this.$trackSliderBox), key: 'sliderBox' };
      if (ss.isValue(this.props.tabIndex)) {
        sliderBoxProps.tabIndex = ss.unbox(this.props.tabIndex);
      }
      return $spiff_DOMElements.input(sliderBoxProps);
    },
    render: function StatelessHorizontalSliderComponent$Render() {
      var sliderElements = [];
      if (this.props.showValueTextBox) {
        var sliderBox = this.$renderValueTextBox();
        sliderElements.push(sliderBox);
        if (this.props.showPercentageSign) {
          sliderElements.push($spiff_DOMElements.div({ className: $spiff_UnificationClassNames.sliderPercentageClass, key: 'percentageSign' }, '%'));
        }
      }
      var sliderInput = this.$renderSlider();
      return $spiff_DOMElements.div({ className: this.props.styleClass + (this.props.disabled ? ' disabled' : '') + (ss.isNullOrUndefined(this.props.extraCssClass) ? '' : (' ' + this.props.extraCssClass)) }, $spiff_DOMElements.div({ className: $spiff_UnificationClassNames.sliderControlClass + ' ' + $spiff_UnificationClassNames.sliderContainerClass }, sliderInput), sliderElements);
    },
    $onTextBlur: function StatelessHorizontalSliderComponent$OnTextBlur(event) {
      this.$commitValue(ss.coalesce(this.get_$sliderBoxValue(), 0), false);
    },
    $onTextKeyUp: function StatelessHorizontalSliderComponent$OnTextKeyUp(keyboardEvent) {
      if (keyboardEvent.which === 13) {
        this.$commitValue(ss.coalesce(this.get_$sliderBoxValue(), 0), true);
      }
    },
    $onTextInput: function StatelessHorizontalSliderComponent$OnTextInput(event) {
      this.$changeDisplayValue(this.get_$sliderBoxValue());
    },
    $onSliderControlMouseUp: function StatelessHorizontalSliderComponent$OnSliderControlMouseUp(event) {
      this.$onSliderControlDragEnd();
    },
    $onSliderControlMouseDown: function StatelessHorizontalSliderComponent$OnSliderControlMouseDown(event) {
      this.$onSliderControlDragStart();
    },
    $onSliderControlTouchEnd: function StatelessHorizontalSliderComponent$OnSliderControlTouchEnd(event) {
      this.$onSliderControlDragEnd();
    },
    $onSliderControlTouchStart: function StatelessHorizontalSliderComponent$OnSliderControlTouchStart(event) {
      this.$onSliderControlDragStart();
    },
    $onSliderControlDragStart: function StatelessHorizontalSliderComponent$OnSliderControlDragStart() {
      this.$dragStartedOnSlider = true;
    },
    $onSliderControlDragEnd: function StatelessHorizontalSliderComponent$OnSliderControlDragEnd() {
      if (this.$dragStartedOnSlider) {
        this.$commitValue(this.get_$sliderInputValue(), false);
      }
      else {
        this.$changeDisplayValue(this.get_$sliderInputValue());
      }
    },
    $onSliderControlInput: function StatelessHorizontalSliderComponent$OnSliderControlInput(event) {
      this.$changeDisplayValue(this.get_$sliderInputValue());
    },
    $onSliderControlKeyUp: function StatelessHorizontalSliderComponent$OnSliderControlKeyUp(e) {
      this.$commitValue(this.get_$sliderInputValue(), false);
    },
    $changeDisplayValue: function StatelessHorizontalSliderComponent$ChangeDisplayValue(newValue) {
      if (this.props.disabled) {
        return;
      }
      this.props.displayValueChanged(newValue);
    },
    $commitValue: function StatelessHorizontalSliderComponent$CommitValue(newValue, forceCommit) {
      if (this.props.disabled) {
        return;
      }
      this.props.commitValue(newValue, forceCommit);
    },
    $trackSliderInput: function StatelessHorizontalSliderComponent$TrackSliderInput(inputElement) {
      this.$sliderInputElement = null;
      if (ss.isValue(inputElement)) {
        this.$sliderInputElement = inputElement;
      }
    },
    $trackSliderBox: function StatelessHorizontalSliderComponent$TrackSliderBox(inputElement) {
      this.$sliderBoxElement = null;
      if (ss.isValue(inputElement)) {
        this.$sliderBoxElement = inputElement;
      }
    },
    $sanitizeNewValue: function StatelessHorizontalSliderComponent$SanitizeNewValue(newValue) {
      if (_.isNaN(newValue) || newValue < this.props.minValue) {
        return this.props.minValue;
      }
      else if (newValue > this.props.maxValue) {
        return this.props.maxValue;
      }
      return newValue;
    }
  }, {
    create: function StatelessHorizontalSliderComponent$Create(props) {
      return React.createElement($spiff_StatelessHorizontalSliderComponent, props);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.StyledTextButton
  var $spiff_StyledTextButton = global.spiff.StyledTextButton = ss.mkType($asm, 'spiff.StyledTextButton', null, null, {
    createUnificationLabelButton: function StyledTextButton$CreateUnificationLabelButton(clickHandler, label, buttonClass, style, tabIndex) {
      var button = $spiff_StyledTextButton.$createInternal(clickHandler, label, buttonClass, 1, tabIndex);
      var styleButtonClass;
      switch (style) {
        case 0: {
          styleButtonClass = 'tabStyledTextButtonFilledGreen';
          break;
        }
        case 1: {
          styleButtonClass = 'tabStyledTextButtonFilledRed';
          break;
        }
        case 2: {
          styleButtonClass = 'tabStyledTextButtonFilledGrey';
          break;
        }
        case 3: {
          styleButtonClass = 'tabStyledTextButtonOutline';
          break;
        }
        default: {
          ss.Debug.assert(false, 'Unknown button style: ' + style);
          styleButtonClass = '';
          break;
        }
      }
      button.addClass(styleButtonClass);
      return button;
    },
    createActionButton: function StyledTextButton$CreateActionButton(clickHandler, label, buttonClass, size, tabIndex) {
      var button = $spiff_StyledTextButton.$createInternal(clickHandler, label, buttonClass, size, tabIndex);
      button.addClass('tabStyledTextButtonAction');
      return button;
    },
    $createInternal: function StyledTextButton$CreateInternal(clickHandler, label, buttonClass, size, tabIndex) {
      var button = $spiff_LabelButton.newTextButton(clickHandler, label);
      button.addClass('tabStyledTextButton');
      switch (size) {
        case 2: {
          button.addClass('tabLargeStyledTextButton');
          break;
        }
        case 1: {
          button.addClass('tabMediumStyledTextButton');
          break;
        }
      }
      button.addClass(buttonClass);
      if (ss.isValue(tabIndex)) {
        button.tabIndex(ss.unbox(tabIndex));
      }
      return button;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.TabControl
  var $spiff_TabControl = global.spiff.TabControl = ss.mkType($asm, 'spiff.TabControl', function(tabControlTemplate) {
    this.$buttonGroup = new $spiff_SelectableGroup();
    this.$template = null;
    this.$idButtonMap = {};
    this.$disposableHolder = new tab.DisposableHolder();
    this.$selectedTab = null;
    this.$1$TabChangedField = null;
    this.$template = tabControlTemplate || new $spiff_$TabControlTemplate();
  }, {
    add_tabChanged: function TabControl$add_TabChanged(value) {
      this.$1$TabChangedField = ss.delegateCombine(this.$1$TabChangedField, value);
    },
    remove_tabChanged: function TabControl$remove_TabChanged(value) {
      this.$1$TabChangedField = ss.delegateRemove(this.$1$TabChangedField, value);
    },
    get_domRoot: function TabControl$get_DomRoot() {
      return this.$template.get_root();
    },
    get_tabs: function TabControl$get_Tabs() {
      return this.$template.get_tabs();
    },
    get_contentArea: function TabControl$get_ContentArea() {
      return this.$template.get_contentArea();
    },
    get_activeTabId: function TabControl$get_ActiveTabId() {
      return this.$selectedTab;
    },
    set_activeTabId: function TabControl$set_ActiveTabId(value) {
      if (!ss.referenceEquals(this.$selectedTab, value)) {
        this.$selectedTab = value;
        if (ss.isValue(this.$1$TabChangedField)) {
          this.$1$TabChangedField();
        }
      }
    },
    addTab: function TabControl$AddTab(id, label, content, enabled) {
      if (ss.keyExists(this.$idButtonMap, id)) {
        tab.Log.get(this).error('Trying to add a tab that already exists: ' + id, []);
        return;
      }
      var tabLabel = this.$template.createTabLabel(id, label);
      tabLabel.domRoot.addClass($spiff_TabControl.tabLabelIdPrefix + id);
      var tabButton = new $spiff_ToggleButton(tabLabel.domRoot, null);
      var tabPropertyHandler = ss.mkdel(this, function(sender, e) {
        if (ss.referenceEquals(e.get_propertyName(), $spiff_ToggleButton.selectedProperty) && tabButton.get_selected()) {
          this.$showTabContent(content.get_rootElement(), id);
        }
      });
      tabButton.add_propertyChanged(tabPropertyHandler);
      this.$disposableHolder.add$1(new tab.CallOnDispose(function() {
        tabButton.remove_propertyChanged(tabPropertyHandler);
      }));
      this.$disposableHolder.add$1(tabButton);
      this.$buttonGroup.addItem(tabButton);
      this.$idButtonMap[id] = tabButton;
      this.$template.get_tabs().append(tabLabel.domRoot);
      content.addToDom(this.$template.get_contentArea());
      if (enabled) {
        this.selectTab(id);
      }
      else {
        tabButton.set_disabled(true);
      }
    },
    selectTab: function TabControl$SelectTab(tabId) {
      if (!ss.keyExists(this.$idButtonMap, tabId)) {
        tab.Log.get(this).error('Trying to select a tab that does not exist: ' + tabId, []);
        return;
      }
      this.$buttonGroup.selectItem(this.$idButtonMap[tabId]);
    },
    enableTab: function TabControl$EnableTab(tabId, enable) {
      if (!ss.keyExists(this.$idButtonMap, tabId)) {
        tab.Log.get(this).error('Trying to select a tab that does not exist: ' + tabId, []);
        return;
      }
      this.$idButtonMap[tabId].set_disabled(!enable);
      this.selectTab(this.get_activeTabId());
    },
    dispose: function TabControl$Dispose() {
      this.$disposableHolder.dispose();
      this.$buttonGroup.dispose();
    },
    $showTabContent: function TabControl$ShowTabContent(content, tabId) {
      this.$template.get_contentArea().children().hide();
      content.show();
      this.set_activeTabId(tabId);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.TableauClickHandler
  var $spiff_TableauClickHandler = global.spiff.TableauClickHandler = ss.mkType($asm, 'spiff.TableauClickHandler', function(element, config) {
    this.$eventConfig = null;
    this.$handler = null;
    this.$disposables = new tab.DisposableHolder();
    this.$startX = 0;
    this.$startY = 0;
    this.$stopPropagationOnEvent = true;
    this.$1$PressField = null;
    this.$1$ClickField = null;
    this.$1$DoubleClickField = null;
    this.$1$RightClickField = null;
    this.$eventConfig = config || new EventUtils.EventHandleSpec();
    this.$eventConfig.SetHandler('firstTouch', ss.mkdel(this, this.$handlePressEvent));
    this.$eventConfig.SetHandler('tap', ss.mkdel(this, this.$handleClickEvent));
    this.$eventConfig.SetHandler('rightClick', ss.mkdel(this, this.$handleRightClickEvent));
    if (!tsConfig.is_mobile) {
      this.$eventConfig.SetHandler('pressEnd', ss.mkdel(this, this.$handleClickEvent));
    }
    this.$handler = new EventUtils.TableauEventHandler(element, this.$eventConfig);
  }, {
    add_$press: function TableauClickHandler$add_Press(value) {
      this.$1$PressField = ss.delegateCombine(this.$1$PressField, value);
    },
    remove_$press: function TableauClickHandler$remove_Press(value) {
      this.$1$PressField = ss.delegateRemove(this.$1$PressField, value);
    },
    add_$click: function TableauClickHandler$add_Click(value) {
      this.$1$ClickField = ss.delegateCombine(this.$1$ClickField, value);
    },
    remove_$click: function TableauClickHandler$remove_Click(value) {
      this.$1$ClickField = ss.delegateRemove(this.$1$ClickField, value);
    },
    add_$doubleClick: function TableauClickHandler$add_DoubleClick(value) {
      this.$1$DoubleClickField = ss.delegateCombine(this.$1$DoubleClickField, value);
    },
    remove_$doubleClick: function TableauClickHandler$remove_DoubleClick(value) {
      this.$1$DoubleClickField = ss.delegateRemove(this.$1$DoubleClickField, value);
    },
    add_$rightClick: function TableauClickHandler$add_RightClick(value) {
      this.$1$RightClickField = ss.delegateCombine(this.$1$RightClickField, value);
    },
    remove_$rightClick: function TableauClickHandler$remove_RightClick(value) {
      this.$1$RightClickField = ss.delegateRemove(this.$1$RightClickField, value);
    },
    get_stopPropagationOnEvent: function TableauClickHandler$get_StopPropagationOnEvent() {
      return this.$stopPropagationOnEvent;
    },
    set_stopPropagationOnEvent: function TableauClickHandler$set_StopPropagationOnEvent(value) {
      this.$stopPropagationOnEvent = value;
    },
    dispose: function TableauClickHandler$Dispose() {
      if (ss.isValue(this.$handler)) {
        this.$handler.dispose();
        this.$handler = null;
      }
      this.$disposables.dispose();
    },
    onPress: function TableauClickHandler$OnPress(action) {
      this.add_$press(action);
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_$press(action);
      })));
      return this;
    },
    onClick: function TableauClickHandler$OnClick(action) {
      this.add_$click(action);
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_$click(action);
      })));
      return this;
    },
    onDoubleClick: function TableauClickHandler$OnDoubleClick(action) {
      this.add_$doubleClick(action);
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_$doubleClick(action);
      })));
      this.$addEventHandler('doubleTap', ss.mkdel(this, this.$handleDoubleClickEvent));
      return this;
    },
    onRightClick: function TableauClickHandler$OnRightClick(action) {
      this.add_$rightClick(action);
      this.$disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
        this.remove_$rightClick(action);
      })));
      return this;
    },
    $addEventHandler: function TableauClickHandler$AddEventHandler(eventName, action) {
      if (!this.$eventConfig.IsHandling(eventName)) {
        var tempSpec = new EventUtils.EventHandleSpec();
        tempSpec.SetHandler(eventName, action);
        this.$handler.Update(tempSpec);
        $.extend(this.$eventConfig, tempSpec);
      }
    },
    $raiseEvent: function TableauClickHandler$RaiseEvent(e, callback, stopPropagation) {
      if (ss.isValue(callback)) {
        if (stopPropagation) {
          e.stopPropagation();
        }
        callback(e);
      }
    },
    $handlePressEvent: function TableauClickHandler$HandlePressEvent(e) {
      tab.Log.get(this).debug('Press - %s', [e.type]);
      this.$startX = e.pageX;
      this.$startY = e.pageY;
      this.$raiseEvent(e, this.$1$PressField, false);
    },
    $handleClickEvent: function TableauClickHandler$HandleClickEvent(e) {
      tab.Log.get(this).debug('Click - %s', [e.type]);
      this.$raiseEvent(e, this.$1$ClickField, this.$stopPropagationOnEvent);
      if (e.type === 'touchend') {
        $spiff_ClickBuster.preventGhostClick(this.$startX, this.$startY, e.target);
      }
    },
    $handleDoubleClickEvent: function TableauClickHandler$HandleDoubleClickEvent(e) {
      tab.Log.get(this).debug('DoubleClick - %s', [e.type]);
      this.$raiseEvent(e, this.$1$DoubleClickField, this.$stopPropagationOnEvent);
    },
    $handleRightClickEvent: function TableauClickHandler$HandleRightClickEvent(e) {
      tab.Log.get(this).debug('RightClick - %s', [e.type]);
      var domObjectHandleTouchEvent = tab.DomUtil.handleTouchEvents(e.target);
      if (domObjectHandleTouchEvent) {
        e.preventDefault();
      }
      this.$raiseEvent(e, this.$1$RightClickField, this.$stopPropagationOnEvent);
    }
  }, {
    target: function TableauClickHandler$Target(element) {
      return new $spiff_TableauClickHandler(element, null);
    },
    targetAndConfig: function TableauClickHandler$TargetAndConfig(element, config) {
      return new $spiff_TableauClickHandler(element, config);
    },
    targetAndClick: function TableauClickHandler$TargetAndClick(element, action) {
      return (new $spiff_TableauClickHandler(element, null)).onClick(action);
    },
    targetAndRightClick: function TableauClickHandler$TargetAndRightClick(element, action) {
      return (new $spiff_TableauClickHandler(element, null)).onRightClick(action);
    },
    targetAndDoubleClick: function TableauClickHandler$TargetAndDoubleClick(element, action) {
      return (new $spiff_TableauClickHandler(element, null)).onDoubleClick(action);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.TableauEventHandlerTracker
  var $spiff_TableauEventHandlerTracker = global.spiff.TableauEventHandlerTracker = ss.mkType($asm, 'spiff.TableauEventHandlerTracker', null, null, {
    add_handlerAddedForKey: function TableauEventHandlerTracker$add_HandlerAddedForKey(value) {
      $spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField = ss.delegateCombine($spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField, value);
    },
    remove_handlerAddedForKey: function TableauEventHandlerTracker$remove_HandlerAddedForKey(value) {
      $spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField = ss.delegateRemove($spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField, value);
    },
    add_handlerRemovedForKey: function TableauEventHandlerTracker$add_HandlerRemovedForKey(value) {
      $spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField = ss.delegateCombine($spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField, value);
    },
    remove_handlerRemovedForKey: function TableauEventHandlerTracker$remove_HandlerRemovedForKey(value) {
      $spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField = ss.delegateRemove($spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField, value);
    },
    get_trackers: function TableauEventHandlerTracker$get_Trackers() {
      return $spiff_TableauEventHandlerTracker.$trackers;
    },
    getHandlersForTrackerId: function TableauEventHandlerTracker$GetHandlersForTrackerId(trackerId) {
      return (ss.keyExists($spiff_TableauEventHandlerTracker.$trackers, trackerId) ? $spiff_TableauEventHandlerTracker.$trackers[trackerId] : null);
    },
    dispose: function TableauEventHandlerTracker$Dispose() {
      EventUtils.TableauEventHandler.remove_TableauEventHandlerCreated($spiff_TableauEventHandlerTracker.$startTrackingHandler);
      EventUtils.TableauEventHandler.remove_TableauEventHandlerToBeDisposed($spiff_TableauEventHandlerTracker.$stopTrackingHandler);
      ss.clearKeys($spiff_TableauEventHandlerTracker.$trackers);
    },
    $startTrackingHandler: function TableauEventHandlerTracker$StartTrackingHandler(handler) {
      var domRefValue = $spiff_TableauEventHandlerTracker.$referenceAttributeName + $spiff_TableauEventHandlerTracker.$eventHandlerCount;
      if (handler.DomElement.hasAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName)) {
        domRefValue = handler.DomElement.getAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName);
      }
      else {
        handler.DomElement.setAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName, domRefValue);
        $spiff_TableauEventHandlerTracker.$eventHandlerCount++;
      }
      if (ss.keyExists($spiff_TableauEventHandlerTracker.$trackers, domRefValue)) {
        $spiff_TableauEventHandlerTracker.$trackers[domRefValue].push(handler);
      }
      else {
        $spiff_TableauEventHandlerTracker.$trackers[domRefValue] = [handler];
      }
      if (!ss.staticEquals($spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField, null)) {
        $spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField(domRefValue);
      }
    },
    $stopTrackingHandler: function TableauEventHandlerTracker$StopTrackingHandler(handler) {
      if (!handler.DomElement.hasAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName)) {
        return;
      }
      var domRefValue = handler.DomElement.getAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName);
      if (!ss.keyExists($spiff_TableauEventHandlerTracker.$trackers, domRefValue)) {
        return;
      }
      var handlers = $spiff_TableauEventHandlerTracker.$trackers[domRefValue];
      ss.remove(handlers, handler);
      if (handlers.length === 0) {
        handler.DomElement.removeAttribute($spiff_TableauEventHandlerTracker.$referenceAttributeName);
        delete $spiff_TableauEventHandlerTracker.$trackers[domRefValue];
      }
      if (!ss.staticEquals($spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField, null)) {
        $spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField(domRefValue);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Template
  var $spiff_Template = global.spiff.Template = ss.mkType($asm, 'spiff.Template', function(root) {
    this.disposables = new tab.DisposableHolder();
    this.domRoot = null;
    this.domRoot = root;
  }, {
    getElementsBySelector: function Template$GetElementsBySelector(selector) {
      return this.domRoot.find(selector);
    },
    getElementBySelector: function Template$GetElementBySelector(selector) {
      var ret = this.getElementsBySelector(selector);
      if (ret.length !== 1) {
        throw new ss.Exception('Bad attach-point class');
      }
      return ret;
    },
    dispose: function Template$Dispose() {
      this.disposables.dispose();
      this.domRoot.remove();
    },
    addDisposable: function Template$AddDisposable(disposable) {
      if (ss.isValue(disposable)) {
        this.disposables.add$1(disposable);
      }
    }
  }, {
    fromHtml: function Template$FromHtml(html) {
      return new $spiff_Template($(html));
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.TextDropdownButtonComponent
  var $spiff_TextDropdownButtonComponent = global.spiff.TextDropdownButtonComponent = ss.mkType($asm, 'spiff.TextDropdownButtonComponent', function(props, context) {
    $spiff_PureRenderComponent.$ctor1.call(this, props, context);
  }, {
    render: function TextDropdownButtonComponent$Render() {
      var selectionTextClass = 'tab-SelectionText' + (this.props.isSelectionTextMarkedAsExcluded ? ' excluded' : '');
      var styleClass = ss.coalesce(this.props.styleClass, 'tab-unification-outline-dropdown');
      return React.createElement($spiff_GenericDropdownButtonComponent, { styleClass: 'tab-TextDropdownButton ' + styleClass, selectionDisplay: ss.mkdel(this, function() {
        return [(!ss.isNullOrEmptyString(this.props.selectionIconClass) ? ss.mkdel(this, function() {
          return $spiff_DOMElements.span({ className: $spiff_UnificationClassNames.icon + ' ' + this.props.selectionIconClass, key: 'icon' });
        })() : null), $spiff_DOMElements.span({ className: selectionTextClass, key: 'text' }, this.props.selectionText)];
      }) });
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.TextInputView
  var $spiff_TextInputView = global.spiff.TextInputView = ss.mkType($asm, 'spiff.TextInputView', function(template, initialText, placeHolderText, label, isReadOnly) {
    this.$template = null;
    this.$text = null;
    this.$isComposing = false;
    this.$2$EnterKeyPressedField = null;
    this.$2$EscapeKeyPressedField = null;
    $spiff_Widget.call(this, template.get_domRootElement());
    this.$template = template;
    this.$text = initialText;
    this.$template.get_inputElement().val(this.$text);
    this.$template.get_inputElement().attr('placeholder', placeHolderText);
    this.$template.get_inputElement().attr('title', placeHolderText);
    if (ss.isValue(label)) {
      var id = 'textinput-' + this.get_instanceId();
      template.get_inputElement().attr('id', id);
      template.get_inputElement().before($(ss.formatString("<label for='{0}'>{1}</label>", id, label)));
    }
    if (isReadOnly) {
      template.get_inputElement().attr('readonly', 'readonly');
    }
    this.$template.get_inputElement().on('compositionstart compositionupdate', ss.mkdel(this, function(e) {
      this.$isComposing = true;
    })).on('compositionend', ss.mkdel(this, function(e1) {
      this.$isComposing = false;
    })).on('keydown', ss.mkdel(this, this.$handleInputKeyDown)).on('input', ss.mkdel(this, this.$handleInputInput));
  }, {
    add_enterKeyPressed: function TextInputView$add_EnterKeyPressed(value) {
      this.$2$EnterKeyPressedField = ss.delegateCombine(this.$2$EnterKeyPressedField, value);
    },
    remove_enterKeyPressed: function TextInputView$remove_EnterKeyPressed(value) {
      this.$2$EnterKeyPressedField = ss.delegateRemove(this.$2$EnterKeyPressedField, value);
    },
    add_escapeKeyPressed: function TextInputView$add_EscapeKeyPressed(value) {
      this.$2$EscapeKeyPressedField = ss.delegateCombine(this.$2$EscapeKeyPressedField, value);
    },
    remove_escapeKeyPressed: function TextInputView$remove_EscapeKeyPressed(value) {
      this.$2$EscapeKeyPressedField = ss.delegateRemove(this.$2$EscapeKeyPressedField, value);
    },
    get_text: function TextInputView$get_Text() {
      return this.$text;
    },
    set_text: function TextInputView$set_Text(value) {
      if (ss.referenceEquals(this.$text, value)) {
        return;
      }
      this.get_inputElement().val(value).trigger('input');
    },
    get_inputElement: function TextInputView$get_InputElement() {
      return this.$template.get_inputElement();
    },
    $handleInputInput: function TextInputView$HandleInputInput(evt) {
      var value = this.get_inputElement().val();
      if (!ss.referenceEquals(this.$text, value)) {
        this.$text = value;
        this.raisePropertyChanged($spiff_TextInputView.textPropertyName);
      }
    },
    $handleInputKeyDown: function TextInputView$HandleInputKeyDown(evt) {
      if (this.$isComposing) {
        return;
      }
      switch (evt.which) {
        case 13: {
          if (!ss.staticEquals(this.$2$EnterKeyPressedField, null)) {
            $spiff_EventUtil.stopEvent$2(evt);
            this.$2$EnterKeyPressedField();
          }
          break;
        }
        case 27: {
          if (!ss.staticEquals(this.$2$EscapeKeyPressedField, null)) {
            this.$2$EscapeKeyPressedField();
            evt.stopPropagation();
          }
          break;
        }
      }
    }
  }, {
    newTextInputView: function TextInputView$NewTextInputView(initialContent, placeHolderText, label, isReadOnly) {
      var template = new $spiff_$TextInputViewTemplate();
      return new $spiff_TextInputView(template, initialContent, placeHolderText, label, isReadOnly);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ToggleButton
  var $spiff_ToggleButton = global.spiff.ToggleButton = ss.mkType($asm, 'spiff.ToggleButton', function(element, selectedClass) {
    this.$selectedClass = null;
    this.$selectionId = null;
    this.$3$SelectableDisposedField = null;
    this.$3$SelectedChangingField = null;
    this.$3$SelectedChangedField = null;
    this.$3$PreventMouseDeselectField = false;
    $spiff_Button.call(this, element);
    this.$selectionId = $spiff_ToggleButton.$getUniqueSelectionId();
    var $t1 = selectedClass;
    if (ss.isNullOrUndefined($t1)) {
      $t1 = $spiff_ToggleButton.defaultSelectedClassName;
    }
    this.$selectedClass = $t1;
  }, {
    add_selectableDisposed: function ToggleButton$add_SelectableDisposed(value) {
      this.$3$SelectableDisposedField = ss.delegateCombine(this.$3$SelectableDisposedField, value);
    },
    remove_selectableDisposed: function ToggleButton$remove_SelectableDisposed(value) {
      this.$3$SelectableDisposedField = ss.delegateRemove(this.$3$SelectableDisposedField, value);
    },
    add_selectedChanging: function ToggleButton$add_SelectedChanging(value) {
      this.$3$SelectedChangingField = ss.delegateCombine(this.$3$SelectedChangingField, value);
    },
    remove_selectedChanging: function ToggleButton$remove_SelectedChanging(value) {
      this.$3$SelectedChangingField = ss.delegateRemove(this.$3$SelectedChangingField, value);
    },
    add_selectedChanged: function ToggleButton$add_SelectedChanged(value) {
      this.$3$SelectedChangedField = ss.delegateCombine(this.$3$SelectedChangedField, value);
    },
    remove_selectedChanged: function ToggleButton$remove_SelectedChanged(value) {
      this.$3$SelectedChangedField = ss.delegateRemove(this.$3$SelectedChangedField, value);
    },
    get_selectedClass: function ToggleButton$get_SelectedClass() {
      return this.$selectedClass;
    },
    set_selectedClass: function ToggleButton$set_SelectedClass(value) {
      if (ss.referenceEquals(this.$selectedClass, value)) {
        return;
      }
      if (this.get_selected()) {
        this.element.toggleClass(this.$selectedClass, false);
        this.element.toggleClass(value, true);
      }
      this.$selectedClass = value;
    },
    get_selectionId: function ToggleButton$get_SelectionId() {
      return this.$selectionId;
    },
    set_selectionId: function ToggleButton$set_SelectionId(value) {
      this.$selectionId = value;
    },
    get_selected: function ToggleButton$get_Selected() {
      return this.element.hasClass(this.$selectedClass);
    },
    set_selected: function ToggleButton$set_Selected(value) {
      if (this.get_selected() === value) {
        return;
      }
      this.element.toggleClass(this.$selectedClass, value);
      this.raisePropertyChanged($spiff_ToggleButton.selectedProperty);
      this.$raiseEventHandler(this.$3$SelectedChangedField, null);
    },
    get_preventMouseDeselect: function ToggleButton$get_PreventMouseDeselect() {
      return this.$3$PreventMouseDeselectField;
    },
    set_preventMouseDeselect: function ToggleButton$set_PreventMouseDeselect(value) {
      this.$3$PreventMouseDeselectField = value;
    },
    handleClick: function ToggleButton$HandleClick(e) {
      if (this.get_disabled()) {
        return;
      }
      var select = !this.get_selected();
      if (this.get_preventMouseDeselect() && !select) {
        return;
      }
      if (!ss.staticEquals(this.$3$SelectedChangingField, null)) {
        var eventArgs = new $spiff_SelectionEventArgs(select, ss.isValue(e) && e.shiftKey, $spiff_EventUtil.isCtrlKey(e));
        this.$3$SelectedChangingField(this, eventArgs);
        if (eventArgs.cancel) {
          return;
        }
      }
      this.set_selected(select);
      $spiff_Button.prototype.handleClick.call(this, e);
    },
    $raiseEventHandler: function ToggleButton$RaiseEventHandler(handler, args) {
      if (!ss.staticEquals(handler, null)) {
        handler(this, args);
      }
    },
    onDisposed: function ToggleButton$OnDisposed(args) {
      this.$raiseEventHandler(this.$3$SelectableDisposedField, null);
      $spiff_Widget.prototype.onDisposed.call(this, args);
    }
  }, {
    createButton: function ToggleButton$CreateButton(element, selectedClass, viewModel) {
      var tb = new $spiff_ToggleButton(element, selectedClass);
      tb.set_selected(viewModel.get_toggleValue());
      var selectedHandler = function(button, eventArgs) {
        if (ss.referenceEquals(eventArgs.get_propertyName(), $spiff_ToggleButton.selectedProperty)) {
          viewModel.raiseToggled();
        }
      };
      tb.add_propertyChanged(selectedHandler);
      tb.disposables.add$1(new tab.CallOnDispose(function() {
        tb.remove_propertyChanged(selectedHandler);
      }));
      return tb;
    },
    $getUniqueSelectionId: function ToggleButton$GetUniqueSelectionId() {
      $spiff_ToggleButton.$uniqueSelectionIdCounter++;
      return 'toggleBtn-' + $spiff_ToggleButton.$uniqueSelectionIdCounter.toString();
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.ToggleButtonViewModel
  var $spiff_ToggleButtonViewModel = global.spiff.ToggleButtonViewModel = ss.mkType($asm, 'spiff.ToggleButtonViewModel', function(onToggled, toggleValue) {
    this.$toggleValue = false;
    this.$2$ToggledField = null;
    this.$2$DataField = null;
    $spiff_BaseViewModel.call(this);
    this.$toggleValue = toggleValue;
    this.set_data({});
    this.add_toggled(onToggled);
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.remove_toggled(onToggled);
    })));
  }, {
    add_toggled: function ToggleButtonViewModel$add_Toggled(value) {
      this.$2$ToggledField = ss.delegateCombine(this.$2$ToggledField, value);
    },
    remove_toggled: function ToggleButtonViewModel$remove_Toggled(value) {
      this.$2$ToggledField = ss.delegateRemove(this.$2$ToggledField, value);
    },
    get_toggleValue: function ToggleButtonViewModel$get_ToggleValue() {
      return this.$toggleValue;
    },
    set_toggleValue: function ToggleButtonViewModel$set_ToggleValue(value) {
      if (value !== this.get_toggleValue()) {
        this.raiseToggled();
      }
      this.$toggleValue = value;
    },
    get_data: function ToggleButtonViewModel$get_Data() {
      return this.$2$DataField;
    },
    set_data: function ToggleButtonViewModel$set_Data(value) {
      this.$2$DataField = value;
    },
    raiseToggled: function ToggleButtonViewModel$RaiseToggled() {
      if (!ss.staticEquals(this.$2$ToggledField, null)) {
        this.$2$ToggledField();
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UberPopupHorizontalAlign
  var $spiff_UberPopupHorizontalAlign = global.spiff.UberPopupHorizontalAlign = ss.mkEnum($asm, 'spiff.UberPopupHorizontalAlign', { left: 0, center: 1, right: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UberPopupHorizontalAttach
  var $spiff_UberPopupHorizontalAttach = global.spiff.UberPopupHorizontalAttach = ss.mkEnum($asm, 'spiff.UberPopupHorizontalAttach', { left: 0, right: 1 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UberPopupMode
  var $spiff_UberPopupMode = global.spiff.UberPopupMode = ss.mkEnum($asm, 'spiff.UberPopupMode', { blockAndAutoHide: 0, doNotBlockAndAutoHide: 1, doNotBlockAndStayOpen: 2 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UberPopupShowOptions
  var $spiff_UberPopupShowOptions = global.spiff.UberPopupShowOptions = ss.mkType($asm, 'spiff.UberPopupShowOptions', function() {
    this.horizontalAlign = 0;
    this.horizontalAttach = 0;
    this.theme = 0;
    this.preferUp = false;
    this.coverRelativeElement = false;
    this.limitPopupHeight = false;
    this.maxPopupHeight = null;
    this.additionalClassNames = null;
    this.isToolbarFlyout = false;
    this.isBeingPositionedRelativeToASharedDialogWidget = false;
    this.focusOnShown = true;
    this.popupMode = 0;
    this.globalTouchWhitelist = null;
    this.glassZIndex = $spiff_UberPopupShowOptions.startingGlassZIndex;
    this.useCaret = false;
  }, {
    isPopupHeightLimited: function UberPopupShowOptions$IsPopupHeightLimited() {
      return this.limitPopupHeight || ss.isValue(this.maxPopupHeight);
    }
  }, {
    $ctor1: function(horizontalAlign, attach, theme, preferUp, coverRelativeElement, limitPopupHeight, maxPopupHeight, additionalClassNames, isToolbarFlyout, popupMode, globalTouchWhitelist, glassZIndex, focusOnShown) {
      this.horizontalAlign = 0;
      this.horizontalAttach = 0;
      this.theme = 0;
      this.preferUp = false;
      this.coverRelativeElement = false;
      this.limitPopupHeight = false;
      this.maxPopupHeight = null;
      this.additionalClassNames = null;
      this.isToolbarFlyout = false;
      this.isBeingPositionedRelativeToASharedDialogWidget = false;
      this.focusOnShown = true;
      this.popupMode = 0;
      this.globalTouchWhitelist = null;
      this.glassZIndex = $spiff_UberPopupShowOptions.startingGlassZIndex;
      this.useCaret = false;
      this.horizontalAlign = horizontalAlign;
      this.horizontalAttach = attach;
      this.theme = theme;
      this.preferUp = preferUp;
      this.coverRelativeElement = coverRelativeElement;
      this.limitPopupHeight = limitPopupHeight;
      this.maxPopupHeight = maxPopupHeight;
      this.additionalClassNames = additionalClassNames;
      this.isToolbarFlyout = isToolbarFlyout;
      this.popupMode = popupMode;
      this.globalTouchWhitelist = globalTouchWhitelist;
      this.glassZIndex = glassZIndex;
      this.focusOnShown = focusOnShown;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UberPopupTemplate
  var $spiff_UberPopupTemplate = global.spiff.UberPopupTemplate = ss.mkType($asm, 'spiff.UberPopupTemplate', function() {
    this.content = null;
    this.caret = null;
    this.caretBorder = null;
    $spiff_Template.call(this, $($spiff_UberPopupTemplate.$htmlTemplate));
    this.content = this.getElementBySelector('.' + $spiff_UberPopupTemplate.contentClassName);
    this.caret = this.getElementBySelector('.' + $spiff_UberPopupTemplate.caretClassName);
    this.caretBorder = this.getElementBySelector('.' + $spiff_UberPopupTemplate.caretBorderClassName);
    this.caret.hide();
    this.caretBorder.hide();
  }, {
    get_caretHeight: function UberPopupTemplate$get_CaretHeight() {
      if (!ss.isValue($spiff_UberPopupTemplate.$caretHeight)) {
        $spiff_UberPopupTemplate.$caretHeight = tab.DoubleUtil.roundToInt(this.caret.outerHeight());
      }
      return ss.unbox($spiff_UberPopupTemplate.$caretHeight);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UberPopupTheme
  var $spiff_UberPopupTheme = global.spiff.UberPopupTheme = ss.mkEnum($asm, 'spiff.UberPopupTheme', { standard: 0, minimalist: 1 });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UberPopupView
  var $spiff_UberPopupView = global.spiff.UberPopupView = ss.mkType($asm, 'spiff.UberPopupView', function(viewModel, t) {
    this.popupViewModel = null;
    this.glass = null;
    this.contentView = null;
    this.visible = false;
    ss.makeGenericType($spiff_BaseView$1, [$spiff_UberPopupViewModel]).call(this, viewModel, t);
    this.popupViewModel = viewModel;
    this.popupViewModel.add_shown(ss.mkdel(this, this.shown));
    this.popupViewModel.add_hidden(ss.mkdel(this, this.hidden));
    this.$addKeyboardAccessibility();
  }, {
    get_uberPopupShadowHeight: null,
    get_uberPopupMinimalistShadowHeight: function UberPopupView$get_UberPopupMinimalistShadowHeight() {
      return 0;
    },
    get_width: function UberPopupView$get_Width() {
      return this.element.outerWidth(false);
    },
    get_height: function UberPopupView$get_Height() {
      return this.element.outerHeight(false);
    },
    get_dom: function UberPopupView$get_Dom() {
      return this.get_template();
    },
    $addKeyboardAccessibility: function UberPopupView$AddKeyboardAccessibility() {
      this.element.attr('tabindex', '-1').on('keydown', ss.mkdel(this, function(e) {
        if (e.which === 27 && !(e.metaKey || e.shiftKey || e.ctrlKey || e.altKey)) {
          this.get_viewModel().hide(false);
          e.preventDefault();
          e.stopPropagation();
        }
      }));
      if (this.get_viewModel().options.popupMode === 0) {
        this.get_viewModel().add_shown(ss.mkdel(this, function() {
          $spiff_FocusManager.trapFocus(this.element);
        }));
      }
    },
    dispose: function UberPopupView$Dispose() {
      this.disposeContent();
      this.popupViewModel.remove_shown(ss.mkdel(this, this.shown));
      this.popupViewModel.remove_hidden(ss.mkdel(this, this.hidden));
      this.disposeGlass();
      this.$removeGlobalUIEventHandlers();
      ss.makeGenericType($spiff_BaseView$1, [$spiff_UberPopupViewModel]).prototype.dispose.call(this);
    },
    disposeContent: function UberPopupView$DisposeContent() {
      if (ss.isValue(this.contentView)) {
        this.contentView.dispose();
      }
    },
    updateMode: function UberPopupView$UpdateMode() {
      if (!this.visible) {
        return;
      }
      switch (this.popupViewModel.get_mode()) {
        case 0: {
          this.$removeGlobalUIEventHandlers();
          this.showGlass();
          break;
        }
        case 1: {
          this.hideGlass();
          this.$addGlobalUIEventHandlers();
          break;
        }
        case 2: {
          this.$removeGlobalUIEventHandlers();
          this.hideGlass();
          break;
        }
      }
    },
    onViewModelPropertyChanged: function UberPopupView$OnViewModelPropertyChanged(sender, e) {
      if (e.get_propertyName() === 'mode') {
        this.updateMode();
      }
      else if (e.get_propertyName() === 'size') {
        this.positionPopup();
      }
      else if (e.get_propertyName() === 'content') {
        this.updateContent();
      }
    },
    shown: function UberPopupView$Shown() {
      var options = this.get_viewModel().options;
      this.updateContent();
      this.visible = true;
      this.updateMode();
      if (options.theme === 1) {
        this.element.addClass($spiff_UberPopupView.minimalistThemeClass);
      }
      if (options.useCaret) {
        this.get_dom().domRoot.addClass('tabUberCaretStyle');
      }
      this.element.css('left', '0px').css('top', '0px');
      this.element.appendTo('body');
      this.contentView.addToDom(ss.cast(this.get_template(), $spiff_UberPopupTemplate).content);
      if (ss.isValue(options.additionalClassNames)) {
        options.additionalClassNames.forEach(ss.mkdel(this, function(className) {
          this.element.addClass(className);
        }));
      }
      if (this.popupViewModel.options.isToolbarFlyout && tsConfig.is_mobile) {
        this.element.show();
        this.positionPopup();
      }
      else {
        this.element.hide();
        this.positionPopup();
        this.element.show();
        if (this.get_viewModel().options.focusOnShown) {
          window.setTimeout(ss.mkdel(this, function() {
            if (!$.contains(this.element[0], document.activeElement)) {
              this.element.focus();
            }
          }));
        }
      }
    },
    hidden: function UberPopupView$Hidden() {
      this.visible = false;
      this.hideGlass();
      this.element.hide();
      this.element.detach();
    },
    showGlass: function UberPopupView$ShowGlass() {
      if (ss.isNullOrUndefined(this.glass)) {
        this.glass = new $spiff_Glass(null, false);
        this.glass.set_zIndex(this.popupViewModel.options.glassZIndex);
        this.glass.add_click(ss.mkdel(this, this.glassClicked));
      }
      this.glass.show();
    },
    hideGlass: function UberPopupView$HideGlass() {
      if (ss.isValue(this.glass)) {
        this.glass.hide();
      }
    },
    disposeGlass: function UberPopupView$DisposeGlass() {
      if (ss.isValue(this.glass)) {
        this.glass.remove_click(ss.mkdel(this, this.glassClicked));
        this.glass.dispose();
        this.glass = null;
      }
    },
    glassClicked: function UberPopupView$GlassClicked() {
      this.element.fadeOut(50, ss.mkdel(this, function() {
        this.popupViewModel.hide(true);
      }));
    },
    $addGlobalUIEventHandlers: function UberPopupView$AddGlobalUIEventHandlers() {
      EventUtils.GlobalUIEvents.add_FirstTouch(ss.mkdel(this, this.$handleGlobalTouch));
      EventUtils.GlobalUIEvents.add_DismissTemporaryElements(ss.mkdel(this, this.$handleDismissTemporaryElements));
    },
    $removeGlobalUIEventHandlers: function UberPopupView$RemoveGlobalUIEventHandlers() {
      EventUtils.GlobalUIEvents.remove_FirstTouch(ss.mkdel(this, this.$handleGlobalTouch));
      EventUtils.GlobalUIEvents.remove_DismissTemporaryElements(ss.mkdel(this, this.$handleDismissTemporaryElements));
    },
    $handleGlobalTouch: function UberPopupView$HandleGlobalTouch(e, callback) {
      if (this.get_template().domRoot.get(0).contains(e.target)) {
        return;
      }
      if (ss.isValue(this.popupViewModel.options.globalTouchWhitelist)) {
        for (var $t1 = 0; $t1 < this.popupViewModel.options.globalTouchWhitelist.length; $t1++) {
          var ignorableElement = this.popupViewModel.options.globalTouchWhitelist[$t1];
          if (ignorableElement.contains(e.target)) {
            return;
          }
        }
      }
      this.popupViewModel.hide(false);
    },
    $handleDismissTemporaryElements: function UberPopupView$HandleDismissTemporaryElements() {
      this.popupViewModel.hide(false);
    },
    positionPopup: function UberPopupView$PositionPopup() {
      if (ss.isNullOrUndefined(this.get_viewModel().get_relativeElement()) || this.get_viewModel().get_relativeElement().length < 1) {
        ss.Debug.assert(false, "Popup's relative element should exist.");
        return;
      }
      this.get_viewModel().get_resizeContent()(ss.cast(this.get_template(), $spiff_UberPopupTemplate).content, this.element);
      this.element.css('z-index', this.popupViewModel.options.glassZIndex + 1);
      var options = this.get_viewModel().options;
      if (!options.isPopupHeightLimited()) {
        this.element.css('max-height', '100%');
      }
      this.positionPopupHorizontally();
      if (options.isToolbarFlyout) {
        this.$positionFlyoutVertically();
      }
      else {
        this.positionPopupVertically();
      }
      this.get_dom().caret.toggle(options.useCaret);
      this.get_dom().caretBorder.toggle(options.useCaret);
    },
    positionPopupHorizontally: function UberPopupView$PositionPopupHorizontally() {
      var options = this.get_viewModel().options;
      var relativeObj = this.get_viewModel().get_relativeElement();
      var doc = $(relativeObj.prop('ownerDocument'));
      var popupWidth = this.get_width();
      var left = tab.DomUtil.getPageOffset$1(relativeObj).left;
      if (options.horizontalAlign === 1) {
        left += relativeObj.outerWidth(false) / 2;
        left -= popupWidth / 2;
      }
      else if (options.horizontalAlign === 2) {
        left += relativeObj.outerWidth(false);
        left -= popupWidth;
      }
      var overlap = left + popupWidth - doc.width();
      if (overlap > 0) {
        left -= overlap;
      }
      if (options.horizontalAttach === 0) {
        this.element.css('right', '');
        this.element.css('left', Math.max(left, 0) + 'px');
      }
      else {
        var bodyWidth = $('body').outerWidth(true);
        var right = bodyWidth - (left + popupWidth);
        right -= Math.max(0, right + popupWidth - bodyWidth);
        this.element.css('left', '');
        this.element.css('right', right + 'px');
      }
      if (options.isToolbarFlyout) {
        this.element.css('min-width', tab.DoubleUtil.roundToInt(relativeObj.outerWidth(false)));
      }
    },
    $positionFlyoutVertically: function UberPopupView$PositionFlyoutVertically() {
      var options = this.get_viewModel().options;
      var relativeObj = this.get_viewModel().get_relativeElement();
      var body = $('body');
      var top = tab.DomUtil.getPageOffset$1(relativeObj).top;
      if (options.preferUp) {
        top += 1;
        top += (options.coverRelativeElement ? relativeObj.outerHeight(false) : 0);
        var height = body.outerHeight(true);
        this.element.css('top', '');
        this.element.css('bottom', ss.trunc(height - top) + 'px');
      }
      else {
        top -= 1;
        top += (options.coverRelativeElement ? 0 : relativeObj.outerHeight(false));
        this.element.css('bottom', '');
        this.element.css('top', ss.trunc(top) + 'px');
      }
    },
    positionPopupVertically: function UberPopupView$PositionPopupVertically() {
      var options = this.get_viewModel().options;
      var relativeObj = this.get_viewModel().get_relativeElement();
      var relativePos = tab.DomUtil.getPageOffset$1(relativeObj);
      var room = tab.DomUtil.roomAroundPosition(relativePos);
      var relativeObjHeight = relativeObj.outerHeight(false);
      var uberPopupShadowHeight = ((options.theme === 1) ? this.get_uberPopupMinimalistShadowHeight() : this.get_uberPopupShadowHeight());
      if (options.isPopupHeightLimited()) {
        this.$setMaxHeight(room, uberPopupShadowHeight, relativeObjHeight);
      }
      var popupHeight = this.get_height();
      var enoughRoomBelow = room.roomBelow >= popupHeight + relativeObjHeight + uberPopupShadowHeight;
      var enoughRoomAbove = room.roomAbove > popupHeight + uberPopupShadowHeight;
      var useCaret = this.popupViewModel.options.useCaret;
      if (useCaret) {
        enoughRoomAbove = room.roomAbove > popupHeight + this.get_dom().get_caretHeight() + 4 + uberPopupShadowHeight;
      }
      var belowYPosition = relativePos.top + relativeObjHeight;
      var aboveYPosition = relativePos.top - popupHeight;
      var posY;
      if (options.preferUp && enoughRoomAbove) {
        posY = aboveYPosition;
      }
      else if (enoughRoomBelow && !useCaret) {
        posY = belowYPosition;
      }
      else if (enoughRoomAbove) {
        posY = aboveYPosition;
      }
      else if (room.roomBelow >= room.roomAbove && !useCaret) {
        posY = relativePos.top - (popupHeight - room.roomBelow + uberPopupShadowHeight);
      }
      else {
        posY = relativePos.top - room.roomAbove + uberPopupShadowHeight;
      }
      if (useCaret) {
        posY -= this.get_dom().get_caretHeight() + 4;
      }
      this.element.css('top', posY + 'px');
    },
    $setMaxHeight: function UberPopupView$SetMaxHeight(room, uberPopupShadowHeight, relativeObjHeight) {
      var options = this.get_viewModel().options;
      var maxHeight = null;
      if (options.limitPopupHeight) {
        maxHeight = Math.max(room.roomAbove, room.roomBelow - relativeObjHeight) - uberPopupShadowHeight;
      }
      if (ss.isValue(options.maxPopupHeight)) {
        var $t1 = maxHeight;
        if (ss.isNullOrUndefined($t1)) {
          $t1 = Number.MAX_VALUE;
        }
        var maxAvailableHeight = $t1;
        maxHeight = Math.min(maxAvailableHeight, ss.unbox(options.maxPopupHeight));
      }
      if (ss.isValue(maxHeight)) {
        this.element.css('max-height', maxHeight + 'px');
      }
    },
    updateContent: function UberPopupView$UpdateContent() {
      this.disposeContent();
      var content = ss.cast(this.get_template(), $spiff_UberPopupTemplate).content;
      content.children().detach();
      this.contentView = this.get_viewModel().createContentView();
      if (this.visible) {
        this.contentView.addToDom(content);
      }
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UberPopupViewModel
  var $spiff_UberPopupViewModel = global.spiff.UberPopupViewModel = ss.mkType($asm, 'spiff.UberPopupViewModel', function(findRelativeElement) {
    this.$content = null;
    this.$relativeElementFunc = null;
    this.options = new $spiff_UberPopupShowOptions();
    this.$2$ShownField = null;
    this.$2$HiddenField = null;
    this.$2$CommitField = null;
    this.$2$ResizeContentField = null;
    $spiff_BaseViewModel.call(this);
    this.$relativeElementFunc = findRelativeElement;
    this.set_resizeContent(function() {
    });
    this.disposables.add$1(new tab.CallOnDispose(ss.mkdel(this, function() {
      this.remove_hidden(ss.mkdel(this, this.dispose));
    })));
  }, {
    add_shown: function UberPopupViewModel$add_Shown(value) {
      this.$2$ShownField = ss.delegateCombine(this.$2$ShownField, value);
    },
    remove_shown: function UberPopupViewModel$remove_Shown(value) {
      this.$2$ShownField = ss.delegateRemove(this.$2$ShownField, value);
    },
    add_hidden: function UberPopupViewModel$add_Hidden(value) {
      this.$2$HiddenField = ss.delegateCombine(this.$2$HiddenField, value);
    },
    remove_hidden: function UberPopupViewModel$remove_Hidden(value) {
      this.$2$HiddenField = ss.delegateRemove(this.$2$HiddenField, value);
    },
    add_commit: function UberPopupViewModel$add_Commit(value) {
      this.$2$CommitField = ss.delegateCombine(this.$2$CommitField, value);
    },
    remove_commit: function UberPopupViewModel$remove_Commit(value) {
      this.$2$CommitField = ss.delegateRemove(this.$2$CommitField, value);
    },
    get_mode: function UberPopupViewModel$get_Mode() {
      return this.options.popupMode;
    },
    set_mode: function UberPopupViewModel$set_Mode(value) {
      if (this.options.popupMode === value) {
        return;
      }
      this.options.popupMode = value;
      this.notifyPropertyChanged('mode');
    },
    get_content: function UberPopupViewModel$get_Content() {
      return this.$content;
    },
    set_content: function UberPopupViewModel$set_Content(value) {
      this.$content = value;
      if (ss.isValue(this.$content)) {
        this.$content.updateUberPopupViewModel(this);
      }
      this.notifyPropertyChanged('content');
      this.notifyPropertyChanged('size');
    },
    set_disposeOnHide: function UberPopupViewModel$set_DisposeOnHide(value) {
      this.remove_hidden(ss.mkdel(this, this.dispose));
      if (value) {
        this.add_hidden(ss.mkdel(this, this.dispose));
      }
    },
    get_relativeElement: function UberPopupViewModel$get_RelativeElement() {
      return this.$relativeElementFunc();
    },
    set_relativeElement: function UberPopupViewModel$set_RelativeElement(value) {
      this.$relativeElementFunc = function() {
        return value;
      };
    },
    get_resizeContent: function UberPopupViewModel$get_ResizeContent() {
      return this.$2$ResizeContentField;
    },
    set_resizeContent: function UberPopupViewModel$set_ResizeContent(value) {
      this.$2$ResizeContentField = value;
    },
    createContentView: function UberPopupViewModel$CreateContentView() {
      return tab.ObjectRegistry.newView$1(ss.makeGenericType(tab.IView$1, [tab.IViewModel])).call(null, this.get_content().get_viewType(), [this.get_content().get_viewModel()]);
    },
    updatePosition: function UberPopupViewModel$UpdatePosition() {
      this.notifyPropertyChanged('size');
    },
    show: function UberPopupViewModel$Show() {
      if (ss.isNullOrUndefined(this.$2$ShownField)) {
        return;
      }
      this.$2$ShownField();
    },
    hide: function UberPopupViewModel$Hide(commitOnHide) {
      if (commitOnHide && ss.isValue(this.$2$CommitField)) {
        this.$2$CommitField();
      }
      this.raiseActionEvent(this.$2$HiddenField);
    },
    addDisposables: function UberPopupViewModel$AddDisposables(disposable) {
      this.disposables.add$1(disposable);
    }
  }, {
    $ctor1: function(relativeElement) {
      $spiff_UberPopupViewModel.call(this, function() {
        return relativeElement;
      });
    },
    createForContent: function UberPopupViewModel$CreateForContent(content, findRelativeElement, onHidden, disposeContentWithPopup) {
      var popupVm = new $spiff_UberPopupViewModel(findRelativeElement);
      if (!ss.staticEquals(onHidden, null)) {
        popupVm.add_hidden(onHidden);
        popupVm.addDisposables(new tab.CallOnDispose(function() {
          popupVm.remove_hidden(onHidden);
        }));
      }
      popupVm.set_content(content);
      popupVm.set_disposeOnHide(true);
      tab.ObjectRegistry.newView($spiff_UberPopupView).call(null, [popupVm]);
      if (disposeContentWithPopup) {
        popupVm.disposables.add$1(new tab.CallOnDispose(function() {
          content.disposeViewModel();
        }));
      }
      return popupVm;
    },
    createForContent$1: function UberPopupViewModel$CreateForContent(content, relativeElement, onHidden, disposeContentWithPopup) {
      return $spiff_UberPopupViewModel.createForContent(content, function() {
        return relativeElement;
      }, onHidden, disposeContentWithPopup);
    },
    createForContentUsingCaretStyle: function UberPopupViewModel$CreateForContentUsingCaretStyle(content, relativeElement, customClass, onHidden, disposeContentWithPopup) {
      var viewModel = $spiff_UberPopupViewModel.createForContent(content, function() {
        return relativeElement;
      }, onHidden, disposeContentWithPopup);
      viewModel.set_mode(2);
      var $t1 = new $spiff_UberPopupShowOptions();
      $t1.popupMode = 2;
      $t1.preferUp = true;
      $t1.additionalClassNames = ['tabUberCaretStyle', customClass];
      $t1.horizontalAttach = 0;
      $t1.horizontalAlign = 1;
      $t1.useCaret = true;
      viewModel.options = $t1;
      return viewModel;
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UnificationClassNames
  var $spiff_UnificationClassNames = global.spiff.UnificationClassNames = ss.mkType($asm, 'spiff.UnificationClassNames');
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UnificationDarkMenuTheme
  var $spiff_UnificationDarkMenuTheme = global.spiff.UnificationDarkMenuTheme = ss.mkType($asm, 'spiff.UnificationDarkMenuTheme', function() {
    $spiff_MenuViewTheme.call(this);
    this.menuClass = 'tabMenuUnificationTheme dark';
    this.itemClass = 'tabMenuItemUnificationTheme';
    this.dividerClass = 'tabMenuItemDividerUnificationTheme';
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.UnificationLightMenuTheme
  var $spiff_UnificationLightMenuTheme = global.spiff.UnificationLightMenuTheme = ss.mkType($asm, 'spiff.UnificationLightMenuTheme', function() {
    $spiff_MenuViewTheme.call(this);
    this.menuClass = 'tabMenuUnificationTheme light';
    this.itemClass = 'tabMenuItemUnificationTheme';
    this.dividerClass = 'tabMenuItemDividerUnificationTheme';
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.VerticalSpinnerComponent
  var $spiff_VerticalSpinnerComponent = global.spiff.VerticalSpinnerComponent = ss.mkType($asm, 'spiff.VerticalSpinnerComponent', function(props, context) {
    this.$applyTimer = null;
    React.Component.call(this, props, context);
    this.state = $spiff_VerticalSpinnerComponent.$stateFromValue(this.props.initialValue);
  }, {
    render: function VerticalSpinnerComponent$Render() {
      var value = this.state.displayValue;
      if (this.props.disabled && ss.isValue(this.props.disabledText)) {
        value = this.props.disabledText;
      }
      var htmlProps = { type: 'text', value: value, onChange: ss.mkdel(this, this.$onInputChange), onBlur: ss.mkdel(this, this.$acceptInput), disabled: this.props.disabled, maxLength: this.props.maxLength, onKeyDown: ss.mkdel(this, this.$handleKeyDown), onKeyUp: ss.mkdel(this, this.$handleKeyUp) };
      var textInput = $spiff_DOMElements.input(htmlProps);
      var $t3 = $spiff_DOMElements.div;
      var $t1 = new EventUtils.EventHandleSpec();
      $t1.tap = ss.mkdel(this, function(e) {
        this.$increment();
      });
      var $t2 = new EventUtils.EventHandleSpec();
      $t2.tap = ss.mkdel(this, function(e1) {
        this.$decrement();
      });
      var buttonGroup = $t3({ className: 'tab-unification-spinner-btn-group' + ' ' + 'tab-unification-spinner-btn-group-vertical' }, EventUtils.EventForwarder.div($t1, { className: 'tab-unification-spinner-btn' }, $spiff_DOMElements.span({ className: 'tab-img-triangle-up', key: 'tab-img-triangle-up' })), EventUtils.EventForwarder.div($t2, { className: 'tab-unification-spinner-btn' }, $spiff_DOMElements.span({ className: 'tab-img-triangle-down', key: 'tab-img-triangle-down' })));
      var spinner = $spiff_DOMElements.div({ className: 'tab-unification-spinner-ctrl' + (this.props.disabled ? ' disabled' : '') }, textInput, buttonGroup);
      if (ss.isValue(this.props.label)) {
        spinner = $spiff_DOMElements.div(null, $spiff_DOMElements.span({ className: 'tab-unification-spinner-label' + (this.props.disabled ? ' disabled' : '') }, this.props.label), spinner);
      }
      spinner = $spiff_DOMElements.div({ className: ss.coalesce(this.props.styleClass, 'tab-outline-spinner') }, spinner);
      if (ss.isValue(this.props.extraCssClass)) {
        spinner = $spiff_DOMElements.div({ className: this.props.extraCssClass }, spinner);
      }
      return spinner;
    },
    componentWillReceiveProps: function VerticalSpinnerComponent$ComponentWillReceiveProps(nextProps) {
      this.setState($spiff_VerticalSpinnerComponent.$stateFromValue(nextProps.initialValue));
    },
    componentWillUnmount: function VerticalSpinnerComponent$ComponentWillUnmount() {
      this.$clearDelayedUpdate();
    },
    $onInputChange: function VerticalSpinnerComponent$OnInputChange(formEvent) {
      this.$clearDelayedUpdate();
      var element = ss.cast(formEvent.target, ss.isValue(formEvent.target) && (ss.isInstanceOfType(formEvent.target, Element) && formEvent.target.tagName === 'INPUT'));
      this.setState({ value: this.state.value, pendingValue: this.state.pendingValue, displayValue: element.value });
    },
    $acceptInput: function VerticalSpinnerComponent$AcceptInput(ignored) {
      this.$clearDelayedUpdate();
      var newValue = {};
      if (!ss.Int32.tryParse(this.state.displayValue, newValue)) {
        newValue.$ = this.state.value;
      }
      this.$updateValue(newValue.$);
    },
    $handleKeyDown: function VerticalSpinnerComponent$HandleKeyDown(e) {
      var newValue = this.state.pendingValue;
      switch (e.keyCode) {
        case 38: {
          this.$clearDelayedUpdate();
          newValue += this.props.stepSize;
          this.$setPendingState(newValue);
          this.$updateWhenKeydown(newValue);
          break;
        }
        case 40: {
          this.$clearDelayedUpdate();
          newValue -= this.props.stepSize;
          this.$setPendingState(newValue);
          this.$updateWhenKeydown(newValue);
          break;
        }
        case 13: {
          this.$acceptInput(null);
          break;
        }
      }
    },
    $updateWhenKeydown: function VerticalSpinnerComponent$UpdateWhenKeydown(newValue) {
      if (this.props.updateWhenKeyDown) {
        this.$doDelayedUpdate(newValue);
      }
    },
    $handleKeyUp: function VerticalSpinnerComponent$HandleKeyUp(e) {
      if (this.props.updateWhenKeyDown) {
        return;
      }
      switch (e.keyCode) {
        case 38:
        case 40: {
          this.$doDelayedUpdate(this.state.pendingValue);
          break;
        }
      }
    },
    $increment: function VerticalSpinnerComponent$Increment() {
      if (this.props.disabled) {
        return;
      }
      this.$doDelayedUpdate(this.state.pendingValue + this.props.stepSize);
    },
    $decrement: function VerticalSpinnerComponent$Decrement() {
      if (this.props.disabled) {
        return;
      }
      this.$doDelayedUpdate(this.state.pendingValue - this.props.stepSize);
    },
    $doDelayedUpdate: function VerticalSpinnerComponent$DoDelayedUpdate(newValue) {
      this.$clearDelayedUpdate();
      if (this.props.actionDelay === 0) {
        this.$updateValue(newValue);
      }
      else {
        this.$setPendingState(newValue);
        this.$applyTimer = window.setTimeout(ss.mkdel(this, function() {
          this.$updateValue(this.state.pendingValue);
        }), this.props.actionDelay);
      }
    },
    $clearDelayedUpdate: function VerticalSpinnerComponent$ClearDelayedUpdate() {
      this.$applyTimer = tab.MiscUtil.clearTimeout(this.$applyTimer);
    },
    $updateValue: function VerticalSpinnerComponent$UpdateValue(newValue) {
      newValue = this.$forceInBounds(newValue);
      var shouldNotify = newValue !== this.state.value;
      this.setState($spiff_VerticalSpinnerComponent.$stateFromValue(newValue));
      if (shouldNotify && !ss.staticEquals(this.props.onValueChanged, null)) {
        this.props.onValueChanged(newValue);
      }
    },
    $forceInBounds: function VerticalSpinnerComponent$ForceInBounds(newValue) {
      if (ss.isValue(this.props.minValue)) {
        newValue = Math.max(newValue, ss.unbox(this.props.minValue));
      }
      if (ss.isValue(this.props.maxValue)) {
        newValue = Math.min(newValue, ss.unbox(this.props.maxValue));
      }
      return newValue;
    },
    $setPendingState: function VerticalSpinnerComponent$SetPendingState(newValue) {
      newValue = this.$forceInBounds(newValue);
      this.setState({ value: this.state.value, pendingValue: newValue, displayValue: newValue.toString() });
    }
  }, {
    $stateFromValue: function VerticalSpinnerComponent$StateFromValue(value) {
      return { value: value, pendingValue: value, displayValue: value.toString() };
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.VerticalSpinnerProps
  var $spiff_VerticalSpinnerProps = global.spiff.VerticalSpinnerProps = ss.mkType($asm, 'spiff.VerticalSpinnerProps', function() {
    this.styleClass = 'tab-outline-spinner';
    this.extraCssClass = null;
    this.label = null;
    this.initialValue = 0;
    this.maxValue = null;
    this.minValue = null;
    this.maxLength = 16;
    this.stepSize = 1;
    this.disabled = false;
    this.disabledText = null;
    this.onValueChanged = null;
    this.actionDelay = 0;
    this.updateWhenKeyDown = false;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.WaitingComponent
  var $spiff_WaitingComponent = global.spiff.WaitingComponent = ss.mkType($asm, 'spiff.WaitingComponent', function(props, context) {
    $spiff_PureRenderComponent.$ctor1.call(this, props, context);
  }, {
    render: function WaitingComponent$Render() {
      var title = this.props.title;
      var message = this.props.message;
      var showButton = ss.coalesce(this.props.showButton, true);
      var buttonType = ss.coalesce(this.props.buttonType, 7);
      var $t1 = this.props.buttonLabel;
      if (ss.isNullOrUndefined($t1)) {
        $t1 = tab.Strings.Cancel;
      }
      var buttonLabel = $t1;
      var labelStyleOverride = { fontSize: '24px' };
      var containerStyle = { height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' };
      return $spiff_DOMElements.div({ className: 'cancelContainer', style: containerStyle }, (ss.isValue(title) ? ss.mkdel(this, function() {
        return this.$renderItem(React.createElement(SharedWidgets.InputLabelWidget, { testId: 'title', style: labelStyleOverride, children: title }));
      })() : null), this.$renderItem(React.createElement(SharedWidgets.ActivitySpinnerWidget, { testId: 'cancelSpinner' })), (ss.isValue(message) ? ss.mkdel(this, function() {
        return this.$renderItem(React.createElement(SharedWidgets.InputLabelWidget, { testId: 'message', children: message }));
      })() : null), (showButton ? ss.mkdel(this, function() {
        return this.$renderItem(React.createElement(SharedWidgets.ButtonWidget, { handleClick: ss.mkdel(this, function(e) {
          this.props.onButtonClick();
        }), buttonType: buttonType, testId: 'cancelButton', children: buttonLabel, disabled: this.props.disableButton }));
      })() : null));
    },
    $renderItem: function WaitingComponent$RenderItem(el) {
      var itemStyle = { marginTop: SharedWidgets.TabStyles.Spacing.DefaultSpace + 'px', marginBottom: SharedWidgets.TabStyles.Spacing.DefaultSpace + 'px' };
      return $spiff_DOMElements.div({ style: itemStyle }, el);
    }
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Components.WaitingComponentProps
  var $spiff_WaitingComponentProps = global.spiff.WaitingComponentProps = ss.mkType($asm, 'spiff.WaitingComponentProps', function() {
    this.title = null;
    this.message = null;
    this.showButton = null;
    this.disableButton = false;
    this.buttonType = null;
    this.buttonLabel = null;
    this.onButtonClick = null;
  });
  ////////////////////////////////////////////////////////////////////////////////
  // Tableau.JavaScript.Spiff.UI.Widget
  var $spiff_Widget = global.spiff.Widget = ss.mkType($asm, 'spiff.Widget', function(element) {
    this.disposables = new tab.DisposableHolder();
    this.$instanceId = 0;
    this.$widgetId = null;
    this.$1$DisposedField = null;
    this.$1$PropertyChangedField = null;
    this.element = null;
    this.addedToDom = false;
    tab.Param.verifyValue(element, 'element');
    this.element = element;
    element.addClass($spiff_Widget.$widgetCssClass);
    element.data($spiff_Widget.$widgetInstanceDataKey, this);
    $spiff_Widget.$nextInstanceId++;
    this.$instanceId = $spiff_Widget.$nextInstanceId;
  }, {
    add_disposed: function Widget$add_Disposed(value) {
      this.$1$DisposedField = ss.delegateCombine(this.$1$DisposedField, value);
    },
    remove_disposed: function Widget$remove_Disposed(value) {
      this.$1$DisposedField = ss.delegateRemove(this.$1$DisposedField, value);
    },
    add_propertyChanged: function Widget$add_PropertyChanged(value) {
      this.$1$PropertyChangedField = ss.delegateCombine(this.$1$PropertyChangedField, value);
    },
    remove_propertyChanged: function Widget$remove_PropertyChanged(value) {
      this.$1$PropertyChangedField = ss.delegateRemove(this.$1$PropertyChangedField, value);
    },
    get_name: function Widget$get_Name() {
      return ss.getTypeFullName(ss.getInstanceType(this));
    },
    get_instanceId: function Widget$get_InstanceId() {
      return this.$instanceId;
    },
    get_eventNamespace: function Widget$get_EventNamespace() {
      return ss.formatString('.{0}_{1}', this.$instanceId, ss.replaceAllString(ss.getTypeFullName(ss.getInstanceType(this)), '.', '_'));
    },
    get_widgetId: function Widget$get_WidgetId() {
      return this.$widgetId;
    },
    set_widgetId: function Widget$set_WidgetId(value) {
      if (!ss.isNullOrEmptyString(this.$widgetId) && tab.StyleUtil.isValidCssClassName(this.$widgetId)) {
        this.element.removeClass(this.$widgetId);
      }
      this.$widgetId = value;
      if (!ss.isNullOrEmptyString(this.$widgetId) && tab.StyleUtil.isValidCssClassName(this.$widgetId)) {
        this.element.addClass(this.$widgetId);
      }
    },
    get_hoverTooltipText: function Widget$get_HoverTooltipText() {
      return this.element.attr('title');
    },
    set_hoverTooltipText: function Widget$set_HoverTooltipText(value) {
      tab.DomUtil.setNativeTooltip(this.element, value);
    },
    enableTextSelection: function Widget$EnableTextSelection() {
      $spiff_Widget.enableTextSelectionOnElement(this.element);
      return this;
    },
    disableTextSelection: function Widget$DisableTextSelection() {
      $spiff_Widget.disableTextSelectionOnElement(this.element);
      return this;
    },
    dispose: function Widget$Dispose() {
      this.disposables.dispose();
      this.element.removeData($spiff_Widget.$widgetInstanceDataKey);
      this.element.remove();
      this.onDisposed(ss.EventArgs.Empty);
    },
    toString: function Widget$ToString() {
      return this.get_name();
    },
    raisePropertyChanged: function Widget$RaisePropertyChanged(property) {
      if (ss.isValue(this.$1$PropertyChangedField)) {
        this.$1$PropertyChangedField(this, new tab.PropertyChangedEventArgs(property));
      }
    },
    createNamespacedEventName: function Widget$CreateNamespacedEventName(eventName) {
      return eventName + this.get_eventNamespace();
    },
    stopPropogationOfInputEvents: function Widget$StopPropogationOfInputEvents() {
      tab.DomUtil.stopPropagationOfInputEvents(this.element, this.get_eventNamespace());
    },
    handleInputEvents: function Widget$HandleInputEvents(handler) {
      tab.DomUtil.handleInputEvents(this.element, this.get_eventNamespace(), handler);
    },
    onDisposed: function Widget$OnDisposed(args) {
      if (ss.isValue(this.$1$DisposedField)) {
        this.$1$DisposedField(this, ss.EventArgs.Empty);
      }
    },
    addToDom: function Widget$AddToDom(parent) {
      parent.append(this.element);
      this.onAddedToDom();
    },
    prependToDom: function Widget$PrependToDom(parent) {
      parent.prepend(this.element);
      this.onAddedToDom();
    },
    onAddedToDom: function Widget$OnAddedToDom() {
      tab.Log.get(this).debug('Added to DOM: alreadyAdded=%s', [this.addedToDom]);
      this.addedToDom = true;
    },
    addClass: function Widget$AddClass(className) {
      this.element.addClass(className);
    }
  }, {
    enableTextSelectionOnElement: function Widget$EnableTextSelectionOnElement(element) {
      element.removeClass('tab-unselectable');
      element.addClass($spiff_Widget.selectableNodeClass);
      element.off($spiff_Widget.$selectionEventNamespace);
    },
    disableTextSelectionOnElement: function Widget$DisableTextSelectionOnElement(element) {
      if (BrowserSupport.BrowserSupport.IsIE()) {
        return;
      }
      if (BrowserSupport.BrowserSupport.IsMobile()) {
        return;
      }
      element.removeClass($spiff_Widget.selectableNodeClass);
      element.addClass('tab-unselectable');
      if (BrowserSupport.BrowserSupport.SelectStart()) {
        var eventName = 'selectstart' + $spiff_Widget.$selectionEventNamespace;
        element.on(eventName, function(e) {
          if (tab.DomUtil.isFocusableTextElement(e.target)) {
            return;
          }
          e.preventDefault();
        });
      }
    },
    findWidget: function Widget$FindWidget(element, widgetType) {
      tab.Param.verifyValue(element, 'element');
      var current = element;
      var widget;
      widgetType = widgetType || $spiff_Widget;
      do {
        widget = ss.cast(current.data($spiff_Widget.$widgetInstanceDataKey), $spiff_Widget);
        if (ss.isValue(widget) && !ss.isAssignableFrom(widgetType, ss.getInstanceType(widget))) {
          widget = null;
        }
        current = current.parent('.' + $spiff_Widget.$widgetCssClass);
      } while (ss.isNullOrUndefined(widget) && !current.is('body') && current.length > 0);
      return (ss.isNullOrUndefined(widget) ? null : widget);
    },
    getWidgets: function Widget$GetWidgets(elements, widgetType) {
      var widgets = [];
      widgetType = widgetType || $spiff_Widget;
      var widget;
      elements.each(function(i, e) {
        widget = ss.cast($(e).data($spiff_Widget.$widgetInstanceDataKey), $spiff_Widget);
        if (ss.isValue(widget) && ss.isAssignableFrom(widgetType, ss.getInstanceType(widget))) {
          widgets.push(widget);
        }
      });
      return widgets;
    }
  });
  ss.initClass($spiff_$AugmentedIScroll, IScroll);
  ss.initInterface($spiff_IListViewScrollHandler, { get_scrollViewPagePosition: null, get_scrollViewSize: null, scrollToElement: null });
  ss.initClass($spiff_$DefaultListViewScrollHandler, null, [$spiff_IListViewScrollHandler]);
  ss.initInterface($spiff_ITextInputViewTemplate, { get_domRootElement: null, get_inputElement: null });
  ss.initClass($spiff_Template, null, [ss.IDisposable]);
  ss.initClass($spiff_$EditableTextViewTemplate, $spiff_Template, [ss.IDisposable, $spiff_ITextInputViewTemplate]);
  ss.initClass($spiff_$FocusManager$NavigationKeyState);
  ss.initClass($spiff_ScrollingComponent, React.Component);
  ss.initClass($spiff_$IScrollScrollingComponent, $spiff_ScrollingComponent);
  ss.initInterface($spiff_IScrollingControl, { get_x: null, get_y: null, get_maxScrollX: null, get_maxScrollY: null, get_canScroll: null, scrollBy: null, scrollTo: null, scrollToElement: null, destroy: null, resetPosition: null, refresh: null, handleEvent: null });
  ss.initClass($spiff_$IScrollScrollingComponent$IScrollScrollingControl, null, [$spiff_IScrollingControl]);
  ss.initClass($spiff_$MenuItemTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initClass($spiff_$MenuItemTemplate$MenuTemplateBuilder, null, [ss.IDisposable]);
  ss.initClass($spiff_$ScrollableViewListViewScrollHandler, null, [$spiff_IListViewScrollHandler]);
  ss.initClass($spiff_$SelectableButtonComponent, ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]));
  ss.initClass($spiff_$TabControlLabelTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initInterface($spiff_ITabControlTemplate, { get_root: null, get_tabs: null, get_contentArea: null, createTabLabel: null });
  ss.initClass($spiff_$TabControlTemplate, $spiff_Template, [ss.IDisposable, $spiff_ITabControlTemplate]);
  ss.initClass($spiff_$TextInputViewTemplate, $spiff_Template, [ss.IDisposable, $spiff_ITextInputViewTemplate]);
  ss.initClass($spiff_AriaAttrName);
  ss.initClass($spiff_AriaRole);
  ss.initClass($spiff_PureRenderComponent, React.Component);
  $spiff_PureRenderComponent.$ctor1.prototype = $spiff_PureRenderComponent.prototype;
  ss.initClass($spiff_ArrowDropdownButtonComponent, $spiff_PureRenderComponent);
  ss.initClass($spiff_BaseViewModel, null, [tab.IViewModel, ss.IDisposable]);
  ss.initClass($spiff_Widget, null, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_Button, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_ButtonComponent, ss.makeGenericType($spiff_ButtonBaseComponent$1, [Object]));
  ss.initClass($spiff_TextInputView, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_ClearableTextInputView, $spiff_TextInputView, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_ClearableTextInputViewTemplate, $spiff_Template, [ss.IDisposable, $spiff_ITextInputViewTemplate]);
  ss.initClass($spiff_ClickBuster);
  ss.initClass($spiff_ClickHandler, null, [ss.IDisposable]);
  ss.initClass($spiff_ComboBoxComponent, React.Component);
  ss.initClass($spiff_MenuViewTheme);
  ss.initClass($spiff_ComboBoxDropdownMenuTheme, $spiff_MenuViewTheme);
  ss.initClass($spiff_ComboBoxItem);
  ss.initClass($spiff_ComboBoxMenuTheme, $spiff_MenuViewTheme);
  ss.initClass($spiff_ComboBoxProps, Object);
  ss.initClass($spiff_ComboBoxState);
  ss.initClass($spiff_ComboBoxTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initClass($spiff_ComboBoxView, ss.makeGenericType($spiff_BaseView$1, [$spiff_ComboBoxViewModel]), [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_ComboBoxViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initInterface($spiff_IHasEnabledState, { add_enabledChanged: null, remove_enabledChanged: null, get_enabled: null, set_enabled: null });
  ss.initClass($spiff_ComboBoxViewModel, ss.makeGenericType($spiff_BaseReactViewModel$1, [$spiff_ComboBoxProps]), [tab.IViewModel, ss.IDisposable, ss.makeGenericType($spiff_IPropsProvider$1, [$spiff_ComboBoxProps]), $spiff_IHasEnabledState]);
  ss.initClass($spiff_CompositeSearchWidget, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_CompositeSearchWidgetInitialSearchTextInfo);
  ss.initInterface($spiff_ICompositeSearchWidgetTemplate, { get_template: null, get_domRootElement: null, get_textInputView: null, get_searchButton: null, get_clearButton: null, disposeTemplate: null });
  ss.initClass($spiff_CompositeSearchWidgetTemplate, $spiff_Template, [$spiff_ICompositeSearchWidgetTemplate, ss.IDisposable]);
  ss.initClass($spiff_CustomComboBoxItem, $spiff_ComboBoxItem);
  ss.initClass($spiff_CustomCursor);
  ss.initClass($spiff_IScrollTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initClass($spiff_CustomIScrollTemplate, $spiff_IScrollTemplate, [ss.IDisposable]);
  ss.initClass($spiff_ScrollableView, ss.makeGenericType($spiff_BaseView$1, [$spiff_ScrollableViewModel]), [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_ScrollableViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_IScrollView, $spiff_ScrollableView, [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_ScrollableViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_CustomIScrollView, $spiff_IScrollView, [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_ScrollableViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_MenuItem);
  ss.initClass($spiff_CustomMenuItem, $spiff_MenuItem);
  ss.initClass($spiff_DefaultIScrollTemplate, $spiff_IScrollTemplate, [ss.IDisposable]);
  ss.initClass($spiff_DefaultIScrollView, $spiff_IScrollView, [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_ScrollableViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_DesktopMenuAdapter);
  ss.initClass($spiff_Dialog, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_DividerComboBoxItem, $spiff_ComboBoxItem);
  ss.initClass($spiff_DOMElements);
  ss.initClass($spiff_Glass, $spiff_Widget, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_DragSafeGlass, $spiff_Glass, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_DragSortListItemDragAvatar, null, [ss.makeGenericType(tab.IView$1, [tab.IViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_DropdownComponent, React.Component);
  ss.initClass($spiff_EditableTextLabelComponent, ss.makeGenericType($spiff_ReactSpiffAdapter$3, [$spiff_EditableTextView, Object, Object]));
  ss.initClass($spiff_EditableTextView, $spiff_TextInputView, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_EventUtil);
  ss.initClass($spiff_EventUtilsInitializer);
  ss.initClass($spiff_GroupSelection);
  ss.initClass($spiff_MultiSelectGroupSelection, $spiff_GroupSelection);
  ss.initClass($spiff_ExclusiveMultiSelectGroupSelection, $spiff_MultiSelectGroupSelection);
  ss.initClass($spiff_SingleSelectGroupSelection, $spiff_GroupSelection);
  ss.initClass($spiff_ExclusiveSingleSelectGroupSelection, $spiff_SingleSelectGroupSelection);
  ss.initClass($spiff_FocusManager);
  ss.initClass($spiff_FullscreenUtil);
  ss.initClass($spiff_GenericDropdownButtonComponent, $spiff_PureRenderComponent);
  ss.initClass($spiff_GridIScrollHandler, React.Component, [Object]);
  ss.initClass($spiff_HorizontalSliderComponent, $spiff_PureRenderComponent);
  ss.initClass($spiff_HoverAddClassBehavior);
  ss.initClass($spiff_HoverBehavior, null, [ss.IDisposable]);
  $spiff_HoverBehavior.$ctor1.prototype = $spiff_HoverBehavior.prototype;
  ss.initClass($spiff_IconButton, $spiff_Button, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_IconButtonComponent, React.Component);
  ss.initClass($spiff_IconButtonState);
  ss.initInterface($spiff_IContent, { get_viewType: null, get_viewModel: null, disposeViewModel: null });
  ss.initInterface($spiff_IDialogContent, { add_hideDialogRequested: null, remove_hideDialogRequested: null, onDialogHidden: null }, [ss.makeGenericType($spiff_IPropsProvider$1, [Object])]);
  ss.initInterface($spiff_IListItemContentCreator, { createListItemContent: null });
  ss.initInterface($spiff_IListItemDragAvatarCreator, { createListItemDragAvatar: null });
  ss.initInterface($spiff_IListViewDragFeedback, { add_dragStarting: null, remove_dragStarting: null, add_dragEnded: null, remove_dragEnded: null, get_avatarCreator: null, set_avatarCreator: null, startDrag: null });
  ss.initClass($spiff_InteractAsButtonWrapperComponent, $spiff_PureRenderComponent);
  ss.initInterface($spiff_IScrollable, { get_canScrollX: null, get_canScrollY: null, get_docSize: null, get_actualViewSize: null, set_actualViewSize: null, get_effectiveViewSize: null, get_scrollPos: null, set_scrollPos: null, setXPos: null, setYPos: null });
  ss.initClass($spiff_IScrollComponent, React.Component);
  ss.initInterface($spiff_IScroller, { get_canScrollX: null, get_canScrollY: null, get_scrollPos: null, get_maxScroll: null, get_visibleArea: null, scrollX: null, scrollY: null, setScrollTarget: null, refresh: null });
  ss.initClass($spiff_IScrollProps);
  ss.initInterface($spiff_ISelectable, { add_selectableDisposed: null, remove_selectableDisposed: null, add_selectedChanging: null, remove_selectedChanging: null, add_selectedChanged: null, remove_selectedChanged: null, get_selectionId: null, set_selectionId: null, get_selected: null, set_selected: null, get_selectedClass: null, set_selectedClass: null });
  ss.initInterface($spiff_IUberPopupContent, { updateUberPopupViewModel: null }, [$spiff_IContent]);
  ss.initClass($spiff_JQueryGestureExtensions);
  ss.initClass($spiff_LabelButton, $spiff_Button, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  ss.initClass($spiff_ToggleButton, $spiff_Button, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $spiff_ISelectable]);
  ss.initClass($spiff_LabelToggleButton, $spiff_ToggleButton, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $spiff_ISelectable]);
  ss.initClass($spiff_LineEditWithButtonComponent, React.Component);
  ss.initClass($spiff_ListItemDragSource);
  ss.initClass($spiff_SelectableGroup, null, [ss.IDisposable]);
  ss.initClass($spiff_ListItemGroup, $spiff_SelectableGroup, [ss.IDisposable]);
  ss.initClass($spiff_ListItemView, $spiff_ToggleButton, [tab.IWidget, tab.IAppendableView, ss.IDisposable, $spiff_ISelectable]);
  ss.initClass($spiff_ListItemViewModel, $spiff_BaseViewModel, [tab.IViewModel, ss.IDisposable]);
  ss.initClass($spiff_ListItemViewModelCollectionBuilder);
  ss.initClass($spiff_ListView, ss.makeGenericType($spiff_BaseView$1, [$spiff_ListViewModel]), [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_ListViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_ListViewDragSortFeedback, null, [$spiff_IListViewDragFeedback, ss.IDisposable]);
  ss.initClass($spiff_ListViewModel, $spiff_BaseViewModel, [tab.IViewModel, ss.IDisposable, ss.makeGenericType($spiff_IPropsProvider$1, [Object])]);
  ss.initClass($spiff_ListViewTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initClass($spiff_Menu);
  ss.initClass($spiff_MenuItemBuilder);
  ss.initClass($spiff_MenuItemDividerTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initClass($spiff_MenuItemTextInputTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initClass($spiff_MenuTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initClass($spiff_MenuView, ss.makeGenericType($spiff_BaseMenuView$1, [$spiff_MenuViewModel]), [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_MenuViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_MenuViewModel, $spiff_BaseViewModel, [tab.IViewModel, ss.IDisposable]);
  ss.initClass($spiff_ModalDialog, $spiff_Dialog, [tab.IWidget, tab.IAppendableView, ss.IDisposable]);
  $spiff_ModalDialog.$ctor1.prototype = $spiff_ModalDialog.prototype;
  ss.initClass($spiff_MoveDragInstance, EventUtils.DragInstance);
  $spiff_MoveDragInstance.$ctor1.prototype = $spiff_MoveDragInstance.prototype;
  ss.initClass($spiff_MoveDragSource, null, [ss.IDisposable]);
  ss.initClass($spiff_NoopDropTarget, EventUtils.DelegateDropTarget);
  ss.initClass($spiff_OrientationHandler);
  ss.initClass($spiff_PopupListView, $spiff_ListView, [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_ListViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_PopupListViewModel, $spiff_ListViewModel, [tab.IViewModel, ss.IDisposable, ss.makeGenericType($spiff_IPropsProvider$1, [Object]), $spiff_IUberPopupContent, $spiff_IContent]);
  ss.initClass($spiff_PureRender);
  ss.initClass($spiff_ReactComponentExtensions);
  ss.initClass($spiff_ReactElement);
  ss.initClass($spiff_ReactRefs);
  ss.initClass($spiff_ResizeDragSource, $spiff_MoveDragSource, [ss.IDisposable]);
  ss.initClass($spiff_ScrollableViewModel, $spiff_BaseViewModel, [tab.IViewModel, ss.IDisposable]);
  $spiff_ScrollableViewModel.$ctor1.prototype = $spiff_ScrollableViewModel.prototype;
  ss.initClass($spiff_ScrollingProps);
  ss.initClass($spiff_ScrollTo);
  ss.initClass($spiff_SelectableButtonGroupComponent, React.Component);
  ss.initClass($spiff_SelectableButtonGroupItem);
  ss.initClass($spiff_SelectionEventArgs, ss.CancelEventArgs);
  ss.initClass($spiff_SharedWidgetsPointerEventAdapter, null, [Object]);
  ss.initClass($spiff_ShowMenuOptions);
  ss.initClass($spiff_SpiffBrowserViewport);
  ss.initClass($spiff_StatelessDropdownComponent, React.Component);
  ss.initClass($spiff_StatelessHorizontalSliderComponent, $spiff_PureRenderComponent);
  ss.initClass($spiff_StyledTextButton);
  ss.initClass($spiff_TabControl, null, [ss.IDisposable]);
  ss.initClass($spiff_TableauClickHandler, null, [ss.IDisposable]);
  ss.initClass($spiff_TableauEventHandlerTracker);
  ss.initClass($spiff_TextDropdownButtonComponent, $spiff_PureRenderComponent);
  ss.initClass($spiff_ToggleButtonViewModel, $spiff_BaseViewModel, [tab.IViewModel, ss.IDisposable]);
  ss.initClass($spiff_UberPopupShowOptions);
  $spiff_UberPopupShowOptions.$ctor1.prototype = $spiff_UberPopupShowOptions.prototype;
  ss.initClass($spiff_UberPopupTemplate, $spiff_Template, [ss.IDisposable]);
  ss.initClass($spiff_UberPopupView, ss.makeGenericType($spiff_BaseView$1, [$spiff_UberPopupViewModel]), [tab.IWidget, ss.makeGenericType(tab.IView$1, [$spiff_UberPopupViewModel]), ss.IDisposable, tab.IAppendableView]);
  ss.initClass($spiff_UberPopupViewModel, $spiff_BaseViewModel, [tab.IViewModel, ss.IDisposable]);
  $spiff_UberPopupViewModel.$ctor1.prototype = $spiff_UberPopupViewModel.prototype;
  ss.initClass($spiff_UnificationClassNames);
  ss.initClass($spiff_UnificationDarkMenuTheme, $spiff_MenuViewTheme);
  ss.initClass($spiff_UnificationLightMenuTheme, $spiff_MenuViewTheme);
  ss.initClass($spiff_VerticalSpinnerComponent, React.Component);
  ss.initClass($spiff_VerticalSpinnerProps);
  ss.initClass($spiff_WaitingComponent, $spiff_PureRenderComponent);
  ss.initClass($spiff_WaitingComponentProps);
  (function() {
    $spiff_$EditableTextViewTemplate.$htmlTemplate = "<div class='tab-editable-text-view'><div>" + "<div class='view-mode'><span class = 'text-span'></span></div>" + "<input class='edit-mode' type='text'/>" + '</div></div>';
  })();
  (function() {
    $spiff_$FocusManager$NavigationKeyState.$navKeysDown = new Array(10);
  })();
  (function() {
    $spiff_DOMElements.a = $spiff_DOMElements.$htmlFactory('a');
    $spiff_DOMElements.abbr = $spiff_DOMElements.$htmlFactory('abbr');
    $spiff_DOMElements.address = $spiff_DOMElements.$htmlFactory('address');
    $spiff_DOMElements.area = $spiff_DOMElements.$htmlFactory('area');
    $spiff_DOMElements.article = $spiff_DOMElements.$htmlFactory('article');
    $spiff_DOMElements.aside = $spiff_DOMElements.$htmlFactory('aside');
    $spiff_DOMElements.audio = $spiff_DOMElements.$htmlFactory('audio');
    $spiff_DOMElements.b = $spiff_DOMElements.$htmlFactory('b');
    $spiff_DOMElements.base = $spiff_DOMElements.$htmlFactory('base');
    $spiff_DOMElements.bdi = $spiff_DOMElements.$htmlFactory('bdi');
    $spiff_DOMElements.bdo = $spiff_DOMElements.$htmlFactory('bdo');
    $spiff_DOMElements.big = $spiff_DOMElements.$htmlFactory('big');
    $spiff_DOMElements.blockquote = $spiff_DOMElements.$htmlFactory('blockquote');
    $spiff_DOMElements.body = $spiff_DOMElements.$htmlFactory('body');
    $spiff_DOMElements.br = $spiff_DOMElements.$htmlFactory('br');
    $spiff_DOMElements.button = $spiff_DOMElements.$htmlFactory('button');
    $spiff_DOMElements.canvas = $spiff_DOMElements.$htmlFactory('canvas');
    $spiff_DOMElements.caption = $spiff_DOMElements.$htmlFactory('caption');
    $spiff_DOMElements.cite = $spiff_DOMElements.$htmlFactory('cite');
    $spiff_DOMElements.code = $spiff_DOMElements.$htmlFactory('code');
    $spiff_DOMElements.col = $spiff_DOMElements.$htmlFactory('col');
    $spiff_DOMElements.colgroup = $spiff_DOMElements.$htmlFactory('colgroup');
    $spiff_DOMElements.data = $spiff_DOMElements.$htmlFactory('data');
    $spiff_DOMElements.datalist = $spiff_DOMElements.$htmlFactory('datalist');
    $spiff_DOMElements.dd = $spiff_DOMElements.$htmlFactory('dd');
    $spiff_DOMElements.del = $spiff_DOMElements.$htmlFactory('del');
    $spiff_DOMElements.details = $spiff_DOMElements.$htmlFactory('details');
    $spiff_DOMElements.dfn = $spiff_DOMElements.$htmlFactory('dfn');
    $spiff_DOMElements.dialog = $spiff_DOMElements.$htmlFactory('dialog');
    $spiff_DOMElements.div = $spiff_DOMElements.$htmlFactory('div');
    $spiff_DOMElements.dl = $spiff_DOMElements.$htmlFactory('dl');
    $spiff_DOMElements.dt = $spiff_DOMElements.$htmlFactory('dt');
    $spiff_DOMElements.em = $spiff_DOMElements.$htmlFactory('em');
    $spiff_DOMElements.embed = $spiff_DOMElements.$htmlFactory('embed');
    $spiff_DOMElements.fieldset = $spiff_DOMElements.$htmlFactory('fieldset');
    $spiff_DOMElements.figcaption = $spiff_DOMElements.$htmlFactory('figcaption');
    $spiff_DOMElements.figure = $spiff_DOMElements.$htmlFactory('figure');
    $spiff_DOMElements.footer = $spiff_DOMElements.$htmlFactory('footer');
    $spiff_DOMElements.form = $spiff_DOMElements.$htmlFactory('form');
    $spiff_DOMElements.h1 = $spiff_DOMElements.$htmlFactory('h1');
    $spiff_DOMElements.h2 = $spiff_DOMElements.$htmlFactory('h2');
    $spiff_DOMElements.h3 = $spiff_DOMElements.$htmlFactory('h3');
    $spiff_DOMElements.h4 = $spiff_DOMElements.$htmlFactory('h4');
    $spiff_DOMElements.h5 = $spiff_DOMElements.$htmlFactory('h5');
    $spiff_DOMElements.h6 = $spiff_DOMElements.$htmlFactory('h6');
    $spiff_DOMElements.head = $spiff_DOMElements.$htmlFactory('head');
    $spiff_DOMElements.header = $spiff_DOMElements.$htmlFactory('header');
    $spiff_DOMElements.hgroup = $spiff_DOMElements.$htmlFactory('hgroup');
    $spiff_DOMElements.hr = $spiff_DOMElements.$htmlFactory('hr');
    $spiff_DOMElements.html = $spiff_DOMElements.$htmlFactory('html');
    $spiff_DOMElements.i = $spiff_DOMElements.$htmlFactory('i');
    $spiff_DOMElements.iframe = $spiff_DOMElements.$htmlFactory('iframe');
    $spiff_DOMElements.img = $spiff_DOMElements.$htmlFactory('img');
    $spiff_DOMElements.input = $spiff_DOMElements.$htmlFactory('input');
    $spiff_DOMElements.ins = $spiff_DOMElements.$htmlFactory('ins');
    $spiff_DOMElements.kbd = $spiff_DOMElements.$htmlFactory('kbd');
    $spiff_DOMElements.keygen = $spiff_DOMElements.$htmlFactory('keygen');
    $spiff_DOMElements.label = $spiff_DOMElements.$htmlFactory('label');
    $spiff_DOMElements.legend = $spiff_DOMElements.$htmlFactory('legend');
    $spiff_DOMElements.li = $spiff_DOMElements.$htmlFactory('li');
    $spiff_DOMElements.link = $spiff_DOMElements.$htmlFactory('link');
    $spiff_DOMElements.main = $spiff_DOMElements.$htmlFactory('main');
    $spiff_DOMElements.map = $spiff_DOMElements.$htmlFactory('map');
    $spiff_DOMElements.mark = $spiff_DOMElements.$htmlFactory('mark');
    $spiff_DOMElements.menu = $spiff_DOMElements.$htmlFactory('menu');
    $spiff_DOMElements.menuitem = $spiff_DOMElements.$htmlFactory('menuitem');
    $spiff_DOMElements.meta = $spiff_DOMElements.$htmlFactory('meta');
    $spiff_DOMElements.meter = $spiff_DOMElements.$htmlFactory('meter');
    $spiff_DOMElements.nav = $spiff_DOMElements.$htmlFactory('nav');
    $spiff_DOMElements.noscript = $spiff_DOMElements.$htmlFactory('noscript');
    $spiff_DOMElements.object = $spiff_DOMElements.$htmlFactory('object');
    $spiff_DOMElements.ol = $spiff_DOMElements.$htmlFactory('ol');
    $spiff_DOMElements.optgroup = $spiff_DOMElements.$htmlFactory('optgroup');
    $spiff_DOMElements.option = $spiff_DOMElements.$htmlFactory('option');
    $spiff_DOMElements.output = $spiff_DOMElements.$htmlFactory('output');
    $spiff_DOMElements.p = $spiff_DOMElements.$htmlFactory('p');
    $spiff_DOMElements.param = $spiff_DOMElements.$htmlFactory('param');
    $spiff_DOMElements.picture = $spiff_DOMElements.$htmlFactory('picture');
    $spiff_DOMElements.pre = $spiff_DOMElements.$htmlFactory('pre');
    $spiff_DOMElements.progress = $spiff_DOMElements.$htmlFactory('progress');
    $spiff_DOMElements.q = $spiff_DOMElements.$htmlFactory('q');
    $spiff_DOMElements.rp = $spiff_DOMElements.$htmlFactory('rp');
    $spiff_DOMElements.rt = $spiff_DOMElements.$htmlFactory('rt');
    $spiff_DOMElements.ruby = $spiff_DOMElements.$htmlFactory('ruby');
    $spiff_DOMElements.s = $spiff_DOMElements.$htmlFactory('s');
    $spiff_DOMElements.samp = $spiff_DOMElements.$htmlFactory('samp');
    $spiff_DOMElements.script = $spiff_DOMElements.$htmlFactory('script');
    $spiff_DOMElements.section = $spiff_DOMElements.$htmlFactory('section');
    $spiff_DOMElements.select = $spiff_DOMElements.$htmlFactory('select');
    $spiff_DOMElements.small = $spiff_DOMElements.$htmlFactory('small');
    $spiff_DOMElements.source = $spiff_DOMElements.$htmlFactory('source');
    $spiff_DOMElements.span = $spiff_DOMElements.$htmlFactory('span');
    $spiff_DOMElements.strong = $spiff_DOMElements.$htmlFactory('strong');
    $spiff_DOMElements.style = $spiff_DOMElements.$htmlFactory('style');
    $spiff_DOMElements.sub = $spiff_DOMElements.$htmlFactory('sub');
    $spiff_DOMElements.summary = $spiff_DOMElements.$htmlFactory('summary');
    $spiff_DOMElements.sup = $spiff_DOMElements.$htmlFactory('sup');
    $spiff_DOMElements.table = $spiff_DOMElements.$htmlFactory('table');
    $spiff_DOMElements.tbody = $spiff_DOMElements.$htmlFactory('tbody');
    $spiff_DOMElements.td = $spiff_DOMElements.$htmlFactory('td');
    $spiff_DOMElements.textarea = $spiff_DOMElements.$htmlFactory('textarea');
    $spiff_DOMElements.tfoot = $spiff_DOMElements.$htmlFactory('tfoot');
    $spiff_DOMElements.th = $spiff_DOMElements.$htmlFactory('th');
    $spiff_DOMElements.thead = $spiff_DOMElements.$htmlFactory('thead');
    $spiff_DOMElements.time = $spiff_DOMElements.$htmlFactory('time');
    $spiff_DOMElements.title = $spiff_DOMElements.$htmlFactory('title');
    $spiff_DOMElements.tr = $spiff_DOMElements.$htmlFactory('tr');
    $spiff_DOMElements.track = $spiff_DOMElements.$htmlFactory('track');
    $spiff_DOMElements.u = $spiff_DOMElements.$htmlFactory('u');
    $spiff_DOMElements.ul = $spiff_DOMElements.$htmlFactory('ul');
    $spiff_DOMElements.var = $spiff_DOMElements.$htmlFactory('var');
    $spiff_DOMElements.video = $spiff_DOMElements.$htmlFactory('video');
    $spiff_DOMElements.wbr = $spiff_DOMElements.$htmlFactory('wbr');
    $spiff_DOMElements.circle = $spiff_DOMElements.$svgFactory('circle');
    $spiff_DOMElements.clipPath = $spiff_DOMElements.$svgFactory('clipPath');
    $spiff_DOMElements.defs = $spiff_DOMElements.$svgFactory('defs');
    $spiff_DOMElements.ellipse = $spiff_DOMElements.$svgFactory('ellipse');
    $spiff_DOMElements.feColorMatrix = $spiff_DOMElements.$svgFactory('feColorMatrix');
    $spiff_DOMElements.filter = $spiff_DOMElements.$svgFactory('filter');
    $spiff_DOMElements.g = $spiff_DOMElements.$svgFactory('g');
    $spiff_DOMElements.height = $spiff_DOMElements.$svgFactory('height');
    $spiff_DOMElements.image = $spiff_DOMElements.$svgFactory('image');
    $spiff_DOMElements.line = $spiff_DOMElements.$svgFactory('line');
    $spiff_DOMElements.linearGradient = $spiff_DOMElements.$svgFactory('linearGradient');
    $spiff_DOMElements.mask = $spiff_DOMElements.$svgFactory('mask');
    $spiff_DOMElements.path = $spiff_DOMElements.$svgFactory('path');
    $spiff_DOMElements.pattern = $spiff_DOMElements.$svgFactory('pattern');
    $spiff_DOMElements.polygon = $spiff_DOMElements.$svgFactory('polygon');
    $spiff_DOMElements.polyline = $spiff_DOMElements.$svgFactory('polyline');
    $spiff_DOMElements.radialGradient = $spiff_DOMElements.$svgFactory('radialGradient');
    $spiff_DOMElements.rect = $spiff_DOMElements.$svgFactory('rect');
    $spiff_DOMElements.stop = $spiff_DOMElements.$svgFactory('stop');
    $spiff_DOMElements.svg = $spiff_DOMElements.$svgFactory('svg');
    $spiff_DOMElements.text = $spiff_DOMElements.$svgFactory('text');
    $spiff_DOMElements.tspan = $spiff_DOMElements.$svgFactory('tspan');
    $spiff_DOMElements.width = $spiff_DOMElements.$svgFactory('width');
  })();
  (function() {
    $spiff_EventUtil.$eventCounter = 0;
  })();
  (function() {
    $spiff_IScrollComponent.displayName = ss.getTypeName($spiff_IScrollComponent);
  })();
  (function() {
    $spiff_$IScrollScrollingComponent.$displayName = ss.getTypeName($spiff_$IScrollScrollingComponent);
  })();
  (function() {
    $spiff_ScrollingComponent.displayName = ss.getTypeName($spiff_ScrollingComponent);
    $spiff_ScrollingComponent.$classesDictionary = null;
    $spiff_ScrollingComponent.$classesDictionary = {};
    $spiff_ScrollingComponent.$classesDictionary[0] = $spiff_$IScrollScrollingComponent;
  })();
  (function() {
    $spiff_$MenuItemTemplate.$html = "\n<div class='tabMenuItem' role='menuitem' data-test-id='tabMenuItem'>\n  <div class='tabMenuItemNameArea'>\n    <span class='tabMenuItemName' data-test-id='tabMenuItemName'></span>\n  </div>\n</div>";
  })();
  (function() {
    $spiff_UnificationClassNames.designTint = 'tab-DesignTint';
    $spiff_UnificationClassNames.text = 'tab-Text';
    $spiff_UnificationClassNames.darkBackground = 'tab-darkBackground';
    $spiff_UnificationClassNames.button = 'tab-UnifiedButton';
    $spiff_UnificationClassNames.icon = 'tab-Icon';
    $spiff_UnificationClassNames.iconButton = 'tab-IconBtn';
    $spiff_UnificationClassNames.vScrollable = 'tab-vScrollable';
    $spiff_UnificationClassNames.selectableButtonGroup = 'tab-SelectableButtonGroup';
    $spiff_UnificationClassNames.selectionMark = 'tab-SelectionMark';
    $spiff_UnificationClassNames.active = 'active';
    $spiff_UnificationClassNames.hover = 'hover';
    $spiff_UnificationClassNames.hitTestArea = 'tab-HitTestArea';
    $spiff_UnificationClassNames.focused = 'focused';
    $spiff_UnificationClassNames.bordered = 'bordered';
    $spiff_UnificationClassNames.disabled = 'disabled';
    $spiff_UnificationClassNames.selectable = 'selectable';
    $spiff_UnificationClassNames.selected = 'selected';
    $spiff_UnificationClassNames.unselected = 'unselected';
    $spiff_UnificationClassNames.excluded = 'excluded';
    $spiff_UnificationClassNames.textInput = 'tab-TextInput';
    $spiff_UnificationClassNames.horizontalLayout = 'tab-HorizontalLayout';
    $spiff_UnificationClassNames.applyCancelPanel = 'tab-ApplyCancelPanel';
    $spiff_UnificationClassNames.applyCancel = 'apply-cancel';
    $spiff_UnificationClassNames.apply$1 = 'apply';
    $spiff_UnificationClassNames.cancel = 'cancel';
    $spiff_UnificationClassNames.sliderControlClass = 'unification-slider-control';
    $spiff_UnificationClassNames.sliderContainerClass = 'tabHorizontalSliderContainer';
    $spiff_UnificationClassNames.sliderInputClass = 'tabHorizontalSlider';
    $spiff_UnificationClassNames.sliderTextBoxClass = 'tabHorizontalSliderPercentageText';
    $spiff_UnificationClassNames.sliderPercentageClass = 'tabHorizontalSliderPercentageSign';
  })();
  (function() {
    $spiff_$SelectableButtonComponent.$displayName = ss.getTypeName($spiff_$SelectableButtonComponent);
  })();
  (function() {
    $spiff_$TabControlLabelTemplate.$html = "<span class='tabTabLabel'></span>";
  })();
  (function() {
    $spiff_$TabControlTemplate.$html = '<div>' + "<div class='tabTabLabels'></div>" + "<div class='tabTabContentArea'></div>" + '</div>';
  })();
  (function() {
    $spiff_$TextInputViewTemplate.$html = "<div class='tabTextInputView'><input class='tabTextInputViewInputElement' type='text'/></div>";
  })();
  (function() {
    $spiff_ArrowDropdownButtonComponent.displayName = ss.getTypeName($spiff_ArrowDropdownButtonComponent);
  })();
  (function() {
    $spiff_FocusManager.$showIndicatorClass = 'tab-showFocusIndicator';
    $spiff_FocusManager.$keyDownEventName = 'keydown.' + ss.getTypeName($spiff_FocusManager);
    $spiff_FocusManager.$lastInput = 2;
    $spiff_FocusManager.$instance = null;
  })();
  (function() {
    $spiff_FullscreenUtil.$fullscreenEnabledProperty = null;
    $spiff_FullscreenUtil.$fullscreenElementProperty = null;
    $spiff_FullscreenUtil.$exitFullscreenProperty = null;
    $spiff_FullscreenUtil.$requestFullscreenProperty = null;
    $spiff_FullscreenUtil.$onfullscreenchangeProperty = null;
    $spiff_FullscreenUtil.$centeringContainerSelector = '#centeringContainer';
    $spiff_FullscreenUtil.$1$FullscreenStateChangedField = null;
    $spiff_FullscreenUtil.$fullscreenEnabledProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document, ['fullscreenEnabled', 'webkitFullscreenEnabled', 'msFullscreenEnabled', 'mozFullScreenEnabled']);
    $spiff_FullscreenUtil.$fullscreenElementProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document, ['fullscreenElement', 'webkitFullscreenElement', 'msFullscreenElement', 'mozFullScreenElement']);
    $spiff_FullscreenUtil.$exitFullscreenProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document, ['exitFullscreen', 'webkitExitFullscreen', 'msExitFullscreen', 'mozCancelFullScreen']);
    $spiff_FullscreenUtil.$requestFullscreenProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document.documentElement, ['requestFullscreen', 'webkitRequestFullscreen', 'msRequestFullscreen', 'mozRequestFullScreen']);
    $spiff_FullscreenUtil.$onfullscreenchangeProperty = $spiff_FullscreenUtil.$findFirstAvailableProperty(document, ['onfullscreenchange', 'onwebkitfullscreenchange', 'onMSFullscreenChange', 'onmozfullscreenchange']);
    if (ss.isValue($spiff_FullscreenUtil.$onfullscreenchangeProperty) && $spiff_FullscreenUtil.get_fullscreenEnabled()) {
      document.addEventListener($spiff_FullscreenUtil.get_fullscreenChangeEventName().toString(), $spiff_FullscreenUtil.$handleFullscreenChange);
    }
    $spiff_FullscreenUtil.add_fullscreenStateChanged($spiff_FullscreenUtil.$updateTrapFocus);
  })();
  (function() {
    $spiff_Widget.$widgetInstanceDataKey = 'widgetInstance';
    $spiff_Widget.$widgetCssClass = 'tab-widget';
    $spiff_Widget.$selectionEventNamespace = '.tab-disableSelection';
    $spiff_Widget.$nextInstanceId = 0;
    $spiff_Widget.selectableNodeClass = null;
    if (tab.FeatureParamsLookup.getBool(33) === true) {
      $(document.head).append('<style type="text/css">.tab-DesignTint { background-color: #F1F1FC; }</style>');
    }
    $spiff_Widget.selectableNodeClass = 'tab-selectable';
  })();
  (function() {
    $spiff_ClickBuster.suppressClickBustingClass = 'suppressClickBusting';
    $spiff_ClickBuster.$clickRadius = 25;
    $spiff_ClickBuster.$coordinates = null;
    $spiff_ClickBuster.$1$ClickBustDetectedField = null;
  })();
  (function() {
    $spiff_ButtonComponent.displayName = ss.getTypeName($spiff_ButtonComponent);
  })();
  (function() {
    $spiff_TextInputView.textPropertyName = 'text';
  })();
  (function() {
    $spiff_ClearableTextInputViewTemplate.$html = "<div class='tabTextInputView'>" + "<span class='tabClearableTextBoxClearButton'></span>" + "<div class='tabTextInputViewInputElementContainer'><input class='tabTextInputViewInputElement' type='text'/></div>" + '</div>';
  })();
  (function() {
    $spiff_ClickHandler.$moveSlop = 10;
    $spiff_ClickHandler.$clickTimeout = 300;
    $spiff_ClickHandler.$instanceId = 0;
  })();
  (function() {
    $spiff_SelectableButtonGroupComponent.displayName = ss.getTypeName($spiff_SelectableButtonGroupComponent);
    $spiff_SelectableButtonGroupComponent.$allKey = '__ALL__';
  })();
  (function() {
    $spiff_GenericDropdownButtonComponent.displayName = ss.getTypeName($spiff_GenericDropdownButtonComponent);
  })();
  (function() {
    $spiff_TextDropdownButtonComponent.displayName = ss.getTypeName($spiff_TextDropdownButtonComponent);
  })();
  (function() {
    $spiff_SpiffBrowserViewport.getSpiffBrowserViewportFunc = null;
  })();
  (function() {
    $spiff_StatelessDropdownComponent.displayName = ss.getTypeName($spiff_StatelessDropdownComponent);
    $spiff_StatelessDropdownComponent.$selectorOuterContainerRef = 'selector';
    $spiff_StatelessDropdownComponent.$positioningElementRef = 'relative';
    $spiff_StatelessDropdownComponent.$selectorEndMargin = 3;
    $spiff_StatelessDropdownComponent.$shiftBuffer = 2 * $spiff_StatelessDropdownComponent.$selectorEndMargin + 6 + 1;
  })();
  (function() {
    $spiff_ComboBoxComponent.displayName = ss.getTypeName($spiff_ComboBoxComponent);
  })();
  (function() {
    $spiff_MenuItem.$nextIdentifier = 0;
  })();
  (function() {
    $spiff_ComboBoxTemplate.$htmlTemplate = "<span role='button' aria-live='off' aria-expanded='false' aria-haspopup='true' aria-atomic='true' aria-relevant='text' class='tabComboBox tab-ctrl-formatted-widget tab-ctrl-formatted-darker-border-hover' tabindex='0'>" + "<span class='tabComboBoxIcon'></span>" + "<div class='tabComboBoxNameContainer tab-ctrl-formatted-fixedsize' aria-hidden='true'><span class='tabComboBoxName'></span></div>" + "<div class='tabComboBoxButtonHolder'><span class='tabComboBoxButton'></span></div>" + '</span>';
  })();
  (function() {
    $spiff_Glass.glassSelector = '.tab-glass';
    $spiff_Glass.$htmlTemplate = "<div class='tab-glass clear-glass'></div>";
    $spiff_Glass.$clearGlassClass = 'clear-glass';
    $spiff_Glass.$opaqueGlassClass = 'opaque-glass';
  })();
  (function() {
    $spiff_MenuTemplate.$htmlTemplate = "<div class='tabMenu' tabindex='-1' role='menu'><div class='tabMenuContent'></div></div>";
  })();
  (function() {
    $spiff_MenuItemDividerTemplate.$html = "<div class='tabMenuItemDivider' role='separator'></div>";
  })();
  (function() {
    $spiff_MenuItemTextInputTemplate.$html = "\n<div class='tabMenuItemTextInputPanel' role='menuitem'>\n  <div class='tabMenuItemTextInputHolder'>\n    <input class='tabMenuItemTextInput' type='text'/>\n  </div>\n</div>";
  })();
  (function() {
    $spiff_MenuView.defaultMenuItem = 'tabMenuDefaultItem';
    $spiff_MenuView.classMenuItem = 'tabMenuMenuItem';
    $spiff_MenuView.keyMenuItem = 'tabMenuMenuItem';
    $spiff_MenuView.menuFadeDurationMs = 50;
    $spiff_MenuView.$keyMenuItemLevel = 'tabMenuMenuItemLevel';
    $spiff_MenuView.$classMenuHasIconTwo = 'tabMenuHasIconTwo';
    $spiff_MenuView.$itemClickedEventName = 'Authoring_ContextMenuItemClicked';
    $spiff_MenuView.$baseLayerZIndex = 989;
    $spiff_MenuView.$dialogLayerZIndex = tab.ZIndexConstants.dialogAboveGlassAndSpinnerStandardZIndex;
  })();
  (function() {
    $spiff_ComboBoxViewModel.$hasIconsClass = 'hasIcons';
  })();
  (function() {
    $spiff_ComboBoxView.iconPressedClass = 'tabComboBoxNoIconPressed';
    $spiff_ComboBoxView.invalidClass = 'invalid';
    $spiff_ComboBoxView.noIconClass = 'tabComboBoxNoIcon';
    $spiff_ComboBoxView.pressedClass = 'pressed';
    $spiff_ComboBoxView.disabledClass = 'disabled';
    $spiff_ComboBoxView.classesForTheme = ss.mkdict([0, 'tabComboStdTheme', 1, 'tabComboCompactTheme', 2, 'tabComboStdTheme tabUnification', 3, 'tabComboStdTheme tab-unification-line-arrow-dropdown']);
  })();
  (function() {
    $spiff_ListViewTemplate.$html = "<div class='tab-list'><div class='tab-list-itemHolder'></div></div>";
  })();
  (function() {
    $spiff_ToggleButton.defaultSelectedClassName = 'selected';
    $spiff_ToggleButton.selectedProperty = 'selected';
    $spiff_ToggleButton.toggleClassProperty = 'selectedClass';
    $spiff_ToggleButton.$uniqueSelectionIdCounter = 0;
  })();
  (function() {
    $spiff_ListItemView.listItemSpotlightedClassName = 'tab-list-item-spotlighted';
    $spiff_ListItemView.boldClass = 'bold';
    $spiff_ListItemView.invalidClass = 'invalid';
  })();
  (function() {
    $spiff_ListItemViewModel.selectedProperty = 'selected';
    $spiff_ListItemViewModel.invalidProperty = 'invalid';
    $spiff_ListItemViewModel.draggableProperty = 'draggable';
    $spiff_ListItemViewModel.spotlightedProperty = 'spotlighted';
    $spiff_ListItemViewModel.boldProperty = 'bold';
  })();
  (function() {
    $spiff_ListViewModel.collectionProperty = 'collection';
    $spiff_ListViewModel.enabledProperty = 'enabled';
  })();
  (function() {
    tab.ObjectRegistry.registerType($spiff_PopupListView, $spiff_PopupListView).call(null);
  })();
  (function() {
    $spiff_UberPopupShowOptions.startingGlassZIndex = 987;
  })();
  (function() {
    $spiff_UberPopupTemplate.contentClassName = 'tabUberPopupContent';
    $spiff_UberPopupTemplate.caretClassName = 'tabUberArrow';
    $spiff_UberPopupTemplate.caretBorderClassName = 'tabUberArrow2';
    $spiff_UberPopupTemplate.$htmlTemplate = "<div class='tabUberPopup'>" + "<div class='" + $spiff_UberPopupTemplate.contentClassName + "'></div>" + "<div class='" + $spiff_UberPopupTemplate.caretClassName + "'></div>" + "<div class='" + $spiff_UberPopupTemplate.caretBorderClassName + "'></div>" + '</div>';
    $spiff_UberPopupTemplate.$caretHeight = null;
  })();
  (function() {
    $spiff_UberPopupView.minimalistThemeClass = 'tabUberPopupMinimal';
  })();
  (function() {
    $spiff_CompositeSearchWidget.listClassName = 'tabCompositeSearchWidgetList';
    $spiff_CompositeSearchWidget.$listInsideUberPopupMaxWidth = 400;
  })();
  (function() {
    $spiff_LabelButton.$htmlTemplateLink = "<a href='#' class='tab-link-button'><span class='label hide'></span></a>";
    $spiff_LabelButton.$htmlTemplateButton = "<button class='tab-button' type='button'><span class='icon'></span><span class='label hide'></span></button>";
    $spiff_LabelButton.$htmlTemplateMenuButton = "<button class='tab-button' type='button'>\n            <div class='paired-icon'>\n                <span class='icon menu-button'></span>\n                <span class='tabComboBoxButton'></span>\n            </div>\n            <span class='label hide'></span></button>";
    $spiff_LabelButton.$htmlTextButton = "<span class='tab-text-button'><span class='label hide'></span></span>";
    $spiff_LabelButton.$labelSelectorDefault = '.label';
  })();
  (function() {
    $spiff_CompositeSearchWidgetTemplate.$htmlTemplate = "<div class='tabCompositeSearchWidget'></div>";
  })();
  (function() {
    $spiff_CustomCursor.noOpAssetUrl = 'cursors/dragnop-black.cur';
    $spiff_CustomCursor.deleteAssetUrl = 'cursors/dragdel-black.cur';
    $spiff_CustomCursor.copyAssetUrl = 'cursors/dragcopy-black.cur';
    $spiff_CustomCursor.moveAssetUrl = 'cursors/dragmove-black.cur';
    $spiff_CustomCursor.noOp = new $spiff_CustomCursor($spiff_CustomCursor.noOpAssetUrl, 'auto');
    $spiff_CustomCursor.delete$1 = new $spiff_CustomCursor($spiff_CustomCursor.deleteAssetUrl, 'auto');
    $spiff_CustomCursor.copy = new $spiff_CustomCursor($spiff_CustomCursor.copyAssetUrl, 'auto');
    $spiff_CustomCursor.move = new $spiff_CustomCursor($spiff_CustomCursor.moveAssetUrl, 'auto');
  })();
  (function() {
    $spiff_CustomIScrollTemplate.$htmlTemplate = "<div class='tabCustomScroller'>\n            <div class='tabScrollerContentWindow'><span class='tabScrollerContent'></span></div>\n            <div class='tabVerticalScrollbar'><div class='tabScrollbarIndicator'></div></div>\n            <div class='tabHorizontalScrollbar'><div class='tabScrollbarIndicator'></div></div>\n        </div>";
  })();
  (function() {
    $spiff_DefaultIScrollTemplate.$htmlTemplate = "<div class='tabScroller'><span class='tabScrollerContent'></span></div>";
  })();
  (function() {
    $spiff_DefaultIScrollView.$iScrollScrollbarWhiteSpace = 1;
    $spiff_DefaultIScrollView.$iScrollScrollbarSize = 9;
  })();
  (function() {
    $spiff_CustomIScrollView.centeredVerticallyClassName = 'centeredVertically';
    $spiff_CustomIScrollView.scrollableClassName = 'scrollable';
    $spiff_CustomIScrollView.$minimumIndicatorLength = 8;
  })();
  (function() {
    $spiff_MoveDragInstance.$noOpCallback = function() {
    };
  })();
  (function() {
    $spiff_OrientationHandler.$waitTimeMax = 2500;
    $spiff_OrientationHandler.$waitTimePartition = 75;
    $spiff_OrientationHandler.$windowInst = null;
    $spiff_OrientationHandler.$windowInstHelper = null;
    $spiff_OrientationHandler.$currentOrientation = 0;
    $spiff_OrientationHandler.$currentWidth = 0;
    $spiff_OrientationHandler.$timerId = null;
    $spiff_OrientationHandler.$startTime = null;
    $spiff_OrientationHandler.$newWidthIsSet = false;
    $spiff_OrientationHandler.$1$OrientationChangedField = null;
    $spiff_OrientationHandler.init();
  })();
  (function() {
    $spiff_Dialog.positionProperty = 'position';
    $spiff_Dialog.isActiveProperty = 'isActive';
    $spiff_Dialog.$activeClass = 'active';
    $spiff_Dialog.$closeButtonSelector = '.tab-dialogCloseButton';
    $spiff_Dialog.$bodyContainerSelector = '.tab-dialogBodyContainer';
    $spiff_Dialog.$titleBarSelector = '.tab-dialogTitleBar';
    $spiff_Dialog.$titleSelector = '.tab-dialogTitle';
    $spiff_Dialog.$resizerSelector = '.tab-dialogResizer';
    $spiff_Dialog.$spinnerContainerSelector = '.tab-dialogSpinnerContainer';
    $spiff_Dialog.$htmlTemplate = "\n<div class='tab-dialog' role='dialog'>\n  <div class='tab-dialogTitleBar'>\n    <div class='tab-dialogTitle'></div>\n    <div class='tab-dialogCloseButton'></div>\n  </div>\n  <div class='tab-dialogBodyContainer'></div>\n  <div class='tab-dialogResizer tab-icon-resize-se'><div class='tab-dialogResizerHit'></div></div>\n  <div class='tab-dialogSpinnerContainer'></div>\n</div>\n";
    $spiff_Dialog.$topDialog = null;
    $spiff_Dialog.$defaultDropTarget = new $spiff_NoopDropTarget();
    $spiff_Dialog.defaultDraggableDialogConfigurer = null;
    $spiff_Dialog.defaultStationaryDialogConfigurer = null;
    $spiff_Dialog.defaultDraggableDialogConfigurer = ss.mkdel(this, function(dialog) {
      var $t1 = new $spiff_MoveDragSource(dialog.$titleBarElement, dialog.$dialogElement, false);
      $t1.set_documentBodySize('useClientSize');
      return $t1;
    });
    $spiff_Dialog.defaultStationaryDialogConfigurer = function() {
      return null;
    };
  })();
  (function() {
    $spiff_DropdownComponent.displayName = ss.getTypeName($spiff_DropdownComponent);
  })();
  (function() {
    $spiff_EditableTextView.$editingClassName = 'editing';
    $spiff_EditableTextView.$hoverClassName = 'hover';
  })();
  (function() {
    EventUtils.FeatureFlagUtils.SetFeatureParamDebugTools(function() {
      return tab.FeatureParamsLookup.getBool(46);
    });
    EventUtils.FeatureFlagUtils.SetTsConfigIsMobile(function() {
      return tsConfig.is_mobile;
    });
    EventUtils.FeatureFlagUtils.SetBootStrapUtilIsEmbedded(function() {
      return tabBootstrap.EmbedAndViewportCalculator.get_isEmbeddedInsideAnotherPage();
    });
    EventUtils.FeatureFlagUtils.SetFeatureFlagIsEventHandlingReworkEnabled(function() {
      return tab.FeatureFlags.isEnabled('EventUtilsEventHandlingRework');
    });
    EventUtils.FeatureFlagUtils.SetLoggerDebug(function(msg) {
      tab.Log.get$1(EventUtils).debug(msg, []);
    });
  })();
  (function() {
    $spiff_StatelessHorizontalSliderComponent.displayName = ss.getTypeName($spiff_StatelessHorizontalSliderComponent);
  })();
  (function() {
    $spiff_HorizontalSliderComponent.displayName = ss.getTypeName($spiff_HorizontalSliderComponent);
  })();
  (function() {
    $spiff_IconButtonComponent.displayName = ss.getTypeName($spiff_IconButtonComponent);
  })();
  (function() {
    $spiff_InteractAsButtonWrapperComponent.displayName = ss.getTypeName($spiff_InteractAsButtonWrapperComponent);
  })();
  (function() {
    $spiff_LabelToggleButton.$htmlToggleButton = "<span class='tab-icon-toggle'><span class='icon'></span><span class='label hide'></span></span>";
    $spiff_LabelToggleButton.$htmlInnerIcon = "<span class='innerIcon'></span>";
    $spiff_LabelToggleButton.$labelSelectorDefault = '.label';
    $spiff_LabelToggleButton.$hideClass = 'hide';
    $spiff_LabelToggleButton.$unificationCheckboxClass = 'tab-unification-check';
    $spiff_LabelToggleButton.$unificationCheckboxImageClass = 'tab-img-check';
    $spiff_LabelToggleButton.$unificationRadioButtonClass = 'tab-unification-radio';
  })();
  (function() {
    $spiff_LineEditWithButtonComponent.displayName = ss.getTypeName($spiff_LineEditWithButtonComponent);
    $spiff_LineEditWithButtonComponent.$defaultMaxLength = 6;
  })();
  (function() {
    $spiff_ListViewDragSortFeedback.$dragScrollTimeout = 10;
  })();
  (function() {
    SharedWidgets.PointerEventAdapterManager.adapterFactory = function() {
      return new $spiff_SharedWidgetsPointerEventAdapter();
    };
  })();
  (function() {
    $spiff_TabControl.tabLabelIdPrefix = 'tabTabLabelId-';
    tab.ObjectRegistry.registerType($spiff_TabControl, $spiff_TabControl).call(null);
  })();
  (function() {
    $spiff_TableauEventHandlerTracker.$referenceAttributeName = 'tabEvtHndlr';
    $spiff_TableauEventHandlerTracker.$eventHandlerCount = 0;
    $spiff_TableauEventHandlerTracker.$trackers = null;
    $spiff_TableauEventHandlerTracker.$1$HandlerAddedForKeyField = null;
    $spiff_TableauEventHandlerTracker.$1$HandlerRemovedForKeyField = null;
    $spiff_TableauEventHandlerTracker.$trackers = {};
    EventUtils.TableauEventHandler.add_TableauEventHandlerCreated($spiff_TableauEventHandlerTracker.$startTrackingHandler);
    EventUtils.TableauEventHandler.add_TableauEventHandlerToBeDisposed($spiff_TableauEventHandlerTracker.$stopTrackingHandler);
  })();
  (function() {
    $spiff_VerticalSpinnerComponent.displayName = ss.getTypeName($spiff_VerticalSpinnerComponent);
  })();
  (function() {
    $spiff_WaitingComponent.displayName = ss.getTypeName($spiff_WaitingComponent);
  })();
})();
// END SpiffUI
